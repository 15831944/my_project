[{"content":"又是新的一年了，2013，在这里祝大家元旦快乐！！ 正题，phpbb3是一个很不错的php论坛，界面也很不错，性能也好 但我想让它和我的网站整合在一起，用户数据完全就用论坛的数据，怎么弄呢 去谷歌搜了几天，发现都只有2010年和2007年的帖子，来自phpbb的官网 这个网址是：https://www.phpbb.com/kb/article/phpbb3-cross-site-sessions-integration/ 其实说的也很明确了，只是本人初用phpbb，不太熟悉环境 这里只实现了登陆，却没有完成登陆，因为url缺少一个session id 即url上的sid=...... 例如：http://localhost/phpBB3/index.php?sid=4de4ef4b260097b0ce6f0852908bd26d 当然也可以自己去动态生成一个sid，网上也有方法，但我没有测试过，等有时间再补上 后来又去找了下，找到一个比较靠谱的 http://www.freewebcomponent.com/sample/phpBB/Login/phpBB_Integration_in_our_own_website.html 但后来又发现竟然不需要密码直接登陆。。。囧了 由于代码比较简洁，就直接在他的基础上加入了密码验证 首先假设我们的根目录是   localhost/phpBB3/ 文件名1：auth_ok.php   路径： localhost/phpBB3/includes/auth/ 这个文件用于重载系统的一个函数： 文件内容如下： <?phpfunction login_ok(&$username, &$password){\tglobal $db, $config;\t$sql = 'SELECT user_id, username, user_password, user_passchg, user_pass_convert, user_email, user_type, user_login_attempts\t\tFROM ' . USERS_TABLE . \"\t\tWHERE username_clean = '\" . $db->sql_escape(utf8_clean_string($username)) . \"'\";\t$result = $db->sql_query($sql);\t$row = $db->sql_fetchrow($result);\t$db->sql_freeresult($result);\treturn array(\t\t'status'\t\t=> LOGIN_SUCCESS,\t\t'error_msg'\t\t=> false,\t\t'user_row'\t\t=> $row,\t);}?> 文件名2：class.phpBB.php 路径： localhost/phpBB3/includes/ 这里是现实功能的主要文件，里面写了一个类，用于登陆和注册 文件内容如下：(这里对原作者的代码进行了部分修改) <?php/*------------------------------------------------------------------------------------- Script Name: class.phpBB.php Script Version: 1.0 Author: Tony Wei ( tonywei123@gmail.com ) Blog: www.FreeWebComponent.com Description: phpBB operation Revision History:   1.0: original version 2010/4/18-------------------------------------------------------------------------------------*//*------------------------------------------------------------------------------------- Script Name: class.phpBB.php Script Version: 2.0 Author: Backgarden_Neo ( h20549304@gmail.com ) Blog: blog.csdn.net/backgarden_straw Description: phpBB operation of verification login Revision History:   1.0: original version 2010/4/18   2.0: first version 2013/1/1-------------------------------------------------------------------------------------*/// You may put phpBB directory name heredefine( \"PHPBB_PATH\", \"phpBB3\" );class phpBB {\t// -------------------------------------------------------------------------------------------------\t// Default constructor\t// -------------------------------------------------------------------------------------------------\tfunction phpBB()\t{    }\t// -------------------------------------------------------------------------------------------------\t// Login: Just pass username, than redirect to forum homepage\t// -------------------------------------------------------------------------------------------------\tfunction Login( $user_name,$user_password,$user_remember = true, $is_redirect = true ) \t{\t\tglobal $config, $user, $auth,$db;\t\t// do not allow empty password\t\tif (!$user_password)\t\t{\t\t\treturn array(\t\t\t\t'status'\t=> LOGIN_ERROR_PASSWORD,\t\t\t\t'error_msg'\t=> 'NO_PASSWORD_SUPPLIED',\t\t\t\t'user_row'\t=> array('user_id' => ANONYMOUS),\t\t\t);\t\t}\t\t\tif (!$user_name)\t\t{\t\t\treturn array(\t\t\t\t'status'\t=> LOGIN_ERROR_USERNAME,\t\t\t\t'error_msg'\t=> 'LOGIN_ERROR_USERNAME',\t\t\t\t'user_row'\t=> array('user_id' => ANONYMOUS),\t\t\t);\t\t}\t\t// Use login_ok function to override original login_db function in auth_db.php\t\t$config[ \"auth_method\" ] = \"ok\";\t\t// Start session management\t\t$user->session_begin();\t\t$auth->acl( $user->data );\t\t$user->setup( \"ucp\" );\t\t\t\t//进行一次选择，数据库里有的时候才进行登录\t\t$username_clean_name = utf8_clean_string($user_name);\t\t$username_clean_password = utf8_clean_string($user_password);\t\t$username_clean_remember = utf8_clean_string($$user_remember);\t\t\t\t$hash = phpbb_hash($username_clean_password);\t\t$sql = 'SELECT user_id,user_password FROM ' . USERS_TABLE . \"\t\t\tWHERE username = '\" .$user_name . \"' ORDER BY user_id DESC LIMIT 1\";\t\t\t\t$result = $db->sql_query($sql);\t\t\t\t$row = $db->sql_fetchrow($result);\t\t$db->sql_freeresult($result);\t\t\t\tif(phpbb_check_hash($username_clean_password,$row['user_password'])){\t\t\t$result = $auth->login( $user_name, $username_clean_password, $username_clean_remember, 1, 0 );\t\t\t$redirect = \"/\" . PHPBB_PATH . \"/index.php\";\t\t\t$redirect = reapply_sid( $redirect );\t\t\theader(\"Location:\".$redirect);exit;\t\t\t\t\t}else{\t\t\techo \"your password is wrong,please check your passwrod!\";\t\t\t\t\t}\t\t\t\t//\t\t}\t// -------------------------------------------------------------------------------------------------\t// Register: Create a new phpBB user\t// -------------------------------------------------------------------------------------------------\tfunction Register( $user_name, $user_password, $user_email )\t{\t\techo $user_password;\t\t$user_row = array();\t\t$user_row[\"username\"] = $user_name;\t\t$user_row[\"user_password\"] = phpbb_hash( $user_password );\t\t$user_row[\"user_email\"] = $user_email;\t\t$user_row[\"group_id\"] = \"2\";\t\t$user_row[\"user_timezone\"] = \"8\";\t\t\t\t\t// You may change default timezone here\t\t$user_row[\"user_dst\"] = \"0\";\t\t$user_row[\"user_lang\"] = \"zh_cmn_hant\";\t\t// You may change default language here\t\t$user_row[\"user_type\"] = \"0\";\t\t$user_row[\"user_actkey\"] = \"\";\t\t$user_row[\"user_ip\"] = $_SERVER[\"REMOTE_ADDR\"];\t\t$user_row[\"user_regdate\"] = time();\t\t$user_row[\"user_inactive_reason\"] = \"0\";\t\t$user_row[\"user_inactive_time\"] = \"0\";\t\t$user_row[\"user_new\"] = \"1\";\t\t$user_id = user_add( $user_row, array() );\t\techo \"   \".$user_row[\"user_password\"];\t}} // End of class phpBB?> 文件名3：login_session.php  路径   localhost/phpBB3/testphpbb/session/ 文件内容如下： <?phprequire_once(\"../phpbb.php\");require_once( \"../../includes/class.phpBB.php\");$phpBB = new phpBB();$return_value = $phpBB->Login( \"your name\",\"your password\");?> 文件名4：phpbb.php  路径： localhost/phpBB3/testphpbb/ 这个phpbb.php主要用于完成环境变量和一些头文件的引用 主要内容如下： <?phpdefine('ROOT_PATH', \"../\");   // map this dir to your own installation of phpbbdefine('IN_PHPBB', true);if (!defined('IN_PHPBB') || !defined('ROOT_PATH')) exit();$phpEx = \"php\";$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : ROOT_PATH . '../';include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'config.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);require_once( $phpbb_root_path . \"includes/functions.\" . $phpEx );require_once( $phpbb_root_path . \"includes/functions_user.\" . $phpEx );require_once( $phpbb_root_path . \"includes/functions_module.\" . $phpEx );$user->session_begin();$auth->acl($user->data);$user->setup();$user->setup('viewforum');?>   文件名5：register_demo.php  路径： localhost/phpBB3/testphpbb/session/  文件内容如下：  <?require_once(\"../phpbb.php\");require_once( \"../../includes/class.phpBB.php\");$phpBB = new phpBB();$phpBB->Register( \"your name\", \"your password\", \"your email\" );print \"Register success!\";?>  这里只是实现了功能，至于具体怎么完成结合就需要自己考虑了，结合上之前获取帖子的功能 后面还要加入语法插件，syntax highlight的加入，当然有需要就再找，会陆续写文章的  ps：祝大家，元旦快乐~~","title":"phpbb3结合自己网站实现session登陆"},{"content":"我前些日子里写了许多javascript编程的文章，这几个星期才写了一篇html5游戏开发的文章，还准备出系列文章，但由于我最近写了一个程序，急于给大家展示，因此，本篇文章将要对此程序加以说明。 准确的说，以前那些文章都只是做零件。各位想想，做零件的技术高还是用零件拼产品的技术高？当然，做零件的分有好有坏，拼产品的有好有坏，不过总而言之，我还是喜欢拼产品的。毕竟产品是出自他们的手嘛。。。（说了几句没脑袋的人说的话，各位不要介意呀） 一，产品名片 产品名：Function Graphs 版本： 0.1 开发商：Yorhom Wang 特别鸣谢：Peter Wang(我的哥哥) 首次发行时间：2012年 12月 31日（第二天就是新年喏。。。） 分类：教学程序 功能：画出一，二，三次函数图象 二，怎么使用 下载地址（含有源码）： http://files.cnblogs.com/ducle/function_graphs.rar 在线使用地址： 暂无(如有好心人愿意帮助，请及时联系我，我将万分感激) 三，产品截图 四，留给用户的话 本程序为开源教学程序，希望大家能够通过此程序了解各类函数的图象，也希望各位web工程师能够更好的了解html5。新年到了，大家一定要开心哦。。。尽管新年是蛇年，蛇带给人们阴森的感觉，不过古人那么规定，那也无妨了。哈，如过程序有问题，请及时告诉我哦！！！ 祝全地球人新年快乐！幸福美满！新年有新收获","title":"[置顶] html5新一年，新技术，新产品--\"Function Graphs 0.1\"火力全开"},{"content":"CustomValidator是用户自定义的验证控件，用来响应用户自定义的验证。可以使JS的客户端函数，也可以是写在后台代码中的服务端验证函数。 以下是CustomValidator的常用属性 属性 描述  BackColor  背景颜色。  ClientValidationFunction                 规定用于验证的自定义客户端脚本函数的名称。  注释：脚本必须用浏览器支持的语言编写，比如 VBScript 或 JScript  使用 VBScript 的话，函数必须位于表单中：  Sub FunctionName (source, arguments)  使用 JScript 的话，函数必须位于表单中：  Function FunctionName (source, arguments)  ControlToValidate  要验证的输入控件的 id。  Display  验证控件中错误信息的显示行为。  合法的值有： ·         None - 验证消息从不内联显示。 ·         Static - 在页面布局中分配用于显示验证消息的空间。 ·         Dynamic - 如果验证失败，将用于显示验证消息的空间动态添加到页面。  EnableClientScript  布尔值，该值指示是否启用客户端验证。  Enabled  布尔值，该值指示是否启用验证控件。  ErrorMessage  验证失败时 ValidationSummary 控件中显示的错误信息的文本。  注释：如果设置了 ErrorMessage 属性但没有设置 Text 属性，则验证控件中也将显示  ErrorMessage 属性的值。  ForeColor  控件的前景色。  id  控件的唯一 id。  IsValid  布尔值，该值指示关联的输入控件是否通过验证。  OnServerValidate  规定被执行的服务器端验证脚本函数的名称。  runat  规定该控件是服务器控件。必须设置为 \"server\"。  Text  当验证失败时显示的文本。   学以致用，看看CustomValidator在实际当中的应用 <%@ Page Language=\"C#\" AutoEventWireup=\"true\" Inherits=\"Default2\" Codebehind=\"Default2.aspx.cs\" %><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" ><head runat=\"server\">    <title>用户自定义控件<\/title>    <script type=\"text/javascript\" language=\"javascript\">    function Clientv(s,e)    {        e.IsValid=(e.Value==\"客户端\");    }        <\/script><\/head><body>    <form id=\"form1\" runat=\"server\">    <div>                            客户端验证                                <asp:TextBox ID=\"txtClient\" runat=\"server\"><\/asp:TextBox>                    <asp:CustomValidator ID=\"CustomValidator2\" runat=\"server\" ControlToValidate=\"txtClient\"                        ErrorMessage=\"客户端验证失败\" ClientValidationFunction=\"Clientv\" ForeColor=\"Red\"><\/asp:CustomValidator>                        <br />                            服务器验证                                    <asp:TextBox ID=\"txtServer\" runat=\"server\"><\/asp:TextBox>                    <asp:CustomValidator ID=\"CustomValidator1\" runat=\"server\" ControlToValidate=\"txtServer\"                        ErrorMessage=\"服务端验证失败\" OnServerValidate=\"Server_ServerValidate\" ForeColor=\"Red\"><\/asp:CustomValidator>                <\/div>        <asp:Button ID=\"Button1\" runat=\"server\" OnClick=\"Button1_Click\" Text=\"提交\" />    <\/form><\/body><\/html> 写在cs文件中的服务端验证函数     //服务端的验证方法    protected void Server_ServerValidate(object source, ServerValidateEventArgs args)    {        args.IsValid=(args.Value==\"服务端\");    } 客户端提示验证失败，而且此时不再提交信息，所以服务端验证不会被执行。 客户端验证通过，服务端验证失败。 有一点需要注意一下，就是CustomValidator不会对空值或者全部为空格的内容进行验证，这一点可以通过跟之前讲的其他控件配合使用。","title":"ASP.NET验证控件之CustomValidator"},{"content":"想要下一次进入自己的网站时保留用户信息以便简化登录手续，所以研究了Cookie。   Cookie是储存在用户本地上的数据，可以将用户的信息长久的保存到用户机的文件中。   请看这个登录的例子（如果有不懂的，请看javascript cookie详解） 登陆页login.html <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /><title>登录<\/title><script type=\"text/javascript\" src=\"cookie.js\"><\/script><script type=\"text/javascript\" src=\"common.js\"><\/script><\/head><body><form action=\"\">\t<p>\t\t<span>UserName:<\/span>\t\t<input id=\"userName\" type=\"text\" value=\"\"/><\/p>\t<p>\t\t<span>Password:<\/span>\t\t<input id=\"password\" type=\"password\" value=\"\"/><\/p>\t<p>\t\t<span style=\"font-size:12px; color:blue;\">记住密码10天<\/span>\t\t<input id=\"saveCookie\" type=\"checkbox\" value=\"\" /><\/p>\t<p>\t\t<input id=\"submit\" type=\"button\" value=\"GO\" />\t<\/p><\/form><\/body><\/html> common.js function $(objStr){return document.getElementById(objStr);}window.onload = function(){    //分析cookie值，显示上次的登陆信息    var userNameValue = getCookieValue(\"userName\");    $(\"userName\").value = userNameValue;\t    var passwordValue = getCookieValue(\"password\");    $(\"password\").value = passwordValue;    \t    //写入点击事件    $(\"submit\").onclick = function()    {        var userNameValue = $(\"userName\").value;//取前台用户名的值        var passwordValue = $(\"password\").value; //取前台密码的值                //服务器验证（模拟） 这里是对用户的一个验证．在项目中，你读取数据库的代码写在这        var isAdmin = userNameValue == \"tch\" && passwordValue ==\"123\";        var isUserA = userNameValue == \"java\" && passwordValue ==\"123\";        var isMatched = isAdmin || isUserA;\t\t\t\t//如果存在这个用户,就把用户名和密码存进cookie        if(isMatched){             if( $(\"saveCookie\").checked){                  setCookie(\"userName\",$(\"userName\").value,10,\"/\");                setCookie(\"password\",$(\"password\").value,10,\"/\");            }                alert(\"登陆成功,欢迎你,\" + userNameValue + \"!\");            self.location.replace(\"welcome.html\");        }        else alert(\"用户名或密码错误，请重新输入！\");        }} cookie.js // 新建cookie。// hours为空字符串时,cookie的生存期至浏览器会话结束。// hours为数字0时,建立的是一个失效的cookie,这个cookie会覆盖已经建立过的同名、同path的cookie（如果这个cookie存在）。function setCookie(name,value,days,path){    var name = escape(name);    var value = escape(value);    var expires = new Date();    expires.setTime(expires.getTime() + days*24*60*60*1000);    path = path == \"\" ? \"\" : \";path=\" + path;    _expires = (typeof hours) == \"string\" ? \"\" : \";expires=\" + expires.toUTCString();    document.cookie = name + \"=\" + value + _expires + path;} //获取cookie值function getCookieValue(name){    var name = escape(name);    //读cookie属性，这将返回文档的所有cookie    var allcookies = document.cookie; \t    //查找名为name的cookie的开始位置    name += \"=\";    var pos = allcookies.indexOf(name);        //如果找到了具有该名字的cookie，那么提取并使用它的值    if (pos != -1){                                             //如果pos值为-1则说明搜索\"version=\"失败        var start = pos + name.length;                  //cookie值开始的位置        var end = allcookies.indexOf(\";\",start);        //从cookie值开始的位置起搜索第一个\";\"的位置,即cookie值结尾的位置        if (end == -1) end = allcookies.length;        //如果end值为-1说明cookie列表里只有一个cookie        var value = allcookies.substring(start,end);  //提取cookie的值        return unescape(value);                           //对它解码              }      else return \"\";                                             //搜索失败，返回空字符串}//删除cookiefunction deleteCookie(name,path){    var name = escape(name);    var expires = new Date(0);    path = path == \"\" ? \"\" : \";path=\" + path;    document.cookie = name + \"=\"+ \";expires=\" + expires.toUTCString() + path;}","title":"javascript控制Cookie，保留用户登录信息"},{"content":"在程序中，其中一个ajax取数据到前台下拉列表中，另外一个是取数据与下拉列表进行配，然后选中对应的项，有时候可以选中，有时候不会，多刷新几次又选中了，这样是不稳定的，开始以为是没收有匹配好，改了代码还是不行，后面觉得是顺序问题，于是打印了后台调用的结果，在控制台上看到的顺序是不稳定的，于是将ajax的设置成同步请求，这样就解决了。 加上async:false,  表示同步，默认是异步。","title":"多AJAX调用解决顺序问题"},{"content":"grid++ report 主要有三种文件组成，html 文件，grf文件，aspx 文件。功能的实现，简单的说，就是将aspx文件作为数据源，通过html文件将数据源合并到grf文件中。其中grf可以由Grid++Report报表设计器，进行图形化设计。 Oracle 数据库连接设置，修改OracleReportData.cs，设置数据库连接方式 public class OracleReportData{\t//设计数据库连接public const string OracleConnStr = \"Data Source=lch2003;Persist Security Info=True;User ID=hr;Password=hr;Unicode=True;\";} Aspx文件中，设置数据源 <%@ Page Language=\"C#\" %><script runat=\"server\">     protected void Page_Load(object sender, EventArgs e)    {             //不同的数据库应该选用不同的报表XML数据生成类，SQL Server数据库用SqlReportData，Oracle数据库用OracleReportData        //OledbReportData适合于Access等本地数据库，为了演示方便，这里从Grid++Report的Access例子数据库中获取报表数据        //第三个参数为false，表示不压缩数据，在实际项目中应改为true，对数据进行压缩。这里设为false主要是为了        //测试报表数据网页运行的正确性，以便查看浏览响应的原文件时能看到xml形式的文本数据。        OledbReportData.GenNodeXmlData(this, \"select * from Customers order by Region,City\", false);    }<\/script> Html文件中设置数据合并 <body style=\"margin:0\">\t<script type=\"text/javascript\"> \t    //用查询显示控件展现报表，从URL“../grf/1a.grf”获取报表膜板定义，从URL“../data/xmlCustomer.aspx”获取XML形式的报表数据， \t\tCreateDisplayViewer(\"../grf/1a.grf\", \"../data/xmlCustomer.aspx\");\t<\/script><\/body>","title":"Grid++Report使用入门-asp.net"},{"content":"前言    前面简单介绍了iweboffice的功能,接着我挑出一些比较常用的功能属性的设置(以下都是js)跟大家分享，省去了看接口文档的繁琐。   正题    介绍之前先声明一下变量的意义： /* form表单名称:webform iWebOffice名称:WebOffice WebObject文档对象接口，相当于： 如果是Word  文件，WebObject 是Word  VBA的ActiveDocument对象 如果是Excel 文件，WebObject 是Excel VBA的ActiveSheet对象 如：webform.WebOffice.WebObject */      1.实例化iWebOffice的属性  以下属性必须设置，用于实始化iWebOffice： //WebUrl:系统服务器路径，与服务器文件交互操作，如保存、打开文档，重要文件 webform.WebOffice.WebUrl=\"http://www.goldgrid.com:8080/iWebOffice2009/OfficeServer.jsp\";              //RecordID:本文档记录编号 webform.WebOffice.RecordID=\"998457984342\";              //Template:模板编号 webform.WebOffice.Template=\"1050560363767\";   //FileName:文档名称            webform.WebOffice.FileName=\"998457984342.doc\";   //FileType:文档类型  .doc .xls  .wps            webform.WebOffice.FileType=\".doc\";     //UserName:操作用户名，痕迹保留需要         webform.WebOffice.UserName=\"赵丹丹\";            //第一位可以为0,1,2,3其中:0不可编辑;1可以编辑,无痕迹;2可以编辑,有痕迹,不能修订;3可以编辑,有痕迹,能修订； //第二位可以为0,1其中:0不可批注,1可以批注。 webform.WebOffice.EditType=\"3,1\";                 2.ShowToolBar：设置是否显示整个控件工具栏，包括OFFICE的工具栏。 以下是对其值的说明： false:     自定义工具栏=false,        Office工具栏=true; true:      自定义工具栏=true,        Office工具栏=true; 0:        自定义工具栏=false,        Office工具栏=true; 1:        自定义工具栏=true,        Office工具栏=true; 2:        自定义工具栏=false,        Office工具栏=false; 3:        自定义工具栏=true,        Office工具栏=false;     3.ShowMenu：设置是否显示整个菜单 WebOffice.ShowMenu=\"1\"        显示菜单 WebOffice.ShowMenu=\"0\"        不显示菜单      4.小结     虽然只有这几个属性的设置，但是这些都是我们最常用到的，熟悉了这几个属性的设置，iwebOffice用起来会方便很多。后面会继续介绍常用方法的使用。  ","title":"iweboffice之word——常用属性的设置"},{"content":"DWZ (JUI) 教程 tree 控件的选中事件   新浪微博 http://weibo.com/u/1534913940 最近有朋友留言问tree控件的选中事件是怎么处理的，今天我就简单说一下。 先简单说一下流程 第一步 当然是先定义好回调事件了 function checkCallback(json){     ...........     ...........}关键是回调函数返回的结构 {checked:布尔值, items:数组} 如果是选中事件 checked 为 true 否则为false items 是个对象数组 [ {name:, value:, text: },{} ]   是返回是选中的节点，如果返回的checked 为false 就是反选事件 ，那么它的长度就会是0 name 就是节点名称  value 就是对应的值  text 就是节点对应的文本  对应 节点的 tname tvalue ，<a>text<\/a> 文本信息 tree控件自动是级联的，选中父节点，子节点也会选中，所以返回的的选中节点是个数组，当然如果是叶子节点，那么它的长度就是1 第二步 就是注册到dom元素上 <ul class=\"tree treeFolder treeCheck expand\" oncheck=\"checkCallback\"> 这样就可以了 其实使用起来 也挺方便。 下面我简单作一下源码的注释，这样大家就更加清楚了 setTimeout(function(){  \tif($this.hasClass(\"treeCheck\")){  \t    //获取选中事件 就是注册到dom元素上的事件  \t    var checkFn = eval($this.attr(\"oncheck\"));  \t    if(checkFn && $.isFunction(checkFn)) {  \t        $(\"div.ckbox\", $this).each(function(){  \t            var ckbox = $(this);  \t            ckbox.click(function(){  \t                //返回是事件类型 是否为选中事件  \t                var checked = $(ckbox).hasClass(\"checked\");  \t                var items = [];  \t                if(checked){  \t                    //看一下源码结构 其实是获取到节点的li 元素  \t                    var tnode = $(ckbox).parent().parent();  \t                    //获取所有节点下才checkbox  \t                    var boxes = $(\"input\", tnode);  \t                    if(boxes.size() > 1) {  \t                        //对应我说的 返回的结构  \t                        $(boxes).each(function(){  \t                            items[items.length] = {name:$(this).attr(\"name\"), value:$(this).val(), text:$(this).attr(\"text\")};  \t                        });  \t                    } else {  \t                        items = {name:boxes.attr(\"name\"), value:boxes.val(), text:boxes.attr(\"text\")};  \t                    }         \t                }  \t                //调用函数                                   \t                checkFn({checked:checked, items:items});                                                          \t            });  \t        });  \t    }  \t} 1,x  关键的回调函数是有点单薄的，并且也有点不规范， 2.x 后 会有所改进   希望对大家有所帮助 转载请标明出处 http://blog.csdn.net/jiweigang1/article/details/8454474","title":"DWZ (JUI) 教程 tree 控件的选中事件"},{"content":"下载地址：http://code.google.com/p/freecms/     infoPage 根据参数提取信息分页对象。 参数 说明 siteid 信息所属站点id channelid 信息所属栏目id num 提取数量 order 排序类型  1 固顶有效并降序,发布时间降序(默认) 2 固顶有效并降序,发布时间升序 3 发布时间降序 4 发布时间升序 titleLen 标题显示长度 hot 是否按点击热度倒序，1是 dateFormat 日期格式 channelPagemark 栏目页面标识 img 是否只提取带图片的新闻 1是 page 当前第几页，默认是1 返回值 说明 infoList 信息对象列表，类型为List<数据对象info> pager 分页对象 示例1 根据站点id和栏目id提取信息。 <@infoPage siteid=\"${site.id}\" channelid=\"${currChannel.id}\" num=\"1\" page=\"${page}\"                    titleLen=\"48\" dateFormat=\"yyyy-MM-dd\"; infoList,pager> <ul>     <#list infoList as info>     <li>             <a href=\"${info.pageurl}\" target=\"_blank\">${info.showtitle}<\/a>             ${info.addtimeStr}     <\/li>     <\/#list> <\/ul> ${pager.pageStr} <\/@infoPage>","title":"开源 免费 java CMS - FreeCMS-标签 infoPage"},{"content":"@import url是什么？ 这是导入CSS样式表。 很多设计师都不去使用该方式。 都会使用链接式LINK。 你下载一些网站看看，基本都是用LINK的 当然也不排除有使用@import。   @import的优势    import这种方式通常会在CSS文件中使用，即是导入样式表。这样做的好处是，把多个样式表导入到一个样式表中，在页面里面只需要导入一个样式表即可。   @import的弊端   分歧1：兼容性的差异。由于@import是CSS2.1提议的因而老的阅读器不支持，@import只有在IE5以上的才力辨认，而link标签无此题目。     分歧2：应用dom控制样式时的差异。当应用javascript控制dom去转变样式的时间，只能应用link标签，由于@import不是dom可以控制的。     分歧3：老祖宗的差异。link属于XHTML标签，而@import完备是CSS提供的一种格式。     link标签除了可以加载CSS外，还可以做许多别的的事故，例如界说RSS，界说rel连结属性等，@import就只能加载CSS了。","title":"CSS文件的导入方法即“@import url”"},{"content":"准备工作 首先需要搭建Android开发环境，安装eclipse和ADT（Android Development Tools）插件，并在Android SDK Manager中安装需要的SDK。开发人员需要掌握Java编程语言，具备Android开发的能力，最后你需要TWaver Android开发库文件（twaver.android.jar），这样就可以开始TWaver Android的开发了。下面将以最简单的Hello TWaver示例来作分步详解。 新建Hello TWaver工程 新建一个Android Application工程\"Hello TWaver\"，包名设置为\"twaver.demo.hellotwaver\"，选择最低SDK为API 11（Android 3.0），选择目标SDK（Target SDK）为API 11，此后按向导提示至结束。 向导自动生成了一些文件和目录，其中\"MainActivity.java\"文件是默认主引导类，之后我们会修改这个文件，各目录简单介绍： 导入twaver.android.jar类库 接下来需要引入twaver android开发包，Android中引入类库与桌面Java开发有所不同，需要通过\"Import\"方式来导入，而不是\"build path\"，使用\"Import\"向导导入twaver.android.jar，ADT会自动转成Dalvik虚拟机所支持的格式，步骤如下：选择libs目录，右键点击\"Import\"，选择文件系统，找到\"twaver.android.jar\"，点击完成，\"twaver.android.jar\"将出现在libs目录中，这样我们就可以调用twaver android中的API了： 编写Hello TWaver 打开前面自动生成的\"MainActivity.java\"文件，这是此项目的主引导类，找到\"onCreate\"方法（应用程序加载时会调用此方法），这里我们创建一个Network组件，并通过\"setContentView(...)\"将其添加到面板中，代码如下： 创建了一个Network组件，并向其数据容器中加入了两个节点，一条连线和一条告警，最后设置这个network组件为内容视图（content view） @Overrideprotected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState);    Network network = new Network(this);  ElementBox box = network.getElementBox();    Node node = new Node();  node.setName(\"Hello\");  node.setStyle(Styles.LABEL_OUTLINE, 1);  node.setLocation(50, 100);  box.add(node);  Node node2 = new Node();  node2.setName(\"TWaver\");  node2.setLocation(250, 200);  box.add(node2);  Link link = new Link(node, node2);  link.setName(\"Hello TWaver\");  box.add(link);    box.getAlarmBox().add(new Alarm(node.getId(), AlarmSeverity.CRITICAL));    this.setContentView(network);} 运行与调试 最后运行程序，Android应用程序可以发布到虚拟机中，也可以直接连接到真实设备，我推荐使用真实设备来调试和开发，这样效率高，且支持多点触控，需要注意的是，并非所有的Android设备都可以用于开发，推荐使用Google Nexus系列产品，更多链接设备开发的资料可参考：http://developer.android.com/tools/extras/oem-usb.html，本例中我们将使用模拟器来运行刚才的例子。 Android模拟器 打开Android模拟器管理器，创建一个API级别大于等于11的虚拟机，这里我们使用4.0.3，选择相应的SDK： 创建完后启动，等待虚拟机启动完成，开始运行刚才的应用（右键选择Run as --> Android Application）: 得到下面的界面；","title":"Hello TWaver Android"},{"content":"原文及更多内容：http://yysource.sourceforge.net/?p=106 // 获取表单里面的数据，返回一个json形式的对象// 参数 form 为表单对象，filler 为字符串// 对于表单中空值的元素，默认忽略，也可以设置填充值：filler 来填充空值function getFormData (form, filler) {\tvar data = {};\tfor (var i = 0; i < form.length; ++i) {\t\tvar name = form[i].name;\t\tvar value = form[i].value;\t\tif (name.length == 0)\t\t\tcontinue;\t\tif (value.length == 0) {\t\t\tif ((typeof filler != 'string') || (filler.length == 0))\t\t\t\tcontinue;\t\t\telse\t\t\t\tvalue = filler;\t\t}\t\tvar sz = \"data.\"+name+\" = '\" + value + \"'\";\t\ttry {\t\t\teval(sz);\t\t} catch (e) {\t\t\talert(e);\t\t}\t}\treturn data;}","title":"JS获取表单中的数据"},{"content":"jQuery确实是一个挺好的轻量级的JS框架，能帮助我们快速的开发JS应用，并在一定程度上改变了我们写JavaScript代码的习惯。 下面分别介绍几个ajax的方法。 1. load( url, [data], [callback] ) ：载入远程 HTML 文件代码并插入至 DOM 中。url (String) : 请求的HTML页的URL地址 data (Map) : (可选参数) 发送至服务器的 key/value 数据。 callback (Callback) : (可选参数) 请求完成时(不需要是success的)的回调函数。 这个方法默认使用 GET 方式来传递的，如果[data]参数有传递数据进去，就会自动转换为POST方式的。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 \"url #some > selector\"。 这个方法可以很方便的动态加载一些HTML文件，例如表单。 2. jQuery.get( url, [data], [callback] )：使用GET方式来进行异步请求url (String) :  发送请求的URL地址. data (Map) : (可选) 要发送给服务器的数据，以 Key/value 的键值对形式表示，会做为QueryString附加到请求URL中。 callback (Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。 3. jQuery.post( url, [data], [callback], [type] ) ：使用POST方式来进行异步请求参数： url (String) : 发送请求的URL地址. data (Map) : (可选) 要发送给服务器的数据，以 Key/value 的键值对形式表示。 callback (Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。 type (String) : (可选)官方的说明是：Type of data to be sent。其实应该为客户端请求的类型(JSON,XML,等等 4. jQuery.getScript( url, [callback] ) : 通过 GET 方式请求载入并执行一个 JavaScript 文件。参数 url (String) : 待载入 JS 文件地址。 callback (Function) : (可选) 成功载入后回调函数。","title":"Jquery学习--Jquery Ajax函数"},{"content":"JavaScript支持面向对象，但是其实现方式是通过简单的从一个对象原型向另一个对象原型的拷贝的方式来实现的。 实例如下： var BaseCls={};BaseCls.getName=function(){\treturn \"base class\";}var ChildCls = {};ChildCls.getName = BaseCls.getName;BaseCls.getName=function(){\treturn \"base class changed\";}alert(ChildCls.getName());alert(BaseCls.getName());ChildCls.getName = BaseCls.getName;是将BaseCls的getName的定义复制给ChildCls的getName函数，之后对BaseCls的getName的改变不会影响到ChildCls的getName函数。 同样，用prototype继承也是相同的效果： var BaseCls={};BaseCls.getName=function(){\treturn \"base class\";}function ChildCls(){\t}ChildCls.prototype.getName = BaseCls.getName;BaseCls.getName=function(){\treturn \"base class changed\";}alert(new ChildCls().getName());alert(BaseCls.getName());","title":"JS的继承是从一个对象原型向另一个对象原型的简单拷贝"},{"content":"--------Web.config---------------- <configuration>     <system.web>         <compilation debug=\"true\" targetFramework=\"4.0\" />         <httpHandlers>         <add verb=\"*\" path=\"images/*.jpg\" type=\"模块与处理程序.ImageDeal\"/>       <\/httpHandlers>     <\/system.web> <\/configuration> -------------ImageDeal.cs类------------------------- namespace 模块与处理程序 {     public class ImageDeal:IHttpHandler     {         public bool IsReusable         {             get { return true; }         }         public void ProcessRequest(HttpContext context)         {             Image img = Image.FromFile(context.Request.PhysicalPath);             Graphics g = Graphics.FromImage(img);             g.DrawString(\"QQ\", new Font(\"宋体\", 20, FontStyle.Bold), Brushes.Red, 10, 10);             img.Save(context.Response.OutputStream, System.Drawing.Imaging.ImageFormat.Jpeg);             context.Response.Flush();             context.Response.End();         }     } } ----------default2.aspx前台------------------------ <body>     <form id=\"form1\" runat=\"server\">     <div>             <asp:GridView ID=\"GridView1\" runat=\"server\" AutoGenerateColumns=\"False\"             DataKeyNames=\"sid\" DataSourceID=\"SqlDataSource1\">             <Columns>                 <asp:BoundField DataField=\"sid\" HeaderText=\"sid\" InsertVisible=\"False\"                     ReadOnly=\"True\" SortExpression=\"sid\" />                 <asp:BoundField DataField=\"sname\" HeaderText=\"sname\" SortExpression=\"sname\" />                 <asp:BoundField DataField=\"sex\" HeaderText=\"sex\" SortExpression=\"sex\" />                 <asp:BoundField DataField=\"age\" HeaderText=\"age\" SortExpression=\"age\" />                 <asp:ImageField DataImageUrlField=\"photo\"                     DataImageUrlFormatString=\"~/images/{0}\" HeaderText=\"照片\">                 <\/asp:ImageField>                 <asp:HyperLinkField DataNavigateUrlFields=\"sid,sname\"                     DataNavigateUrlFormatString=\"{0}/{1}/viewDetail.html\" HeaderText=\"操作\"                     Text=\"查看详情\" />             <\/Columns>         <\/asp:GridView>         <br />         <asp:SqlDataSource ID=\"SqlDataSource1\" runat=\"server\"             ConnectionString=\"<%$ ConnectionStrings:studentConnectionString %>\"             SelectCommand=\"SELECT [sid], [sname], [sex], [age], [photo] FROM [student]\">         <\/asp:SqlDataSource>         <\/div>     <\/form> <\/body> -------------default3前台----------------------- <body>     <form id=\"form1\" runat=\"server\">     <div>         <asp:Image ID=\"Image1\" ImageUrl=\"http://localhost:1695/images/liubei.jpg\"  runat=\"server\" />     <\/div>     <\/form> <\/body> -----------------------------------------------------------------------------------------------------","title":"实现本网站图片保护功能 （访问的图片加水印）"},{"content":"Web.config:   <connectionStrings>     <add name=\"treecnn\" connectionString=\"data source=.;initial catalog=student;user id=sa;password=111111\"/>   <\/connectionStrings> 前台： <body>     <form id=\"form1\" runat=\"server\">     <div>         <asp:TreeView ID=\"TreeView1\" runat=\"server\">         <\/asp:TreeView>     <\/div>     <\/form> < /body> 后台： protected void Page_Load(object sender, EventArgs e)         {             if (!IsPostBack)                 bindTree();         }         private void bindTree()         {             DataTable dt = this.GetTreeData();             this.FillNode(dt, null);         }         private void FillNode(DataTable dt, TreeNode node)         {             DataView dv = new DataView(dt);             if (node == null)                {                 dv.RowFilter = \"parentid='0'\";              }             else              {                 dv.RowFilter = \"parentid='\" + node.Value + \"'\";                }             foreach (DataRowView drv in dv)                {                 TreeNode no = new TreeNode(drv[\"menuname\"].ToString(), drv[\"menuid\"].ToString());                 FillNode(dt, no);                   if (node == null)                 {                     this.TreeView1.Nodes.Add(no);                 }                 else                 {                     node.ChildNodes.Add(no);                 }             }         }         private DataTable GetTreeData()         {             string strcnn = ConfigurationManager.ConnectionStrings[\"treecnn\"].ConnectionString;             using (SqlConnection sqlcnn = new SqlConnection(strcnn))             {                 SqlCommand sqlcmm = sqlcnn.CreateCommand();                 sqlcmm.CommandText = \"select * from MenuTree order by parentid,menuorder\";                 SqlDataAdapter da = new SqlDataAdapter(sqlcmm);                 DataSet ds = new DataSet();                 da.Fill(ds);                 return ds.Tables[0];             }         }","title":"递归实现TreeView绑定表MenuTree"},{"content":"--------Web.config---------------- <configuration>     <system.web>         <compilation debug=\"true\" targetFramework=\"4.0\" />       <httpModules>          <add name=\"UrlReWrite\" type=\"模块与处理程序.UrlReWrite\"/>       <\/httpModules>     <\/system.web> <\/configuration> ----------UrlReWrite.cs类------------ namespace 模块与处理程序 {     public class UrlReWrite:IHttpModule     {         public void Dispose()         {              //没有要释放的资源就什么也不写         }         public void Init(HttpApplication context)         {             context.BeginRequest += new EventHandler(context_BeginRequest);         }         void context_BeginRequest(object sender, EventArgs e)         {             HttpApplication app = sender as HttpApplication;             HttpRequest re = app.Request;             string path = re.Path;             if (path.Substring(path.LastIndexOf(\"/\") + 1) == \"viewDetail.html\")             {                 string[] strs = path.Split('/');                 if (strs.Length != 4)                 {                     return;                 }                 else                 {                     string sid = strs[1];                     string sname = strs[2];                     app.Context.RewritePath(\"~/view.aspx?id=\" + sid + \"&name=\" + sname);                                }             }         }     } } -----------default2.aspx前台------------------- <body>     <form id=\"form1\" runat=\"server\">     <div>             <asp:GridView ID=\"GridView1\" runat=\"server\" AutoGenerateColumns=\"False\"             DataKeyNames=\"sid\" DataSourceID=\"SqlDataSource1\">             <Columns>                 <asp:BoundField DataField=\"sid\" HeaderText=\"sid\" InsertVisible=\"False\"                     ReadOnly=\"True\" SortExpression=\"sid\" />                 <asp:BoundField DataField=\"sname\" HeaderText=\"sname\" SortExpression=\"sname\" />                 <asp:BoundField DataField=\"sex\" HeaderText=\"sex\" SortExpression=\"sex\" />                 <asp:BoundField DataField=\"age\" HeaderText=\"age\" SortExpression=\"age\" />                 <asp:ImageField DataImageUrlField=\"photo\"                     DataImageUrlFormatString=\"~/images/{0}\" HeaderText=\"照片\">                 <\/asp:ImageField>                 <asp:HyperLinkField DataNavigateUrlFields=\"sid,sname\"                     DataNavigateUrlFormatString=\"{0}/{1}/viewDetail.html\" HeaderText=\"操作\"                     Text=\"查看详情\" />             <\/Columns>         <\/asp:GridView>         <br />         <asp:SqlDataSource ID=\"SqlDataSource1\" runat=\"server\"             ConnectionString=\"<%$ ConnectionStrings:studentConnectionString %>\"             SelectCommand=\"SELECT [sid], [sname], [sex], [age], [photo] FROM [student]\">         <\/asp:SqlDataSource>         <\/div>     <\/form> <\/body> --------------view.aspx前台---------------------- <body>     <form id=\"form1\" runat=\"server\">     <div>         <asp:Repeater ID=\"Repeater1\" runat=\"server\">         <HeaderTemplate>  <table border=\"0\" width=\"50%\"><tr><th>ID<\/th><th>姓名<\/th><th>性别<\/th><th>年龄<\/th><th>照片<\/th><\/tr><\/HeaderTemplate>         <ItemTemplate>         <tr style=\"text-align:center;\">                     <td><%#Eval(\"sid\") %><\/td>                     <td><%#Eval(\"sname\") %><\/td>                     <td><%#Eval(\"sex\") %><\/td>                     <td><%#Eval(\"age\") %><\/td>                                    <td><asp:Image ID=\"Image1\" runat=\"server\" Width=\"100px\" Height=\"100px\" ImageUrl='<%#\"images/\"+Eval(\"photo\") %>'/><\/td>                           <\/tr>         <\/ItemTemplate>         <FooterTemplate><\/table><\/FooterTemplate>         <\/asp:Repeater>     <\/div>     <\/form> <\/body> ----------view.aspx.cs后台---------------------  protected void Page_Load(object sender, EventArgs e)         {             if (!IsPostBack)             {                 bindStudent();             }         }         private void bindStudent()         {             string sid = this.Request[\"id\"];             string constr = ConfigurationManager.ConnectionStrings[\"studentConnectionString\"].ConnectionString;             string sql = \"select sid,sname,age,sex,photo from student where sid=\" + sid;             SqlConnection con = new SqlConnection(constr);             SqlDataAdapter adaper = new SqlDataAdapter(sql, con);             DataTable dt = new DataTable();             adaper.Fill(dt);             this.Repeater1.DataSource = dt;             this.Repeater1.DataBind();         }","title":"重写URL"},{"content":"============================================================ 博文原创，转载请声明出处 蓝岩--移动互联网老兵 ============================================================ 我们在wordpress主题theme配置的时候，会从网站上下载比较流行的theme，使自己的blog看着很酷。也有不顺利的时候，你下载的theme有bug或者下载包出问题了，安装过后你的web页面不能在访问了。悲催，想通过web将theme改回去也不行。我们只能够通过后台数据库来手动修改theme了。 方法如下： 打开phpMyAdmin，选择对应的数据库，在sql文本框中输入一下查询语句，我们就能得到当前的theme SELECT *FROM wp_optionsWHERE option_name = 'template'OR option_name = 'stylesheet'OR option_name = 'current_theme'; 结果如下： 我们可以将对应的字段修改为我们的theme，系统自带的有 ‘classic’ 和‘default’.你可以选择其一，这里有两种方法， 第一，我们可以点击左侧编辑符号进行手动修改， 第二，我们可以执行一下sql语句： UPDATE wp_options SET option_value = 'default' WHERE option_name = 'template'; UPDATE wp_options SET option_value = 'default' WHERE option_name = 'stylesheet'; UPDATE wp_options SET option_value = 'default' WHERE option_name = 'current_theme';注意，你可能在优化的时候将系统自带的theme删除了，所以我们设置的新theme需要和wp的theme下文件名称一致，如图：","title":"wordpress 如何从后台数据库修改theme"},{"content":"JavaScript转义符 转义序列 字符 \\b 退格 \\f 走纸换页 \\n 换行 \\r 回车 \\t 横向跳格 (Ctrl-I) \\' 单引号 \\\" 双引号 \\\\ 反斜杠","title":"JavaScript转义符"},{"content":"应媳妇要求。写了个图片滚动....比较蹩脚..... var forimg = function (foritem, hoverStop, defaultfor) {        var _foritem = foritem.constructor == jQuery ? foritem : $(foritem);        var imgarr = [            { \"z-index\": 1, \"width\": 100, \"height\": 100, \"left\": 0, \"top\": \"75px\" },            { \"z-index\": 2, \"width\": 200, \"height\": 200, \"left\": 50, \"top\": \"25px\" },            { \"z-index\": 3, \"width\": 300, \"height\": 250, \"left\": 150, \"top\": \"0\" },            { \"z-index\": 2, \"width\": 200, \"height\": 200, \"left\": 370, \"top\": \"25px\" },            { \"z-index\": 1, \"width\": 100, \"height\": 100, \"left\": 520, \"top\": \"75px\" }        ];        _foritem.each(function (i) {            var _this = $(this);            _this.css(imgarr[i] || imgarr[4]);            _this.find(\"img\").css(imgarr[i] || imgarr[4]);        });        var _for = function (_i, data, nulldata, callback) {            $(foritem).each(function (i) {                var self = $(this);                setTimeout(function () {                    self.css(\"z-index\", (data[i + _i] || nulldata)[\"z-index\"])                    self.stop().animate(data[i + _i] || nulldata);                    self.find(\"img\").stop().animate(data[i + _i] || nulldata, function () {                        callback.call(self, i);                    });                });            });        };        var that = this;        var defaultforfun = function () {            if (!defaultfor) {                that.leftfor();            } else {                that.rightfor();            }        }        var forimgInterval = setInterval(defaultforfun, 1000);        if (hoverStop) {            _foritem.hover(function () {                clearInterval(forimgInterval);            }, function () {                forimgInterval = setInterval(defaultforfun, 1000);            });        }        this.leftfor = function () {            var nuldata = { \"z-index\": -1, \"width\": 100, \"height\": 100, \"left\": 520, \"top\": \"75px\" };            imgarr[0][\"z-index\"] = 1;            imgarr[0][\"z-index\"] = 2            imgarr[0][\"z-index\"] = 3            imgarr[0][\"z-index\"] = 2            imgarr[0][\"z-index\"] = 1            _for(-1, imgarr, nuldata, function (i) {                if (i == 0) {                    this.closest(\"ul\").append(this);                }            });        };        this.rightfor = function () {            var nuldata = { \"z-index\": -1, \"width\": 100, \"height\": 100, \"left\": 0, \"top\": \"75px\" };            imgarr[0][\"z-index\"] = 1;            imgarr[0][\"z-index\"] = 2            imgarr[0][\"z-index\"] = 4            imgarr[0][\"z-index\"] = 5            imgarr[0][\"z-index\"] = 2            _for(1, imgarr, nuldata, function (i) {                if (i == _foritem.length - 1) {                    this.closest(\"ul\").prepend(this);                    this.css(\"z-index\", \"1\");                }            });        };        this.stop = function () {            clearInterval(forimgInterval);        };        this.next = function () {            forimgInterval = setInterval(defaultforfun, 1000);        };    }; deom页面请 猛戳fe2base菜园子","title":"一个蹩脚又简单的轮播的图片滚动"},{"content":"例子： hash—— 假设当前的 URL 是: http://example.com:1234/test.htm#part2： \t<html>\t<body>\t<script type=\"text/javascript\">\tdocument.write(location.hash);\t<\/script>\t<\/body>\t<\/html> 输出： #part2 host—— 实例 假设当前的 URL 是: http://example.com:1234/test.htm#part2： <html><body><script type=\"text/javascript\">document.write(location.host);<\/script><\/body><\/html> 输出： example.com:1234 hostname—— 实例 假设当前的 URL 是: http://example.com:1234/test.htm#part2： <html><body><script type=\"text/javascript\">document.write(location.hostname);<\/script><\/body><\/html> 输出： example.com href—— 实例 假设当前的 URL 是: http://example.com:1234/test.htm#part2： <html><body><script type=\"text/javascript\">document.write(location.href);<\/script><\/body><\/html> 输出： http://example.com:1234/test.htm#part2 pathname—— 实例 假设当前的 URL 是: http://example.com:1234/test/test.htm#part2： <html><body><script type=\"text/javascript\">document.write(location.pathname);<\/script><\/body><\/html> 输出： /test/test.htm","title":"location（）对象的属性"},{"content":"先给出博客地址：http://ziggear.tk 域名 TK这个顶级域名用了很久，一直没有问题。它的好处是完全免费，并且不限制你注册的域名个数。申请好之后有三个选择：URL重定向、TK自带的DNS和DNS托管。（最近我注册了一个 hzaubbs.tk 的域名，但不知道拿来做什么，所以先不做DNS解析）这个TK域名可以申请一年免费用，一年以后对相同域名只要更新一下信息就可以继续使用一年……以此类推。但条件是每个月都要有一定的访问量……这对于会一点SEO的人来说应该很简单！ 申请地址： http://my.dot.tk 如果你一定要花钱买个放心或者是想用正常一点的com、org之类的域名，那推荐去godaddy.com ，支持支付宝，有时的折扣可以花个十来块钱一年买个不错的域名。 DNS my.dot.tk申请后自带域名服务器，可以添加A/MX/CNAME记录，解析速度还行，如果你的虚拟主机带nameserver的话就直接在CustomDNS菜单下填虚拟主机的DNS即可。不知为何无法托管给国内的DNSPOD或者DNS.LA ，这一步没有优化觉得有点可惜，但是DNS解析时间在整个页面的载入过程中占的比例不大，其实我认为是可以忽略的，或者放到以后来优化。   PHP空间 我用AwardSpace，好处同样是免费的，武汉的访问速度不错，某免费空间推荐站这样描述它： awardspace免费空间，来自德国，同一些列的有很多，提供200M大小，5G流量，没有广告，可绑米，速度很快，基本很稳定。支持htaccess。这样的参数配置，对于个人博客来说，太足够了。我常看到一些要求暴大流量暴大空间的人，一个月流量不到1G，悲哀啊。 可以到这里申请AwardSpace免费的250MB空间：https://www.awardspace.net/signup.html?gid=1111&  支持绑定1个域名，1个MySQL数据库。 另外Antserve和PennyHosts这两个服务商都是廉价到不能再廉价且能提供长久服务的选择。 CDN 申请了SAE，在上面搭建了SAELayerCDN http://zigc.sinaapp.com/。我觉得AwardSpace速度还比新浪快一些，安了CDN之后反而感觉解析速度有所下降，不知是不是重新缓存带来的错觉。不过SAE的速度和稳定性也让人感觉有那么一点点的不靠谱——或者我可以找时间自己写个CDN程序玩玩看。 安装地址：http://sae.sina.com.cn/?m=apps&a=detail&aid=139 博客首页 纯手写的，毫无设计。用了比较简单的HTML+CSS。CSS写得有点乱倒是可以用工具优化一下。另外没有深入研究过CSS的渲染机制和性能的关系，因为我认为这样简单的静态页面完全可以做到秒开的嘛！ =================================== 本文来自：http://blog.csdn.net/zh405123507 tags:WEB DNS PHP HTML CDN","title":"做到完全免费——分享我的个人博客方案"},{"content":"javascript  正则 var re = new RegExp(模式，标志); 替换  每个分组替换一次 第二个可以放具体值，也可以放函数 RegExp.replace(//,fn); 验证是否为真   RegExp.test();  用来测试  true false RegExp.exec();  分组 返回数组  先返回一个总的分组 然后返回各个分组 alert(re.exec(o)[1]);  0位返回总集  1位返回第一个匹配 2位返回第二个 字符串方法里面还有个match方法 match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。 该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。 如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。 如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。 注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 RegExp.exec()。 var str = \"abcd\";alert( str.match(/(abc)d/) );返回的是一个数组  abcd,abc wanring    如果不全局匹配 那么 正则表达式 默认只会匹配一个地方   标志  i  忽略大小写 g  匹配全部  相当于 php的  preg_match_all m  匹配多行   multiline .* 后面加？  .*? 就是禁止贪婪 字符  ^    字符串开始位置 $    字符串结尾位置 \\s   匹配空格 \\S   匹配非空白字符 []   表示范围  [a-z] 特殊字符 只有，[]-其他的都不算特殊字符 \\w   匹配字母和数字及_ \\W   匹配非字母和数字及_ \\d   匹配数字 ?    重复0次或者1次 \\D   匹配非数字_ 同[^0-9_] 一样 .    匹配除换行符外的任意字符 *    匹配0个或者多个 +    匹配一个或者多个 ()   分组 (a(b(c)))  分组嵌套   (abc)(bc)(c) (?:) 非捕获性分组  是个分组 但是exec并不捕获 {n,} 重复n次 或者多次 {n}  重复n此 {n,m} 重复n到m次 |    或 ?=  正向前瞻 ?!  负向前瞻 + ？ * {}  这些后面都可以加个？来禁止贪婪 需要转义的元字符  在字符串中要加两次转义 .  小数点要加斜杠 因为正则表达式的语法里面 就有小数点 (  [  {  \\  ^  $  |  )  ?  *  + String 对象也可以 用正则表达式 var  o = \"-----35435435--  --\"; alert(o.replace(/-+/,'#'));   替换所有- 替换两边空格 var  s = o.replace(/^\\s+/,'').replace(/\\s+$/,''); function trim(s) {     var re = /^\\s*(.+?)\\s*$/; return re.exec(s)[1]; } 把指定规则的字符串给变成数组 split(); 搜索指定字符串出现的位置 search(要匹配的字符串)  indexOf(要匹配的字符串，起始位置) RegExp  本身的属性 re.source  返回正则表达式本身 re.lastIndex  返回上一次查询到的下标 re.lastParen  返回上一次查询的分组 静态属性 RegExp.input   取得最后要匹配的字符串 RegExp.leftContext  获取匹配数据前的数据 regExp.rightContext  获取的匹配数据后的数据 RegExp.$1~~~$9  返回1-9分组的内容 RegExp.multiline = true 开启多行 替换多行内容  多行要用g var s = \"1.ABC\\n2.DEV\"; var rel = /^\\d\\./mg; alert(s.replace(rel,''));","title":"javascript 正则表达式"},{"content":"XMLHttpRequest对象在大部分浏览器上已经实现而且拥有一个简单的接口允许数据从客户端传递到服务端，但并不会打断用户当前的操作。这是一个非常流行的做法，那么如何建立一个XMLhttpRequest对象呢？ 1、建立XMLHttpRequest对象 2、注册回调函数 3、使用open方法设置和服务器交互的基本信息 4、设置发送的数据，开始和服务器交互 5、在回调函数中判断交互是否结束，响应是否正确，并根据需要获取服务器端返回的数据，更新页面内容。 下面就通过代码来具体的来阐释这五步。（首先介绍的是使用GET方式） \t//定义全局变量\tvar　xmlhttp;\t/* 1、创建XMLHttpRequest对象\t*说明：这是一个相对复杂的过程，因为要使用不同的浏览器\t*/\tif(window.XMLHttpRequest){\t\t//适用于IE7、IE8、FireFox、Opera等浏览器\t\txmlhttp = new XMLHttpRequest();\t\tif(xmlhttp.overrideMineType){\t\t\txmlhttp.overrideMineType(\"text/xml\")\t\t}\t}else if(window.ActiveXObject){\t\t//IE6、IE5、IE5.5\t\tvar activexName = [\"MSXML2.XMLHTTP\",\"Miscrosoft.XMLHTTP\"];\t\tfor(var i =0 ;i<activexName.length;i++){\t\t\ttry{\t\t\t\txmlhttp = new ActiveXObject(activexName[i]);\t\t\t}catch(e){\t\t\t\t\t\t\t}\t\t}\t}\tif(xmlhttp == undefind || xmlhttp == null){\t\talert(\"当前浏览器不支持创建XMLHttpRequest对象\");\t\treturn;\t}\t/*2、给XMLHttpRequest对象注册回调方法\t*注意：虽然callback是一个方法，但是这里必须使用方法名，后面不用加（）\t*/\txmlhttp.onreadystatechange = callback;\t\t/*\t*3、设置和服务器交互的相应的参数\t*/\t//UserName是页面中的控件id\tvar userName = document.getElementById(\"UserName\").value;\t\txmlhttp.open(\"GET\",\"AJAX?name=\"+userName,true);\t//open方法几个重要的参数：get/post，服务器地址，\t//XMLhttpRequest对象的交互方式即同步/异步,true表示异步方式)\t\t/*\t*4、设置向服务器发送的数据，启动和服务器的交互\t*/\txmlhttp.send(null);\t\tfunction callback(){\t/*\t*5、判断和服务器交互是否完成，还要判断服务器是否正确返回了数据\t*/\t\t\tif(xmlhttp.readyState == 4){\t\t\t//表示和服务器端的交互已经完成\t\t\tif(xmlhttp.status == 200){\t\t\t//表示服务器的响应代码是200，正确的返回了数据\t\t\t//纯文本数据的接受方法\t\t\tvar message = xmlhttp.responsText();\t\t\t//如果使用的是DOM对象的接受方法，则\t\t\t//var doxXml = xmlhttp.responseXML();\t\t\t//但是有一个前提，服务器端需要设置content-type为text/xml\t\t\t\t\t\tvar div = document.getElementById(\"页面div的ID\")\t\t\t\t\tdiv.innerHTML = message;\t\t\t\t}\t\t}\t}上面的方法是用的是GET方式，下面再来介绍一下使用POST方法 使用POST方法与GET方式只有3、4两步又差异，其他的相同 \t/*\t*3、设置和服务器交互的相应的参数\t*/\t//UserName是页面中的控件id\tvar userName = document.getElementById(\"UserName\").value;\t\txmlhttp.open(\"POST\",\"AJAX\",true);\t//open方法几个重要的参数：get/post，服务器地址，\t//XMLhttpRequest对象的交互方式即同步/异步,true表示异步方式)\t\t/*\t*4、设置向服务器发送的数据，启动和服务器的交互\t*/\txmlhttp.setRequestHeader(\"Content-Type\",\"application/x-www-fora-urlencoded\");\txmlhttp.send(\"name=\"+userName);","title":"AJAX学习笔记：创建XMLHttpRequest对象的五步骤"},{"content":"前言 在前面的博客中有写到我使用iweboffice进行打印的功能介绍,今天我就系列性的给大家讲解一下我所了解到的iweboffice.   正题 一、简介 iWebOffice是金格的一款无纸化办公的中间件产品。   目前最高版本是iWebOffice2009，它支持直接在IE浏览器中对文档进行全文批注。实现在线文档编辑和保存、强制痕迹保留、全屏编辑批注、OFFICE与WPS混用编辑、支持OFFICEPROJECT文档、支持定制特殊方式加解密文档、支持信息权限管理等诸多高技术含量的功能。具有强大的扩展通讯能力，并支持B/S数据实时交互技术（DBPacket®对象包协议技术），提供强大灵活的二次开发接口，集成方便快捷。   二、运行环境 版本： iWebOffice2009   操作系统：Windows 2000、Windows 2003、Windows XP、Windows VISTA、Windows7、Windows 8   浏览器：IE5、IE6、IE7、IE8、IE9、IE10   可编辑软件：OFFICE 2000、OFFICE 2003、OFFICE 2007、OFFICE2010、WPS 2007、WPS2009、WPS 2012   三、开发语言 1.ASP、VS.NET，所使用的Web应用服务器：IIS 5、6、7   2.JAVA、JSP，所使用的Web应用服务器：Tomcat、WebLogic、WebSphere、JBoss等   四、主要功能特色 1.OFFICE菜单控制    通过属性的设置来控制菜单的显示，隐藏和只读操作。   2.OFFICE工具栏控制    通过属性的设置来控制菜单的显示，隐藏和只读操作。3.自定义工具栏   可以自己手动的编写事件来调用word的功能。   4.自定义多级菜单   可以根据iwebOffice的api文档或者自己去手动调用word的菜单功能。   五、小结 iWebOffice主要是调用本地的office并通过调用其API来完成对其操作，之后我会跟大家分享如何通过页面（JSP）的设置来完成对word的功能的展现。  ","title":"iweboffice之word——功能简介"},{"content":"一、返回的类型ResultType 如： <action name=\"r1\"><result type=\"dispatcher\">r1.jsp<\/result><\/action> dispatcher (跳到一个页面, 不能是Action:服务器端跳转) redirect (重定向: 客服端跳转) chain (跳转到Action) redirectAction (重定向Action) 其他的还有: freemarker, httpheader, stream(下载), velocity,  xslt,plaintext,  tiles。 服务器端跳转：客服请求---》服务器---》服务器里跳转。 客服端跳转：客服--》服务器----》返回客服端---》客服端重新请求----》服务器其他页面。 注意留意跳转时的网页地址。 二、重定向 网页重定向 　　我们在网站建设中，时常会遇到需要网页重定向的情况： 　　1. 网站调整（如改变网页目录结构）； 　　2. 网页被移到一个新地址； 　　3. 网页扩展名改变 ( 如应用需要把.php改成.Html或.shtml ) 。 这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。 重定向其他包中的Action。查文档就行。 <result type=\"chain\"> <param name=\"actionName\">dashboard<\/param> <param name=\"namespace\">/secure<\/param> <\/result> 三、GlobalResults全局结果集 Global-result就是在一个包中大家可以共用的结果, 当返回的结果不存在时, 都可以返回他。 <global-results><result name=“xxxx\">/main.jsp<\/result><\/global-results> globalresult , 大家共用的结果集!在这个package里面是共用的。省去了些多次的麻烦。 当想要其他包中也能用时： <packagename=“admin” namespace=“/admin” extends=“user”>用extends。 实际中叶用到extends，和继承抽象的用法是一样的！ 四、dynamic-result动态结果 $号用来在配置文件中往值栈里面取值。 <action name=\"user“ class=\"com.struts2.action.UserAction\"><result>${r}<\/result><\/action> 就是在类中定义的属性r取值，这个r已经放到值栈中了。返回的结果可以由r来动态设定。 用的并不多，了解就可以！ 五、带参数的结果集(ResultWithParams)  形如下面的： <action name=\"user1\" class=\"com.struts2.action.UserAction1\"><result type=\"redirect\">/user_success1.jsp?t=${type}<\/result><\/action>","title":"Struts小结----Result"},{"content":"普加甘特图是WEB甘特图首选解决方案。适用于构建项目管理、生产排程等进度计划管理软件。支持任意开发平台和数据库。它是JavaScript开发的，无需安装插件，跨浏览器运行。 http://www.plusgantt.com 甘特图效果图：       基本特性： JavaScript实现，无需安装插件 支持Java、.Net、Php等服务端，支持任意数据库 能与jQuery、ExtJS、YUI、Dojo等第三方框架无缝集成 兼容IE6+、FireFox、Chrome、Safari等主流浏览器 支持导入、导出微软Project项目文件 核心功能： 高性能：支持大数据量。 跟踪甘特图：显示计划与实际日期对比。 关键路径显示 自定义列：支持String、Boolean、Date、Number、Array等多种数据类型。 支持4种任务关系：SS、SF、FF、FS。 权限编辑控制：可根据权限精确控制单元格编辑、条形图拖拽。 懒加载显示：通过分级加载模式，能支持超大数据量显示。 单元格编辑：支持TextBox、Spinner、DatePicker、ComboBox、TreeSelect以及自定义编辑器。 可拖拽调节条形图 丰富的时间线刻度：支持年、半年、季度、月、周、日、时、分、秒。 支持右键菜单：可以控制右键菜单项是否显示、是否禁用。 无需安装浏览器插件 跨浏览器支持：支持IE6+、FireFox、Opera、Chrome、Safari。 跨服务端平台支持：支持.Net、Java、PHP、ASP等开发平台。 语言本地化：轻松实现多国语言本地化，如英语、汉语、日语、德语、法语等任何语言。 与第三方框架集成：能轻松与jQuery、ExtJS、YUI、Prototype.js等无缝集成。 功能示例： 基本甘特图 跟踪甘特图 懒加载甘特图 甘特图小刻度操作：精确到分钟 自定义列 可编辑性控制 筛选任务 多选任务 显示：增加、删除、修改的任务 大数据量和高性能甘特图 语言本地化(英文) Ext甘特图  ","title":"Web甘特图开发系列：(一) 甘特图介绍"},{"content":"大家好，我是小雨，QQ:798033502 今天给大家分享的是ASP.NET的数据绑定与绑定控件 用到的控件为数据源控件和数据绑定控件 数据源控件 我们主要说三个 SqlDataSource数据源控件 ObjectDataSource数据源控件 LinqDataSource数据源控件   SqlDataSource数据源控件 如果数据源存储在SQL Server、SQL Server Express、Oracle、Access、DB2及MySQL等数据库中，则可以使用SqlDataSource控件。 该控件提供了一个易于使用的向导，引导用户完成配置过程。 完成配置后，该控件就可以自动调用ADO.NET中的类来查询或更新数据库数据。 SqlDataSource控件的主要属性 SqlDataSource具有4个Command属性，分别为：SelectCommand、UpdateCommand、InsertCommand和DeleteCommand。使用这4个属性，可以完成查询、插入、更新和删除操作。 SqlDataSource的事件和方法 SqlDataSource控件的主要事件： Selecting：在查询之前触发。 Selected：在查询之后触发。 Inserting：在插入之前触发。 Inserted：在插入之后触发。 Updating：在更新之前触发。 Updated：在更新之后触发。 Deleting：在删除之前触发。 Deleted：在删除之后触发。 例如，插入前事件代码如下： protected void SqlDataSource1_Inserting(object sender, SqlDataSourceCommandEventArgs e) {  …… } 在代码中，SqlDataSourceCommandEventArgs类型的参数e具有以下2个主要属性： Cancel属性：指定是否继续执行插入操作。 Command属性：可以获取或设置数据库命令。例如数据库连接、SQL命令、参数集合等。 例如，插入后事件代码如下： protected void SqlDataSource1_Inserted(object sender, SqlDataSourceStatusEventArgs e) {  …… } 在代码中，SqlDataSourceStatusEventArgs类型的参数e具有以下几个主要属性： AffectedRows属性：获取受数据库操作影响的行数。 Command属性：获取提交到数据库的数据库命令。 Exception属性：获取数据库的数据操作期间引发的任何异常。 ExceptionHandled属性：获取或设置一个值，该值指示是否已处理数据库引发的异常。true表示已处理，false表示未处理。 ObjectDataSource数据源控件 ObjectDataSource控件通过提供一种将相关页上的数据控件绑定到中间层业务对象的方法，为三层结构提供支持。 在不使用扩展代码的情况下，ObjectDataSource使用中间层业务对象以声明方式对数据执行选择、插入、更新、删除、分页、排序、缓存和筛选操作。 使用ObjectDataSource对象的三层结构示意图如图所示。     LinqDataSource数据源控件   LinqDataSource控件是ASP.NET 3.5引入的一个新数据源控件，它可以使用.NET3.5的新LINQ功能查询应用程序中的数据对象。 LinqDataSource控件的用法与SqlDataSource控件类似，也是把在控件上设置的属性转换成可以在数据源上执行的操作。 LinqDataSource控件则把属性设置转换为有效的LINQ查询，当与数据库中的数据进行交互时，不会将LinqDataSource控件直接连接到数据库，而是与表示数据库和表的实体类进行交互。 数据绑定控件 这里我们介绍5个数据绑定控件，他们分别是： GridView控件 DetailsView控件 FormView控件 ListView控件和DataPager控件   GridView控件 GridView是一个显示表格式数据的控件，该控件是ASP.NET服务器控件中功能最强大、最实用的一个控件。 GridView显示一个二维表格式数据，每列表示一个字段，每行表示一条记录。 GridView控件的主要功能是通过数据源控件自动绑定数据源的数据，然后按照数据源中的一行显示为输出表中的一行的规则将数据显示出来。 该控件无须编写任何代码即可实现选择、排序、分页、编辑和删除功能。     1．使用GridView控件 启用GridView控件的编辑和删除功能； 为GridView控件指定了DataKeyNames属性 ； 为GridView控件设置主键列为StuNo和Name。 DataKeyNames=\"StuNo , Name“ 获取第一个主键字段的值，可以按如下代码进行操作。 object key = GridView1.DataKeys[0].Value; 2．定制GridView控件的列 GridView控件中的数据常常不是简单的文本数据，而是要使用其它类型的控件显示的数据，例如使用复选框、图片框等控件显示数据，或者根本不需要显示的数据。 在GridView中提供了非常丰富的列的显示格式。     BoundField是默认的列类型，该列将数据库中的字段显示为纯文本，默认情况下，Visual Studio 将为数据源中的列生成这种字段类型，Visual Studio 提供了一个可视化的列字段编辑器，大大简化了创建列的工作。   BoundField字段的常用属性 属  性 说    明 DataField 指定列将要绑定字段的名称，如果是数据表则为数据表的字段，如果是对象，则为该对象的属性 DataFormatString 用于格式化DataField显示的格式化字符串。例如如果需要指定四位小数，则格式化字符串为{0：F4}；如果需要指定为日期，则格式字符串为{0:d}。 ApplyFormatInEditMode 是否将DataFormatString设置的格式应用到编辑模式 HeaderText、FooterText和HeaderImageUrl 前两个用于设置列头和列尾区显示的文本。HeaderText属性通常用于显示列名称。列尾可以显示一些统计信息 ReadOnly 列是否只读，默认情况下，主键字段是只读，只读字段将不能进入编辑模式 Visible 列是否可见。如果设置为false，则不产生任何HTML输出 SortExpression 指定一个用于排序的表达式 HtmlEncode 默认值为true，指定是否对显示的文本内容进行HTML编码 NullDisplayText 当列为空值时，将显示的文本 ConvertEmptyStringToNull 如果设为true，当提交编辑时，所有的空字符将被转换为null ControlStyle、HeaderStyle、FooterStyle和ItemStyle 用于设置列的呈现样式   3．定制GridView的模板列 GridView控件中有一个重要的列类型TemplateField，它可以使用模板完全定制列的内容。当使用标准的列不能满足显示要求时，例如希望在编辑状态下，能使用下拉列表框选择一个专业，使用单选列表选择性别，避免输入。此时可以考虑使用模板列。   GridView控件的模板列 模  板 说    明 AlternatingItemTemplate 为交替项指定要显示的内容 EditItemTemplate 为处于编辑模式中的项指定要显示的内容 FooterTemplate 为对象的脚注部分指定要显示的内容 HeaderTemplate 为标头部分指定要显示的内容 InsertItemTemplate 为处于插入模式中的项指定要显示的内容。只有DetailsView控件支持该模板 ItemTemplate 为TemplateField对象中的项指定要显示的内容 4. GridView控件事件 GridView控件提供可很多事件，可以使用这些事件定制GridView控件的外观和行为。 下面将GridView控件的事件分为3大类。 控件呈现事件，在GridView显示其数据行时触发。可分为如下几种。 DataBinding：GridView绑定到数据源前触发。 DataBound：GridView绑定到数据源后触发。 RowCreated：GridView中的行被创建后触发。 RowDataBound：GridView中的每行绑定数据后触发。   编辑记录事件，分为如下几种。 RowCommand：单击GridView控件内的按钮时触发。 RowUpdating：在GridView更新记录前触发。 RowUpdated：在GridView更新记录后触发。 RowDeleting：在GridView删除记录前触发。 RowDeleted：在GridView删除记录后触发。 RowCancelingEdit：取消更新记录时触发。 选择、排序、分页事件，分为如下几种。 PageIndexChanging：在当前页被改变前触发。 PageIndexChanged：在当前页被改变后触发。 Sorting：在排序前触发。 Sorted：在排序后触发。 SelectedIndexChanging：在行被选择之前触发。 SelectedIndexChanged：在行被选择后触发。   单击选择按钮时，页面回传，触发GridView控件的SelectedIndexChanging事件和SelectedIndexChanged事件。在这些事件中可以通过如下属性获取选择值。 SelectedIndex属性：GridView控件所选中行的索引号。 SelectedDataKey属性：获取DataKey对象，该对象包含GridView控件中选中行的所有数据键值。 SelectedValue属性：获取GridView控件中选中行的数据键值。 SelectedRow属性：获取对GridView控件中选中的行。   DetailsView控件 GridView控件适合显示多行数据。在某些时候用户希望一次只看到某一行中所包含数据字段的详细数据，即在页面上一次只显示一条记录。 DetailsView控件的主要功能是以表格形式显示和处理来自数据源的单条数据记录，其表格只包含两个数据列。一个数据列逐行显示数据列名，另一个数据列显示与对应列名相关的详细数据值。 DetailsView控件提供了与GridView相同的许多数据操作和显示功能，可以对数据进行分页、更新、插入和删除。   DetailView有一个DefaultMode属性，可以控制默认的显示模式，该属性有3个可选值。 DetailsViewMode.Edit：编辑模式，用户可以更新记录的值。 DetailsViewMode.Insert：插入模式，用户可以向数据源中添加新记录。 DetailsViewMode.ReadOnly：只读模式，这是默认的显示模式。   DetailView控件提供了与切换模式相关的两个事件: ModeChanging事件:在模式切换前触发; ModeChanged事件:在模式切换后触发。 DetailView控件提供了ChangeMode方法，用来改变DetailView的显示模式。将DetailView控件的模式改为编辑模式的代码如下： DetailsView1.ChangeMode(DetailsViewMode.Edit);  可以在DetailView控件外放置控制DetailView显示模式的按钮，当单击不同的模式按钮时，调用ChangeMode方法进行模式切换。 FormView控件 FormView控件与DetailsView功能相同，也是显示数据源控件中的一个数据项，并可以添加、编辑和删除数据。 与DetailsView控件的一个明显区别是，FormView控件完全基于模板，提供了更多的布局控制选项。 利用FormView控件操作数据源数据时，需要为其定制不同的模板，例如为支持插入记录的FormView控件定义插入项模板等   FormView控件的常用模板 模板名称 说    明 EditItemTemplate 定义数据行在FormView控件处于编辑模式时的内容，通常包含用户用来编辑现有记录的输入控件和命令按钮 EmptyDataTemplate 定义在FromView控件绑定到不包含任何记录的数据源时所显示的空数据行的内容，通常包含用来警告用户数据源不包含任何记录。 FooterTemplate 定义脚注行的内容，此模板通常包含任何要在脚注行中显示的附加内容 HeaderTemplate 定义标题行的内容，此模板通常包含任何要在标题行中显示的附加内容 ItemTemplate 定义数据行在FormView控件处于只读模式时的内容，通常包含用来显示现有记录值的内容 InsertItemTemplate 定义数据行在FormView控件处于插入模式时的内容，通常包含用户用来添加新记录的输入控件和命令按钮 PagerTemplate 定义在启用分页功能时所显示的页导航行的内容，通常包含用户可以用来导航至另一个记录的控件   FormView控件不提供自动生成命令按钮以执行更新、删除或插入操作的方法。必须手动将这些按钮添加在不同的模板中。FormView控件通过识别按钮的CommandName属性，来执行不同的操作。 按钮 CommandName值 说    明 取消 Cancel 在更新或插入操作中，用于取消操作并放弃用户输入 删除 Delete 删除当前记录，引发ItemDeleting和ItemDeleted事件 编辑 Edit 进入编辑模式 插入 Insert 插入用户输入的数据，引发ItemInserting和ItemInserted事件 新建 New 进入插入模式 页 Page 表示页导航行中执行分页的按钮，若要指定分页操作，必须将该按钮的CommandArgument属性设置为“Next”、“Prev”、“First”、“Last”或要导航至的目标页的索引。引发PageIndexChanging和PageIndexChanged事件 更新 Update 更新当前记录，引发ItemUpdating和ItemUpdated事件 ListView控件和DataPager控件   ListView集成了GridView、DataList、Repeater、DetailsView和FormView控件的所有功能，可以在页面上自定义多条记录的显示布局 。 ListView控件允许用户编辑、插入和删除数据，以及对数据进行排序和分页 。 ListView控件是一个相当灵活的数据绑定控件，该控件不具有默认的格式呈现，所有格式需要进行模板设计实现。 ListView控件包含以下11个模板。 LayoutTemplate：定义控件的主要布局的根模板。它包含一个占位符对象，例如表行(tr)、div或span元素。此元素将由ItemTemplate模板或GroupTemplate模板中定义的内容替换。它还可能包含一个DataPager对象。 ItemTemplate：定义为各个项显示的数据绑定内容。 ItemSeparatorTemplate：定义在各个项之间呈现的内容。 GroupTemplate：定义组布局的内容。它包含一个占位符对象，例如表单元格(td)、div或span。该对象将由其它模板（例如ItemTemplate和EmptyItemTemplate模板）中定义的内容替换。 GroupSeparatorTemplate：定义在项组之间呈现的内容。   EmptyItemTemplate：定义在使用GroupTemplate模板时为空项呈现的内容。例如，如果将GroupItemCount属性设置为5，而从数据源返回的总项数为8，则ListView控件显示的最后一行数据将包含ItemTemplate模板指定的3个项以及EmptyItemTemplate模板指定的2个项。 EmptyDataTemplate：定义在数据源未返回数据时要呈现的内容。 SelectedItemTemplate：定义所选项呈现的内容，用以区分所选数据项与其它项。 AlternatingItemTemplate：定义交替项呈现的内容，以便区分连续项。 EditItemTemplate：定义在编辑项时呈现的内容。对于正在编辑的数据项，将呈现EditItemTemplate模板以替代ItemTemplate模板。 InsertItemTemplate：定义在插入项时呈现的内容。将在ListView控件显示的项的开始或末尾处呈现InsertItemTemplate模板，以替代ItemTemplate模板。通过使用ListView控件的InsertItemPosition属性，可以指定InsertItemTemplate模板的呈现位置。   ListView中至少必需包含两个模板：LayoutTemplate和ItemTemplate。LayoutTemplate模板是ListView用来显示数据的布局模板，ItemTemplate则是每一条数据的显示模板，将ItemTemplate模板放置在LayoutTemplate模板中可以实现定制的布局。   ListView控件的分组布局 ListView控件提供了一个分组布局的功能，该功能会将ItemTemplate中的项按水平平铺方向进行布局。 在平铺布局中，项在行中沿水平方向重复出现。项重复出现的次数有ListView控件的GroupItemCount属性指定。 ListView有一个GroupTemplate元素，使用该元素可以创建分组布局的功能。 LayoutTemplate、GroupTemplate和 ItemTemplate元素间关系   使用DataPager实现ListView的分页 ListView控件本身没有分页功能，可以通过DataPager控件实现分页。DataPager控件是一个专门用于分页的服务器控件。              ","title":"ASP.NET的数据绑定与绑定控件"},{"content":"前言    前面介绍了iwebOffice常用属性的设置，下面来介绍一下自定义菜单的使用。   正题 1.调用方法 我们的菜单的显示通过属性ShowMenu来设置，具体的菜单项通过调用方法AppendMenu来实现，其中第一个参数为菜单的编号，第二个参数为显示出来的标题。 webform.WebOffice.ShowMenu=\"1\";                         //控制整体菜单显示//以下为自定义菜单↓webform.WebOffice.AppendMenu(\"1\",\"打开本地文件(&L)\");webform.WebOffice.AppendMenu(\"2\",\"保存本地文件(&S)\");webform.WebOffice.AppendMenu(\"3\",\"保存远程文件(&U)\");webform.WebOffice.AppendMenu(\"4\",\"-\");webform.WebOffice.AppendMenu(\"5\",\"签名印章(&Q)\");webform.WebOffice.AppendMenu(\"6\",\"验证签章(&Y)\");webform.WebOffice.AppendMenu(\"7\",\"-\");webform.WebOffice.AppendMenu(\"8\",\"保存版本(&B)\");webform.WebOffice.AppendMenu(\"9\",\"打开版本(&D)\");webform.WebOffice.AppendMenu(\"10\",\"-\");webform.WebOffice.AppendMenu(\"11\",\"保存并退出(&E)\");webform.WebOffice.AppendMenu(\"12\",\"-\");webform.WebOffice.AppendMenu(\"13\",\"打印文档(&P)\");       2.事件响应 我们调用AppendMenu时会响应iwebOffice封装的OnMenuClick事件 <scriptlanguage=\"javascript\" for=WebOfficeevent=\"OnMenuClick(vIndex,vCaption)\">  if (vIndex==1){      WebOpenLocal();     //打开本地文件  }  if (vIndex==2){      WebSaveLocal();     //保存本地文件  }  if (vIndex==3){    SaveDocument();     //保存正文到服务器上（不退出）  }  if (vIndex==5){      WebOpenSignature(); //签名印章  }  if (vIndex==6){      WebShowSignature(); //验证签章  }  if (vIndex==8){      WebSaveVersion();   //保存版本  }  if (vIndex==9){      WebOpenVersion();   //打开版本  }  if (vIndex==11){    SaveDocument();     //保存正文到服务器上    webform.submit();   //然后退出  }  if (vIndex==13){      WebOpenPrint();     //打印文档  }<\/script>     3.实际被调用的方法 事件里面调用的方法是iwebOffice经过包装后的方法，实际调用的方法如下（举两个例子）： //作用：打开本地文件functionWebOpenLocal(){  try{    webform.WebOffice.WebOpenLocal();    StatusMsg(webform.WebOffice.Status);  }catch(e){alert(e.description);}} //作用：存为本地文件functionWebSaveLocal(){  try{    webform.WebOffice.WebSaveLocal();    StatusMsg(webform.WebOffice.Status);  }catch(e){alert(e.description);}}       4.自定义菜单 上面的三步是对iwebOffice已有的方法的一个剖析，如果大家想自定义一个菜单项的话， 1)可以先根据iwebOffice的api文档，通过调用其方法或者属性来实现自己的一个方法. 2)然后在事件OnMenuClick中调用该方法. 3)最后在AppendMenu中添加上你自定义的菜单即可.    ","title":"iweboffice之word——自定义菜单的使用"},{"content":"ajax 用 XMLHttpRequest 对象来实现  IE 6不支持 要用 ActiveX组件来实现 所以我们要兼容的创建 ajax //ajax function createAjax() {     if(typeof XMLHttpRequest != \"undefined\") {         return  new XMLHttpRequest();     } else if(typeof ActiveXObject != \"undefined\") {         var version = [ 'MSXML2.XMLHttp.6.0', 'MSXML2.XMLHttp.3.0', 'MSXML2.XMLHttp' ];         for(var i=0;i<version.length;i++) {             try{                 return new ActiveXObject(version[i]);             }catch(e){}         }     } else {         throw new Error(\"您的浏览器不支持 Ajax !\");     } } 创建请求  准备语句 并不会发送ajax请求 ajax.open(请求模式，请求地址，是否同步)  true 代表异步  false 代表同步 ajax.open('get','demo1.php',false); 真正的发送请求 如果是get请求就不要填写 如果是post 就填写 ajax.send(里面填写你要发送的数据); 打印服务器返回回来的数据 是个属性 ajax.responseText ie 浏览器下面会缓存查询结果 所以每次url后面最好加点随机数 ajax.open('get','demo1.php?rand='+Math.random(),false); ajax提供了一个属性返回和服务器交互的http码 ajax.status  可以获取 一般为 200 就是成功访问 ajax.statusText 返回  HTTP 状态的说明 可以简单的判断下 if(ajax.status == 200) {     alert(ajax.responseText); } else {     throw new Error('获取数据错误，错误代号：'+ajax.status+'错误信息'+ajax.statusText); } 一般ajax 都是用异步的方式   open里面是true  如果用异步的方式 要用  onreadystatechange 来判断  在这个方法里面 检测 readyState属性 即可 取消ajax异步请求  要放在send 后面 ajax.abort(); get和post 一般用get的比较多 使用post提交   ajax.open('post','demo1.php?rand='+Math.random(),true);  改成post ajax.setRequestHeader('Content-Type','application/x-www-form-urlencoded');  设置请求头 ajax.send(\"name=gwyy&sex=nan\");  填写数据 ajax 也提供了获取响应头信息  必须在 全部接受完后才能获取  document.write(\"<pre>\"+ajax.getAllResponseHeaders());  获取全部的头信息 获取其中某一个 alert(ajax.getResponseHeader(\"Server\")); 不管能获取 还能设置请求头信息   在 send() 之前 设置 ajax.setRequestHeader('fuck-you','fuck'); 封装ajax //创建ajax 对象function createAjax() {    if(typeof XMLHttpRequest != \"undefined\") {        return  new XMLHttpRequest();    } else if(typeof ActiveXObject != \"undefined\") {        var version = [\t\t\t\t\t\t\t\t\t'MSXML2.XMLHttp.6.0',\t\t\t\t\t\t\t\t\t'MSXML2.XMLHttp.3.0',\t\t\t\t\t\t\t\t\t'MSXML2.XMLHttp'\t\t];        for(var i=0;i<version.length;i++) {            try{                return new ActiveXObject(version[i]);            }catch(e){}        }    } else {        throw new Error(\"您的浏览器不支持 Ajax !\");    }}//解析 url字符串function  params(data) {\tvar arr = [];\tfor(var i in data) {\t    arr.push(encodeURIComponent(i)+'='+encodeURIComponent(data[i]));\t}\t\treturn arr.join('&');\t}function ajax(args) {\tvar ajax = createAjax();\targs.url = args.url+\"?\"+Math.random();\targs.data = params(args.data);\tif(args.method.toLowerCase() === \"get\")  {\t\targs.url += (args.url.indexOf('?') == -1) ? '?'+args.data : '&'+args.data;\t}\targs.async = args.async || true;  //同步还是异步\tif(args.async == true) {\t\tajax.onreadystatechange = function() {\t\t\tif(ajax.readyState == 4){\t\t\t\tcallback();\t\t\t}\t\t\t}\t}\tajax.open(args.method,args.url,args.async);\tif(args.method.toLowerCase() === \"post\") {   //如果是post提交\t    ajax.setRequestHeader('Content-Type','application/x-www-form-urlencoded');\t\tajax.send(args.data);\t} else {\t    ajax.send(null);\t}\tif(args.async == false) {  //如果是同步\t  callback();\t}\t//执行完成\tfunction callback() {\t      if(ajax.status == 200) {\t\t\targs.success(ajax.responseText);\t\t} else {\t\t\talert('错误号：'+ajax.status+\"错误信息：\"+ajax.statusText);\t\t}\t}\t\t\t}$('a').onclick = function(){ \tajax({\t\turl:\"demo1.php\",\t\tasync:true,\t\t\tmethod:'post',\t\tdata:{'name':'lee','age':'100'},\t\tsuccess:function(data) {\t\t    alert(data);\t\t}\t});}","title":"javascript Ajax 笔记"},{"content":"          tr是html标签中行的标记，在web开发中，有时候我们为了美观需要修改行的属性。比如tr的边框。如果我们按照如下的形式修改tr的属性就大错特错了.       tr{   border:1px  solid #DDDDDD;}              这样是没有任何效果的。因为表格中的tr并非单一的边框，这样便需要属性border-collapse，border-collapse 属性设置表格的边框是否被合并为一个单一的边框，还是象在标准的 HTML 中那样分开显示。          实例：为表格设置合并边框模型：    table{      border-collapse:collapse;   }          参数：          separate 默认值。边框会被分开。不会忽略border-spacing 和 empty-cells 属性。          collapse   如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。          inherit      规定应该从父元素继承border-collapse 属性的值。","title":"CSS如何修改tr边框属性"},{"content":"提交表单后返回的HTML页面重新渲染，SELECT控件的value和selectedIndex属性都无法使下拉框保留提交表单前的状态。  <SELECT id=\"idState\" style=\"width:150\" name=\"state\" selectedIndex=\"$!{state}\">    <OPTION value=\"\">全部<\/OPTION>    <OPTION value=\"1\">通过<\/OPTION>    <OPTION value=\"2\">末通过<\/OPTION>    <OPTION value=\"3\">待处理<\/OPTION><\/SELECT> 一种临时的解决方案是在vm文件末尾加上一段脚本为下拉框赋值： <script>    $('#idState').val('$!{state}');<\/script>   另一种方案是设置默认选中项： <SELECT id=\"idState\" style=\"width:150\" name=\"state\" value=\"$!{state}\">    <OPTION value=\"\">全部<\/OPTION>    <OPTION value=\"1\">通过<\/OPTION>    <OPTION value=\"2\" SELECTED>末通过<\/OPTION>    <OPTION value=\"3\">待处理<\/OPTION><\/SELECT> 用VTL的写法就是： <SELECT id=\"idState\" style=\"width:150\" name=\"state\" value=\"$!{state}\">    <OPTION value=\"\">全部<\/OPTION>    <OPTION #if($!{state} == 1) SELECTED #end  value=\"1\">通过<\/OPTION>    <OPTION #if($!{state} == 2) SELECTED #end  value=\"2\">末通过<\/OPTION>    <OPTION #if($!{state} == 3) SELECTED #end  value=\"3\">待处理<\/OPTION><\/SELECT> 这里要注意的是：进行==比较时，Velocity是区分类型的，如果用字符串“1”、“2”、“3”比较会始终得到false。 参考： velocity中比较的问题 http://www.oschina.net/question/237818_38403?sort=time&p=1","title":"改变HTML下拉框选项的方法"},{"content":"ADF Essentials是从JavaEE Web开发框架ADF（Application Development Framework）中剥离出来的基本要件，甲骨文的许多web应用程序就是基于该框架构建。ADF Essentials基于MVC架构，旨在提供可重复使用的应用程序组件，以缩短开发时间和重复劳动。 ADF Essentials中包含了以下组件： Oracle ADF Faces，基于JSF，并提供了150多个Web UI组件。 一个控制层，用来绑定UI组件到基于XML元数据的业务逻辑抽象层 一组常用的软件设计模式，被打包成可重用的组件，可以简化业务逻辑的创建。 由于ADF Essentials是从ADF产品中剥离出来的，因此缺少完整版ADF中存在的一些组件，如安全框架以及用于整合移动和桌面应用程序的框架等。 开发者可以将ADF Essentials免费部署到生产环境中，不要求必须运行甲骨文的WebLogic服务器，开发者也可以选择GlassFish或IBM的WebSphere服务器。","title":"ADF Essentials简介"},{"content":"普加甘特图是WEB甘特图首选解决方案。适用于构建项目管理、生产排程等进度计划管理软件。支持任意开发平台和数据库。它是JavaScript开发的，无需安装插件，跨浏览器运行。 基本特性： JavaScript实现，无需安装插件 支持Java、.Net、Php等服务端，支持任意数据库 能与jQuery、ExtJS、YUI、Dojo等第三方框架无缝集成 兼容IE6+、FireFox、Chrome、Safari等主流浏览器 支持导入、导出微软Project项目文件 效果图： 核心功能： 高性能：支持大数据量。 跟踪甘特图：显示计划与实际日期对比。 关键路径显示 自定义列：支持String、Boolean、Date、Number、Array等多种数据类型。 支持4种任务关系：SS、SF、FF、FS。 权限编辑控制：可根据权限精确控制单元格编辑、条形图拖拽。 懒加载显示：通过分级加载模式，能支持超大数据量显示。 单元格编辑：支持TextBox、Spinner、DatePicker、ComboBox、TreeSelect以及自定义编辑器。 可拖拽调节条形图 丰富的时间线刻度：支持年、半年、季度、月、周、日、时、分、秒。 支持右键菜单：可以控制右键菜单项是否显示、是否禁用。 无需安装浏览器插件 跨浏览器支持：支持IE6+、FireFox、Opera、Chrome、Safari。 跨服务端平台支持：支持.Net、Java、PHP、ASP等开发平台。 语言本地化：轻松实现多国语言本地化，如英语、汉语、日语、德语、法语等任何语言。 与第三方框架集成：能轻松与jQuery、ExtJS、YUI、Prototype.js等无缝集成。 功能示例： 基本甘特图 跟踪甘特图 懒加载甘特图 甘特图小刻度操作：精确到分钟 自定义列 可编辑性控制 筛选任务 多选任务 显示：增加、删除、修改的任务 大数据量和高性能甘特图 语言本地化(英文) Ext甘特图 甘特图效果截图如下：   基本甘特图 排程甘特图：左侧表格区，单元格右上角红色三角块，表示被修改。 跟踪甘特图：实现实际与计划日期的对比。 关键路径甘特图：关键路径的工期决定了整个项目的工期。 任务面板 项目日历面板 多国语言本地化","title":"分享一个Web甘特图：支持java,.net"},{"content":"each()遍历元素的专用方法之一，有它，我们可以用来做很多事情，比如你需要获取好几个‘div’的class名并依次输出，代码可以这样写：Dom结构：  <div class=\"sb01\"><\/div><div class=\"sb02\"><\/div><div class=\"sb03\"><\/div> Jquery代码：  <script>$(function(){$(\"div\").each(function(){alert(\"class名称是：\"+$(this).attr(\"class\"));});})<\/script> 输出结果： class名称是：sb01class名称是：sb02class名称是：sb03  ","title":"jquery中each使用方法详解"},{"content":"Get & Post区别：         参考网上的比较好。以后会附上好的链接… Get & Post实现方式总结： 通过Eclipse下创建ServletDemo，并连接Tomcat Server测试，发现了一些重要的知识点，总结如下： 1、无论Get 还是 Post，HttpServlet.java端必须要实现对应的方式。如果没有实现，在指定方式请求时，将会提示异常： HTTP method GET（POST） is not supported by this URL 2、实现方式，一共有两种： ① 直接在浏览器地址栏输入访问路径：如 http://localhost:8080/ServletDemo/servlet/SimpleTestDoGet (只实现了 DoGet 协议) Note：该方式一定是[Get] method ② 在request.html中使用<form action=\" \" method=\" \"> <p>username:<input ...><\/p> <p>password:<input ...><\/p> <p>submit:<input ...> <\/p> <\/form>表单的方式。 Note：该方式可以是[Get] method，也可以是[Post] method；只有这两种，通过method=\" \"来指定。 在点击Submit时，如果是[Post] method，访问的路径是：http://localhost:8080/ServletDemo/servlet/SimpleServiceDo4GetAndPost（通过service实现了 DoGet 和 DoPost 双协议） 如果是[Get] method，访问的路径是：http://localhost:8080/ServletDemo/servlet/SimpleServiceDo4GetAndPost?name=&%E6%8F%90%E4%BA%A4=%E6%8F%90%E4%BA%A4  或 http://localhost:8080/ServletDemo/servlet/SimpleServiceDo4GetAndPost?name=&提交=提交  或 http://localhost:8080/ServletDemo/servlet/SimpleServiceDo4GetAndPost?name=&%E6%8F%90%E4%BA%A4=Submit+Query 不同的client，编码显示的形式不同，但实质都是：表单方式Get request时，是会显示参数的。所以中文或重要参数时，要使用post request。 ③如果直接在地址栏输入访问路径：http://localhost:8080/ServletDemo/servlet/SimpleTestDoPost（只实现了 DoPos t协议），则为[ Get ] method，此时仍访问失败，提示HTTP method GET is not supported by this URL 3、下面是实例源代码，也供参考： 只实现了 DoGet 协议： public class SimpleTestDoGet extends HttpServlet{\t// 处理客户端的 GET请求\t@Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException    {        response.setContentType(\"text/html; charset=utf-8\");                PrintWriter out = response.getWriter();        out.println(\"处理 HTTP GET 请求\");    }} 只实现了 DoPost协议： public class SimpleTestDoPost extends HttpServlet{\t// 处理客户端的 POST 请求\t@Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException    {        response.setContentType(\"text/html; charset=utf-8\");                PrintWriter out = response.getWriter();        out.println(\"处理 HTTP POST 请求\");    }} 通过service实现了 DoGet 和 DoPost 双协议： public class SimpleServiceDo4GetAndPost extends HttpServlet{\t@Override\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\t{//\t\tsuper.service(arg0, arg1);\t\tresponse.setContentType(\"text/html; charset=utf-8\");                PrintWriter out = response.getWriter();        out.println(\"处理所有的 HTTP 请求\");  // 向客户端输出消息。。。\t}} request.html: <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><title>Post Test<\/title><\/head><body>\t<!-- 使用<form>表单，通过post 方法访问 HelloWorldServlet -->\t<!-- 要访问classes/../HelloWorldServlet.class 应该按照web.xml中“<servlet-mapping><url-pattern>”的value,即 .value -->\t<form action=\"./servlet/HelloWorld\" method=\"post\">\t\t<!-- 产生name请求参数 -->\t\tHelloWorldServlet :<p/>\t\t<input type=\"text\" name=\"name\" />\t\t<p/>\t\t<input type=\"submit\" name=\"提交\" />\t<\/form>\t<form action=\"./servlet/SimpleTestDoPost\" method=\"post\">\t\t<!-- 产生name请求参数 -->\t\tSimpleTestDoPost :<p/>\t\t<input type=\"text\" name=\"name\" />\t\t<p/>\t\t<input type=\"submit\" name=\"提交\" />\t<\/form>\t<form action=\"./servlet/SimpleServiceDo4GetAndPost\" method=\"post\">\t\t<!-- 产生name请求参数 -->\t\tSimpleServiceDo4GetAndPost :<p/>\t\t<input type=\"text\" name=\"name\" />\t\t<p/>\t\t<input type=\"submit\" name=\"提交\" />\t<\/form>\t<form action=\"./servlet/SimpleServiceDo4GetAndPost\" method=\"get\">\t\t<!-- 产生name请求参数 -->\t\tSimpleServiceDo4GetAndPost :<p/>\t\t<input type=\"text\" name=\"name\" />\t\t<p/>\t\t<input type=\"submit\" name=\"提交\" />\t<\/form><\/body><\/html> action的value在web.xml中的servlet配置： <?xml version=\"1.0\" encoding=\"UTF-8\"?><web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">  <display-name>ServletDemo<\/display-name>  <welcome-file-list>    <welcome-file>index.html<\/welcome-file>    <welcome-file>index.htm<\/welcome-file>    <welcome-file>index.jsp<\/welcome-file>    <welcome-file>default.html<\/welcome-file>    <welcome-file>default.htm<\/welcome-file>    <welcome-file>default.jsp<\/welcome-file>  <\/welcome-file-list>    <servlet>      <servlet-name>SimpleServiceDo4GetAndPost<\/servlet-name>      <!-- servlet-class这个是最重要的，package.*.class -->      <servlet-class>com.demo.servlet.test.SimpleServiceDo4GetAndPost<\/servlet-class>  <\/servlet>  <servlet-mapping>      <servlet-name>SimpleServiceDo4GetAndPost<\/servlet-name>      <!-- 说明：url-pattern匹配路径可以自定义，不是一定要按照包名、类名来的 -->      <url-pattern>/servlet/SimpleServiceDo4GetAndPost<\/url-pattern>  <\/servlet-mapping>  <\/web-app>   4、其他思考 初次研究httpservlet，有很多不懂的，关于【Get & Post区别】，有不足之处请指正。","title":"Http Get & Post总结"},{"content":"记录下VS2012编译google V8的过程。开始没有弄对，还费了点时间。 环境： windows8 vs2012 TortoiseSVN 目标：x64 的 v8 lib 1. 还是使用TortoiseSVN吧 (Git 我也就是乌龟水准，一看到google的Git和SVN命令混在一起，退缩了) 从不同的源，把代码sync下来， 在checkout中输入URL of repository 如下， 会自动映射到相应的目录 http://v8.googlecode.com/svn/trunk/     v8 http://gyp.googlecode.com/svn/trunk     gyp http://src.chromium.org/svn/trunk/tools/third_party/python_26  python_26 http://src.chromium.org/svn/trunk/deps/third_party/cygwin       cygwin 如果期间需要输入帐户密码的话，去http://code.google.com/ 注册一个，密码在右上角, Profile-->Settings-->GoogleCode.com Password 2. 调整code目录结构，因为编译过程中有相对路径的依赖， v8文件夹的名字可以随意改，作为根目录， 但是其它的可别动。 v8     build         gyp     third_party         cygwin         python_26 3. 写一个devenv.bat, 设置PATH， 启动cygwin shell， 必需是cygwin shell， 编译过程中的某些脚本依赖于其中的命令 set PATH=third_party\\python_26;%PATH% set ROOT=/cygdrive/p/GitDev/v8 chdir third_party\\cygwin\\bin bash --login -i ROOT变量是非必要的，为方便 4.启动devenv.bat   cd $ROOT python build/gyp_v8 -Dtarget_arch=x64 如果编译x86, target_arch设置为x86即可 会在build目录下产生all.sln. 因为我电脑上只安装了VS2012， 所以产生的sln是vs2012格式的 (这个可能依赖于环境变量的VC值， 猜测）。 关闭console 5. 打开all.sln， 把编译目标修改为x64.  开始编译吧。小会就好了，代码量不那么庞大, 15个工程。 6. 在vs中设置启动项目为 sample/shell， 运行shell print('hell, world!'); shell正常工作，结束。 默认生成的是 static lib，共4个 preparser_lib.lib v8_base.lib v8_nosnapshot.lib v8_snapshot.lib v8_base.lib 体积很大， debug有80M，release有300M。 大概是各种目标体系和优化的组合，静态链接嘛，链接后exe不会那么巨大。 如果想要动态库， 除了修改几个lib的工程属性外，还要加上预定义宏 BUILDING_V8_SHARED。 这个我没有试过。 粗略调试看了下代码，里面还有些宏辅助调试，可以输出更多的信息，以后看明白了再记录吧。 ","title":"V8 javascript engine: 用vs2012编译"},{"content":"作者:zhanhailiang 日期:2012-12-29 前段时间同事在群里对jQuery里的.data()方法大发牢骚： XXX(NNNNNNN) 15:11:34 <a id=\"a\" data-xxx=\"00123\" />alert($('#a').data('xxx'));//123data方法不靠谱XXX(NNNNNNN) 15:13:17 老老实实用attr('data-xxx')吧 细研究了下jQuery文档对.data()方法的描述： As of jQuery 1.4.3 HTML 5 data- attributes will be automatically pulled in to jQuery's data object. The treatment of attributes with embedded dashes was changed in jQuery 1.6 to conform to the W3C HTML5specification. 针对如下示便： <div data-role=\"page\" data-last-value=\"43\" data-hidden=\"true\" data-options='{\"name\":\"John\"}'><\/div> $(\"div\").data(\"role\") === \"page\";$(\"div\").data(\"lastValue\") === 43;$(\"div\").data(\"hidden\") === true;$(\"div\").data(\"options\").name === \"John\"; 即当使用.data()获取值时，jQuery会首先尝试将获取的字符串值转化成JS类型，包括布尔值，null，数字，对象，数组： 若值是”true|false”，则返回相应的布尔值； 若值是”null”，则返回null； 若值是纯数字构成的字符串（+data + ”” === data），则返回相应的数字（+data）； 若值是由(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$，比如”{key:value}“或[1,2,3]，则尝试使用jQuery.parseJSON解析之； 否则返回字符串值 当然文档里也特意说明了——如果就是想获取字符串值而不想获得自动转换的值，可以使用.attr(“data-”+key)来获取相应的值： To retrieve the value's attribute as a string without any attempt to convert it, use the attr() method. 如下为jQuery源码 function dataAttr( elem, key, data ) {    // If nothing was found internally, try to fetch any    // data from the HTML5 data-* attribute    if ( data === undefined && elem.nodeType === 1 ) {         // rmultiDash = /([A-Z])/g        var name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();         data = elem.getAttribute( name );         if ( typeof data === \"string\" ) {            try {        /*.data(key)方法尝试将获取的值转化成JS类型，包括布尔值，null，数字，对象，数组*/                data = data === \"true\" ? true :                 data === \"false\" ? false :                data === \"null\" ? null :                // Only convert to a number if it doesn't change the string                +data + \"\" === data ? +data :                /*rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,*/                rbrace.test( data ) ? jQuery.parseJSON( data ) :                    data;            } catch( e ) {}             // Make sure we set the data so it isn't changed later            jQuery.data( elem, key, data );         } else {            data = undefined;        }    }     return data;}","title":"【jQuery】$.data()方法的注意点"},{"content":"毕业设计要用Flex做一个地图模块，使用ArcGIS API For Flex。今天首先做一个地图显示和切换，首先看运行效果截图： 主要就是DropdownList控件的使用，以及如何在Flex中使用ArcGIS的控件来显示地图。下面贴上代码： <?xml version=\"1.0\" encoding=\"utf-8\"?><s:Application xmlns:fx=\"http://ns.adobe.com/mxml/2009\"\t\t\t   xmlns:s=\"library://ns.adobe.com/flex/spark\"\t\t\t   xmlns:mx=\"library://ns.adobe.com/flex/mx\"\t\t\t   xmlns:esri=\"http://www.esri.com/2008/ags\"\t\t\t   minWidth=\"1000\" minHeight=\"600\">\t\t<fx:Script>\t\t<![CDATA[\t\t\timport mx.collections.ArrayList;\t\t\timport mx.collections.XMLListCollection;\t\t\timport mx.controls.Alert;\t\t\timport mx.events.IndexChangedEvent;\t\t\t\t\t\timport spark.events.IndexChangeEvent;\t\t\t\t\t\tprivate var showMapName:String;\t\t\t\t\t\tprivate function mapSelectorChangeHandler(event:IndexChangeEvent):void\t\t\t{\t\t\t\tshowMapName=\"http://service:8399/arcgis/rest/services/\"+mapSelector.selectedItem.value+\"/MapServer/\"//\t\t\t\tAlert.show(showMapName);\t\t\t\tmapServiceLayer.url=showMapName;\t\t\t}\t\t]]>\t<\/fx:Script>\t\t\t\t<fx:Declarations>\t\t<!-- 将非可视元素（例如服务、值对象）放在此处 -->\t\t<s:XMLListCollection id=\"mapNames\">\t\t\t<fx:XMLList xmlns=\"\">\t\t\t\t<map>\t\t\t\t\t<name>856农场<\/name>\t\t\t\t\t<value>856<\/value>\t\t\t\t<\/map>\t\t\t\t<map>\t\t\t\t\t<name>双峰农场<\/name>\t\t\t\t\t<value>ShuangFeng<\/value>\t\t\t\t<\/map>\t\t\t<\/fx:XMLList>\t\t<\/s:XMLListCollection>\t<\/fx:Declarations>\t<esri:Map id=\"mapView\" x=\"144\" y=\"41\" width=\"800\" height=\"550\">\t\t<esri:ArcGISDynamicMapServiceLayer id=\"mapServiceLayer\" />\t<\/esri:Map>\t<s:DropDownList id=\"mapSelector\" left=\"5\" top=\"5\" height=\"20\" fontSize=\"13\" fontWeight=\"normal\"\t\t\t\t\tdataProvider=\"{mapNames}\" labelField=\"name\" change=\"mapSelectorChangeHandler(event)\" prompt=\"地图切换\">\t<\/s:DropDownList><\/s:Application> 欢迎交流~~","title":"ArcGis for Flex---Flex4.0之使用DropdownList控件来切换GIS地图map"},{"content":"最近在做后台的导航条的时候，有一个问题是菜单项很多，于是需要做一个层级（树形） 菜单，本来是打算用JS来实现，后来想了想还是去用ＣＳＳ来实现，这样子对于浏览器的 支持会大一些，而且不会出现那种闪屏现象，好了废话不说，上代码 <style type=\"text/css\">.menu { display:block; font-family: arial, sans-serif; width:100%; position:fixed; height:auto; background: #3B3B3F;z-index: 5;padding-left: 80px;font-weight: bold;}.menu ul { padding:0; margin:0; list-style-type: none;}.menu ul li { float:left; width:131px; background: #3B3B3F;}.menu ul li.end { height:35px; float:right; width:10px; background: #3B3B3F;}.menu ul li a, .menu ul li a:visited {display:block; text-align:center; text-decoration:none; width:105px; height:35px; color:#2DC5F5; line-height:34px; font-size:14px;background: #3B3B3F;}.menu ul li.first a, .menu ul li.first a:visited {display:block; text-align:center; text-decoration:none; width:110px; height:35px; color:#2DC5F5; line-height:34px; font-size:14px;background: #3B3B3F;}.menu ul li ul {display: none;}.menu ul li:hover .menu ul li a {color:#fff;  background:  #3B3B3F; }.menu ul li:hover.first a {color:#fff;  background:  #3B3B3F; }.menu ul li:hover ul {display:block; position:absolute;left:80;top:35px; width:805px;}.menu ul li:hover ul li a { float:left;display:block; background:#3B3B3F; }.menu ul li:hover ul li a:hover {background:#3B3B3F; color:#fff;}<\/style><div class=\"menu\">  <ul>    <li class=\"first\"><a href=\"#\">网站图标<\/a><\/li>    <li><a class=\"hide\" href=\"#\">一级管理<\/a>      <ul>        <li><a href=\"#\">二级管理<\/a><\/li>            <li><a href=\"#\">二级管理<\/a><\/li>          <\/ul>    <\/li>    <li><a class=\"hide\" href=\"#\">一级管理<\/a>      <ul class=\"right_side\">            <li><a href=\"#\">二级管理<\/a><\/li>            <li><a href=\"#\">二级管理<\/a><\/li>               <li><a href=\"#\">二级管理<\/a><\/li>       <\/ul>    <\/li>    <li><a class=\"hide\" href=\"#\">一级管理<\/a>      <ul>        <li><a href=\"/admin/analysis\">二级管理<\/a><\/li>        <li><a href=\"/admin/debug\">二级管理<\/a><\/li>          <li><a href=\"/admin/log\">二级管理<\/a><\/li>         <li><a href=\"/admin/cut\">二级管理<\/a><\/li>          <\/ul>    <\/li>  <\/ul><\/div> 下面是简单的效果图","title":"【Web Tricks 7】纯CSS实现的层级（树形）菜单"},{"content":"Javascript关键字： break do if switch typeof case else in this var catch false insetanceof throw void continue for null try with delete function return 更多请点击fe2base菜园子","title":"Javascript保留字"},{"content":"在网上搜了一整天的资料最后还是没有找到解决办法，网上那些方法，我可能没有弄对，反正就是照着弄了，就是弄不出来。第二天突然灵感一来，自己想了办法解决了。方法如下： import java.io.IOException; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; public class EncodingFilter implements Filter{ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { servletRequest.setCharacterEncoding(\"utf-8\"); servletResponse.setContentType(\"text/html;charset=UTF-8\"); filterChain.doFilter(servletRequest, servletResponse); } public void init(FilterConfig arg0) throws ServletException { System.setProperty(\"file.encoding\",\"utf-8\"); } public void destroy() { } } 注意标红的两句，把上面那个filter配置在xml里面： <filter> <filter-name>loggerfilter<\/filter-name> <filter-class>wu.sys.cores.EncodingFilter<\/filter-class> <\/filter> <filter-mapping> <filter-name>loggerfilter<\/filter-name> <url-pattern>/*<\/url-pattern> <\/filter-mapping> 如果还不能成功，可能是浏览器缓存，自己清空一下缓存。 如果还不能成功加我QQ552061800 一起探讨","title":"sitemesh 装饰html 乱码解决"},{"content":"功能描述： 系统UI，给人感觉非常好，体积小巧，速度快 该源码是适用用于应用系统后台模块的管理（可扩展至支持集中化的权限管理平台）， 0.支持N级菜单导航，菜单显示方式支持目前支持2种模式分别：菜单（无限级），横向（2级） 本系统大部分使用AJAX操作。大大提高了用户体验，操作起来相对要简单明了一些。 系统中用到的技术如下： ASP.NET 4.0 + c# + SQL2005 + jQuery+AJAX+JSON 同时支持多个数据库链接 1.动态切换皮肤，目前有两狂UI 蓝色，咖啡色 2.表单验证，文本框高亮起来 3.可以动态分配权限按钮，分配角色权限，目录结构，栏目的链接都可以修改。权限管理非常灵活， 4.可以隐藏左侧导航栏，打开左侧导航栏，默认是打开，table表格都自应大小的 5.动态创建数据表，删除用户表，点击数据 表 可以查询字段信息 6.可以直接执行sql脚本 7.兼容 IE6，7,8,9 /Firefox /Google Chrome 这些浏览器都测试过 8.批量删除,自定义复选框样式，可以全选/反选 9.角色分级，集团和分公司的关系 10.权限 横向就是业务部分，具体负责哪块业务，纵向是级别 11.动态报表设置,并且可以导出Excel 12.登陆日记，操作日记,异常日记 13.海量批量删除数据库，调用公共存储过程，参数，表明，主键 14.访问量统计（图表统计）：按日统计，按月统计，按年统计 15.数据库备份/还原 升级了UI，可以动态切换 第一张项目截图： 底层代码 登录页面，密码可以记住， 登陆后显示首页 表单验证，文本框高亮起来 在线体验地址 ： http://shecixiong.hk.558idc.com 用户：admin   密码：123 有时候有人无聊 人把所以数据给都删除掉，乱删除数据库，如果登陆有问题 联系我，我还原数据库下 感谢您选择 ASP.NET权限管理系统 这个产品。希望我们的努力能为您提供一个高效快速和强大的权限管理开发框架。 适用于中小型管理系统。","title":"ASP.NET权限管理框架"},{"content":"js获取浏览器高度和宽度值 网页可见区域宽： document.body.clientWidth 网页可见区域高： document.body.clientHeight 网页可见区域宽： document.body.offsetWidth (包括边线的宽) 网页可见区域高： document.body.offsetHeight (包括边线的高) 网页正文全文宽： document.body.scrollWidth 网页正文全文高： document.body.scrollHeight 网页被卷去的高： document.body.scrollTop 网页被卷去的左： document.body.scrollLeft 网页正文部分上： window.screenTop 网页正文部分左： window.screenLeft 屏幕分辨率的高： window.screen.height 屏幕分辨率的宽： window.screen.width 屏幕可用工作区高度： window.screen.availHeight 屏幕可用工作区宽度： window.screen.availWidth","title":"js获取浏览器高度和宽度值"},{"content":"    写完了一段js脚本，其中在/js/client/updateLogPage.js里面有对lhgcalendar.Js的引用，确认了这个日期控件所依赖的两个js文件<script type=\"text/javascript\" src=\"/js/lhgcore/lhgcore.min.js\"><\/script><script type=\"text/javascript\" src=\"/js/lhgcore/lhgcalendar.min.js\"><\/script>都在之后，很纳闷为何要报“ReferenceError: J is not defined”这个错误。     原来我还没有走出C++和java等高级语言的编译执行流程的思维定势。原来js文件是逐个文件加载并执行的，前面引入的文件并不管后面引入的文件。我的引入顺序是这样的： <head>\t\t\t<script type=\"text/javascript\" src=\"/js/jquery-1.7.2.min.js\"><\/script>\t\t\t<script type=\"text/javascript\" src=\"/js/client/updateLogPage.js\"><\/script>    \t                <script type=\"text/javascript\" src=\"/js/lhgcore/lhgcore.min.js\"><\/script>\t\t\t<script type=\"text/javascript\" src=\"/js/lhgcore/lhgcalendar.min.js\"><\/script>    \t                <script type=\"text/javascript\" src=\"/js/highcharts.js\"><\/script> <\/head>     我是在第二个文件里使用了第三个文件的方法： J(function(){       J('#startDate').calendar({ maxDate:'%y-%M-%d',minDate:'2011-01-01',btnBar:false });});     J(function(){    J('#endDate').calendar({ minDate:'#startTime',maxDate:'%y-%M-%d',btnBar:false  });});    程序加载了第二个文件后就开始执行这段脚本，J这个方法所在的js文件这个时候还没有加载进来，所以报错。学js就得用js的规则了。     另外，用这个lhg这个控件的时候，lhgcore必须在lhgcalendar之前引入。不然调用calendar方法会出错。","title":"对js文件编译执行顺序的认识"},{"content":"解决方法：在传递参数前将中文参数进行两次编码，jsp页面获取参数后对中文参数进行一次解码，中文参数就不会变为乱码了！ 参考例子： <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"     pageEncoding=\"UTF-8\"%> <%@ page import=\"java.net.*\" %> <% String str0=\"\"; String str1=\"\";       if(request.getParameter(\"param0\")!=null){         str0=request.getParameter(\"param0\");//直接获取中文参数        } try{      if(request.getParameter(\"param1\")!=null){        str1=URLDecoder.decode(request.getParameter(\"param1\"),\"utf-8\");//对中文参数进行解码       } }catch(Exception e){      e.printStackTrace();   } %> <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> <script type=\"text/javascript\"> var str=\"你好\"; function test0(){ window.location=\"Test.jsp?param0=\"+str;//直接传递中文参数 } function test1(){ window.location=\"Test.jsp?param1=\"+encodeURI(encodeURI(str));//对中文参数进行双层编码后再传递 } <\/script> <\/head> <body> <input value=<%=str0 %>> <input type=\"button\" value=\"乱码\" onclick=\"test0()\"><br> <input value=<%=str1 %>> <input type=\"button\" value=\"正常\" onclick=\"test1()\"> <\/body> <\/html>","title":"javascript通过url向jsp页面传递中文参数乱码解决方法"},{"content":"下载地址：http://code.google.com/p/freecms/    linkClass 在使用链接分类相关标签时，标签会封装linkClass供页面调用。 属性 说明 id id site 所属站点id name 分类名称 url 外部链接 isok 有效性:1有效 0无效 ordernum 顺序 type 类型：1下拉 2图片 3文字 pagemark 页面标识","title":"开源 免费 java CMS - FreeCMS-数据对象-linkClass"},{"content":"下载地址：http://code.google.com/p/freecms/   link 在使用链接相关标签时，标签会封装link供页面调用。 属性 说明 id id parid 所属分类id site 所属站点id name 链接名称 url 外部链接 isok 有效性:1有效 0无效 ordernum 顺序 type 类型：1下拉 2图片 3文字 pagemark 页面标识 img 如果是图片链接，存放图片地址","title":"开源 免费 java CMS - FreeCMS-数据对象-link"},{"content":"想把访客引到另一个页面?添加一个很炫的按钮是个很好的办法 !今天的文章提出了如何使用CSS3创建一个旋转,旋转,可变色按钮。 这是一个演示旋转的CSS3按钮。让我们先从HTML:   <div> <a class=\"button\">旋转按钮<\/a> <\/div>   和现在的CSS:   .button {   background:#aaa; color:#555; font-weight:bold; font-size:15px; padding:10px 15px; border:none; margin:50px; cursor:pointer;   -webkit-transition:-webkit-transform 1s,opacity 1s,background 1s,width 1s,height 1s,font-size 1s;   -o-transition-property:width,height,-o-transform,background,font-size,opacity,color; -o-transition-duration:1s,1s,1s,1s,1s,1s,1s;   -moz-transition-property:width, height, -moz-transform, background, font-size, opacity, color; -moz-transition-duration:1s,1s,1s,1s,1s,1s,1s;   transition-property:width,height,transform,background,font-size,opacity; transition-duration:1s,1s,1s,1s,1s,1s;   -webkit-border-radius:5px; border-radius:5px;   box-shadow:0 0 2px rgba(0,0,0,0.5);   text-shadow:0 0 5px rgba(255,255,255,0.5);   display:inline-block;    /*它是重要为按钮旋转*/ } 这里的关键代码转换属性,它可以定义通过宽度、高度、背景、颜色、透明度等。在这个例子中,属性是改变每一秒,根据过渡时间属性。   transition: opacity 2s ease-out, background 1s linear,  width 1s, height 1s, font-size 1s;   接下来,使用这段代码来触发纺丝效果通过盘旋元素;   .button:hover { -moz-transform: rotate(360deg); -webkit-transform: rotate(360deg); -o-transform: rotate(360deg); transform: rotate(360deg); background:#99A411; font-size:30px; color:#fff; }   转换元件旋转360度的按钮,一个完整的圆。其余的代码更改颜色和字体大小。   玩得高兴这一个。也许你可以使它有用的一些有趣的节日按钮。也许你甚至可以升级它旋转一个按钮,更改从一个到另一个图像。谁知道呢?可能性是无穷无尽的 原文 站长网www.software8.co/","title":"使用CSS3创建一个旋转可变色按钮"},{"content":"下载地址：http://code.google.com/p/freecms/   info 在信息页静态化时,系统会自动向模板文件传递currInfo对象，此对象存储当前信息。在使用信息相关标签时，标签会封装info供页面调用。 属性 说明 id id site 所属站点id channel 所属栏目id title 标题 shortTitle 短标题 titleColor 标题颜色 titleBlod 标题是否加粗 1是 0否 source 来源 author 作者 description 摘要 tags 标签 templet 信息模板文件 img 图片 url 外部链接 attchs 附件，多个之间用;分隔 addtime 添加时间 isTop 是否置顶 clickNum 点击量 addUser 添加用户id content 内容","title":"开源 免费 java CMS - FreeCMS-数据对象-info"},{"content":"  问：Axis2中到底能否传递复杂以及自定义对象？   答：肯定可以   上篇博客深入剖析Axis2中返回值为自定义对象以及复杂类型，比如：List<User>类型。   那这篇博客我们继续讲解，讲一下Axis2中参数为自定义对象，如User对象或List<User>参数。   首先说参数为User对象。   服务器端照常如旧。还是用最初的文档中方式搭建。其中有个方法如下：      public User getUserName(User u){           User user= new User();           user.setAge(u.getAge()+10);           user.setName( \"^\"+u.getName()+ \"^\");           user.setId(u.getId()+1);            return user;     }   那我们客户端如何传递过去呢？  当然我们还是使用Axiom方式。  因为在Axiom中，传递的参数必须为OMElement类型。所以呢。我们必须把我们自定义的对象转化成OMElement对象。  那如何转化呢？      //把user对象转化成相应的omElment对象     public static OMElement castElment(User u){             javax.xml.stream.XMLStreamReader reader = BeanUtil.getPullParser(u);             StreamWrapper parser = new StreamWrapper(reader);             StAXOMBuilder stAXOMBuilder =OMXMLBuilderFactory.createStAXOMBuilder(OMAbstractFactory. getOMFactory(), parser);             OMElement element = stAXOMBuilder.getDocumentElement();             return element;     }  那我们我们继续分析转换后的OMElement结果？  OMElement param=castElment(u);   //输出转换后的omElement对象  System. out.println(param);  结果如下：  <User><age>10<\/age><id>0<\/id><name>李四<\/name><\/User>  实际上传递的是一串xml  main方式如下：    public static void main(String[] args) throws Exception {           EndpointReference targetEPR = new EndpointReference(\"http://localhost:8080/testWSServerByAxis2/services/myService?wsdl\" );     try {                Options options = new Options();                options.setTo(targetEPR);                                 //加载目标服务器                ServiceClient sender = new ServiceClient();                sender.setOptions(options);                                OMFactory fac = OMAbstractFactory.getOMFactory();                OMNamespace omNs = fac.createOMNamespace(\"http://test.com\" , \"\" );                 //调用服务端的方法                OMElement method = fac.createOMElement(\"getUserName\" , omNs);                 //给方法赋值参数值,参数值只能是omNode形式。所以需要把自定义对象转成omNode对象                 //调用把自定义对象转化成omNode对象                User u= new User();                u.setId(0);                u.setAge(10);                u.setName( \"李四\");                OMElement param= castElment(u);                 //输出转换后的omElement对象                 System.out.println(param);                method.addChild(param);                 //返回OMElement对象                OMElement result = sender.sendReceive(method);                 System.out.println(\"clientResult=\"+result);                 Iterator iterator=result.getChildElements();                 while(iterator.hasNext()){                      System.out.println(\"ok\");                     OMNode omNode = (OMNode) iterator.next();                      if(omNode.getType()==omNode. ELEMENT_NODE){                           OMElement omElement = (OMElement) omNode;                           System.out.println(\"***=\"+omElement.getLocalName());                            if (omElement.getLocalName().toLowerCase().equals(\"return\" )) {                                User u1 = (User) BeanUtil.processObject(omElement, User. class, null, true, new DefaultObjectSupplier());                                 System.out.println(u1.getName());                           }                     }                }           } catch (Exception e) {                e.printStackTrace();           }     }   还是按照上篇博客的返回值，得到的结果如下：     clientResult=<ns:getUserNameResponse xmlns:ns=\"http://test.com\"><ns:return xmlns:ax21=\"http://entity.com/xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"ax21:User\"><ax21:age>20<\/ax21:age><ax21:id>1<\/ax21:id><ax21:name>^李四^<\/ax21:name><\/ns:return><\/ns:getUserNameResponse>   其次，若传递List<User>对象呢？   大家想想，List，如何传递呢？转化成消息又是在怎么样的呢？   因为传递参数必须为OmElement，那我们看一下List如何转化的OmElement对象呢？          //把List对象转化成相应的omElment对象     public static OMElement castElment(List<User> userList){            // 构建 OMFactory 工厂            OMFactory factory = OMAbstractFactory. getOMFactory();           OMNamespace omNamespace = factory.createOMNamespace(\"http://test.com\" , \"\" );           OMElement omElement = BeanUtil. getOMElement(new QName(\"root\"), userList.toArray(), new QName(\"user\"), false, null);            return omElement;         }  那转换后的输出结果是：    <root><user><age>10<\/age><id>0<\/id><name>李四0<\/name><\/user><user><age>11<\/age><id>1<\/id><name>李四1<\/name><\/user><user><age>12<\/age><id>2<\/id><name>李四2<\/name><\/user><\/root>  注意观察输出的OMElement。其中是由use标签包含的。这样下次获得这样的List返回值的OMElement，则只要把user中的取出然后封装成对象即可。   另外还需要注意：BeanUtil. getOMElement方法中的第一个参数，不能为null，输出的是在对象外有一层标签。第三个参数是封装对象的标签的命名。        这样话Axis2基本上可以正常投入使用中。虽然Axis2中使用axiom方式可以处理复杂自定义类型，但是说实话还是需要进行转化。但是在CXF中，其实没有怎么麻烦。直接传递即可。    但是正所谓人无完人，Axis2中接口参数是什么，发布服务后生成的wsdl上的element的命名则与接口参数命名是一样的。但是在CXF中，却不同。CXF若不用注解的方式改命名，则默认情况则是arg0，arg1.    因此，对于任何事物，或者对于我们自己也好，都应该扬长避短。(*^__^*) ","title":"深入剖析Axis2中参数为复杂自定义类型值【步步逼近实践篇】"},{"content":"Node.js是什么？ Node.js是一个基于googlev8+javascript的服务端编程框架。但是Node.js又不是js应用，应该说是js的运行平台。它采用事件驱动、异步编程，为网络服务而设。  Node.js的性能不错，按照创始人RyanDahl的说法，性能是Node.js考虑的重要因素，选择c++和v8而不是ruby或者其他的虚拟机也是基于性能的目的。Node.js在设计上也是比较大胆，它以单进程、单线程模式运行，事件驱动机制是Node.js通过内部单线程高效率地维护事件循环队列来实现的，没有多线程的资源占用和上下文切换，这意味着面对大规模的http请求，Node.js凭借事件驱动搞定一切。 要使用Node.js,首先需要进行安装。 安装Node.js 安装环境： ubuntu11.10 32bit  node-v0.8.16.tar.gz 安装步骤：  首先确保系统安装来python,gcc,g++,如果没有则安装：  $ sudo apt-get install python $ sudo apt-get installbuild-essential $ sudo apt-get install gcc $ sudo apt-get install g++ 从nodeJS官网http://nodejs.org/下载最新源代码包：node-v0.8.16.tar.gz 解压： $ tar -zxf node-v0.8.16.tar.gz$ cd node-v0.8.16 默认安装： $ ./configure $ make $ sudo make install 选择目录方式安装：  $ ./configure –prefix=/usr/node $ make -j 5 #5=CPU核数+1 $ sudo make install 安装结束，可以用下面的命令检查安装的版本：  $ node –version v0.8.16  “Hello World” 好了，“废话”不多说了，马上开始我们第一个Node.js应用：“HelloWorld”。 打开你最喜欢的编辑器，创建一个helloworld.js文件。我们要做就是向STDOUT输出“HelloWorld”，如下是实现该功能的代码： console.log(\"Hello World\"); 保存该文件，并通过Node.js来执行： node helloworld.js 正常的话，就会在终端输出HelloWorld 。 好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。 一个基础的HTTP服务器 让我们先从服务器模块开始。在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码： var http = require(\"http\");http.createServer(function(request, response) {  response.writeHead(200, {\"Content-Type\": \"text/plain\"});  response.write(\"Hello World\");  response.end();}).listen(8888); 搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本： node server.js 接下来，打开浏览器访问http://localhost:8888/，你会看到一个写着“HelloWorld”的网页。 到这里，你已经入门了，如果你对Node.js很感兴趣，可以自己找资料深入研究","title":"Node.js 入门"},{"content":"圆角应用的比较广泛，比如说一些说明的div，或者模块的div，圆角的button等。 公司的页面一般是用图片实现的，坑爹的是这次的图片整个边框的上面或整个都是一个图片，我现在要调整大小受到图片的限制了！我想到肯定可以用css直接实现圆角，这样也省略使用图片的效率问题了。 网上一搜，果然有方案。基于css3实现的我就不说了。在天朝想用css3还是不太现实，何况客户大部分都是ie6,8呢。 直接看截图： 源码如下，直接保存另存在html文件即何看到效果： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>最原始的圆角框<\/title><style type=\"text/css\">/****************************************纯CSS圆角框冰极峰原创更多内容请访问：http://binyong.cnblogs.com/*****************************************/*{margin:0;padding:0;font-size:12px;}.wrapper{width:80%;margin:0 auto;}/*通用样式--容器宽度值*/.sharp{width:30%;margin:20px auto 0;float:left;margin-right:2%;}.sharp .content div{padding:10px;text-indent:2em;}.content{height:180px;}h3{height:29px;line-height:29px;font-size:12px;text-indent:10px;}a:link,a:visited{color:#999;font-weight:bold; text-decoration:none;}a:hover{text-decoration:none; border-bottom:1px orange solid;color:orange;}/*上圆角框通用设置样式，如果要运用多个不同颜色，以下6句不用重新变化--------------------------------*/.b1,.b2,.b3,.b4,.b5,.b6,.b7,.b8{height:1px; font-size:1px; overflow:hidden; display:block;}.b1,.b8{margin:0 5px;}.b2,.b7{margin:0 3px;border-right:2px solid; border-left:2px solid;}.b3,.b6{margin:0 2px;border-right:1px solid; border-left:1px solid;}.b4,.b5{margin:0 1px;border-right:1px solid; border-left:1px solid; height:2px;}.content {border-right:1px solid;border-left:1px solid;overflow:hidden;}/*颜色方案一,蓝色边框----------------------------------------*//*下面第一、二句决定边框颜色，第三句决定背景颜色*//*边框色*/.color1 .b2,.color1 .b3,.color1 .b4,.color1 .b5,.color1 .b6,.color1 .b7,.color1 .content{border-color:#96C2F1;}.color1 .b1,.color1 .b8{background:#96C2F1;}/*背景色*/.color1 .b2,.color1 .b3,.color1 .b4,.color1 .b5,.color1 .b6,.color1 .b7,.color1 .content{background:#EFF7FF;}/*颜色方案二,绿色边框----------------------------------------*//*下面第一、二句决定边框颜色，第三句决定背景颜色*//*边框色*/.color2 .b2,.color2 .b3,.color2 .b4,.color2 .b5,.color2 .b6,.color2 .b7,.color2 .content{border-color:#9BDF70;}.color2 .b1,.color2 .b8{background:#9BDF70;}/*背景色*/.color2 .b2,.color2 .b3,.color2 .b4,.color2 .b5,.color2 .b6,.color2 .b7,.color2 .content{background:#F0FBEB;}/*颜色方案三,绿色边框----------------------------------------*//*下面第一、二句决定边框颜色，第三句决定背景颜色*//*边框色*/.color3 .b2,.color3 .b3,.color3 .b4,.color3 .b5,.color3 .b6,.color3 .b7,.color3 .content{border-color:#BBE1F1;}.color3 .b1,.color3 .b8{background:#BBE1F1;}/*背景色*/.color3 .b2,.color3 .b3,.color3 .b4,.color3 .b5,.color3 .b6,.color3 .b7,.color3 .content{background:#EEFAFF;}/*颜色方案四,绿色边框----------------------------------------*//*下面第一、二句决定边框颜色，第三句决定背景颜色*//*边框色*/.color4 .b2,.color4 .b3,.color4 .b4,.color4 .b5,.color4 .b6,.color4 .b7,.color4 .content{border-color:#E3E197;}.color4 .b1,.color4 .b8{background:#E3E197;}/*背景色*/.color4 .b2,.color4 .b3,.color4 .b4,.color4 .b5,.color4 .b6,.color4 .b7,.color4 .content{background:#FFFFDD;}/*颜色方案五,粉色边框----------------------------------------*//*下面第一、二句决定边框颜色，第三句决定背景颜色*//*边框色*/.color5 .b2,.color5 .b3,.color5 .b4,.color5 .b5,.color5 .b6,.color5 .b7,.color5 .content{border-color:#F8B3D0;}.color5 .b1,.color5 .b8{background:#F8B3D0;}/*背景色*/.color5 .b2,.color5 .b3,.color5 .b4,.color5 .b5,.color5 .b6,.color5 .b7,.color5 .content{background:#FFF5FA;}/*颜色方案六,黄色边框----------------------------------------*//*下面第一、二句决定边框颜色，第三句决定背景颜色*//*边框色*/.color6 .b2,.color6 .b3,.color6 .b4,.color6 .b5,.color6 .b6,.color6 .b7,.color6 .content{border-color:#FFCC00;}.color6 .b1,.color6 .b8{background:#FFCC00;}/*背景色*/.color6 .b2,.color6 .b3,.color6 .b4,.color6 .b5,.color6 .b6,.color6 .b7,.color6 .content{background:#FFFFF7;}<\/style><\/head><body><div class=\"wrapper\">    <!--风格一，只需要变换一个CLASS就可以换一种颜色-->    <div class=\"sharp color1\">        <b class=\"b1\"><\/b><b class=\"b2\"><\/b><b class=\"b3\"><\/b><b class=\"b4\"><\/b>         <div class=\"content\">                <h3>纯css圆角框换肤方案一<\/h3>              <div>这是最基本的圆角框，无图片，四个圆角全部采用标签绘制，兼容所有浏览器，无HACK，使用时只需添加一个class = \" color1 \"即可，下面的所有颜色方案你可以灵活自定义。              \t<br/><br/><br/><br/><br/><p style=\"text-align:right;\"><a href=\"http://binyong.cnblogs.com\" title=\"更多内容请访问冰极峰博客\">冰极峰博客<\/a><\/p>              <\/div>        <\/div>        <b class=\"b5\"><\/b><b class=\"b6\"><\/b><b class=\"b7\"><\/b><b class=\"b8\"><\/b>        <\/div>    <!--风格二，只需要变换一个CLASS就可以换一种颜色-->    <div class=\"sharp color2\">        <b class=\"b1\"><\/b><b class=\"b2\"><\/b><b class=\"b3\"><\/b><b class=\"b4\"><\/b>         <div class=\"content\">                <h3>纯css圆角框换肤方案二<\/h3>              <div>class = \" color2 \"              \t<br/><br/><br/><br/><br/><br/><br/><br/><p style=\"text-align:right;\"><a href=\"http://binyong.cnblogs.com\" title=\"更多内容请访问冰极峰博客\">冰极峰博客<\/a><\/p>              <\/div>        <\/div>        <b class=\"b5\"><\/b><b class=\"b6\"><\/b><b class=\"b7\"><\/b><b class=\"b8\"><\/b>        <\/div>    <!--风格三，只需要变换一个CLASS就可以换一种颜色-->    <div class=\"sharp color3\">        <b class=\"b1\"><\/b><b class=\"b2\"><\/b><b class=\"b3\"><\/b><b class=\"b4\"><\/b>         <div class=\"content\">                <h3>纯css圆角框换肤方案三<\/h3>              <div>class = \" color3 \"              \t<br/><br/><br/><br/><br/><br/><br/><br/><p style=\"text-align:right;\"><a href=\"http://binyong.cnblogs.com\" title=\"更多内容请访问冰极峰博客\">冰极峰博客<\/a><\/p>              <\/div>        <\/div>        <b class=\"b5\"><\/b><b class=\"b6\"><\/b><b class=\"b7\"><\/b><b class=\"b8\"><\/b>        <\/div>        <!--风格四，只需要变换一个CLASS就可以换一种颜色-->    <div class=\"sharp color4\">        <b class=\"b1\"><\/b><b class=\"b2\"><\/b><b class=\"b3\"><\/b><b class=\"b4\"><\/b>         <div class=\"content\">              <h3>纯css圆角框换肤方案四<\/h3>            <div>class = \" color4 \"              \t<br/><br/><br/><br/><br/><br/><br/><br/><p style=\"text-align:right;\"><a href=\"http://binyong.cnblogs.com\" title=\"更多内容请访问冰极峰博客\">冰极峰博客<\/a><\/p>            <\/div>        <\/div>        <b class=\"b5\"><\/b><b class=\"b6\"><\/b><b class=\"b7\"><\/b><b class=\"b8\"><\/b>        <\/div>        <!--风格四，只需要变换一个CLASS就可以换一种颜色-->    <div class=\"sharp color5\">        <b class=\"b1\"><\/b><b class=\"b2\"><\/b><b class=\"b3\"><\/b><b class=\"b4\"><\/b>         <div class=\"content\">              <h3>纯css圆角框换肤方案五<\/h3>            <div>class = \" color5 \"              \t<br/><br/><br/><br/><br/><br/><br/><br/><p style=\"text-align:right;\"><a href=\"http://binyong.cnblogs.com\" title=\"更多内容请访问冰极峰博客\">冰极峰博客<\/a><\/p>            <\/div>        <\/div>        <b class=\"b5\"><\/b><b class=\"b6\"><\/b><b class=\"b7\"><\/b><b class=\"b8\"><\/b>        <\/div>        <!--风格四，只需要变换一个CLASS就可以换一种颜色-->    <div class=\"sharp color6\">        <b class=\"b1\"><\/b><b class=\"b2\"><\/b><b class=\"b3\"><\/b><b class=\"b4\"><\/b>         <div class=\"content\">              <h3>纯css圆角框换肤方案六<\/h3>            <div>class = \" color6 \"              \t<br/><br/><br/><br/><br/><br/><br/><br/><p style=\"text-align:right;\"><a href=\"http://binyong.cnblogs.com\" title=\"更多内容请访问冰极峰博客\">冰极峰博客<\/a><\/p>            <\/div>        <\/div>        <b class=\"b5\"><\/b><b class=\"b6\"><\/b><b class=\"b7\"><\/b><b class=\"b8\"><\/b>        <\/div><\/div><\/body><\/html> 直接另存css样式，在需要使用的页面导入即何。over~","title":"纯CSS样式实现圆角边框"},{"content":"Vm中一个超链接URL需要拼接中文作为Get请求的参数。如果直接拼接，传到后台Action的参数对象中后取出会是乱码，需要编码后再拼接到URL上。  解决方法是在Action中添加一个成员变量，保存编码后的中文参数。在vm页面渲染时取出这个变量值，再拼接超链接。   在这里碰到的问题是：调用java.net.URLEncoder的encode()方法时，如果没有显示指定字符集参数，那么URLEncoder会使用默认字符集。这个默认字符集在Eclipse里跑main()方法和在Tomcat里跑Web应用，得到的结果不一样，所以影响了编码的结果。      /**     * Translates a string into <code>x-www-form-urlencoded<\/code>     * format. This method uses the platform'sdefault encoding     * as the encoding scheme to obtain thebytes for unsafe characters.     *     * @param  s   <code>String<\/code> to betranslated.     * @deprecated The resulting string mayvary depending on the platform's     *             default encoding. Instead, use theencode(String,String)     *             method to specify the encoding.     * @return  the translated <code>String<\/code>.     */    @Deprecated    public static String encode(String s) {         String str = null;         try {        str = encode(s, dfltEncName);        } catch(UnsupportedEncodingException e) {             // The system should always have theplatform default        }         return str;}   方法的注释中也说明了不建议使用的原因是，这个encode(String)方法依赖于平台字符集。","title":"HTML超链接中文乱码"},{"content":"CSS教程文本属性: 字体间距 用法: word-spacing: 1cm; word-spacing: 10pt; word-spacing: 10px; word-spacing: none; 定义: 使用这个属性我们可以定义或者设置单词之间的距离 word-spacing属性可以设置以下的值。 a)cm:以厘米为单位设置属性值，例如：1cm等... b)px:以像素为单位设置属性值，例如：1px或者10px等... c)pt:以点为单位设置属性值，例如：1pt或者2pt等... d)norm:以初始值/默认值为单词间距。 示例1: <font style=\"word-spacing: 1cm;\"> 试验字间距 <\/font> 结果: 自己测试 示例2: <div style=\"word-spacing: 10px;\"> 试验字间距 <\/div> 结果: 自己测试 示例3: <h5 style=\"word-spacing: 10pt;\"> 试验字间距 <\/h5> 结果: 自己测试 示例4: <font style=\"word-spacing: none;\"> 试验字间距 <\/font> 结果: 自己测试 站长网:http://www.software8.co/wzjs/cssdiv/787.html","title":"CSS教程：如何设置单词字体间距"},{"content":"下载地址：http://code.google.com/p/freecms/     首页静态化 在首页静态化时,系统会使用站点所选模板中的“首页.html”文件生成站点首页并传递以下参数。 参数 说明 contextPath 系统根路径 site 当前站点对象，类型为数据对象site","title":"开源 免费 java CMS - FreeCMS-首页静态化参数"},{"content":"下载地址：http://code.google.com/p/freecms/     信息页静态化参数 在信息页静态化时,系统会使用此信息指定的模板文件(如未指定，默认为站点所选模板中的“信息页面.html”文件)生成信息页并传递以下参数。 参数 说明 contextPath 系统根路径 site 当前站点对象，类型为数据对象site currChannel 当前栏目对象，类型为数据对象channel currInfo 当前信息对象，类型为数据对象info","title":"开源 免费 java CMS - FreeCMS-信息页静态化参数"},{"content":"下载地址：http://code.google.com/p/freecms/   栏目页静态化参数 在栏目页静态化时,系统会使用此栏目指定的模板文件(如未指定，默认为站点所选模板中的“栏目页面.html”文件)生成栏目页并传递以下参数。 参数 说明 contextPath 系统根路径 site 当前站点对象，类型为数据对象site currChannel 当前栏目对象，类型为数据对象channel page 当前页数","title":"开源 免费 java CMS - FreeCMS-栏目页静态化参数"},{"content":"下载地址：http://code.google.com/p/freecms/    channel 根据参数提取栏目对象。 参数 说明 id 栏目id siteid 栏目所属站点id pagemark 栏目页面标识 返回值 说明 channel 栏目对象，类型为数据对象channel 示例1 根据栏目id提取栏目。 <@channel id=\"d8aa15d1-710c-4931-8c3b-b0b2d3db3d56\" ;channel> ${channel.name} <\/@channel> 示例2 根据站点id和栏目页面标识提取栏目。 <@channel siteid=\"${site.id}\" pagemark=\"bug\" ;channel> ${channel.name} <\/@channel>","title":"开源 免费 java CMS - FreeCMS-标签 channel"},{"content":"下载地址：http://code.google.com/p/freecms/     channelList 根据参数提取栏目对象列表。 参数 说明 id 栏目id siteid 栏目所属站点id parid 空字符:查询所有栏目; \"par\":查询一级栏目; \"parid\":查询此id下栏目; 返回值 说明 channel 栏目对象，类型为数据对象channel 示例1 根据站点id提取所有栏目。 <@channelList siteid=\"${site.id}\" parid=\"\" ;channel>     <H1 >${channel.name}<\/H1> <\/@channelList> 示例2 根据站点id提取所有一级栏目。 <@channelList siteid=\"${site.id}\" parid=\"par\" ;channel>     <H1 >${channel.name}<\/H1> <\/@channelList> 示例3 根据站点id和parid提取指定栏目的下级栏目。 <@channelList siteid=\"${site.id}\" parid=\"c60bebab-cf84-4ba9-8c79-3dff5c2dc427\" ;channel>     <H1 >${channel.name}<\/H1> <\/@channelList> 示例4 根据站点id和parid递归提取栏目。 <@channelList siteid=\"${site.id}\" parid=\"par\" ;channel>     <H1 >${channel.name}<\/H1>     <UL>     <@channelList siteid=\"${site.id}\" parid=\"${channel.id}\" ;sonChannel>         <LI><A href=\"${sonChannel.pageurl}\">${sonChannel.name}<\/A>     <\/@channelList>     <\/UL> <\/@channelList>  ","title":"开源 免费 java CMS - FreeCMS-标签 channelList"},{"content":"偶尔发现 js 中有个延时加载的标签 defer,还在疑惑这么好用的东西为什么没有流行起来。 测试了几个浏览器。在ie7，8，9和360安全济览器下可以。这就是为什么不选择defer的原因了。 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>    <title><\/title>\t<script type=\"text/javascript\" defer=\"defer\">\t   alert(document.getElementById(\"myinput\").value) ;\t \t<\/script><\/head>\t<input type=\"hidden\" name=\"myinput\" id=\"myinput\" value=\"test\"/><body><\/body><\/html>","title":"javascript延时加载之defer"},{"content":"jQuery可以实现各种各样的效果，比如隐藏，显示，切换，滑动等。让我们的网页丰富多彩。下面逐个说明一下这些效果。 一：隐藏和显示 通过 hide() 和 show() 两个函数，jQuery 支持对 HTML 元素的隐藏和显示。 $(\"#hide\").click(function(){$(\"p\").hide();});$(\"#show\").click(function(){$(\"p\").show();}); 第一个隐藏p标签，第二个显示p标签。用法就是首先使用选择器选中当前要操作的元素，然后再使用它的方法。 这两个方法还可以添加参数和回调函数。 $(selector).hide(speed,callback)$(selector).show(speed,callback) 第一个参数是效果的持续时间，第二个是回调函数，表示如果执行完这个效果要执行的函数。 二：滑动函数 - slideDown, slideUp, slideToggle \t$(selector).slideDown(speed,callback)\t$(selector).slideUp(speed,callback)\t$(selector).slideToggle(speed,callback) 上面分别是向下滑动，向上滑动，切换滑动。滑动就是逐渐的显示出来元素。后面同理是时间和回调函数。 三：Fade 函数  \t$(selector).fadeIn(speed,callback)\t$(selector).fadeOut(speed,callback)\t$(selector).fadeTo(speed,opacity,callback) 这三个函数是逐渐显示和隐藏的函数，第一个是逐渐显示出来这个元素，第二个是逐渐隐藏出去，第三个是隐藏到某个指定的透明度。 下面表格列出了常用的一些jQuery效果函数。 函数 描述 $(selector).hide() 隐藏被选元素 $(selector).show() 显示被选元素 $(selector).toggle() 切换（在隐藏与显示之间）被选元素 $(selector).slideDown() 向下滑动（显示）被选元素 $(selector).slideUp() 向上滑动（隐藏）被选元素 $(selector).slideToggle() 对被选元素切换向上滑动和向下滑动 $(selector).fadeIn() 淡入被选元素 $(selector).fadeOut() 淡出被选元素 $(selector).fadeTo() 把被选元素淡出为给定的不透明度 $(selector).animate() 对被选元素执行自定义动画","title":"Jquery学习--效果、回调函数"},{"content":"作者:zhanhailiang 日期:2012-12-28 mysql有4种不同的日志，分别是二进制日志，查询日志，慢查询日志和错误日志，这些日记记录着数据库工作的方方面面，可以帮助我们了解数据库的不同方面的踪迹，下面介绍二进制日志的作用和使用方法。 1.二进制日志（bin-log日志）用途 bin-log日志的作用和使用，bin-log日志记录了所有的DDL和DML的语句，但不包括查询的语句，语句以事件的方式保存，描述了数据的更改过程，此日志对发生灾难时数据恢复起到了极为重要的作用。 2.二进制日志（bin-log日志）操作 首先需要确定Mysql二进制日志是否开启： 1).可以通过Mysql配置文件my.cnf来确认（Mysql默认开启二进制日志记录）： # Replication Master Server (default)# binary logging is required for replicationlog-bin=mysql-bin 2).也可以通过在mysql命令行模式中查看bin-log是否开启： mysql> show variables like \"%bin%\";  +-----------------------------------------+----------------------+| Variable_name                           | Value                |+-----------------------------------------+----------------------+| binlog_cache_size                       | 32768                || binlog_direct_non_transactional_updates | OFF                  || binlog_format                           | MIXED                || binlog_stmt_cache_size                  | 32768                || innodb_locks_unsafe_for_binlog          | OFF                  || log_bin                                 | ON                   || log_bin_trust_function_creators         | OFF                  || max_binlog_cache_size                   | 18446744073709547520 || max_binlog_size                         | 1073741824           || max_binlog_stmt_cache_size              | 18446744073709547520 || sql_log_bin                             | ON                   || sync_binlog                             | 0                    |+-----------------------------------------+----------------------+12 rows in set (0.00 sec) mysql> show variables like \"log_bin\";+---------------+-------+| Variable_name | Value |+---------------+-------+| log_bin       | ON    |+---------------+-------+1 row in set (0.00 sec) 接下来查看所有的二进制日志记录文件列表（默认二进制日志文件mysql-bin.XXXXXX存放在mysql/data/目录下，可以直接去data目录下查看）： mysql> show binary logs;+------------------+------------+| Log_name         | File_size  |+------------------+------------+| mysql-bin.000001 |        107 || mysql-bin.000002 |        107 || mysql-bin.000003 |        107 || mysql-bin.000004 |        444 || mysql-bin.000005 |        150 || mysql-bin.000006 |      43875 || mysql-bin.000007 |        150 || mysql-bin.000008 |        107 || mysql-bin.000009 |      83748 || mysql-bin.000010 |        126 || mysql-bin.000011 |        126 |... 最后使用mysqlbinlog查看mysql-bin.XXXXXX二进制日志，根据需要去搜索指定的日志： zhanhailiang@linux-06bq:/usr/local/services/mysql/data> ../bin/mysqlbinlog mysql-bin.000001 |grep \"xxxxxx\" 参考文档： Mysql数据库 mysql-bin 日志的管理与维护 浅析MySql二进制日志的应用","title":"查看Mysql二进制日志"},{"content":"jQuery可以动态添加html元素，添加css效果。给我们带来了不少的方便。 一：添加HTML 添加html的方法有三个，分别是。 $(selector).append(content) append() 函数向所匹配的 HTML 元素内部追加内容。 $(selector).prepend(content) prepend() 函数向所匹配的 HTML 元素内部预置（Prepend）内容。 $(selector).after(content) after() 函数在所有匹配的元素之后插入 HTML 内容。 $(selector).before(content) before() 函数在所有匹配的元素之前插入 HTML 内容。 二：添加CSS jQuery 拥有三种用于 CSS 操作的重要函数： • $(selector).css(name,value) 函数 css(name,value) 为所有匹配元素的给定 CSS 属性设置值： • $(selector).css({properties}) 函数 css({properties}) 同时为所有匹配元素的一系列 CSS 属性设置值： • $(selector).css(name) 函数 css(name) 返回指定的 CSS 属性的值： jQuery 拥有两种用于尺寸操作的重要函数： • $(selector).height(value) 设置元素高度 • $(selector).width(value) 设置元素宽度 下面是常用的css操作方法 CSS 属性 描述 $(selector).css(name,value) 为匹配元素设置样式属性的值 $(selector).css({properties}) 为匹配元素设置多个样式属性 $(selector).css(name) 获得第一个匹配元素的样式属性值 $(selector).height(value) 设置匹配元素的高度 $(selector).width(value) 设置匹配元素的宽度","title":"Jquery学习--HTML和CSS操作"},{"content":"下载地址：http://code.google.com/p/freecms/  channel 在栏目页静态化时,系统会自动向模板文件传递channel对象，此对象存储当前栏目信息。在使用栏目相关标签时，标签会封装channel供页面调用。 属性 说明 id id name 名称 templet 栏目模板文件 contentTemplet 此栏目下信息使用的模板文件 img 图片 parId 父栏目id site 所属站点id url 外部链接 state 有效性：1有效0无效 navigation 是否导航:1是 0否 pagemark 页面标识 orderNum 显示顺序 clickNum 点击量 Description 描述","title":"开源 免费 java CMS - FreeCMS-数据对象-channel"},{"content":"***.hbm.xml文件（在当前包下建立）： 支持两种类型：  1.hibernate类型：   integer long short float double character byte boolean yes_no true_false date time timestamp   选择其中的一个类型，hibernate会完成对应数据的转换，转换成数据库表中对应的类型  2.java类型  ormapping对象关系映射（建立对象和关系数据库的联系）：  .hbm.xml文件是建立对象与表的映射联系（hibernate会根据客户端写的映射程序和映射文件翻译成相应的sql语句）   1）.建立类与表的对应关系   2）.类的属性和表的字段对应关系   3）.类的属性的类型与表的字段的类型的对应 <hibernate-mapping>  /*   class描述一个类    name 类得全路径    table 类对应的表名，不写默认就是类得名称    catalog 数据库的名称，因为在url中药写数据库的名称，所以一般在这里可以省略  */  <class name=\"\" table=\"\" catalog=\"\">   /*    id描述主键     name 类中属性的名称（该属性与数据库表中的主键对应）     type 定义主键的类型   */   <id name=\"\" type=\"\">    /*     描述表中的主键是哪个列      name //表中的主键列    */    <column name=\"\"><\/column>    //主键的产生器    <generator class=\"increment\"><\/generator>   <\/id>   /*    类中的属性，多个字段就用多个property标签     name //表中的字段   */   <property name=\"\" type=\"\">    //对应表中的字段    <column name=\"\"><\/column>   <\/property>  <\/class>   <\/hibernate-mapping>  ","title":"hibernate映射文件"},{"content":"如何做一个成功的网站设计，是很多网页设计思考和追求的，从前期的策划、需求分析、资料整理、程序实现再到最后的调试、发布、修改….等的一系列过程，做出一个用户体验度较高的网站设计，让客户满意。 　一、定位网站的主题和名称  1、名称要正。要合法，和理，和情。不能用反动的，色情的，迷信的，危害社会安全的名词语句。 2、名称要易记。最好用中文名称，不要使用英文或者中英文混合型名称。 3、名称要有特色。名称平实就可以接受，如果能体现一定的内涵，给浏览者更多的视觉冲击和空间想象力。   二、定位网站的企业形象  一个杰出的网站，和实体公司一样，需要整体的形象包装和设计。准确的，有创意的企业形象设计，对网站的宣传推广有事半功倍的效果。 三、确定网站的栏目  建立网站好比写一篇文章，首先要拟好提纲，文章才能主题明确，层次清晰。如果结构不清晰，目录庞杂，内容东一块西一块。结果不但浏览者看得糊涂，自己扩充和维护也相当困难。网站的题材确定后，收集和组织相关的资料内容。栏目的实质是一个网站的大纲索引，索引应该将网 站的主体明确显示出来。 四、确定网站的目录结构 网站的目录是网站建设时创建的目录。目录结构的好坏，对浏览者来说并没有什么太大的感觉，但是对于站点本身的上传维护，内容未来的扩充和移植有着重要的影响。 五、确定网站的链接结构  网站的链接结构是指页面之间相互链接的拓扑结构。它建立在目录结构基础之上，但可以跨越目录。建立网站的链接结构有两种基本方式：  1、树状链接结构  类似DOS的目录结构，首页链接指向一级页面，一级页面链接指向二级页面。这样的链接结构浏览时，一级级进入，一级级退出。优点是条理清晰，访问者明确知道自己在什么位置，不会迷路。缺点是浏览效率低，一个栏目下的子页面到另一个栏目下的子页面，必须绕经首页。  2、星状链接结构  类似网络服务器的链接，每个页面相互之间都建立有链接。这种链接结构的优点是浏览方便，随时可以到达自己喜欢的页面。缺点是链接太多，容易使浏览者迷路，搞不清自己在什么位置，看了多少内容。  文章来源：http://www.ruoshuiyx.com/news/X00000053.html 转载请保留","title":"如何算一个成功的网站设计"},{"content":"hibernate：  1.属于ormapping框架  2.jdbc的二次开发 servlet的缺点：  1.servlet的所有配置都在xml中配置，这时会倒是多个开发人员同时编辑xml文件，这样的开发模式不利于团队开发的协作  2.struts2将开发过程中常见的问题用拦截器包装完成了，简化了开发，servlet做不到这点  3.servlet有严重的容器依赖性，所以不能进行单元测试  4.servlet只能在doPost和doGet方法中写内容，如果servlet中有许多方法需要进一步处理  5.struts2可以自定义结果集，servlet做不到  6.struts2可以通过模型驱动和属性驱动获取表单中的值，servlet不能只能通过原始的方法获取 hibernate缺点：  1.程序员不能干涉sql语句的生成，如果一个项目中对sql语句要求比较严格那么这种情况下不能使用hibernate  2.这对大数据量来说，hibernate是不适合使用的，效率不高 hibernate优点：  1.面向对象的开发  2.做到了数据缓存 组成hibernate的三大要素：  持久化对象 //用于程序的操作  映射文件 //建立类与表的链接  hibernate配置文件 //建立数据库的链接","title":"hibernate前介绍"},{"content":"简介： solr是基于Lucene Java搜索库的企业级全文搜索引擎，目前是apache的一个项目。它的官方网址在http://lucene.apache.org/solr/  。solr需要运行在一个servlet 容器里，例如tomcat。solr在lucene的上层提供了一个基于HTTP/XML的Web Services，我们的应用需要通过这个服务与solr进行交互。  下载Solr， http://www.apache.org/dyn/closer.cgi/lucene/solr/ 可以通过以下三种方式之一设置   Solr   的主位置：    1。设置   java   系统属性   solr.solr.home   （没错，就是   solr.solr.home）。    2。配置   java:comp/env/solr/home   的一个   JNDI   查找指向   solr   目录。    3。在包含   solr   目录的目录中启动   servlet   容器。（默认的   Solr   主目录是当前工作目录下的   solr。）    我采用的是第二种(2。配置   java:comp/env/solr/home   的一个   JNDI   查找指向   solr   目录.。) 安装步骤： 下载solr的zip包后解压缩，将dist目录下的war文件改名为solr.war直接复制到tomcat的webapps目录即可。 注意一定要设置solr的主位置。有三种方法。我采用的是在tomcat里配置java:comp/env/solr/home的一个JNDI指向solr的主目录（example目录下），建立/tomcat安装目录/conf/Catalina/localhost/solr.xml文件。 <Context docBase=\"D:/solr.war\" debug=\"0\" crossContext=\"true\" >    <Environment name=\"solr/home\" type=\"java.lang.String\" value=\"D:/solr/solr\" override=\"true\" /> <\/Context>   我主要问题出在 Environment  value,name设置问题。 变量1：这里解释一下Context docBase=“solr.war的目录，如果放在了/tomcat安装目录/webapps下，则是这么/solr.war”。 变量2：而Environment name=\"solr/home\"必须这么写,可能solr默认为solr的home目录(记住必须这么写)。 变量3：Environment  value=\"D:/solr/solr\" 值，是solr目录，就是包括bin,conf等目录，一定要有.   几个变量的设置。 最后，启动tomcat.输入 http://localhost:8080/solr/admin/出现管理页面。   其中第一个图片中的源码是在 http://www.ibm.com/developerworks/cn/java/j-solr1/ 这个链接地址下栽的 http://www.ibm.com/developerworks/cn/java/j-solr1/#download. 转自:http://bxj.iteye.com/blog/275373 更多资源: http://www.cnblogs.com/thinkCoding/archive/2012/01/10/2318578.html http://blog.chenlb.com/2009/05/apache-solr-quick-start-and-demo.html http://blog.csdn.net/liuzhenwen/article/details/4060922","title":"solr基础配置(入门一)"},{"content":"在网站建设的时候，稳定的改善网站的可用性，可以使网站的可用度至少改善20倍。所以提升网站的可用性，也是网站建设中的一项重要的事项。怎样改善呢。 1、对旧的网站，在重新设计之前，可以针对旧版使用者做个小型的意见调查，旧版网站里还是有些值得保留的特色。调查当中也能够看出来以前让使用者的问题所在，对此有通盘了解之后，再重新设计也会比较容易。 2、针对竞争对手的网站进行比较性的使用者意见调查。透过使用者意见调查，你可以效仿他们的长处，并且避免犯上和他们同样的错误。   3、针对使用者进行实际的调查，彻底了解他们工作环境的状况。这个步骤对于专门支持员工或是企业伙伴的企业内部网站或是企业间网站而言尤其重要。   4、建立几个不同的设计模型，为了在最短的时间之内测试各种可能性，这些设计应该交由不同的团队来同步进行。并且针对几位使用者进行调查，从中找出最适合你的新设计。 　　 5、挑出最适合的设计之后，即可进一步开发，先以 HTML 作出几个雏型页面，即可邀请更多的使用者来进行测试，找出这个设计的美中不足之处。   6、当网站建构得差不多，已经具备关键页面以及导航组件时，可以再做一次最后的测试，藉以调整商标、找出错误的讯息、以及调整互动功能的细项问题。虽然在最后的测试阶段已经无法针对最基本的问题进行改变，但是依然可以大幅提升网站的可用性。 原文链接：http://www.ruoshuiyx.com/news/X00000052.html","title":"网站建设-提升网站可用性"},{"content":"这次在项目中遇到了不少jquery代码，之前没怎么用过，通过这次机会正好熟悉一下。      jquery可以理解为封装好的js代码，用起来很简洁，方便。重要说一下项目中遇到的回调函数。      因为函数和变量一样，可以一样被复制，删除，拷贝等。所以也可以把函数当做一个参数传入到另外一个函数中。回调函数可以这样定义：一个函数A被当做参数传入函数B中，并在B中执行A，那么A叫做B的回调函数。如果没有名称，则称作匿名回调函数。      先看一下jquery的回调函数：      jquery封装了很多动画函数，比如 $(selector).hide(speed,callback)     这就是一个隐藏的函数，隐藏之后想做一件事情的时候，就可以利用这个callback函数。     如果直接利用 $(selector).hide(speed)      在后面直接写后续的操作不行吗，为什么一定要用callback。如果这样操作，会在hide还未执行完毕的时候就会执行后面的操作。如果想在动画执行完毕后在执行相应的操作，那么必须使用回调函数。       从网上扒了一个关于js回调函数的小例子：写了一遍之后感觉对它的理解加深了一层。       HTML代码： <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\"><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\"><script src=\"1.js\" type=\"text/javascript\"><\/script><title>无标题文档<\/title><script type=\"text/javascript\"> function test(){     var p=document.getElementById(\"pp\");  pp.innerText=\"\";     var num=document.getElementById(\"score\").value;  f(num,function(){ //匿名高层处理函数   if(num<60) alert(\"未及格！\");   else if(num<=90) alert(\"该生成绩优良！\");   else alert(\"该生成绩优秀!\"); })  pp.innerText=\"by since1978 qq558064!\" }<\/script><\/head><body><p>回调函数示例:当学生成绩score<=0分时候，由底层处理；当score>0时，由高层处理。<\/p>请输入学生成绩<input  type=\"text\"  id=\"score\"> <input type=\"button\" onClick=\"test()\" value=\" 看看结果\"><p id=\"pp\"><\/p><\/body><\/html> js代码： function f(num,callback){ if(num<0)  {   alert(\"调用低层函数处理!\");  alert(\"分数不能为负,输入错误!\");  }else if(num==0){     alert(\"调用低层函数处理!\");   alert(\"该学生可能未参加考试！\"); }else{    alert(\"调用高层函数处理!\");  callback(); }} 自己做一下小例子测试下吧。","title":"js回调函数"},{"content":"hibernate的缓存：  一级缓存（是私有缓存）：   session：    session的打开方式一：     Session session = sessionFactory.openSession();     当执行sessionFactory.openSession()时，底层就会创建一个新的session，保证了一个客户端拥有一个session     只要执行一次sessionFactory.openSession()就会打开一个session效率会比较低    session的打开方式二：     //需要在配置文件中配置<property name=\"current_session_context_class\">thread<\/property>     Session session = sessionFactory.getCurrentSession();     //ThreadLocal 存放当前线程的数据，在别的线程无权访问     当第一次访问session的时候，底层会调运sessionFactory.openSession()先创建一个session     在将session放入ThreadLocal中，这时的session在当前的线程中     所以该session只能在当前线程访问，其他线程访问不到，这时就确保了session内部数据的安全性     用当前session增删改查都必须有事务     只要在当前线程中无论调运多少次sessionFactory.getCurrentSession()都是同一个session   session的生命周期：    sessionFactory.openSession()或者sessionFactory.getCurrentSession()打开一个session    session.close()关闭session，session结束   一级缓存就是session的缓存   一级缓存存放的是私有数据，不能访问   一级缓存的生命周期和session的生命周期一样      一级缓存的操作：    把数据放入缓存中     **当执行session的get和load方法时获取到得数据都会放到一级缓存中的     **当执行session的save的方法和session的update方法时也会将数据放到一级缓存中    把数据从缓存中提取出来     **当执行session的get和load方法时就可以将一级缓存中的数据取出    把数据库中的数据同步到缓存中     **session.refresh(指定对象)//将指定对象的数据库中的数据同步到缓存中，保证数据库中的数据和缓存的一致    把缓存中的数据同步到数据库中     **session.flush()      //调运它就会检查session缓存中所有的持久化对象      如果持久化对象在数据库中没有对应的值就会发出insert语句      如果持久化对象在数据库中有对应的值就会发出update语句      一般情况下insert语句在update之前执行    把缓存中的数据清空     **session.clear()//清空session的缓存     **session.evict(Object)//将某个对象从session的缓存中清空  二级缓存（是公有数据）：   hibernate本身没有提供二级缓存的解决方案   hibernate引用了第三方组件的缓存框架   二级缓存为sessionFactory级别缓存   二级缓存的生命周期就是sessionFactory的生命周期   二级缓存所存放的是共享缓存，因为数据是公有的   二级缓存所应用的场合：    1.存放的不是很重要的数据    2.该数据不能被频繁的修改    3.用于查询   二级缓存的使用步骤：    1.导入缓存框架需要的jar包    2.配置文件中     声明二级缓存的提供商       <property name=\"cache.provider_class\">       org.hibernate.cache.EhCacheProvider      <\/property>     开启二级缓存      <property name=\"cache.use_second_level_cache\">true<\/property>     在映射文件中配置策略      /*       usage：        \"read-write\"读写        \"read-only\"只读      */      <cache usage=\"read-only\"/>    session.get()与session.load()所做的事情：     1.将一个对象变成持久化对象     2.先去一级缓存查找数据，如果没有找到数据，就到二级缓存查找，如果在没有找到，最后去数据库查找数据     3.当去数据库中查找数据的时候，会把查到的数据存放到一级缓存，如果二级缓存开启就存放到二级缓存    session.save()与session.update()所做的事情：     1.将一个对象变成持久化对象     2.将数据保存到一级缓存，如果二级缓存开启就保存到二级缓存    把数据放入缓存中：     session.get() session.load() session.save() session.update()    把数据从缓存中提取出来：     session.get() session.load()    hibernate不希望对二级缓存的数据进行操作  查询缓存：   必须先有二级缓存，因为查询缓存查询的也是不常改变的数据   查询缓存默认是关闭的   步骤：    1.在配置文件中添加     <property name=\"cache.use_query_cache\">true<\/property>    2.在代码中实现     Query query = session.createQuery(\"from Classes\");     query.setCacheable(true);//把数据放入到缓存中     query.list();     query = session.createQuery(\"from Classes\");     query.setCacheable(true);//从缓存中提取数据     query.list();  页面缓存：   将整个页面的数据缓存到磁盘上，当再次请求一个页面的时候，就会去磁盘取数据   在磁盘上有一个监听器，只要数据库的数据发生改变，页面缓存就会与数据库同步更新数据   <ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"          xsi:noNamespaceSchemaLocation=\"../config/ehcache.xsd\">      <diskStore path=\"C:\\\\TEMP1\"/>//磁盘的存储目录    <defaultCache      maxElementsInMemory=\"12\"      eternal=\"false\"      timeToIdleSeconds=\"120\"      timeToLiveSeconds=\"120\"      overflowToDisk=\"false\"      maxElementsOnDisk=\"10000000\"      diskPersistent=\"false\"      diskExpiryThreadIntervalSeconds=\"120\"      memoryStoreEvictionPolicy=\"LRU\"      />          <Cache      <!--       配置在内存中最多可以存放多少数据，当内存满时是否存放到磁盘，并指定存放个数      -->      name=\"要缓存的持久化类得全类名\"      maxElementsInMemory=\"5\" //在内存中最多存放指定个数数据      eternal=\"false\" //存放时间，false代表永远不过时      timeToIdleSeconds=\"120\" //在指定秒数之内如果没有操作数据就自动清除数据      timeToLiveSeconds=\"120\" //活跃时间      overflowToDisk=\"true\" //当内存满是是否存到磁盘上      maxElementsOnDisk=\"10000000\" //在磁盘上最多存放的个数      diskPersistent=\"false\"      diskExpiryThreadIntervalSeconds=\"120\"      memoryStoreEvictionPolicy=\"LRU\"      />   <\/ehcache>","title":"hibernate缓存"},{"content":"xml文件： 　　Xml代码 　　<?xml version=\"1.0\" encoding=\"GB2312\"?>   　　<RESULT>  　　<VALUE>  　　<NO>A1234<\/NO>  　　<ADDR>河南省郑州市<\/ADDR>  　　<\/VALUE>  　　<VALUE>  　　<NO>B1234<\/NO>  　　<ADDR>河南省郑州市二七区<\/ADDR>  　　<\/VALUE>  　　<\/RESULT> 　　第一种 DOM 实现方法： 　　Java代码 　   import java.io.File;  　　import javax.xml.parsers.DocumentBuilder;  　　import javax.xml.parsers.DocumentBuilderFactory;  　　import org.w3c.dom.Document;  　　import org.w3c.dom.NodeList;  　　public class MyXMLReader2DOM {  　　public static void main(String arge[]) {  　　long lasting = System.currentTimeMillis();  　　try {  　　File f = new File(\"data_10k.xml\");  　　DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  　　DocumentBuilder builder = factory.newDocumentBuilder();  　　Document doc = builder.parse(f);  　　NodeList nl = doc.getElementsByTagName(\"VALUE\");  　　for (int i = 0; i < nl.getLength(); i++) {  　　System.out.print(\"车牌号码:\"+ doc.getElementsByTagName(\"NO\").item(i).getFirstChild().getNodeValue());  　　System.out.println(\"车主地址:\"+ doc.getElementsByTagName(\"ADDR\").item(i).getFirstChild().getNodeValue());  　　System.out.println(\"运行时间：\" + (System.currentTimeMillis() - lasting)  　　+ \"毫秒\");  　　}  　　}  　　} catch (Exception e) {  　　e.printStackTrace();  　　}  　　}  　　} 　　第二种，DOM4J实现方法： 　　Java代码 　   import java.io.*;  　　import java.util.*;  　　import org.dom4j.*;  　　import org.dom4j.io.*;  　　public class MyXMLReader2DOM4J {  　　public static void main(String arge[]) {  　　long lasting = System.currentTimeMillis();  　　try {  　　File f = new File(\"data_10k.xml\");  　　SAXReader reader = new SAXReader();  　　Document doc = reader.read(f);  　　Element root = doc.getRootElement();  　　Element foo;  　　for (Iterator i = root.elementIterator(\"VALUE\"); i.hasNext();) {  　　foo = (Element) i.next();  　　System.out.print(\"车牌号码:\" + foo.elementText(\"NO\"));  　　System.out.println(\"车主地址:\" + foo.elementText(\"ADDR\"));  　　}  　　System.out.println(\"运行时间：\" + (System.currentTimeMillis() - lasting)  　　+ \"毫秒\");  　　}  　　} catch (Exception e) {  　　e.printStackTrace();  　　}  　　}  　　} 　　第三种 JDOM实现方法： 　　Java代码 　   import java.io.*;  　　import java.util.*;  　　import org.jdom.*;  　　import org.jdom.input.*;  　　public class MyXMLReader2JDOM {  　　public static void main(String arge[]) {  　　long lasting = System.currentTimeMillis();  　　try {  　　SAXBuilder builder = new SAXBuilder();  　　Document doc = builder.build(new File(\"data_10k.xml\"));  　　Element foo = doc.getRootElement();  　　List allChildren = foo.getChildren();  　　for (int i = 0; i < allChildren.size(); i++) {  　　System.out.print(\"车牌号码:\"+ ((Element) allChildren.get(i)).getChild(\"NO\").getText());  　　System.out.println(\"车主地址:\"+ ((Element) allChildren.get(i)).getChild(\"ADDR\").getText());  　　}  　　System.out.println(\"运行时间：\" + (System.currentTimeMillis() - lasting)  　　+ \"毫秒\");  　　}  　　} catch (Exception e) {  　　e.printStackTrace();  　　}  　　}  　　} 　　第四种SAX实现方法： 　　Java代码 　 　import javax.xml.parsers.SAXParser;  　　import javax.xml.parsers.SAXParserFactory;  　　import org.xml.sax.Attributes;  　　import org.xml.sax.InputSource;  　　import org.xml.sax.SAXException;  　　import org.xml.sax.helpers.DefaultHandler;  　　public class MyXMLReader2SAX extends DefaultHandler {  　　java.util.Stack tags = new java.util.Stack();  　　public MyXMLReader2SAX() {  　　super();  　　}  　　public static void main(String args[]) {  　　long lasting = System.currentTimeMillis();  　　try {  　　SAXParserFactory sf = SAXParserFactory.newInstance();  　　SAXParser sp = sf.newSAXParser();  　　MyXMLReader2SAX reader = new MyXMLReader2SAX();  　　sp.parse(new InputSource(\"data_10k.xml\"), reader);  　　} catch (Exception e) {  　　e.printStackTrace();  　　}  　　System.out.println(\"运行时间：\" + (System.currentTimeMillis() - lasting)  　　+ \"毫秒\");  　　}  　　public void characters(char ch[], int start, int length)  　　throws SAXException {  　　String tag = (String) tags.peek();  　　if (tag.equals(\"NO\")) {  　　System.out.print(\"车牌号码：\" + new String(ch, start, length));  　　}  　　if (tag.equals(\"ADDR\")) {  　　System.out.println(\"地址:\" + new String(ch, start, length));  　　}  　　}  　　public void startElement(String uri, String localName, String qName,  　　Attributes attrs) {  　　tags.push(qName);  　　}  　　}","title":"Java读取xml文件的四种方法"},{"content":"在jvm中会有两块内存：  1.临时内存  2.hibernate持久化内存 hibernate的状态改变：  当执行session.update() session.save() session.get()方法时是将临时对象改变成了持久化状态  当执行session.close() session.clear() session.evivt(Object)方法时是将持久化状态的对象改变成托管状态   |--session.evivt(Object)//清空session中的某一个对象，将其改变成托管状态  1）.当对象第一次被创建出来的时候是存在于临时内存中的，与hibernate持久化内存毫无关系  2）.当执行session.update() session.save()方法时，save所做的动作是将临时的对象转换成持久化对象，代表着与hibernate产生了关系，此时并没有将数据提交，当执行了commit方法时，才真正的将数据提交保存到了数据库中  3）.当执行session.close()方法时，只是将持久层与数据库断开了连接，此时处于托管状态   session.close()方法的作用是将对象的持久化状态改变成托管状态  4）.当执行session.get()方法时是将对象转变成了持久化状态，因为取出的数据是持久化状态(副本概念)，所以当持久化对象的数据发生改变时，不执行update方法只要执行commit方法照样更新数据，如果数据没有发生改变执行commit方法或者update方法时，不执行update语句 副本概念：  当临时对象（或者是执行session.get()方法时取出的数据封装成的对象）变成持久化对象时候，hibernate会在hibernate内存中克隆一个一模一样的的副本出来  hibernate的update方法会根据临时对象或者是执行session.get()方法时取出来的对象，去比较副本中的对象  如果对象的数据发生改变并且含有主键，就执行sql的更新语句  如果对象的数据发生改变并且没有主键，就执行sql的插入语句  如果没有发生改变就不执行 ***当执行保存和修改数据时，必须保证对象是一个持久化对象并且处于事物状态下 在持久化中绝对不能出现两个对象的id值相同的，如果出现就报错","title":"hibernate持久化对象的状态"},{"content":"      Apache、IIS、Nginx等大多数web服务器，都不允许静态文件响应POST请求，否则会返回“HTTP/1.1 405 Method not allowed”错误。 即将出错页面表单的method=“post”改为“get”即可。 Ext Tree组件做一个东西，需要用到ajax对节点逐级加载，开始数据用的静态数据data.xml，访问提示“405错误”，原因是资源禁止访问. 在.NET里参数传递方式不对，IIS用GET接受数据，但请求用POST传递数据，因此就会出现这个问题. 解决方案：在TreeLoader里加一个requestMethod:'GET'就ok了。 Loader的代码大致是这样的： // Our custom TreeLoader:        loader: new Ext.app.BookLoader({            dataUrl:'xml-tree-data.xml',            requestMethod: 'GET'        }),","title":"EXT解决“HTTP/1.1 405 Method not allowed”问题"},{"content":"Centos下安装 Hadoop 硬件条件：两台相同机器 master主服务器 和 slave从服务器 (两台防火墙都关闭) 修改IP # vi /etc/sysconfig/network-scripts/ifcfg-eth0 master设置为 192.168.1.66 slave 设置为 192.168.1.67 修改主机名 # vi /etc/sysconfig/network master设置为 HOSTNAME=master slave 设置为 HOSTNAME=slave 修改域名(两台同时在文件末尾追加) # vi /etc/hosts 192.168.1.66 master 192.168.1.67 slave # service network restart  //重启网卡 安装 JDK 所需安装包 jdk-7-linux-i586.rpm # rpm -ivh jdk-7-linux-i586.rpm # vi /etc/profile  //配置java环境变量 追加：     export JAVA_HOME=/usr/java/jdk1.7.0     export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar     export PATH=$PATH:$JAVA_HOME/bin # source /etc/profile  //设置生效 安装 OpenSSH 命令：yum install openssh openssh-clients # ssh-keygen -t rsa -P '' -f /root/.ssh/id_dsa  //ssh无密码连接 # cat /root/.ssh/id_dsa.pub >> /root/.ssh/authorized_keys 将master的id_dsa.pub 传给slave，命名为master_id_dsa 在slave 上执行# cat master_id_dsa.pub >> /root/.ssh/authorized_keys 安装 Hadoop 所需安装包 hadoop-1.1.1.tar.gz # tar zxvf hadoop-1.1.1.tar.gz # mv 到 /usr/local/hadoop # vi /usr/local/hadoop/conf/hadoop-env.sh 更新为 export JAVA_HOME=/usr/java/jdk1.7.0 # vi /usr/local/hadoop/conf/core-site.xml <configuration>标签内添加：     <property>         <name>hadoop.tmp.dir<\/name>         <value>/home/hadoop-${user.name}<\/value>     <\/property>     <property>         <name>fs.default.name<\/name>         <value>hdfs://master:9000<\/value>     <\/property> # vi /usr/local/hadoop/conf/mapred-site.xml <configuration>标签内添加：     <property>       <name>mapred.job.tracker<\/name>       <value>master:9001<\/value>     <\/property> # vi /usr/local/hadoop/conf/hdfs-site.xml <configuration>标签内添加：     <property>       <name>dfs.name.dir<\/name>       <value>/home/hadoop/name<\/value>     <\/property>     <property>       <name>dfs.data.dir<\/name>       <value>/home/hadoop/data<\/value>     <\/property>     <property>       <name>dfs.replication<\/name>       <value>2<\/value>     <\/property> dfs.replication是数据需要备份的数量，默认是3，如果此数大于集群的机器数会出错 注意：此处的name、data目录不能预先创建，hadoop格式化时会自动创建。 # vi /usr/local/hadoop/conf/masters  //编辑配置文件masters master # vi /usr/local/hadoop/conf/slaves  //编辑配置文件slaves slave 把配置好的hadoop文件夹拷贝到其他集群的机器中 # scp -r /usr/local/hadoop root@slave:/usr/local/hadoop 格式化一个新的分布式文件系统 # /usr/local/hadoop/bin/hadoop namenode -format # /usr/local/hadoop/bin/start-all.sh  //启动所有 # /usr/local/hadoop/bin/stop-all.sh  //关闭所有 # jps  //查看运行进程 2820 Jps 1161 NameNode 1297 SecondaryNameNode 1378 JobTracker http://192.168.1.66:50070/ http://192.168.1.66:50030/ 负载均衡 # start-balancer.sh  //可以使DataNode节点上选择策略重新平衡DataNode上的数据块的分布 HDFS常用操作 hadoop dfs -ls 列出HDFS下的文件 hadoop dfs -ls in 列出HDFS下某个文档中的文件 hadoop dfs -put 1.txt test 上传文件到指定目录并且重新命名，只有所有的DataNode都接收完数据才算成功 hadoop dfs -get in getin 从HDFS获取文件并且重新命名为getin，同put一样可操作文件也可操作目录 hadoop dfs -rmr out 删除指定文件从HDFS上 hadoop dfs -cat in/* 查看HDFS上in目录的内容 hadoop dfsadmin -report 查看HDFS的基本统计信息，结果如下 hadoop dfsadmin -safemode leave 退出安全模式 hadoop dfsadmin -safemode enter 进入安全模式 hadoop dfs -put ./gg ling 本地gg目录 上传 HDFS 改名为ling hadoop jar hadoop-examples-1.1.1.jar wordcount ling lout    //统计单词出现次数 hadoop dfs -cat ling/*   //查看 安装 Zookeeper 所需安装包 zookeeper-3.4.5.tar.gz # tar zxvf zookeeper-3.4.5.tar.gz # mv 到 /usr/local/zookeeper # cd /usr/local/zookeeper/conf # cp zoo_sample.cfg zoo.cfg # vi zoo.cfg     修改     dataDir=/usr/local/zookeeper/data     clientPort=30200     //添加以下     server.1=192.168.1.66:30201:30301     server.2=192.168.1.67:30202:30302 # yum install nc # /usr/local/zookeeper/bin/zkServer.sh start  //启动 # /usr/local/zookeeper/bin/zkCli.sh -server 192.168.1.66:30200  //验证 # /usr/local/zookeeper/bin/zkServer.sh status  //查看状态 JMX enabled by default Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg Error contacting service. It is probably not running. 安装 HBase 所需安装包 hbase-0.94.3.tar.gz # tar zxvf hbase-0.94.3.tar.gz # mv 到 /usr/local/hbase # mv /usr/local/hbase/hbase-webapps /usr/local/hbase/webapps # rm -rf /usr/local/hbase/lib/hadoop-core-1.0.4.jar # cp /usr/local/hadoop/hadoop-core-1.1.1.jar /usr/local/hbase/lib/ # vi /usr/local/hbase/conf/hbase-env.sh   export JAVA_HOME=/usr/java/jdk1.7.0 # vi /usr/local/hbase/conf/hbase-site.xml <configuration> <property>     <name>hbase.rootdir<\/name>     <value>hdfs://master:9000/hbase<\/value>     <description>The directory shared by RegionServers.<\/description> <\/property> <property>     <name>hbase.cluster.distributed<\/name>     <value>true<\/value>     <description>指定HBase运行的模式(false: 单机模式或者为分布式模式 true: 全分布模式)<\/description> <\/property> <property>     <name>hbase.zookeeper.quorum<\/name>     <value>slave<\/value>     <description>ZooKeeper集群服务器的位置<\/description> <\/property> <property>       <name>hbase.zookeeper.property.clientPort<\/name>       <value>30200<\/value> <\/property> <\/configuration>   # vi /usr/local/hbase/conf/regionservers slave # hadoop dfs -mkdir /hbase  //创建目录 经过上面几个骤，基本已经在一台机器上（master）配置好HBase了，这时，需要将上述的全部环境变量配置，也在各个从结点上进行配置，然后将配置好的HBase安装文件拷贝分发到各个从结点上 # scp -r /usr/local/hbase root@slave:/usr/local/hbase # /usr/local/hbase/bin/start-hbase.sh  //启动HBase集群 # jps 3574 Jps 1161 NameNode 3377 HMaster 2876 ZooKeeperMain 1297 SecondaryNameNode 1378 JobTracker # /usr/local/hbase/bin/hbase shell  //验证安装 hbase(main):001:0> status 1 servers, 0 dead, 2.0000 average load http://192.168.1.66:60010/master-status  //查看HMaster运行状态 安装 Flume 所需安装包 apache-flume-1.3.0-bin.tar.gz # tar zxvf apache-flume-1.3.0-bin.tar.gz # mv 到 /usr/local/flume # cp /usr/local/flume/conf/flume-conf.properties.template /usr/local/flume/conf/flume-conf.properties # /usr/local/flume/bin/flume-ng  agent -c conf -f /usr/local/flume/conf/flume-conf.properties >1.log & 安装 CygWin Cygwin_setup.exe 请选择从互联网安装, 在\"User URL\"处输入http://cygwin.wardking.com/pub/ 点击\"Add\"按钮, 然后选中\"http://cygwin.wardking.com/pub/\", 点击\"下一步\"进行安装 建议把Base、Libs、Utils、 net、Security下的都安装了。","title":"Hadoop安装"},{"content":"无需flash，完全用css就可以做出超炫的图片倒影效果。网上流传很多种版本，经过本人的一番研究，做成能够兼容firefox、chrome、IE等各主流浏览器的版本，跟大家分享一下。最终完成的效果 新浏览器的实现 指的是firefox、chrome和IE9。新浏览器都支持CSS3新添的transform属性，所以实现倒影效果非常简单。从下面的代码看到，各家浏览器对transform的实现有点不同      -webkit-transform: scaleY(-1);     /* webkit内核浏览器的实现，例如safari */      -moz-transform: scaleY(-1);     /* firefox 的实现 */      -ms-transform: scaleY(-1);     /* IE 的实现 */      -o-transform: scaleY(-1);     /* Opera的实现 */ HTML <div class=\"wrap\">     <div class=\"image\"><img src=\"1.jpg\" /><\/div>     <div class=\"down\">          <div class=\"reflection\"><\/div>          <div class=\"overlay\"><\/div>     <\/div><\/div> CSS body{background:#000;color:#f00}.wrap{position:relative;}.image{margin-bottom:3px;}.down{position: relative;}.reflection{width:421px;height:180px;background:url(1.jpg) bottom center no-repeat;     -webkit-transform: scaleY(-1);     -moz-transform: scaleY(-1);     -ms-transform: scaleY(-1);     -o-transform: scaleY(-1);     transform: scaleY(-1);     opacity:0.5;          filter:alpha(opacity='50');     }.overlay{position: relative;width:421px;height:180px;bottom:149px;     background-image: -moz-linear-gradient(center bottom, rgb(0,0,0) 20%, rgba(0,0,0,0) 90%);     background-image: -o-linear-gradient(rgba(0,0,0,0) 10%, rgb(0,0,0) 30%);     background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0.20, rgb(0,0,0)), color-stop(0.90, rgba(0,0,0,0)));     filter: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColor=0, EndColorStr=#000000);} 在倒转的图片上面还加了一个DIV.overlay层，做出渐变的效果，使倒影看起来更真实。 兼容旧浏览器的实现 考虑到还有相当多的人在使用旧版浏览器，程序员绞尽脑汁为这部分人做兼容。这里指的是IE7/IE8。IE6怎么办？提示用户升级浏览器吧。 旧IE不支持transform属性，可以使用滤镜 filter:flipv 来生成图片倒转，但会跟IE9的transform冲突。所以要用到各种 hack 来解决。修改后的CSS如下，添加了IE9 hack，覆盖掉上面的filter:flipv的属性。 body{background:#000;color:#f00}.wrap{position:relative;}.image{margin-bottom:3px;}.down{position: relative;}.reflection{width:421px;height:180px;background:url(1.jpg) bottom center no-repeat;     -webkit-transform: scaleY(-1);     -moz-transform: scaleY(-1);     -ms-transform: scaleY(-1);     -o-transform: scaleY(-1);     transform: scaleY(-1);     opacity:0.5;          filter:flipv alpha(opacity='50');     /*ALL IE*/     }@media all and (min-width:0) {     .reflection{filter:alpha(opacity='50') \\0/;} /*IE9*/}.overlay{position: relative;width:421px;height:180px;bottom:149px;     background-image: -moz-linear-gradient(center bottom, rgb(0,0,0) 20%, rgba(0,0,0,0) 90%);     background-image: -o-linear-gradient(rgba(0,0,0,0) 10%, rgb(0,0,0) 30%);     background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0.20, rgb(0,0,0)), color-stop(0.90, rgba(0,0,0,0)));     filter: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColor=0, EndColorStr=#000000);} 运行一下，在各版本的浏览器能看到最终的效果了。","title":"兼容各浏览器的CSS倒影效果"},{"content":"说明：今天在弄俩个项目同时部署到tomat6中时候，遇到了一些问题，弄了一个小时，再次总结下， 1、webapp. root 重用问题 通常情况下每一个web项目的web.xml中都会默认有一个webapp.root，如果有过个webapp的时候，那么每一个app都会抢占默认的webapp.root,  这样就出现 org.springframework.web.util.Log4jConfigListenerjava.lang.IllegalStateException: Web app root system property already 这样项目的日志就有可能找不到路径了什么等问题。 修改下web.xml  \t<context-param>\t    <param-name>webAppRootKey<\/param-name>\t    <param-value>dhoffice.root<\/param-value>\t<\/context-param> 2、c3p0错误 A C3P0Registry mbean is already registered. This probably means that an application using c3p0 was undeployed, but not all PooledDataSources were closed prior to undeployment. This may lead to resource leaks over time. Please take care to close all PooledDataSources.” 如果俩个项目都存在c3p0jar包，那么请把它移到 tomcat/lib 的公用lib目录下去，这样就可以同时使用了。 3、数据驱动包也可以放到tomcat/lib，比如ojdbc.jar包 4、linux下tomcat端口总是占用 今天在定位问题的同时遇到这样一个问题，./shutdown.sh   tomcat 后，tomcat端口总是不能被kill 解决方式在我的博客上：http://blog.csdn.net/dracotianlong/article/details/8444978","title":"同时部署俩个类似的项目的总结（都是ssh的）"},{"content":"        正如我们上周报道的一样，最近有很多事情发生在我们熟知的WebRTC上。         其中一个是：基于WebRTC的屏幕共享。         这是屏幕录像：youtube.com/watch?v=tD0QtBUZsF4。         这是代码：github.com/samdutton/rtcshare。         从本质上讲，我们使用RTCPeerConnection和chrome.tabCapture构建了一个实验性的Chrome扩展，以此通过浏览器标签来分享实时视频。如果你想尝试一下，你需要使用Chrome的Canary版本 ，并且在about:flags页面开启实验性扩展（Experimental Extension）的API。         我们的原型很大程度上依赖于强大的apprtc.appspot.com演示，坦率地说，这有点像黑客行为。但是，这是一个概念的证明，并且我们做到了。         下面是我们的实现方法：         1.    当用户点击扩展程序图标（地址栏旁的“录制按钮“），扩展的后台脚本background.js为它自身添加了一个iframe，src指向rtcshare.appspot.com。在background.js中它仅用于获取token和room_key这样的参数值。 chrome.browserAction.onClicked.addListener(function(tab) {\tvar currentMode = localStorage[\"capturing\"];\tvar newMode = currentMode === \"on\" ? \"off\" : \"on\";\tif (newMode === \"on\"){ // start capture\t\tappendIframe();\t} else { // stop capture\t\tchrome.tabs.getSelected(null, function(tab){\t\t\tlocalStream.stop();\t\t\tonRemoteHangup();\t\t});\t\t// set icon, localStorage, etc.\t}}         2.     当iframe加载后，background.js从iframe获取参数值（由rtcshare.appspot.com应用生成）并调用chrome.tabCapture.capture()来开始摄制当前标签的实时视频流。 function appendIframe(){\tiframe = document.createElement(\"iframe\");\tiframe.src=\"https://rtcshare.appspot.com\";\tdocument.body.appendChild(iframe);\tiframe.onload = function(){\t\tiframe.contentWindow.postMessage(\"sendConfig\", \"*\");\t};}// serialised config object messaged by iframe when it loadswindow.addEventListener(\"message\", function(event) {\tif (event.origin !== \"https://rtcshare.appspot.com\"){\t\treturn;\t} \tvar config = JSON.parse(event.data);\troom_link = config.room_link; // the remote peer URL\ttoken = config.token; // for messaging via Channel API\t// more parameter set from config);function startCapture(){\tchrome.tabs.getSelected(null, function(tab) {\t\tvar selectedTabId = tab.id;\t\tchrome.tabCapture.capture({audio:true, video:true}, handleCapture); // bingo!\t});}         3.     一旦实时数据流可用（换句话说，即当前标签的实时视频），background.js便启动点对点连接的进程，信号通过rtcshare.appspot.com使用XHR及Google的Channel API进行传输。所有一切的工作原理就像apprtc的示例一样，除了视频流到远程的传送是通过chrome.tabCapture()而不是getUserMedia()。 function handleCapture(stream){\tlocalStream = stream; // used by RTCPeerConnection addStream();\tinitialize(); // start signalling and peer connection process}         4.     为了演示考虑，这个扩展会在新标签打开一个rtcshare.appspot.com提供的url，其中包含一个房间号的参数。当然，这个URL可以在另一台计算机上或者任何地方打开，这可能是最有价值的事情。me.t chrome.tabs.create({url: room_link});abs.create（{URL：room_link}）;         我们为屏幕共享设想了很多有趣的用例，即使在这个早期的发展阶段，基于插件的标签录制和分享有多快和多稳定也给我们留下了深刻的印象。         如果你想了解更多关于WebRTC的内容，请查阅HTML5 Rocks的文章或我们的快速入门指南 。         祝大家2013年快乐！         相关文章：《Chrome引入WebRTC支持视频聊天App》         《如何使用HTML5实现拍照上传应用》         《对HTML5 Device API相关规范的解惑》          译自：http://updates.html5rocks.com/2012/12/Screensharing-with-WebRTC          转载请注明：来自蒋宇捷的博客-http://blog.csdn.net/hfahe  ","title":"使用WebRTC实现远程屏幕共享"},{"content":"Nicescroll 是制作自定义滚动条的jq插件。支持div,iframe,html等 使用如下： <script src=\"js/jquery.nicescroll/jquery.nicescroll.js\"  type=\"text/javascript\"><\/script>$(document).ready(function(){$(\"html\").niceScroll({cursorcolor:\"#E62020\",cursoropacitymax:1,touchbehavior:false,cursorwidth:\"10px\",cursorborder:\"0\",cursorborderradius:\"5px\"});}) 最终效果：","title":"Jquery插件Nicescroll 制作漂亮的滚动条"},{"content":"在做项目中碰到要绘制预测路径，这种一般都是用虚线绘制。查了好久没弄出来，后来在一同事的推荐发现了googleMap的一个官方网站有这种绘制demo，总结一下供大家借鉴 代码供上 function drawPrePath(array,color){    var sorrow={  path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW //arrow  };  var lineSymbol = {  path: 'M 0,-1 0,1',  strokeOpacity: 1,  scale: 3  };  var pathCoord = [  new google.maps.LatLng(37.772323, -122.214897),new google.maps.LatLng(21.291982, -157.821856),  new google.maps.LatLng(-18.142599, 178.431),new google.maps.LatLng(-27.46758, 153.027892)  ];  path = new google.maps.Polyline({  path: pathCoord ,  strokeColor:\"#2d2d2d\",  strokeOpacity: 0,  strokeWeight: 2,  icons:[{icon:lineSymbol,offset: '0',repeat: '20px'}],  map:map  });  path.setMap(map);} 重点代码：   var lineSymbol = {path: 'M 0,-1 0,1',strokeOpacity: 1,scale: 3}; 关键在于’M 0,-1 0,1’ 其实这是SVG的绘制路径的写法,具体什么意思我还解释不清楚。嘻嘻 自己学svg教程吧！ 本人另外的博客地址  http://zhailulu.github.com/blog/2012/12/25/map/","title":"googleMap中虚线的绘制方法"},{"content":"动态的改变IFrame的高度，实现IFrame自动伸展，父页面也自动神缩原理： 在IFrame子页面一加载的时候，调用父IFrame对象，改变其高度具体实现:1、在IFrame的具体页面(就是子页面)，添加JavaScript<script>function IFrameResize(){ //alert(this.document.body.scrollHeight); //弹出当前页面的高度 var obj = parent.document.getElementById(\"childFrame\");  //取得父页面IFrame对象 //alert(obj.height); //弹出父页面中IFrame中设置的高度 obj.height = this.document.body.scrollHeight;  //调整父页面中IFrame的高度为此页面的高度}<\/script>2、在IFrame的具体页面(就是子页面)的body中，添加onload事件<body onload=\"IFrameResize()\">3、为父页面的IFrame标签添加ID，即上面第一步，方法体中的第2行所写到的childFrame<IFRAME border=0 marginWidth=0        frameSpacing=0 marginHeight=0        src=\"frame1.jsp\" frameBorder=0        noResize  scrolling=\"no\" width=100% height=100% vspale=\"0\" id=\"childFrame\"><\/IFRAME>","title":"动态的改变IFrame的高度"},{"content":"<nav class=\"cf_nav clearfix\">  <ul>    <li>      <a href=\"http://lizhuangs.18021051d350c3871c0a.tpl.diandian.com\" title=\"首页\">        <div class=\"nav_block\">          <span>首页<\/span>          <span class=\"hover\">首页<\/span>        <\/div>      <\/a>    <\/li>        <li>      <a href=\"http://lizhuangs.18021051d350c3871c0a.tpl.diandian.com/submit\" title=\"投稿\">        <div class=\"nav_block\">          <span>投稿<\/span>          <span class=\"hover\">投稿<\/span>        <\/div>      <\/a>    <\/li>            <li>      <a href=\"http://lizhuangs.diandian.com/inbox \" title=\"私信 \">        <div class=\"nav_block\">          <span>私信 <\/span>          <span class=\"hover\">私信 <\/span>        <\/div>      <\/a>    <\/li>        <li>      <a href=\"http://lizhuangs.18021051d350c3871c0a.tpl.diandian.com/archive\" title=\"存档\">        <div class=\"nav_block\">          <span>存档<\/span>          <span class=\"hover\">存档<\/span>        <\/div>      <\/a>    <\/li>    <li>      <a href=\"http://lizhuangs.18021051d350c3871c0a.tpl.diandian.com/rss\" title=\"订阅\">        <div class=\"nav_block\">          <span>订阅<\/span>          <span class=\"hover\">订阅<\/span>        <\/div>      <\/a>    <\/li> 如果我在限制上面的span中的字符。 $(\"nav_block span\").wordLimit(8); 它使用了下面的一个算定义jquery插件的方法，这是我从点点网扣下来的： // copyright c by zhangxinxu v1.0 2009-09-05// http://www.zhangxinxu.com/* $(\".test1\").wordLimit(); 自动获取css宽度进行处理，如果css中未对.test1给定宽度，则不起作用\t$(\".test2\").wordLimit(24); 截取字符数，值为大于0的整数，这里表示class为test2的标签内字符数最多24个*/(function($){\t$.fn.wordLimit = function(num){\t\t\tthis.each(function(){\t\t\t\tif(!num){\t\t\t\tvar copyThis = $(this.cloneNode(true)).hide().css({\t\t\t\t\t'position': 'absolute',\t\t\t\t\t'width': 'auto',\t\t\t\t\t'overflow': 'visible'\t\t\t\t});\t\t\t\t\t$(this).after(copyThis);\t\t\t\tif(copyThis.width()>$(this).width()){\t\t\t\t\t$(this).text($(this).text().substring(0,$(this).text().length-4));\t\t\t\t\t$(this).html($(this).html()+'...');\t\t\t\t\tcopyThis.remove();\t\t\t\t\t$(this).wordLimit();\t\t\t\t}else{\t\t\t\t\tcopyThis.remove(); //清除复制\t\t\t\t\treturn;\t\t\t\t}\t\t\t\t}else{\t\t\t\tvar maxwidth=num;\t\t\t\tif($(this).text().length>maxwidth){\t\t\t\t\t$(this).text($(this).text().substring(0,maxwidth));\t\t\t\t\t$(this).html($(this).html()+'...');\t\t\t\t}\t\t\t}\t\t\t\t\t \t\t});\t}\t\t  })(jQuery);","title":"使用JS和CSS限制页面显示的字符长度"},{"content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>无标题文档<\/title><script src=\"jquery_last.js\" type=\"text/javascript\"><\/script><script type=\"text/javascript\">$(document).ready(  function(){});function hiden(){$(\"#divObj\").hide();//hide()函数,实现隐藏,括号里还可以带一个时间参数(毫秒)例如hide(2000)以2000毫秒的速度隐藏,还可以带slow,fast}function slideToggle(){$(\"#divObj\").slideToggle(2000);//窗帘效果的切换,点一下收,点一下开,参数可以无,参数说明同上}function show(){$(\"#divObj\").show();//显示,参数说明同上}function toggle(){$(\"#divObj\").toggle(2000);//显示隐藏切换,参数可以无,参数说明同上}function slide(){$(\"#divObj\").slideDown();//窗帘效果展开}<\/script><\/head><body><h3>div里内容的显示隐藏特效<\/h3><input type=\"button\" value=\"隐藏\" onclick=\"hiden()\"/> <input type=\"button\" value=\"显示\" onclick=\"show()\"/> <input type=\"button\" value=\"窗帘效果显示2\" onclick=\"slide()\"/> <input type=\"button\" value=\"窗帘效果的切换\" onclick=\"slideToggle()\"/>  <input type=\"button\" value=\"隐藏显示效果切换\" onclick=\"toggle()\"/><div id=\"divObj\" style=\"display:none\">        1.测试例子<br/>        2.测试例子<br/>        3.测试例子<br/>        4.测试例子<br/>        5.测试例子<br/>        6.测试例子<br/>        7.测试例子<br/>        8.测试例子<br/>        9.测试例子<br/>        0.测试例子<br/>    <\/div><\/body><\/html>","title":"jquery简单的div显示和隐藏特效"},{"content":"fancyBox: 什么是fancyBox? fancyBox是一个用来显示图像，html内容和多媒体的工具，其特征是这些元素漂浮在页面之上。 fancyBox构建在jQuery框架之上。 怎么使用? 1.首先，确保你使用的是有效的DOCTYPE.否则FancyBox将不能正常工作. 2.包含必需的JavaScript文件 (推荐从CDN(Content Delivery Network)加载jQuery) <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\"><\/script><script type=\"text/javascript\" src=\"/fancybox/jquery.fancybox-1.3.4.pack.js\"><\/script> jQuery库下载:http://code.jquery.com/jquery-1.8.3.min.js fancyBox库下载:https://github.com/fancyapps/fancyBox/zipball/v2.1.3 3.添加图片超链接: <a id=\"single_1\" href=\"\" title=\"\">\t<img src=\"\" alt=\"\" /><\/a> 超链接的href属性和图片的src属性一样，都是需要显示图片的路径。fancyBox需要id属性来指定位置。 4.调用fancyBox库函数 $(document).ready(function() {\t$(\".single_1\").fancybox();}); 5.看下效果: 推荐学习网站:http://fancyapps.com/fancybox/       http://fancybox.net/home","title":"[置顶] Jquery#fancyBox"},{"content":"string[] names = { \"agen\", \"balen\", \"coure\", \"apple\" };　　string[] findNameA = Array.FindAll<string>(names, delegate(string v) { return v.StartsWith(\"a\"); });　　string[] findNameB = Array.FindAll<string>(names, v => v.StartsWith(\"a\"));　　上面中两个FindAll方法的反编译代码如下：　　string[] findNameA = Array.FindAll<string>(names, delegate (string v) { return v.StartsWith(\"a\"); } );　　string[] findNameB = Array.FindAll<string>(names, delegate (string v) { return v.StartsWith(\"a\"); } );　　从而可以知道“Lambda表达式”与“匿名方法”是可以划上等号的，只不过使用“Lambda表达式”输写代码看上去更直观漂亮，不是吗?","title":"Lambda表达式"},{"content":"        注：我昨天刚发了一篇关于WebRTC的文章，但是WebRTC的变化如此之大，让我不得不再用一篇文章的篇幅从另外一个方面详细阐述它带给我们的变化。Firefox、Opera、Android、iOS平台的广泛支持会让它可以立即落地，实现很多有趣的视频功能和应用。你准备好使用它了吗？         关键词：视频 RTCPeerConnection getUserMedia WebRTC 多媒体         --------         WebRTC在过去的几周内发生了很多事情，有一个重大的更新。         特别是我们很高兴地看到多个浏览器和平台开始支持WebRTC。         getUserMedia目前可以在Chrome浏览器中直接使用，此外还有Opera、Firefox Nightly构建版、Aurora浏览器（尽管在Firefox中需要设置首选项）。可以看一看simpl.info/gum上getUserMedia跨浏览器的演示，以及Chris Wilson使用getUserMedia来进行网络音频输入的惊人演示。         Chrome稳定版已经支持webkitRTCPeerConnection，并且无须在about:flgas里设置。Chrome24及以上版本已经支持TURN服务器（TURN协议允许NAT或者防火墙后面的对象可以通过TCP或者UDP接收到数据。这在使用了对称式的NAT或者防火墙的网络中尤其具有实用价值）。在simpl.info/pc上有一个Chrome RTCPeerConnection非常简单的演示，以及在apprtc.appspot.com上有一个超棒的视频聊天应用。（关于命名的解释：经过几次迭代，目前API的命名为webkitRTCPeerConnection。其他名称及实现已被废弃。当W3C标准已经稳定时，webkit前缀将被删除。）         桌面版Firefox Nightly和Aurora浏览器也已经支持WebRTC，而在iOS和Android上可以通过爱立信Bowser浏览器支持。         DATACHANNEL         DataChannel是用于任意数据高性能、低延时、点对点通信的WebRTC API。这个API非常简单，类似于WebSocket，但是它的通信是直接发生在浏览器之间的，所以DataChannel的速度远远超过WebSocket，即便我们还需要一个中继（TURN）服务器（用“TCP/UDP打孔”的方式来穿越防火墙和防止网络地址转换失败）。         Chrome 25计划支持DataChannel，需要通过about:flags激活-尽管它可能会错过这个版本。这将仅用于实验，可能不会充分发挥全部的作用，而且无法和Firefox进行通信。DataChannel在以后的版本中会更加稳定，并且可以和Firefox互通。         Firefox Nightly构建版和Aurora支持mozGetUserMedia、mozRTCPeerConnection和DataChannel（但是不要忘记在about:flags中设置参数！）         在Firefox中运行DataChannel的截图如下：         该演示URL为http://mozilla.github.com/webrtc-landing/data_test.html。下面是代码片断： pc1.onconnection = function() {  log(\"pc1 onConnection \");  dc1 = pc1.createDataChannel(\"This is pc1\",{}); // reliable (TCP-like)  dc1 = pc1.createDataChannel(\"This is pc1\",{outOfOrderAllowed: true, maxRetransmitNum: 0}); // unreliable (UDP-like)  log(\"pc1 created channel \" + dc1 + \" binarytype = \" + dc1.binaryType);  channel = dc1;  channel.binaryType = \"blob\";  log(\"pc1 new binarytype = \" + dc1.binaryType);  // Since we create the datachannel, don't wait for onDataChannel!  channel.onmessage = function(evt) {    if (evt.data instanceof Blob) {      fancy_log(\"*** pc2 sent Blob: \" + evt.data + \", length=\" + evt.data.size,\"blue\");    } else {      fancy_log('pc2 said: ' + evt.data, \"blue\");    }  }  channel.onopen = function() {    log(\"pc1 onopen fired for \" + channel);    channel.send(\"pc1 says Hello...\");    log(\"pc1 state: \" + channel.state);  }  channel.onclose = function() {    log(\"pc1 onclose fired\");  };  log(\"pc1 state:\" + channel.readyState);      }         hacks.mozilla.org博客上有更多Firefox实现的信息和演示。2013年初Firefox 18将会提供WebRTC基础功能的支持，并且附加功能在支持计划中，包括getUserMedia和createOffer/应答限制，以及TURN（允许浏览器在防火墙后进行互相通信）。         WebRTC的更多信息，请参阅WebRTC入门。这里甚至还有一本正在印刷中的WebRTC书籍，目前以电子书格式提供。         分辨率限制         Chrome 24及​​以上版本已经实现了分辨率限制功能。它可用于为getUserMedia()和RTCPeerConnection的addStream()调用设置视频的分辨率。         在simpl.info/getusermedia/constraints上有一个示例，通过设置一个断点和改变参数值展示不同的限制，。         这里有几个陷阱。在一个浏览器标签中设置getUserMedia的分辨率限制会影响所有的标签。设置不允许限制分辨率会出现一个非常奇怪的错误信息： navigator.getUserMedia error:  NavigatorUserMediaError {code: 1, PERMISSION_DENIED: 1}         如果你在本地而不是服务器上使用getUserMedia，会出现和上面一样的错误。         流式屏幕捕获         Chrome开发版已经支持标签捕获。因此我们可以从标签中捕获一个可视区域，作为视频流用于本地或者RTCPeerConnection的addStream()。这对屏幕捕获和网页共享非常有用（《使用WebRTC实现远程屏幕共享》这篇文章正是讲到这方面的内容）。要了解更多信息，请参阅WebRTC标签内容捕获建议。         译自：http://updates.html5rocks.com/2012/12/WebRTC-hits-Firefox-Android-and-iOS         转载请注明：来自蒋宇捷的博客-http://blog.csdn.net/hfahe","title":"Firefox、Android、iOS遇见WebRTC"},{"content":"在线体验地址：http://tm.arcgisonline.cn/2012/1224/536.html --气象与经济建设、国防建设、社会发展和人民生活息息相关，及时有效地利用气象资源，能在经济发展、国家安全以及百姓衣食住行的方方面面起到趋利避害的作用，同时产生很大的社会经济效益。 一、系统概述 公众气象服务模版旨在为气象辅助单位和公众提供最新的气象信息和预报告警。模版功能设计源于用户真实需求，数据最大化参照气象部门的真实数据存储情况。因此模版可直接为气象行业的开发商所用。 系统Web端采用ArcGIS Javascript API进行设计开发，利用ArcGIS for Server发布的地图服务，影像服务以及GP服务等实现丰富的数据展现，后台利用C#.NET结合ArcGIS Engine进行数据获取和处理，数据层采用数据库MySQL和ArcGIS影像镶嵌数据集进行数据的存储。 二、系统特色 1、数据更新采用全自动流程化处理模式，无需任何人工干预    数据更新使用自主开发气象数据更新工具，该工具实现了从数据获取、处理（数据解析、影像配准校正、裁剪、重采样）到入库流程化全自动处理。工具以windows服务注册的方式进行安装部署，定时执行数据更新，无需干预，配以日志记录数据更新进度及状态，从而保证用户及时获取最新气象信息。 2、雷达卫星和气象云图时态推演，真正体验风云变幻   雷达卫星和气象云图数据在数据更新过程中自动集成时间信息，采用镶嵌数据集进行管理。前端以时态推演方式展示，用户可以直观看到风云流转，真正感受风云变幻。 3、预报数据服务器端插值，提高用户体验   气温预报数据插值在服务器端进行，生成气象预报产品，用户在客户端可以直接访问预报产品，大大提升了访问效率，提高用户体验。 三、系统功能   包括天气实况展示、实况监测、气象卫星时态展示、天气预报、灾害预警以及台风预报等功能模块。 1、天气实况 全国各城市的天气实况，包括天气、气温、风向风力等。 2、实况监测 包括温度、湿度、降水实况。 3、气象卫星 全国当日雷达及卫星云图的实况，并支持时态展示。 4、天气预报 包括降水预报及气温变化。主要预报全国未来72小时内的降水及气温变化，支持时态展示。 5、灾害预警 全国气象灾害预警，包括沙尘暴，雷电，大风，道路结冰，霜冻，台风，暴雪等，预警类型分为红橙黄绿。支持按预警类型查询。 6、台风预报 台风预报路径以及影响范围的展示，以及历史轨迹的回放。","title":"公众气象服务平台"},{"content":"1、子页面访问父页面元素 parent.document.getElementById('id')和document相关的方法都可以这样用 2、父页面访问子页面元素 document.getElementById('iframeId').contentDocument.getElementsByTagName('table'); contentDocument后可以使用document相关方法 3、子页面访问父页面js变量（注：父页面的js变量需为全局变量） 子页面var variable = parent.variableParent   (variableParent为父页面定义的变量) 4、父页面访问子页面js变量 这部分目前的解决方案是在父页面设置全局变量，在子页面进行修改后将子页面的变量赋值给父页面   以上仅代表个人观点，欢迎大家纠错","title":"html中iframe子页面与父页面元素的访问以及js变量的访问"},{"content":"既然是做前端了,学习CSS样式是必须的. <html xmlns=\"http://www.w3.org/1999/xhtml\"><head id=\"Head1\" runat=\"server\">    <title>ViewPage2<\/title>    <style type=\"text/css\">        /*CSS类选择器:按钮样式*/        .btn        {            background-color: SkyBlue;            width: 160px;            height: 24px;            font-size: 16px;            border: 1px solid red;            color: White;        }        /*鼠标经过样式*/        .btn:hover        {            background-color: Sienna;            width: 160px;            height: 24px;            font-size: 16px;            border: 1px solid yellow;            color: White;        }        /*父样式*/        .divouter        {            position: absolute;            left: 171px;            top: 179px;            background-color: SeaGreen;            color: Gold;            overflow: scroll;        }        /*继承父项样式, html元素也必须是父子关系*/        .divouter .redbg        {            background-color: Red;        }        /*继承父项样式*/        .divouter .yellowbg        {            background-color: yellow;        }        /*yellowbg下的所有td*/        .divouter .yellowbg td        {            background-color: Gray;        }        /*选择所有td*/        td        {            font-family: Arial, Helvetica, sans-serif;            font-size: 14px;            font-weight: bold;        }        /*id 选择器:选择id=login_tab的元素*/        #login_tab        {            width: 500px;            text-align: right;        }        /* 派生选择器:通过依据元素在其位置的上下文关系来定义样式        一层一层往下选择,最终选择最后那层的td*/        .divouter table tr td table td        {            width: 500px;            text-align: center;            background-color: Blue;        }        /*选择器的分组:分享相同的声明,所有的标题元素都是绿色的*/        h1, h2, h3, h4, h5, h6        {            color: green;        }        /*派生选择器:        类名为 fancy 的td单元         */        td.fancy        {            color: #f60;            background-color: #666;        }        /*派生选择器:        类名为 fancy 的th单元         */        th.fancy        {            color: #666;            background-color: #f60;        }        /*属性选择器:        带有 title 属性的所有元素设置样式        */        [title]        {            color: red;            background-color: ForestGreen;        }        /*属性选择器:        下面的例子为 title=\"W3School\" 的所有元素设置样式：        */        [title=\"W3School\"]        {            color: #f60;            background-color: DarkCyan;            border: 5px solid Black;        }        /*属性选择器:        结合派生        */        input[type=\"text\"]        {            width: 150px;            display: block;            margin-bottom: 10px;            background-color: YellowGreen;            font-family: Verdana, Arial;        }    <\/style><\/head><body>    <h1>        h1<\/h1>    <h2>        h2<\/h2>    <h3>        h3<\/h3>    <div class=\"divouter\">        .divouter        <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">            <tr>                <td>                    <input type=\"button\" name=\"name\" value=\" Test\" class=\"btn\" />                <\/td>                <td>                    <div class=\"redbg\">                        .divouter .redbg<\/div>                <\/td>                <td>                    <div class=\"yellowbg\">                        .divouter .yellowbg                        <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" id=\"login_tab\">                            <tr>                                <td>                                    .divouter .yellowbg td                                <\/td>                            <\/tr>                        <\/table>                    <\/div>                <\/td>                <td>                    <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">                        <tr>                            <th>                                th                            <\/th>                            <td>                               派生选择器 td                                <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">                                    <tr>                                        <td>                                        TD2                                        <\/td>                                    <\/tr>                                <\/table>                            <\/td>                        <\/tr>                    <\/table>                <\/td>            <\/tr>            <tr>                <td class=\"fancy\">                   派生选择器 td.fancy                <\/td>                <th class=\"fancy\">                   派生选择器 th.fancy                <\/th>                <td title=\"Test title\">                    属性选择器Test title                <\/td>                <td title=\"W3School\">                    属性选择器W3School                <\/td>                <td>                    <input type=\"text\" name=\"name\" value=\"属性选择器:结合派生 \" /><\/td>            <\/tr>        <\/table>    <\/div><\/body><\/html>","title":"CSS样式基础学习"},{"content":"前言     JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于JavaScript（Standard ECMA-262 3rd Edition - December 1999）的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）这些特性使JSON成为理想的数据交换语言。它是手机应用中的数据交换的最佳选择，当做为web服务时也是最为轻量级的数据交换格式。 JSon与JavaScript    JSON是JavaScript原生格式，这意味着在JavaScript中处理JSON数据不需要任何特殊的API或工具包。JSon的处理方式大至分两种，万能的eval和javascript语言中所有的JSON.parse()方法。JSON在javascript中是一种普通的数据类型。这两种方法都可以达到我们想要的目的，但是由于eval是会执行传入给它的字符串的，所以他们还是有一些的不同。JSON.parse()方法则可以识别出字符串中非法的字符并报错。JSon官网也提供了针对JSon数据解析的几个常用js文件（JSon2.js、JSon.js）以及针对各种语言提供的JSon解析插件（JSon官网：http://www.JSon.org）。 JSon的两种基础结构 “名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。 值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。 JSON具有以下这些形式 1、对象是一个无序的“‘名称/值’对”集合。一个对象以“{”（左括号）开始，“}”（右括号）结束。每个“名称”后跟一个“:”（冒号）；“‘名称/值’ 对”之间使用“,”（逗号）分隔（如图表1）。   2、数组是值（value）的有序集合。一个数组以“[”（左中括号）开始，“]”（右中括号）结束。值之间使用“,”（逗号）分隔（如图表2）。    3、值（value）可以是双引号括起来的字符串（string）、数值(number)、true、false、 null、对象（object）或者数组（array）。这些结构可以嵌套（如图表3）。    4、字符串（string）是由双引号包围的任意数量Unicode字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。 字符串（string）与C或者Java的字符串非常相似（如图表4）。   5、数值（number）也与C或者Java的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节（如图表5）。在JSon中空白可以加入到任何符号之间。   图表 5 JSon的使用     在常规开发中一般在后台代码使用JSon提供的jar包或类库将程序中的对象转换成JSon对象给前台页面使用。在java中应用中通常使用JSONArray与JSonObject的fromObject()方法将对象或数组转换成JSonObject对象。一般我们习惯用Map将数据封装成来，最后将Map对象转换成JSon对象，当数据量较多时这样做前台页面处理结构更清晰，更易维护。","title":"JSon使用入门"},{"content":"这两天一直在调Eclipse中运行Servlet的简单程序可是会出现若干种错误，网上查了好多，大家东拉西扯，可是多种解决办法没有一种适合我，经过一整天努力，终于解决了，现撰文分享，希望广大骂农朋友受益。 首先想说我用的是Eclipse JAVA EE版本的平台，至于MyEclipse的东东可能不适用。JDK版本是1.7的，tomcat版本是6.0的（这里想强调下本身应该是Eclipse3.x、JDK1.6、tomcat6.0搭配或Eclipse4.x、JDK1.7、tomcat7.0搭配，但我当时稀里糊涂安装好了，之后用tomcat7.0代替6.0版本，运行Servlet会出现HTTP Status 500的错误，估计是Eclipse中插件与tomcat 冲突的问题，因为关于WTP的插件是下自于http://blog.csdn.net/tiansong04该博客的，其都是基于tomcat6.0版本。所以在这里提醒广大和我一样的菜鸟盆友，版本搭配省去你找错误一半的时间，不要步我的后尘）。 先建Dynamic Web Project，其中建立3个文件，A.jsp: <h1>Hello World!<\/h1>\t<%\t\tString person=\"?\";\t    String user=request.getParameter(\"user\");\t\tif(user!=null) person=user;\t%>\tWelcome to WTP,<%= person%>B.jsp: <% \t\tString error_message=\"\";\t\tObject error=request.getAttribute(\"error\");\t\tif(error!=null) error_message=error.toString();\t%>\t<form action=\"HelloServlet\">\t\t<table cellspacing=\"4\">\t\t\t<tr>\t\t\t\t<td>Enter your user name:<\/td>\t\t\t\t<td><input name=\"user\" type=\"text\" size=\"20\"><\/td>\t\t\t\t<td style=\"color: red\"><%= error_message %><\/td>\t\t\t<\/tr>\t\t\t<tr>\t\t\t\t<td><\/td>\t\t\t\t<td><input type=\"submit\" value=\"Login\"><\/td>\t\t\t\t<td><\/td>\t\t\t<\/tr>\t\t<\/table>\t<\/form> HelloServlet.java(Servlet文件) \tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\t\t// TODO Auto-generated method stub\t\tString url=\"/A.jsp\";\t\tString user=request.getParameter(\"user\");\t\tif(user==null||user.length()==0)\t\t{\t\t\turl=\"/B.jsp\";\t\t\trequest.setAttribute(\"error\", \"User name must not be empty.\");\t\t}\t\t\t\tServletContext context=getServletContext();\t\tRequestDispatcher dispatcher=context.getRequestDispatcher(url);//调用RequestDispatcher类的forward方法转移到该URL上\t\tdispatcher.forward(request, response);\t} 具体实现其实就是页面的传值的判断。右击HelloServlet.java文件，使用debug on server 首先出现的是HTTP status 404~:  原因有可能1：你的HelloServlet文件位置有问题，可以调整。2：你的tomcat设置问题重新从Eclipse中的window->Preference->server 使用remove操作，然后重建server。3：是我看到的一个方法而且暂时解决了问题：摘自http://blog.csdn.net/alexhan_bing/article/details/2457891 如果你是按上述第3种取消注释的方法执行，你可能会出现如下错误报错“Server Tomcat v6.0 Server at localhost failed to start.” 于是你需要做如下事情： 1. 修改Tomcat6.0/conf/context.xml文件，新加两个属性. <Context  reloadable=\"true\" privileged=\"true\">      <!-- Default set of monitored resources -->     <WatchedResource>WEB-INF/web.xml<\/WatchedResource> <\/Context> 2. 重启Eclipse，此步非常重要，一定要做 做完后如果运行正常，那么恭喜你，如果还出现HTTP Status404错误，请你看看你创建的Dynamic web project里build/classes下是否生成了与Servlet同名的.class文件，如果没有，那么你需要检查下菜单项中的project 是否设置了 build Automatically，设置后重新编译就会生成.class.此时问题也就解决了。 结果图：   最后，希望此贴对大家有帮助，如果有错误或遗漏还希望各位补充指正，为前来看贴着提供方便，少走弯路","title":"Eclipse中运行Servlet出现HTTP Status *** 的若干错误解决"},{"content":"下载版本：http://blog.chinaunix.net/uid-20682147-id-3453384.html mono-3.0.2安装指南 一见 2012/12/27 目录 1. 前言 1 1.1. 什么是mono？ 1 1.2. 目的 1 2. 下载网址 1 3. 依赖关系 2 4. 安装步骤 2 4.1. mono 2 4.2. xsp 2 4.3. mod_mono 2 5. 修改Apache的httpd.conf 3 6. 附1：一键脚本 4 6.1. 一键脚本前提 4 6.2. 一键脚本全文 4 7. 附2：mod_mono.diff 6 1. 前言 1.1. 什么是mono？ mono是一个由Novell公司主持的一个致力于开创.net在Linux、FreeBSD、Mac OS X和Solaris上使用的开源工程。 1.2. 目的 本文档试图以最简单方式阐明mono-3.0.2版本的安装。mono采用的是automake编译方式，包括它所依赖的库，正因为这种依赖，使用得编译安装稍变复杂。 2. 下载网址 mono、xsp和mod_mono的下载网址均为： http://download.mono-project.com/sources/ 3. 依赖关系 1) mono无依赖； 2) xps依赖mono； 3) mod_mono的安装依赖Apache，关于Apache的安装，请参考另一篇文章《apache2.4安装指南》。 4. 安装步骤 4.1. mono 1) ./configure --prefix=/usr/local/mono（注：将mono安装到/usr/local/mono目录下） 2) make 3) make install 4.2. xsp xps的安装需要注意一下，如果直接以标准的automake方式编译，可能会遇到错误，以下面的步骤操作，可帮助避免错误： 1) export PATH=/usr/local/mono/bin:$PATH（需要用到mono提供的dmcs、gmcs等命令） 2) export PKG_CONFIG_PATH=/usr/local/mono/lib/pkgconfig:$PKG_CONFIG_PATH（XSP依赖mono） 3) sed -i -e 's! test !!' Makefile.am（不编译test，因为test可能编译失败） 4) ./configure --prefix=$XSP_HOME --disable-docs（文档也不编译，减少遇到错误的概率） 5) make 6) make install 4.3. mod_mono 对于mod_mono-2.10版本，如果依赖的是Apache2.4版本，则需要修改mod_mono.c后才可以编译通过，需要修改的地方请参见“附2：mod_mono.diff”。而如果是Apache2.2版本，则不用做任何修改。 1) ./configure --prefix=/usr/local/mod_mono --with-apxs=/usr/local/httpd/bin/apxs（假设将Apache安装在/usr/local/httpd目录下） 2) make 3) make install 5. 修改Apache的httpd.conf 成功安装mono后，需要对Apache的httpd.conf文件进行修改，修改点包括： 1) 加入：include /usr/local/httpd/conf/mod_mono.conf 2) 加入以下内容（这部分需要根据实际进行修改）： <VirtualHost *:80>   ServerName mono.com   ServerAlias mono.com   ServerAdmin web-admin@mono.com   DocumentRoot /usr/local/xsp/lib/xsp/test      # MonoServerPath can be changed to specify which version of ASP.NET is hosted   # mod-mono-server1 = ASP.NET 1.1 / mod-mono-server2 = ASP.NET 2.0   # For SUSE Linux Enterprise Mono Extension, uncomment the line below:   # MonoServerPath mono.com \"/opt/novell/mono/bin/mod-mono-server2\"   # For Mono on openSUSE, uncomment the line below instead:   MonoServerPath mono.com \"/usr/local/xsp/bin/mod-mono-server4\"   # To obtain line numbers in stack traces you need to do two things:    # 1) Enable Debug code generation in your page by using the Debug=\"true\"    #    page directive, or by setting <compilation debug=\"true\" /> in the    #    application's Web.config   # 2) Uncomment the MonoDebug true directive below to enable mod_mono debugging   MonoDebug mono.com true   # The MONO_IOMAP environment variable can be configured to provide platform abstraction   # for file access in Linux.  Valid values for MONO_IOMAP are:   #    case   #    drive   #    all   # Uncomment the line below to alter file access behavior for the configured application   MonoSetEnv mono.com MONO_IOMAP=all      #   # Additional environtment variables can be set for this server instance using    # the MonoSetEnv directive.  MonoSetEnv takes a string of 'name=value' pairs    # separated by semicolons.  For instance, to enable platform abstraction *and*    # use Mono's old regular expression interpreter (which is slower, but has a   # shorter setup time), uncomment the line below instead:   # MonoSetEnv mono.com MONO_IOMAP=all;MONO_OLD_RX=1   MonoApplications mono.com \"/:/usr/local/xsp/lib/xsp/test\"   <Location \"/\">     Allow from all     Order allow,deny     MonoSetServerAlias mono.com     SetHandler mono     SetOutputFilter DEFLATE     SetEnvIfNoCase Request_URI \"\\.(?:gif|jpe?g|png)$\" no-gzip dont-vary   <\/Location>   <IfModule mod_deflate.c>     AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript   <\/IfModule> <\/VirtualHost> 6. 附1：一键脚本 6.1. 一键脚本前提 1) 使用root用户操作； 2) Apache安装在/usr/local/httpd目录下； 3) mono、xps和mod_mono安装包都放在同一个目录下，如： ~/app # ls mod_mono-2.10.tar.bz2  mono-3.0.2.tar.bz2  xsp-2.10.2.tar.bz2 4) 如果是Apache2.4，还需要将mod_mono.diff文件和安装包放在同一个目录下。 6.2. 一键脚本全文 #!/bin/sh # Writed by yijian on 2012/12/27 # A key to install mono on linux export APACHE_HOME=/usr/local/httpd export MONO_HOME=/usr/local/mono export XSP_HOME=/usr/local/xsp export MOD_MONO_HOME=/usr/local/mod_mono mono=`basename mono-*.tar.bz2 .tar.bz2` xsp=`basename xsp-*.tar.bz2 .tar.bz2` mod_mono=`basename mod_mono-*.tar.bz2 .tar.bz2` basedir=`pwd` apache_version=`$APACHE_HOME/bin/httpd -V|awk -F\"[/ .]\" '/Server version/{print $5}'` echo \"Apache version: $apache_version\" # Compile & install mono echo \"tar xjf $mono.tar.bz2\" cd $basedir #tar xjf $mono.tar.bz2 cd $basedir/$mono #./configure --prefix=$MONO_HOME #if test $? -ne 0; then # exit 1 #fi #make #make install # Compile & install XSP export PATH=$MONO_HOME/bin:$PATH export PKG_CONFIG_PATH=$MONO_HOME/lib/pkgconfig:$PKG_CONFIG_PATH cd $basedir tar xjf $xsp.tar.bz2 cd $basedir/$xsp sed -i -e 's! test !!' Makefile.am ./configure --prefix=$XSP_HOME --disable-docs if test $? -ne 0; then exit 1 fi make if test $? -ne 0; then exit 1 fi make install if test $? -ne 0; then exit 1 fi # Compile & install mod_mono cd $basedir tar xjf $mod_mono.tar.bz2 if test $apache_version -gt 2; then if test -f ./mod_mono.diff; then echo \"cp ./mod_mono.diff $mod_mono/src/\" cp ./mod_mono.diff $mod_mono/src/ if test $? -ne 0; then exit 1 fi fi fi cd $basedir/$mod_mono/src if test -f ./mod_mono.diff; then echo \"patch mod_mono.c mod_mono.diff\" patch mod_mono.c mod_mono.diff fi cd $basedir/$mod_mono ./configure --prefix=$MOD_MONO_HOME --with-apxs=$APACHE_HOME/bin/apxs if test $? -ne 0; then exit 1 fi make if test $? -ne 0; then exit 1 fi make install if test $? -ne 0; then exit 1 fi cd $basedir echo \"finished!\" exit 0 7. 附2：mod_mono.diff 389c389 <  return unixd_config.user_id; --- >  return ap_unixd_config.user_id; 399c399 <  return unixd_config.group_id; --- >  return ap_unixd_config.group_id; 409c409 <  return unixd_config.user_name; --- >  return ap_unixd_config.user_name; 488c488 <  rv = unixd_set_global_mutex_perms (xsp->dashboard_mutex); --- >  rv = ap_unixd_set_global_mutex_perms (xsp->dashboard_mutex); 850,857c850 < #if defined(APACHE22) <  return c->remote_addr->port; < #else <  apr_port_t port; <  apr_sockaddr_port_get (&port, c->remote_addr); <  return port; < #endif <  --- >  return c->client_addr->port; 863d855 < #if defined(APACHE22) 865,869d856 < #else <  apr_port_t port; <  apr_sockaddr_port_get (&port, r->connection->local_addr); <  return port; < #endif 1981c1968 <  info.remote_ip_len = strlen (r->connection->remote_ip); --- >  info.remote_ip_len = strlen (r->connection->client_ip); 2029c2016 <  ptr += write_string_to_buffer (ptr, 0, r->connection->remote_ip, info.remote_ip_len); --- >  ptr += write_string_to_buffer (ptr, 0, r->connection->client_ip, info.remote_ip_len);","title":"mono-3.0.2安装指南及一键安装脚本"},{"content":"1、善用css缩写可以减少页面文件大小，提高下载速度，同时使代码简洁可读。 如： div{     border-top:1px solid #cccccc;     border-left:1px solid #cccccc;     border-right:1px soli #cccccc;     border-bottom:1px solid #cccccc; } 可以写为 p{border:1px solid #cccccc} 再如： div{     margin-top:10px;     margin-right:20px;     margin-bottom:30px;     margin-left:40px; } 可以改写为： /*注意上、右、下、左的书写顺序*/ div{margin:10px 20px 30px 40px} /*注意，数值与单位不能有空格，每个值之间用空格隔开*/ (详细请参考：css2参考手册、常用css缩写总结) 2、可以同时为一个html元素的class属性设定多个规则(多重class定义)。 通常我们写法为：<p class=”a”><\/p> 实际上我们可以为p元素指定多个规则，如： CSS： .a{…} .b{….} HTML： <p class=\"a b\">该元素同时包括a和b中设定的样式<\/p> 注意：多个规则之间用空格分开。 3、明确定义单位，除非值为0 忘记定义尺寸是css初学者新手普遍存在的问题。在html我们可以写width=”100”，但在css中应该给出一个准确的单位。如：width:100px;height:50px;font-size:9pt ，0值除外，因为不论对于任何单位。0值的大小都是相等的。 注意：不要在数值和单位之间加空格。 4、区分大小写 在xhtml中，css定义的元素名称是区分大小写的，class和id的值在html和xhtml中也是区分大小写的，所以为了避免错误，推荐一律使用小写。 如#aaa,与#AAA是不同的，在xhtml中，p和P也是不同的.他们之间不会覆盖。 如果在css中定义了#aaa，在html元素中使用AAA来应用将不能得到#aaa中定义的样式。 示例代码： CSS: #aaa{border:1px solid #ccc}   HTML: <div id=\"AAA\">显示不出来1个像素的边线<\/div> 5、CSS的最近优先原则 如果对一个元素定义了多次样式，则以最近的一级优先，最近一级的样式将覆盖其他的样式定义。 如： CSS: p{color:red} .blue{color:blue} .yellow{color:yellow} HTML: <p>此处显示为红色<\/p> <p class=\"blue\">此处显示为蓝色<\/p> <p class=\"blue\" style=\"color:green\">此处显示为绿色<\/p> <p class=\"blue yellow\">此处显示为黄色<\/p> 注意： （1）注意样式的几个优先顺序(优先级由上至下递减)： --元素style设定 --head区<style><\/style>中的设定 --外部引用css文件 （2）优先级不是按访问顺序来设定的，而是又css中的声明顺序来设定的。 如上例中<p class=\"yellow blue\">此处显示为黄色<\/p>也显示为黄色，因为在css定义中.yellow在.blue的后面。 6、使用子选择器减少id和class的定义 例如： #contain{..} #contain_ul{...} .contail_li{...} <div id=\"contain\">     <ul id=\"contain_ul\">         <li class=\"contain_li\"><\/li>         <li class=\"contain_li\"><\/li>     <\/ul> <\/div> 可以更改为： #contain{..} #contain ul{...} .contain ul li{...} <div id=\"contain\"> <ul>     <li><\/li>     <li><\/li> <\/ul> <\/div> 7、不要给背景图片路径加引号 将background:url(\"xxx.gif\")改为background:url(xxx.gif) 因为对于部分浏览器加引号反而会引起错误。 8、背景图片的路径是相对与当前css页面的路径。 例如： 有如下目录结构 |--images    |--xxx.gif |--css    |--xx.css |--index.html 代码内容 index.html引用xx.css文件。<link rel=\"stylesheet\" href=\"css/xx.css\" /> xx.css要引用xxx.gif图片其写法为：background:url(../images/xxx.gif) 9、使用组选择器为不同元素应用相同的样式 如h1,h2,h3,div{font-size:16px;font-weight:bold} 则h1,h2,h3,div元素的样式都为字体16像素，字体粗体 10、书写正确的链接样式 当用css定义链接的各种状态时，一定要注意其书写顺序，即：:link :visited :hover :active。 如果不按照该顺序书写可能无法达到自己希望的效果。为了记忆该顺序我们抽取每个单词的首字母：L V H A，你可以通过记忆LoVe,Hate,两个单词来记住其顺序。 11、禁止内容换行与强制内容换行 在表格或层中我们可能希望内容不换行或强制换行，我们可以通过一些css属性来达到这些要求。 禁止换行：white-space:nowrap 强制换行：word-wrap: break-word; word-break: normal; 12、区别relative和absolute Absolute，CSS中的写法是：position:absolute; 他的意思是绝对定位，他是参照浏览器的左上角，配合TOP、RIGHT、BOTTOM、LEFT(下面简称TRBL)进行定位，在没有设定TRBL，默认依据父级的做标原始点为原始点。如果设定TRBL并且父级没有设定position属性，那么当前的absolute则以浏览器左上角为原始点进行定位，位置将由TRBL决定。 Relative，CSS中的写法是：position:relative;  他的意思是绝对相对定位，他是参照父级的原始点为原始点，无父级则以BODY的原始点为原始点，配合TRBL进行定位，当父级内有padding等CSS属性时，当前级的原始点则参照父级内容区的原始点进行定位。 13、区别div和span div是一个块级元素，可以包含段落，表格等内容，用于放置不同的内容。一般我们在网页通过div来布局定位网页中的每个区块。 span是一个内联元素，没有实际意义，它的存在纯粹是为了应用样式，给一段内容加上<span><\/span>标记可以通过在span上定义样式来设定其内容的样式。 14、区别display和visibility display:none和visibility:hidden都可以隐藏一个元素 但visibility:hidden只是隐藏了元素的内容，但其使用的位置空间仍然被保留。 而display:none则相当把元素从页面中去除，其占用位置也将被删除。","title":"14个常见的CSS技巧及常见问题"},{"content":"Apache2.4安装指南 一见 2012/12/26 目录 1. 前言 1 2. 依赖库 1 3. Apache2.4下载网址 1 4. 安装步骤 2 4.1. 安装Pcre 2 4.2. 安装Apache 2 5. 修改配置 2 6. 附1：Apache官方中文文档主页 3 7. 附2：一键脚本 3 7.1. 一键脚本前提 3 7.2. 一键脚本全文 3 1. 前言 本文档试图以最简单方式阐明Apache2.4版本的安装。Apache采用的是automake编译方式，包括它所依赖的库，正因为这种依赖，使用得编译安装稍变复杂。 如果喜欢英文阅读，可直接查看官方的指南：http://httpd.apache.org/docs/2.4/install.html，这里有详细的说明。 2. 依赖库 Apache依赖apr、apr-util和pcre，下载网址为： 1) Apr和Apr-util：http://apr.apache.org/。截止2012/12/26，版本分别为：apr-1.4.6.tar.gz和apr-util-1.5.1.tar.gz； 2) Pcre：http://pcre.org/（实际下载网址是http://sourceforge.net/projects/pcre/files/pcre/和ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/，建议从sourceforge.net处下载，后一个经常抽风）。截止2012/12/26，版本为：pcre-8.32.tar.gz。 3. Apache2.4下载网址 http://httpd.apache.org/download.cgi#apache24 Apache2.4的源代码包为：httpd-2.4.3.tar.gz（注意最后一位版本号3可能不同）。 4. 安装步骤 Apr和Apr-util不用特别去编译和安装，随Apache一起完成，见下面的“安装Apache”一节。 4.1. 安装Pcre 在安装Apache之前，需要安装好Pcre，安装过程完全遵循automake方式，步骤依次如下： 1) ./configure --prefix=/usr/local/pcre（注：将Pcre安装到/usr/local/pcre目录下） 2) make 3) make install 4.2. 安装Apache 1) 将httpd-2.4.3.tar.gz上传到编译目录下（这里假设编译目录为/tmp/X，也可以为其它任意目录） 2) 进入/tmp/X目录，解压源码包：tar xzf httpd-2.4.3.tar.gz，解压后会在/tmp/X产生一个httpd-2.4.3目录，在httpd-2.4.3目录下还会有个srclib子目录 3) 将Apr和Apr-util源码包上传到srclib子目录 4) 进入srclib子目录，将Apr和Apr-util源码包解压，如：tar xzf apr-1.4.6.tar.gz; tar xzf apr-util-1.5.1.tar.gz，注意解压后产生的Apr和Apr-util目录是带版本号的 5) 重命名Apr和Apr-util目录，去掉后面的版本号，如：mv apr-1.4.6 apr; mv apr-util-1.5.1 apr-util（这个在官方的指南里有说明的） 6) 进入/tmp/X/httpd-2.4.3目录，按照automake方式来编译Apache（注意需要指定Pcre）： ./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre （注：/usr/local/httpd是Apache的安装目录，可根据需要修改）。 7) 接下来执行make编译源代码 8) 编译成功后，执行make install即可将Apache安装到/usr/local/httpd 目录下 9) 至此，大功告成！！！ 5. 修改配置 如将Apache安装在/usr/local/httpd目录下，则进入/usr/local/httpd/conf目录，对http.conf按照需要进行修改，常修改的行有： 1) Listen 80 2) DocumentRoot \"/usr/local/httpd/htdocs\" 6. 附1：Apache官方中文文档主页 http://httpd.apache.org/docs/2.4/ 7. 附2：一键脚本 7.1. 一键脚本前提 1) 使用root用户操作； 2) Apr、Apr-util、Pcre和Apache安装包都放在同一个目录下，如： ~/app # ls apr-1.4.6.tar.gz  apr-util-1.5.1.tar.gz  httpd-2.4.3.tar.gz  pcre-8.32.tar.gz 3) 目录下不要放其它后缀为.tar.gz的文件 7.2. 一键脚本全文 #!/bin/sh # Writed by yijian on 2012/12/26 # A key to install apache # Download #which wget #if test $? -ne; then # echo \"wget NOT FOUND\" #else # wget \"http://mirror.bjtu.edu.cn/apache/apr/apr-1.4.6.tar.gz\" # wget \"http://mirror.bjtu.edu.cn/apache/apr/apr-util-1.5.1.tar.gz\" # wget \"http://labs.mop.com/apache-mirror/httpd/httpd-2.4.3.tar.gz\" # wget \"http://nchc.dl.sourceforge.net/project/pcre/pcre/8.32/pcre-8.32.tar.gz\" #fi # Get names apr_tar_gz=`ls |grep -e \"apr-[0-9]*\\.[0-9]*\\.[0-9]*\\.tar\\.gz\"` apr_util_tar_gz=`ls |grep -e \"apr-util-[0-9]*\\.[0-9]*\\.[0-9]*\\.tar\\.gz\"` apr=`basename $apr_tar_gz .tar.gz` apr_util=`basename $apr_util_tar_gz .tar.gz` httpd=`basename httpd-*.tar.gz .tar.gz` pcre=`basename pcre-*.tar.gz .tar.gz` echo $apr echo $apr_util echo $pcre echo $httpd # unzip files tar xzf $apr.tar.gz tar xzf $apr_util.tar.gz tar xzf $pcre.tar.gz tar xzf $httpd.tar.gz # Depends mv $apr $httpd/srclib/apr if test $? -ne 0; then exit 1 fi mv $apr_util $httpd/srclib/apr-util if test $? -ne 0; then exit 1 fi # Compile pcre cd $pcre ./configure --prefix=/usr/local/pcre make if test $? -ne 0; then exit 1 fi make install if test $? -ne 0; then exit 1 fi # Compile apache cd ../$httpd ./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre if test $? -ne 0; then exit 1 fi make if test $? -ne 0; then exit 1 fi make install if test $? -ne 0; then exit 1 fi # Congratulation echo \"finished\" cd /usr/local/httpd/conf","title":"Apache2.4安装指南及一键安装脚本"},{"content":"            使用Struts2，我自己总结了几点需要注意的地方。             1、做文件上传的时候，前端 file 的 name 属性，必须与后台action 里边接收上传文件的File类型变量名称保持一致，否则无法执行上传任务。             2、后台action里边的变量命名，比如文件名变量声明，必须以File 类型变量为开始。比如File类型变量为upload，文件名应该申明为uploadFileName。   相同地，文件类型应声明为uploadContentType            3、如果想要上传较大的文件，需要更改struts的默认上传文件大小。比如：<constant name=\"struts.multipart.maxSize\" value=\"10000000000\" />                             OK, 目前就这些，希望对别人有所帮助吧。  ","title":"Struts2 文件上传 总结"},{"content":"jsp中实现文件下载 （一） 最简单的方式是在网页上做超级链接，如：<a href=\"music/abc.mp3\">点击下载<\/a>。 但是这样服务器上的目录资源会直接暴露给最终用户，会给网站带来一些不 安全的因素。 因此可以采用其它方式实现下载，可以采用： 1、RequestDispatcher的方式进行； 2、采用文件流输出的方式下载。 （推荐） 1、采用RequestDispatcher的方式进行 Jsp代码   <%     response.setContentType(\"application/x-download\");//设置为下载application/x-download     String filedownload = \"/要下载的文件名\";//即将下载的文件的相对路径     String filedisplay = \"最终要显示给用户的保存文件名\";//下载文件时显示的文件保存名称     String filenamedisplay = URLEncoder.encode(filedisplay,\"UTF-8\");     response.addHeader(\"Content-Disposition\",\"attachment;filename=\" + filedisplay);           try     {     RequestDispatcher dis = application.getRequestDispatcher(filedownload);     if(dis!= null)     {     dis.forward(request,response);     }     response.flushBuffer();     }     catch(Exception e)     {     e.printStackTrace();     }     finally     {           }   %>   2、采用文件流输出的方式下载 Jsp代码   <%@page language=\"java\" contentType=\"application/x-msdownload\" pageEncoding=\"gb2312\"%>   <%     //关于文件下载时采用文件流输出的方式处理：     //加上response.reset()，并且所有的％>后面不要换行，包括最后一个；        response.reset();//可以加也可以不加     response.setContentType(\"application/x-download\");      //application.getRealPath(\"/main/mvplayer/CapSetup.msi\");获取的物理路径      String filedownload = \"想办法找到要提供下载的文件的物理路径＋文件名\";    String filedisplay = \"给用户提供的下载文件名\";     String filedisplay = URLEncoder.encode(filedisplay,\"UTF-8\");     response.addHeader(\"Content-Disposition\",\"attachment;filename=\" + filedisplay);        java.io.OutputStream outp = null;     java.io.FileInputStream in = null;     try     {     outp = response.getOutputStream();     in = new FileInputStream(filenamedownload);        byte[] b = new byte[1024];     int i = 0;        while((i = in.read(b)) > 0)     {     outp.write(b, 0, i);     }   //     outp.flush();   //要加以下两句话，否则会报错   //java.lang.IllegalStateException: getOutputStream() has already been called for //this response     out.clear();   out = pageContext.pushBody();   }     catch(Exception e)     {     System.out.println(\"Error!\");     e.printStackTrace();     }     finally     {     if(in != null)     {     in.close();     in = null;     }   //这里不能关闭     //if(outp != null)     //{     //outp.close();     //outp = null;     //}     }   %>   对于第二种方法，我认为应该是比较常用的。不过有几个地方是值得我们注意的： 一、采用第二种方法的主要优点是实际文件的存放路径对客户端来说是透明的。 这个文件可以存在于任何你的服务器能够取得到的地方，而客户端不一定能直接得到。例如文件来自于数据库或者内部网络的一个FTP服务器。还句话说，这种方式可以实现隐藏实际文件的URL地址。 二、为了防止客户端浏览器直接打开目标文件（例如在装了MS Office套件的Windows中的IE浏览器可能就会直接在IE浏览器中打开你想下载的doc或者xls文件），你必须在响应头里加入强制下载的MIME类型： response.setContentType(\"application/force-download\");//设置为下载application/force-download 这样，就可以保证在用户点击下载链接的时候浏览器一定会弹出提示窗口来询问你是下载还是直接打开并允许你选择要打开的应用程序，除非你设置了浏览器的一些默认行为。 或者，你想让客户端自行处理各种不同的文件类型，你可以在服务器的配置文件中配置MIME类型映射，通过简单的判断文件后缀名来处理。例如，在Tomcat中设置MIME响应类型： 如果文件在客户端中的响应程序类型和期望不一致，修改$TOMCAT_HOME\\conf\\web.xml文件中的如下部分 ： <mime-mapping>   <extension>zip<\/extension>   <mime-type>application/zip<\/mime-type> <\/mime-mapping> <mime-mapping>   <extension>mht<\/extension>   <mime-type>message/rfc822<\/mime-type> <\/mime-mapping> …… 三、在响应头中尽量不要设置浏览器缓存期限。 有时候用户在点击了下载链接后，在弹出窗口中，用户想直接点击“打开”，而不想保存到指定路径。这时候如果我们在响应头中限制了不允许使用浏览器缓存（即总是刷新），在IE浏览器中我们将无法直接打开该文件。因为限制了不允许使用缓存，浏览器无法将文件保存到临时文件夹（即缓存）。 也就是说，在响应头中不要进行如下的设置（已注释）：   //response.addHeader(\"pragma\",\"NO-cache\");   //response.addHeader(\"Cache-Control\",\"no-cache\");   //response.addDateHeader(\"Expries\",0); 四、文件名为中文或其他unicode字符时的处理。 有时候提供下载的文件名中包含中文字符或者其他unicode字符，会导致浏览器无法正确的采用默认的文件名保存文件。我们应该记住在响应头中包含filename字段并采用ISO8859-1编码（推荐）或者采用UTF-8编码： response.setHeader(\"Content-disposition\",\"attachment; filename=\"+new String(filename.getBytes(\"UTF-8\"),\"iso8859-1\")); //采用ISO8859-1编码 response.setHeader(\"Content-disposition\",\"attachment; filename=\"+URLEncoder.encode(filename, \"UTF-8\")); //采用UTF-8编码 但是，这种方式在不同的浏览器中表现也有所不同。例如在IE和Firefox中，采用ISO8859-1编码可以正确显示文件名，而在Opera中不管采用那种编码，默认保存的文件名都无法做到正确显示。 所以最好的方法其实就是尽量在文件名中使用ascii编码。 五、由于采用流的方式进行输入输出，我们必须保证在使用完毕后关闭流的资源。 一般我们把关闭流的操作放在finally块中，以保证在程序段结束前一定会关闭流的资源： InputStream is = null; ServletOutputStream sos = null; try {   is = ...; //通过某种方式读进数据到输入流   sos = response.getOutputStream(); //打开输入流   byte[] buff = new byte[2048];   int bytesRead;   while(-1 != (bytesRead = bis.read(buff, 0, buff.length))) {   sos.write(buff,0,bytesRead);   sos.flush();   } } catch(IOException ex) {   //TODO something with IOException } catch(Exception ex) {   //TODO something with Exception } finally {   if(is != null) {   is.close(); //关闭输入流   }   if(sos != null) {   sos.close(); //关闭输入流   } }    实际用法见项目中csv、pdf、和excel下载的方法。","title":"如何用jsp中实现文件下载"},{"content":"jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法   $(\"#myELement\")    选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素 $(\"div\")           选择所有的div标签元素，返回div元素数组 $(\".myClass\")      选择使用myClass类的css的所有元素 $(\"*\")             选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(\"#myELement,div,.myclass\")   层叠选择器： $(\"form input\")         选择所有的form元素中的input元素 $(\"#main > *\")          选择id值为main的所有的子元素 $(\"label + input\")     选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素 $(\"#prev ~ div\")       同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签   基本过滤选择器： $(\"tr:first\")               选择所有tr元素的第一个 $(\"tr:last\")                选择所有tr元素的最后一个 $(\"input:not(:checked) + span\")     过滤掉：checked的选择器的所有的input元素   $(\"tr:even\")               选择所有的tr元素的第0，2，4... ...个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始）   $(\"tr:odd\")                选择所有的tr元素的第1，3，5... ...个元素 $(\"td:eq(2)\")             选择所有的td元素中序号为2的那个td元素 $(\"td:gt(4)\")             选择td元素中序号大于4的所有td元素 $(\"td:ll(4)\")              选择td元素中序号小于4的所有的td元素 $(\":header\") $(\"div:animated\") 内容过滤选择器：   $(\"div:contains('John')\") 选择所有div中含有John文本的元素 $(\"td:empty\")           选择所有的为空（也不包括文本节点）的td元素的数组 $(\"div:has(p)\")        选择所有含有p标签的div元素 $(\"td:parent\")          选择所有的以td为父节点的元素数组 可视化过滤选择器：   $(\"div:hidden\")        选择所有的被hidden的div元素 $(\"div:visible\")        选择所有的可视化的div元素 属性过滤选择器：   $(\"div[id]\")              选择所有含有id属性的div元素 $(\"input[name='newsletter']\")    选择所有的name属性等于'newsletter'的input元素   $(\"input[name!='newsletter']\") 选择所有的name属性不等于'newsletter'的input元素   $(\"input[name^='news']\")         选择所有的name属性以'news'开头的input元素 $(\"input[name$='news']\")         选择所有的name属性以'news'结尾的input元素 $(\"input[name*='man']\")          选择所有的name属性包含'news'的input元素   $(\"input[id][name$='man']\")    可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素   子元素过滤选择器：   $(\"ul li:nth-child(2)\"),$(\"ul li:nth-child(odd)\"),$(\"ul li:nth-child(3n + 1)\")   $(\"div span:first-child\")          返回所有的div元素的第一个子节点的数组 $(\"div span:last-child\")           返回所有的div元素的最后一个节点的数组 $(\"div button:only-child\")       返回所有的div中只有唯一一个子节点的所有子节点的数组   表单元素选择器：   $(\":input\")                  选择所有的表单输入元素，包括input, textarea, select 和 button   $(\":text\")                     选择所有的text input元素 $(\":password\")           选择所有的password input元素 $(\":radio\")                   选择所有的radio input元素 $(\":checkbox\")            选择所有的checkbox input元素 $(\":submit\")               选择所有的submit input元素 $(\":image\")                 选择所有的image input元素 $(\":reset\")                   选择所有的reset input元素 $(\":button\")                选择所有的button input元素 $(\":file\")                     选择所有的file input元素 $(\":hidden\")               选择所有类型为hidden的input元素或表单的隐藏域   表单元素过滤选择器：   $(\":enabled\")             选择所有的可操作的表单元素 $(\":disabled\")            选择所有的不可操作的表单元素 $(\":checked\")            选择所有的被checked的表单元素 $(\"select option:selected\") 选择所有的select 的子元素中被selected的元素      选取一个 name 为”S_03_22″的input text框的上一个td的text值$(”input[@ name =S_03_22]“).parent().prev().text()   名字以”S_”开始，并且不是以”_R”结尾的$(”input[@ name ^='S_']“).not(”[@ name $='_R']“)   一个名为 radio_01的radio所选的值$(”input[@ name =radio_01][@checked]“).val();         $(\"A B\") 查找A元素下面的所有子节点，包括非直接子节点$(\"A>B\") 查找A元素下面的直接子节点$(\"A+B\") 查找A元素后面的兄弟节点，包括非直接子节点$(\"A~B\") 查找A元素后面的兄弟节点，不包括非直接子节点   1. $(\"A B\") 查找A元素下面的所有子节点，包括非直接子节点   例子：找到表单中所有的 input 元素   HTML 代码:   <form><label>Name:<\/label><input name=\"name\" /><fieldset>      <label>Newsletter:<\/label>      <input name=\"newsletter\" /><\/fieldset><\/form><input name=\"none\" /> jQuery 代码:   $(\"form input\") 结果:   [ <input name=\"name\" />, <input name=\"newsletter\" /> ]   2. $(\"A>B\") 查找A元素下面的直接子节点 例子：匹配表单中所有的子级input元素。   HTML 代码:   <form><label>Name:<\/label><input name=\"name\" /><fieldset>      <label>Newsletter:<\/label>      <input name=\"newsletter\" /><\/fieldset><\/form><input name=\"none\" /> jQuery 代码:   $(\"form > input\") 结果:   [ <input name=\"name\" /> ]   3. $(\"A+B\") 查找A元素后面的兄弟节点，包括非直接子节点 例子：匹配所有跟在 label 后面的 input 元素   HTML 代码:   <form><label>Name:<\/label><input name=\"name\" /><fieldset>      <label>Newsletter:<\/label>      <input name=\"newsletter\" /><\/fieldset><\/form><input name=\"none\" /> jQuery 代码:   $(\"label + input\") 结果:   [ <input name=\"name\" />, <input name=\"newsletter\" /> ]    4. $(\"A~B\") 查找A元素后面的兄弟节点，不包括非直接子节点 例子：找到所有与表单同辈的 input 元素   HTML 代码:   <form><label>Name:<\/label><input name=\"name\" /><fieldset>      <label>Newsletter:<\/label>      <input name=\"newsletter\" /><\/fieldset><\/form><input name=\"none\" /> jQuery 代码:   $(\"form ~ input\") 结果:   [ <input name=\"none\" /> ] 转载请标明出处 http://blog.csdn.net/shimiso        技术交流群:173711587","title":"jquery 选择器的强大总结"},{"content":"首先要说的是flex 的sdk3.0版本的跟sdk4.*版本的Panel的一些样式属性有不同，比如headerHeight在flex4中时不存在的，这里不做详解。 首先：去掉Panel的标题： 代码如下： myPanel.titleDisplay.parent.height = 0;//myPanel为Panel的id 我把这段语句放在application或者module的creationcomplete中，可以实现。效果如下： 大家不要怀疑，这确实是一个panel，只是没有了标题部分。 其次：设置透明度这个说了也是啰嗦，大家都会，不过还是提一下吧。 代码如下： myPanel.titileDisplay.parent.visiable =false;//设置标题全透明。 设置之前的效果  设置之后的效果","title":"flex4 panel 去掉标题，设置透明度效果。"},{"content":"作者:zhanhailiang 日期:2012-12-27 首先，请先阅读【前端优化】静态链接版本化； 其次，请细读find高级应用场景详解； 最后，进入本文的主旨：未优化前，使用xargs -n -1为所有匹配.html文件中的静态链接添加版本号，今天对find命令有更深入的了解，决定利用find的-exec参数来优化静态链接版本化的实现代码： #!/bin/sh version=`date +%s`find . -name \"*.html\" -exec sed -i -e \"/^\\s*<script/ { s/src=\\\"\\(.*\\.js\\)\\(?.*\\)*\\?\\\"/src=\\\"\\1?v=$version\\\"/g; }; /^\\s*<link/ { s/href=\\\"\\(.*\\.css\\)\\(?.*\\)*\\?\\\"/href=\\\"\\1?v=$version\\\"/g; }\" {} \\;","title":"【前端优化】静态链接版本化[final]"},{"content":"自己看代码，不解释。 Standby.js   function Standby (obj){\tthis.coverObj;// bei cover obj\tthis.loadingDiv; // loading div\t/* set loading div z-Index ,if you don't use 2 loading div ,don't need to use this function     the z-Index greater will dispaly over the less z-Index loading div.  */\tthis.zIndex = 2000;\t/*  you can change the loading image url  */\tthis.loadingImgUrl = \"http://www.leinhaeupl-neuber.de/img/loading_animated2.gif\";\t/* loading image size */\tthis.loadingImgWidth = '23px';\tthis.loadingImgHeight='23px';\t\t\tthis.loadingDiv = document.createElement(\"div\");\t\tdocument.body.appendChild(this.loadingDiv);\t\t\t\ttry{\t\t\tif(typeof(obj)== 'object'){\t\t\t\tthis.coverObj = obj;\t\t\t\tif(obj.id){\t\t\t\t\tthis.loadingDiv.id = obj.id+'_loadingDiv';\t\t\t\t}\t\t\t}else if (typeof(obj) == 'string'){\t\t\t\tthis.coverObj = document.getElementById(obj);\t\t\t\tthis.loadingDiv.id = obj+'_loadingDiv';\t\t\t}else{\t\t\t\tthrow \"obj has error!\";\t\t\t}\t\t}catch(e){\t\t\tvar msg = \"Can't not find the component by id[\"+obj+\"],plaese check!!\";\t\t\talert(msg);\t\t\t//console.log(msg+\" error :\"+e);\t\t}\t\t//console.log(this.coverObj);\t\t\t\tvar dheight = this.coverObj.offsetHeight;\t\tvar dwidth = this.coverObj.offsetWidth;\t\t//for body not to show scroll\t\tvar bodyheight = this.coverObj.clientHeight;\t\tvar bodywidth = this.coverObj.clientWidth;\t\t\t\tvar dtop = this.coverObj.offsetTop;\t\tvar dleft = this.coverObj.offsetLeft;\t\t\t\t// SET DIV CSS\t\tif(this.coverObj == document.body ){\t\t\tthis.loadingDiv.style.height = bodyheight;\t\t\tthis.loadingDiv.style.width = bodywidth;\t\t}else{\t\t\tthis.loadingDiv.style.height = dheight;\t\t\tthis.loadingDiv.style.width = dwidth;\t\t}\t\t\t\t\t\tthis.loadingDiv.style.display = \"none\";\t\tthis.loadingDiv.style.position = \"absolute\";\t\t//this.loadingDiv.style.float = \"left\";\t\tthis.loadingDiv.style.left = dleft;\t\tthis.loadingDiv.style.top = dtop;\t\tthis.loadingDiv.style.backgroundColor = \"#fff\";\t\tthis.loadingDiv.style.border = \"solid 1px #cccccc\";\t\tthis.loadingDiv.style.overflowX = \"hidden\";\t\t//this.loadingDiv.style.verticalAlign = \"middle\";\t\t//this.loadingDiv.style.textAlign = \"center\";\t\t//content\t\tvar contentObj = document.createElement(\"span\");\t\tthis.loadingDiv.appendChild(contentObj);\t\t\t\t//set font\t\t//contentObj.innerHTML=\"loading...\";\t\tcontentObj.innerHTML = \"<img src='\"+this.loadingImgUrl+\"' width='\"+this.loadingImgWidth+\"' height='\"+this.loadingImgHeight+\"'/>\"\t\tcontentObj.style.height = this.loadingImgHeight;\t\tcontentObj.style.width = this.loadingImgWidth;\t\t\t\tcontentObj.style.display = \"block\";\t\t//contentObj.style.lineHeight = parseInt(this.loadingDiv.style.height);\t\tcontentObj.style.marginTop = (parseInt(this.loadingDiv.style.height) - parseInt(contentObj.style.height))/2 + 'px';\t\tcontentObj.style.marginLeft = (parseInt(this.loadingDiv.style.width) - parseInt(contentObj.style.width))/2 + 'px';\t\t//contentObj.style.textAlign = \"center\";\t\t//contentObj.style.whiteSpace = \"nowrap\"; // not allow to 2 line\t\t\t}// show loading divStandby.prototype.show = function(){\tthis.loadingDiv.style.zIndex = this.zIndex;\tthis.loadingDiv.style.display = \"block\";}// hidden loading divStandby.prototype.hidden = function(){\tthis.loadingDiv.style.display = \"none\";} testStandby.html <HTML><HEAD><style>\t\t<\/style><script src=\"Standby.js\" type=\"text/javascript\"><\/script><\/HEAD>\t<BODY >\t<div id=\"div1\">\tasdfsadfsd<table id=\"table1\" border=\"1px\" style=\"background-color:#ff0;\">\t<tr>\t\t<th>col1<\/th>\t\t\t<th>col2<\/th>\t\t\t<th>col3<\/th>\t\t<\/tr>\t<tbody>\t\t<tr>\t\t<td>test1<\/td>\t\t\t<td>test1<\/td>\t\t\t<td>test1<\/td>\t\t\t<\/tr>\t\t\t<tr>\t\t<td>test1<\/td>\t\t\t<td>test1<\/td>\t\t\t<td>test1<\/td>\t\t\t<\/tr>\t\t\t<tr>\t\t<td>test1<\/td>\t\t\t<td>test1<\/td>\t\t\t<td>test1<\/td>\t\t\t<\/tr>\t\t<\/tbody><\/table>asdfasdf<br/>asdfas<br/>asdf<br/><input type=\"text\" id=\"input1\" value=\"asdfsadfasdf\" /><br/><input type=\"text\" id=\"input2\" value=\"asdfsadfasdf\" /><\/div>sadfasdfwer\t<script>// must run after all the html load;var standby0 = new Standby(document.body);standby0.zIndex=200000;standby0.show();var standby = new Standby(\"div1\");standby.zIndex =20000;standby.show();var standby1 = new Standby(\"table1\");standby1.zIndex = 2000;standby1.show();var standby2 = new Standby(\"input1\");standby2.zIndex = 2000;standby2.show();var standby3 = new Standby(document.getElementById('input2'));standby3.zIndex = 2000;standby3.show();var i = 3000;setTimeout(\"standby0.hidden()\",i);setTimeout(\"standby.hidden()\",i*2); setTimeout(\"standby1.hidden()\",i*3); setTimeout(\"standby2.hidden()\",i*4); setTimeout(\"standby3.hidden()\",i*4); <\/script><\/BODY>\t<\/HTML>  ","title":"js loading image class"},{"content":"原因分析: Flex 创建多个 State (场景)后 默认只会检查主State(场景)下的组件 对于在其他 State 下创建的组件在没有跳转到 该State(场景)之前是不可用的  <?xml version=\"1.0\" encoding=\"utf-8\"?><s:Application xmlns:fx=\"http://ns.adobe.com/mxml/2009\" \t\t\t   xmlns:s=\"library://ns.adobe.com/flex/spark\" \t\t\t   xmlns:mx=\"library://ns.adobe.com/flex/mx\" minWidth=\"955\" minHeight=\"600\" creationComplete=\"init()\">\t\t<fx:Script>\t\t<![CDATA[\t\tfunction init():void{\t\t\t//无法访问存在于场景\"State2\"中的组件\t\t\tmyText.text=\"NotFound\";\t\t}\t\t\t\tprotected function btn_clickHandler(event:MouseEvent):void\t\t\t{\t\t\t\t// TODO Auto-generated method stub\t\t\t}\t\t]]>\t<\/fx:Script>\t<s:layout>\t\t<s:BasicLayout/>\t<\/s:layout>\t<s:states>\t\t<s:State name=\"State1\"/>\t\t<s:State name=\"State2\"/>\t<\/s:states>\t<fx:Declarations>\t\t<!-- 将非可视元素（例如服务、值对象）放在此处 -->\t<\/fx:Declarations>\t<s:Button x=\"135\" y=\"228\" label=\"按钮\" id=\"btn\" click.State2=\"btn_clickHandler(event)\"/>\t\t<!-- myText 是存在于 State2 中-->\t<s:TextInput includeIn=\"State2\" x=\"134\" y=\"175\" id=\"myText\"/><\/s:Application> 解决方案: <?xml version=\"1.0\" encoding=\"utf-8\"?><s:Application xmlns:fx=\"http://ns.adobe.com/mxml/2009\" \t\t\t   xmlns:s=\"library://ns.adobe.com/flex/spark\" \t\t\t   xmlns:mx=\"library://ns.adobe.com/flex/mx\" minWidth=\"955\" minHeight=\"600\" creationComplete=\"init()\">\t\t<fx:Script>\t\t<![CDATA[\t\timport mx.events.*;\t\t\t\t\tfunction init():void{\t\t\t//在主场景中加入场景变化监听器\t\t\tthis.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,stateChange);\t\t}\t\t\t\t\t\tfunction stateChange(event:StateChangeEvent):void{\t\t\t\t//当场景(State)跳转到\"State2\"时 操作组件\t\t\t\tif(event.newState==\"State2\"){\t\t\t\t\tmyText.text=\"OK\";\t\t\t\t}\t\t\t}\t\t\t\tprotected function btn_clickHandler(event:MouseEvent):void\t\t\t{\t\t\t\tcurrentState=\"State2\";\t\t\t}\t\t]]>\t<\/fx:Script>\t<s:layout>\t\t<s:BasicLayout/>\t<\/s:layout>\t<s:states>\t\t<s:State name=\"State1\"/>\t\t<s:State name=\"State2\"/>\t<\/s:states>\t<fx:Declarations>\t\t<!-- 将非可视元素（例如服务、值对象）放在此处 -->\t<\/fx:Declarations>\t<s:Button x=\"135\" y=\"228\" label=\"按钮\" id=\"btn\" click=\"btn_clickHandler(event)\"/>\t\t<!-- myText 是存在于 State2 中-->\t<s:TextInput includeIn=\"State2\" x=\"134\" y=\"175\" id=\"myText\"/><\/s:Application>","title":"flex 多 State(场景)下组件不能访问的解决方案"},{"content":"JavaScript操作XML是通过XML DOM来完成的  Ie 下面是用ActiveX对象来实现的。 那么什么是XML DOM呢？ XML DOM 是： 用于 XML 的标准对象模型 用于 XML 的标准编程接口 中立于平台和语言 W3C 的标准 XML DOM 定义了所有XML 元素的对象和属性，以及访问它们的方法（接口）。 也就是说： XML DOM 是用于查询、添加、修改、删除XML 元素的标准。  ie创建 xml function xmlcreate() { var version = [ 'MSXML2.DOMDocument6.0', 'MSXML2.DOMDocument3.0', 'MSXML2.DOMDocument' ];     for(var i=0; i<version.length;i++) {          try {             var xml = new ActiveXObject(version[i]);             return xml;          }catch(e) {                        }     }     throw new Error('您的系统不支持MSXML库'); } //载入XML文件，两种方式：1.加载XML字符loadXML()；2.加载XML外部文件load() xml.loadXML('<root>\\n<user>Lee<\/user>\\n<\/root>'); //加载XML字符串 alert(xml.xml); 打印第一个内容 必须用标准DOM alert(xml.getElementsByTagName('user')[0].firstChild.nodeValue); 加载外部xml xml.load('a.xml'); 动态添加xml xml.load('a.xml'); var b = xml.createElement('bbb'); var root = xml.documentElement; root.appendChild(b); alert(xml.xml); 服务器端 同步/异步 在服务器端  默认用的异步加载  没加载完毕  就打印 肯定出不来 把这个值设为false 就能同步加载了 xml.async = false; 但是如果xml过大 会造成假死状态 不过异步比较好  但是异步又获取不到内容 这该怎么办呢  有个事件 xml.onreadystatechange = function 这个事件可以判断是否加载完成 不过要先载入事件 先把事件加载到内存中 然后再载入xml   事件里面有个属性  xml.readyState  可以判断是否加载完成 这个函数等xml全部加载好 开始处理 xml.onreadystatechange = function() {     if(xml.readyState ==4){    //如果正确就输出         if(xml.parseError == 0) {             alert(xml.xml);         }else {   //如果错误 就返回             var a = \"错误代码\"+xml.parseError.errorCode+'\\r\\n';             a += \"错误行号\"+xml.parseError.line+'\\r\\n';             a += \"错误上一行\"+xml.parseError.linepos+'\\r\\n';             a += \"错误信息\"+xml.parseError.reason+'\\r\\n';            alert(a);          }     } } DOM2操作xml //create  xml  第一个参数 命名空间 第二个 根节点 第三个 文档声明 var xml = document.implementation.createDocument('','root',null);   //创建xml var user = xml.createElement('user');                xml.documentElement.appendChild(user);             //插入user alert(xml.getElementsByTagName('user')[0].tagName);   //取得user dom2也有load方法 默认也是异步的 可以通过设置同步来加载 获取一条信息 var xml = document.implementation.createDocument(\"\",'root',null); xml.async = false; xml.load('a.xml'); alert(xml.getElementsByTagName('url')[0].firstChild.nodeValue); 也可以 通过 textContent  不过 ie不支持   alert(xml.getElementsByTagName('url')[0].textContent); dom如果异步的话 怎么判断是否加载完成呢 可以通过load方法判断 比ie简单了很多 var xml = document.implementation.createDocument(\"\",'root',null); xml.onload = function(){ alert(xml.getElementsByTagName('url')[0].textContent); } xml.load('a.xml'); ps  不过 load 只支持 firefox  和最新版本的opera 但是 w3c提供了2个对象处理xml var xml = new DOMParser(); //实例化xml对象 var a= \"<root><user>gwyy<\/user><\/root>\"; var xmldom = xml.parseFromString(a,'text/xml');   //通过xml对象创建xml var seria = new XMLSerializer()     //序列号xml var z = seria.serializeToString(xmldom); alert(z); DOM2没有错误对象  出错了 会给你返回一段xml格式的错误信息   //判断错误 var errors = xmldom.getElementsByTagName('parsererror'); if(errors.length > 0) {     throw new Error('错误信息：'+errors[0].textContent); } 下面是跨浏览器创建xml  //跨浏览器创建 function createxml(xmlstr) {     var xml = null;     if(typeof window.DOMParser != \"undefined\") {         xml = (new DOMParser).parseFromString(xmlstr,'text/xml');         var errors = xml.getElementsByTagName('parsererror');         if(errors.length > 0){            throw new Error('错误信息：'+errors);         }     } else if(typeof window.ActiveXObject != \"undefined\") {         var version = [ 'MSXML2.DOMDocument6.0', 'MSXML2.DOMDocument3.0', 'MSXML2.DOMDocument'         ];         for(var i=0;i<version.length;i++) {              try{                 xml = new ActiveXObject(version[i]);                 return xml;              }catch(e){              }         }         xml.loadXML(xmlstr);         if(xml.parseError != 0) {             throw new Error('错误信息'+xml.parseError.reason);         }         return xml;     } else {         throw new Error('你的系统或浏览器不支持xml');     }          return xml; } //序列化 function serializerXMl(xmlstr) {  var xml = \"\";  if(typeof window.XMLSerializer != \"undefined\") {     xml = (new XMLSerializer()).serializeToString(xmlstr);  } else if(typeof xmlstr.xml != \"undefined\"){      xml = xmlstr.xml;  }  return xml; } //实现 var xmlstr = \"<root><user>aaaa<\/user><\/root>\"; var xmldom = createxml(xmlstr); alert(serializerXMl(xmldom)); 为了跨浏览器 xml 只能放弃从外部加载xml","title":"javascript操作xml笔记"},{"content":"页面域关系： 主页面a.html所属域A：www.taobao.com 被iframe的页面b.html所属域B：www.alimama.com,假设地址：http://www.alimama.com/b.html 实现效果： A域名下的页面a.html中通过iframe嵌入B域名下的页面b.html,由于b.html的宽度和高度是不可预知而且会变化的,所以需要a.html中的iframe自适应大小. 问题本质: js对跨域iframe访问问题,因为要控制a.html中iframe的高度和宽度就必须首先读取得到b.html的大小,A、B不属于同一个域,浏览器为了安全性考虑，使js跨域访问受限,读取不到b.html的高度和宽度. 解决方案: 引入代理代理页面c.html与a.html所属相同域A，c.html是A域下提供好的中间代理页面，假设c.html的地址：www.taobao.com/c.html,它负责读取location.hash里面的width和height的值,然后设置与它同域下的a.html中的iframe的宽度和高度. 代码如下： a.html代码 首先a.html中通过iframe引入了b.html <iframe id=”b_iframe” height=”0″ width=”0″ src=”http://www.alimama.com/b.html” frameborder=”no” border=”0px” marginwidth=”0″ marginheight=”0″ scrolling=”no” allowtransparency=”yes” ><\/iframe> b.html代码 <script type=”text/javascript”>   var b_width = Math.max(document.documentElement.clientWidth,document.body.clientWidth);   var b_height = Math.max(document.documentElement.clientHeight,document.body.clientHeight);   var c_iframe = document.getElementById(”c_iframe”);   c_iframe.src = c_iframe.src+”#”+b_width+”|”+b_height; //http://www.taobao.com/c.html#width|height” } <\/script> <!–js读取b.html的宽和高,把读取到的宽和高设置到和a.html在同一个域的中间代理页面车c.html的src的hash里面–> <iframe id=”c_iframe”  height=”0″ width=”0″  src=”http://www.taobao.com/c.html” style=”display:none” ><\/iframe> c.html代码 <script type=”text/javascript”> var b_iframe = parent.parent.document.getElementById(”b_iframe”); var hash_url = window.location.hash; var hash_width = hash_url.split(”#”)[1].split(”|”)[0]+”px”; var hash_height = hash_url.split(”#”)[1].split(”|”)[1]+”px”; b_iframe.style.width = hash_width; b_iframe.style.height = hash_height; <\/script> a.html中的iframe就可以自适应为b.html的宽和高了. 其他一些类似js跨域操作问题也可以按这个思路去解决 另外：问题--- iframe的加载速度会比自己的js执行快，会没有效果。所以会有错误 这做个调整 在js中动态创建iframe 用innerHtml这种方式动态 控制了页面全加载结束时才创建一个iframe","title":"跨站域iframe自适应高度"},{"content":"1、当创建一个数组的时候避免用new操作符,用 var a:Array = [];而不用var a:Array = new Array(); 2、快速的复制一个数组： var copy : Array = sourceArray.concat (); 3、设置一个数组的值是非常忙的： employees.push ( employee ); employees[2] = employee; 4、从一个数组中取得值的速度是设置一个数组值的两倍快： var employee : Employee = employees[2]; 5、当不需要一个类的实例的时候尽量用静态的属性或方法： StringUtils.trim( \"text with space at end \" ); Class definition: package { public final class StringUtils { public static function trim( s : String ) : String { var trimmed : String ; // implementation... return trimmed; } } } 6、在整个程序的生命周期中都不会改变的变量用const定义常量： public const APPLICATION_PUBLISHER : String = \"Company, Inc. \"; 7、当一个类不需要有子类的时候应该将该类声明为final类型的： public final class StringUtils 8、变量和方法的长度在As3中并不影响什么性能，但在别的语言中可能就有影响： someCrazyLongMethodNameDoesntReallyImpactPerformanceTooMuch(); 9、将语句写在一行上面并不会影响AS3程序的性能，但在别的语言中却有影响： var i=0; j=10; k=200; 10、在内存占用上面if语句和switch语句并没有什么区别: 语句： if ( condition ) { // handle condition } 和语句： switch ( condition ) { case \"A \": // logic to handle case A break ; case \"B \": // logic to handle case B break ; } 占用的内存是一样的. 11、当你的程序处理分支较多的时候，你应该适当的排列他们出现的顺序，可以参照以下的方式进行： if ( conditionThatHappensAlot ) { //处理经常发生的业务逻辑 } else if ( conditionThatHappensSomtimes ) { // 处理偶尔会发生的业务逻辑 } else { // 处理几乎不会发生的情况 } 12、Actionscript虚拟机（Flash Player）推荐在循环内部用int而不是number，但是flash Player10在flash Player9的基础上做了很多的改进，int，uint和number之间的转换不在像以前那么慢了。 13、每个变量都应该声明一个确定的类型，解决那些没有指定类型的警告信息活错误信息。 14、尽量少用unint，它可能会非常慢，但是Flashplayer10做了改进，速度不像以前那么慢了： var footerHex : uint = 0x00ccff; 15、循环遍历的时候用int类型： for (var i: int = 0; i < n; i++) 而不用： for (var i: Number = 0; i < n; i++) 16、在用decimal的时候用number而不用int： var decimal : Number = 14.654; 而不用： var decimal : int = 14.654; 17、用乘法代替除法: 用100*0.01代替100/100 18、在for和while循环中用到的计算应事先声明好,而不是在循环中重复声明. for (..){ a * 180 / Math .PI ; } 应该在循环的外部申明: toRadians = a*180/Math .PI ; 19、避免在循环中调用方法或计算： var len : int = myArray.lengh; for (var i=0;i<len;i++){} 而不要用： for (var i=0;i< myArray.lengh;i++){ } 20、用正则表达式进行字符串的校验，用String的方法进行字符串的查找： // postal code validation example using regular expressions private var regEx:RegExp = /^[A-Z][0-9][A-Z] [0-9][A-Z][0-9]$/i; private function validatePostal( event : Event ) : void { if ( regEx.test( zipTextInput.text ) ) { // handle invalid input case } } // search a string using String methods var string : String = \"Search me \"; var searchIndex : int = string.indexOf ( \"me \" ); var search : String = string.substring ( searchIndex, searchIndex + 2 ); 21、重复使用诸如DisplayObjects和URLLoaderReuse之类的物体,以保持\"内存平稳\". 22、使用组件或创建自定义组件时应遵循Flex的组件模型,如下面的方法为组件创建时应先后调用的方法. createChildren(); commitProperties(); updateDisplayList(); 23、尽量少用dataGrid这样的重量级的组件，除非你用一个常规的list无法实现你要的功能。 24、避免用Repeater 控件创建scrollable数据. 25、尽量避免使用setStyle（）方法，这个方法在Flex框架里面是众多代价敖贵的方法之一。 26、当你用过多的容器嵌套的时候会较低应用程序的性能： <mx:Panel> <mx:VBox> <mx:HBox> <mx:Label text =\"Label 1 \" /> <mx:VBox> <mx:Label text =\"Label 2 \" /> <\/mx:VBox> <mx:HBox> <mx:Label text =\"Label 3 \" /> <mx:VBox> <mx:Label text =\"Label 4 \" /> <\/mx:VBox> <\/mx:HBox> <\/mx:HBox> <\/mx:VBox> <\/mx:Panel> 27、没有必要每次都用容器组件作为你自定义组件的父控件： <mx:Image xmlns:mx=\"http://www.adobe.com/2006/mxml \" source=\"avatar.jpg \" width =\"200 \" height =\"200 \" /> 28、减少不必要的容器嵌套 29、不要在Panel中vBox和HBox，用Panel的Layout属性就可以了 30、不要在application标签下用HBox，和Vbox，道理和29一样 31、设置recycleChildren为true来提高Repeater的性能 (重用已经创建过的children而不是重新创建一个新) <mx:Script> <![CDATA[ [Bindable] public var repeaterData : Array = [\"data 1 \", \"data 2 \"]; ]]> <\/mx:Script> <mx:Repeater id=\"repeater \" dataProvider=\"{repeaterData} \"> <mx:Label text =\"data item: {repeater.currentItem} \"/> <\/mx:Repeater> 32、将应用程序的帧率设置为60fps或者更低： <?xml version =\"1.0 \" encoding=\"utf-8 \"?> <mx:Application xmlns:mx=http://www.adobe.com/2006/mxml frameRate=\"45 \"> <\/mx:Application > 33、避免每一帧进行过多的显示操作. 34、能用ENTER_FRAME事件就不用Timer事件. public function onEnterFrame ( event : Event ) : void { } private function init () : void { addEventListener( Event.ENTER_FRAME, onEnterFrame ); } 而不用： public function onTimerTick( event : Event ) : void { } private function init () : void { var timer : Timer = new Timer(); timer.start (); timer.addEventListener( TimerEvent.TIMER, onTimerTick ); } 35、在多帧上面通过以下方式延迟物体的创建. <mx:Container creationPolicy=\"queued \"/> 36、Alpha = 0并不是visible = false (设置为invisible的物体会被忽略,不作任何处理) loginButton.visible = false ; 而不用： loginButton.alpha = 0; 37、性能优化： 内存释放优化原则 1. 被删除对象在外部的所有引用一定要被删除干净才能被系统当成垃圾回收处理掉； 2. 父对象内部的子对象被外部其他对象引用了，会导致此子对象不会被删除，子对象不会被删除又会导致了父对象不会被删除； 3. 如果一个对象中引用了外部对象，当自己被删除或者不需要使用此引用对象时，一定要记得把此对象的引用设置为 null; 4. 本对象删除不了的原因不一定是自己被引用了，也有可能是自己的孩子被外部引用了，孩子删不掉导致父亲也删不掉； 5. 除了引用需要删除外，系统组件或者全局工具、管理类如果提供了卸载方法的就一定要调用删除内部对象，否则有可能会造成内存泄露和性能损失； 6. 父对象立刻被删除了不代表子对象就会被删除或立刻被删除，可能会在后期被系统自动删除或第二次移除操作时被删除； 7. 如果父对象 remove 了子对象后没有清除对子对象的引用，子对象一样是不能被删除的，父对象也不能被删除； 8. 注册的事件 如果没有被移除不影响自定义的强行回收机制，但有可能会影响正常的回收机制，所以最好是做到注册的事件监听器都要记得移除干净。 9. 父对象被删除了不代表其余子对象都删除了，找到一种状态的泄露代码不等于其他状态就没有泄露了，要各模块各状态逐个进行测试分析，直到测试任何状态下都能删除整个对象为止。 内存泄露举例 ： 1. 引用泄露：对子对象的引用，外部对本对象或子对象的引用都需要置 null ； 2. 系统类泄露：使用了系统类而忘记做删除操作了，如 BindingUtils.bindSetter() ， ChangeWatcher.watch() 函数 时候完毕后需要调用 ChangeWatcher.unwatch() 函数来清除引用 ，否则使用此函数的对象将不会被删除； 类似的还有 MUSIC ， VIDEO ， IMAGE ， TIMER ， EVENT ， BINDING 等。 3. 效果 泄露：当对组件应用效果 Effect 的时候，当本对象本删除时需要把本对象和子对象上的 Effect 动画 停止掉，然后把 Effect 的 target 对象置 null; 如果不停止掉动画直接把 Effect 置 null 将不能正常移除对象。 4. SWF 泄露：要完全删除一个 SWF 要调用它的 unload() 方法并且把对象置 null; 5. 图片泄露：当 Image 对象使用完毕后要把 source 置 null;( 为测试 ) ； 6. 声音、视频 泄露 : 当不需要一个音乐或视频是需要停止音乐，删除对象，引用置 null; 内存泄露解决方法： 1. 在组件的 REMOVED_FROM_STAGE 事件回掉中做垃圾处理操作（移除所有对外引用（不管是 VO 还是组件的都需要删除），删除监听器，调用系统类的清除方法） 先 remove 再置 null, 确保被 remove 或者 removeAll 后的对象在外部的引用全部释放干净 ; 2. 利用 Flex 的性能优化工具 Profile 来对项目进程进行监控，可知道历史创建过哪些对象，目前有哪些对象没有被删除，创建的数量，占用的内存比例和用量，创建过程等信息 ；","title":"flex 优化技巧"},{"content":"http://jiushun8.com游戏开发者论坛开通了 欢迎各位游戏开发者进入我们自己的论坛！研究各种游戏开远帆 分享各种源码！","title":"游戏开发者论坛开通了"},{"content":"Extjs 版本ext-4.0.2a 今天碰到个题目，带参数查询后在点bbar上的分页，居然参数没有带到后台。 记得以前做过Extjs3类似功能，代码如下 store.on（\"\"beforeload\"\"， function（）{ Ext.apply（this.baseParams， { name: _name， phone_num:_phone }）; }）; pagingtoolbar的分页，在store.load（{params:{type:type_combo.getValue（）}}）带参数查询，默认只能查一页。分页到下一页时，是不带参数的。 解决办法是，在store被load之前给页参数赋值就可以了。 在Ext3中应用的办法是： store.on（\"\"beforeload\"\"，function（）{ store.baseParams = {type:type_combo.getValue（）}; }）; 上方的办法在Ext4中已经不灵了，应当改成： store.on（\"beforeload\"，function（）{ Ext.apply（store.proxy.extraParams， {type:type_combo.getValue（）}）; }）; 特此声明：以上信息来至http://www.vipaq.com/Detail/view/item/239","title":"ExtJs4 bbar分页带参数查询"},{"content":"下载地址：http://code.google.com/p/freecms/  FreeCMS模板标签 FreeCMS提供了丰富易用的标签来方便大家制作模板,FreeCMS模板标签使用freemarker自定义标签功能实现，如果您会使用freemarker自定义标签功能，您可以开发属于自己的标签。 如果您不熟悉freemarker,FreeTeam建议您先学习一下，您可以在通过下载地址 http://code.google.com/p/freecms/downloads/detail?name=FreeMarker_Manual_zh_CN.pdf 下载freemarker的中文手册进行学习。 FreeCMS模板标签主要分为数据对象和标签，数据对象是标签提取数据的封装对象。 如:channel标签会根据栏目id查询出此栏目的数据，并把数据封装成对象供页面调用。","title":"开源 免费 java CMS - FreeCMS-模板标签"},{"content":"BMP格式：Windows系统下的标准位图格式，未经过压缩，生成的图像文件较大，用于网页显示会增加用户的下载时间，不建议大量使用。 GIF格式：CompuServe公司在1987年开发的图像文件格式，GIF图像文件的数据时经过可变长压缩的，支持2~256种色彩的图像，故不适合保存照片。 JPEG格式：由软件开发联合会组织制定的有损压缩格式，压缩比较高，支持24bit色彩，适合保存照片。 PNG格式：比较新的图片格式，能够提供长度比GIF格式小30%的无损压缩图片，也支持背景透明，并且支持Alpha通道调整的透明度。因为PNG格式推出时间不长，不是所有的浏览器都能很好地支持PNG格式，如IE6浏览器不支持背景透明的PNG图片。","title":"图片格式介绍"},{"content":"/// <summary> /// 通过泛型插入数据 /// <\/summary> /// <typeparam name=\"T\">类名称<\/typeparam> /// <param name=\"obj\">类对象,如果要插入空值，请使用@NULL<\/param> /// <returns>插入的新记录ID<\/returns> public static int Insert<T>(T obj) {       StringBuilder strSQL = new StringBuilder();       strSQL = GetInsertSQL(obj);       // 插入到数据库中       object result = SQLPlus.ExecuteScalar(CommandType.Text, strSQL, null);       return Convert.IsDBNull(result) ? 0 : Convert.ToInt32(result); } /// <summary> /// 通过泛型更新数据 /// <\/summary> /// <typeparam name=\"T\">类名称<\/typeparam> /// <param name=\"obj\">类对象,如果要更新空值，请使用@NULL<\/param> /// <returns>更新结果,大于0为更新成功<\/returns> public static int Update<T>(T obj) {      StringBuilder strSQL = new StringBuilder();      strSQL = GetUpdateSQL(obj);      if (String.IsNullOrEmpty(strSQL.ToString()))      {           return 0;      }      // 更新到数据库中      object result = SQLPlus.ExecuteNonQuery(CommandType.Text, strSQL, null);      int returnValue = Convert.IsDBNull(result) ? 0 : Convert.ToInt32(result);      return returnValue; } /// <summary> /// 获取实体的插入语句 /// <\/summary> /// <typeparam name=\"T\">泛型<\/typeparam> /// <param name=\"obj\">实体对象<\/param> /// <returns>返回插入语句<\/returns> public static StringBuilder GetInsertSQL<T>(T obj) {       string tableKey = GetPropertyValue(obj, BaseSet.PrimaryKey);       string keyValue = GetPropertyValue(obj, tableKey);       string tableName = GetPropertyValue(obj, BaseSet.TableName);       Type t = obj.GetType();//获得该类的Type       StringBuilder strSQL = new StringBuilder();       strSQL.Append(\"insert into \" + tableName + \"(\");       string fields = \"\";       string values = \"\";       //再用Type.GetProperties获得PropertyInfo[]       foreach (PropertyInfo pi in t.GetProperties())       {            object name = pi.Name;//用pi.GetValue获得值            // 替换Sql注入符            string value1 = Convert.ToString(pi.GetValue(obj, null)).Replace(\"'\", \"''\");            //string dataType = pi.PropertyType.ToString().ToLower();            string properName = name.ToString().ToLower();            if (!string.IsNullOrEmpty(value1) && properName != tableKey.ToLower() && properName != BaseSet.PrimaryKey.ToLower() && properName != BaseSet.TableName.ToLower() && value1 != BaseSet.DateTimeLongNull && value1 != BaseSet.DateTimeShortNull)            {                 // 判断是否为空                 if (value1 == BaseSet.NULL)                 {                     value1 = \"\";                 }                 fields += Convert.ToString(name) + \",\";                 values += \"'\" + value1 + \"',\";            }        }        // 去掉最后一个,        fields = fields.TrimEnd(',');        values = values.TrimEnd(',');        // 拼接Sql串        strSQL.Append(fields);        strSQL.Append(\") values (\");        strSQL.Append(values);        strSQL.Append(\")\");        strSQL.Append(\";SELECT @@IDENTITY;\");        return strSQL; } /// <summary> /// 获取实体的更新SQL串 /// <\/summary> /// <typeparam name=\"T\">泛型<\/typeparam> /// <param name=\"obj\">实体对象<\/param> /// <returns>返回插入语句<\/returns> private static StringBuilder GetUpdateSQL<T>(T obj) {      string tableKey = GetPropertyValue(obj, BaseSet.PrimaryKey);      string keyValue = GetPropertyValue(obj, tableKey);      string tableName = GetPropertyValue(obj, BaseSet.TableName);      StringBuilder strSQL = new StringBuilder();      if (string.IsNullOrEmpty(keyValue))      {           return strSQL;      }      Type t = obj.GetType();//获得该类的Type      strSQL.Append(\"update \" + tableName + \" set \");      string subSQL = \"\";      string condition = \" where \" + tableKey + \"='\" + keyValue.Replace(\"'\", \"''\") + \"'\";      //再用Type.GetProperties获得PropertyInfo[]      foreach (PropertyInfo pi in t.GetProperties())      {           object name = pi.Name;//用pi.GetValue获得值           // 替换Sql注入符           string value1 = Convert.ToString(pi.GetValue(obj, null)).Replace(\"'\", \"''\");           //string dataType = pi.PropertyType.ToString().ToLower();           string properName = name.ToString().ToLower();           if (!string.IsNullOrEmpty(value1) && properName != tableKey.ToLower() && properName != BaseSet.PrimaryKey.ToLower() && properName != BaseSet.TableName.ToLower() && value1 != BaseSet.DateTimeLongNull && value1 != BaseSet.DateTimeShortNull)           {                // 判断是否为空                if (value1 == BaseSet.NULL)                {                    value1 = \"\";                }                subSQL += Convert.ToString(name) + \"='\" + value1 + \"',\";           }      }      // 去掉最后一个,      subSQL = subSQL.TrimEnd(',');      // 拼接上更新子句      strSQL.Append(subSQL);      // 加入更新条件      strSQL.Append(condition);      return strSQL; } public class BaseSet {     public static string NULL     {          get { return \"@null\"; }     }     public static string DateTimeShortNull     {          get { return \"0001-1-1 0:00:00\"; }     }     public static string DateTimeLongNull     {          get { return \"0001-01-01 00:00:00\"; }     }     public static string PrimaryKey     {          get { return \"PrimaryKey\"; }     }     public static string TableName     {          get { return \"TableName\"; }     } } #region 实体样例 [Serializable] public class SortsInfo {      private int _SortID;      private string _SortName;      public string TableName      {          get { return \"Sorts\"; }      }      public string PrimaryKey      {          get { return \"SortID\"; }      }      public int SortID      {          get { return _SortID; }          set          {              _SortID = value;          }      }      public string SortName      {          get { return _SortName; }          set          {              _SortName = value;          }      } } #endregion","title":"通过泛型插入(更新)实体数据"},{"content":"<html xmlns=\"http://www.w3.org/1999/xhtml\"><head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\"> <title>各行换色+单击表格行变色<\/title> <style type=\"text/css\"> <!-- #ejiaA1 { width: 550px; border-top: #E3E3E3 1px solid; border-left: #E3E3E3 1px solid; } #ejiaA1 td,#ejiaA1 th { padding: 5px;border-right: #E3E3E3 1px solid; border-bottom: #E3E3E3 1px solid; font-size:12px; height:16px; line-height:16px; } #ejiaA1 tr td span {color: #686868} #ejiaA1 tr td span.st1 {color: #ff0000} --><\/style> <script language=\"javascript\"><!-- function ejiaA1(o,a,b,c,d){ var t=document.getElementById(o).getElementsByTagName(\"tr\"); for(var i=0;i<t.length;i++){ t.style.backgroundColor=(t.sectionRowIndex%2==0)?a:b; t.onclick=function(){ if(this.x!=\"1\"){ this.x=\"1\";//本来打算直接用背景 (更多:www.52mvc.com) 色判断，FF获取到的背景是RGB值，不好判断 this.style.backgroundColor=d; }else{ this.x=\"0\"; this.style.backgroundColor=(this.sectionRowIndex%2==0)?a:b; } } t.onmouseover=function(){ if(this.x!=\"1\")this.style.backgroundColor=c; } t.onmouseout=function(){ if(this.x!=\"1\")this.style.backgroundColor=(this.sectionRowIndex%2==0)?a:b; } } } --><\/script> <\/head> <body> <table width=\"500\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" id=\"ejiaA1\"> <tbody><tr style=\"background-color: rgb(255, 255, 255);\"> <td colspan=\"4\"><span class=\"st1\"><span><a href=\"http://52mvc.com\" target=\"_blank\">懒人建站<\/a>收集<\/span>　　当前页：<span>第1页 共2页 <\/span>　　总次数：<span>66<\/span>　　总时长：<span>284小时36分27秒<\/span><\/span><\/td> <\/tr> <tr style=\"background-color: rgb(245, 245, 245);\"> <th>接入方式<\/th><th>上网时间<\/th><th>下网时间<\/th><th>上网时长<\/th> <\/tr> <tr style=\"background-color: rgb(255, 255, 255);\"> <td>宽带接入<\/td> <td>2008-4-23　12:40:18<\/td> <td>2008-4-23　14:50:28<\/td> <td>2小时10分10秒<\/td> <\/tr> <tr style=\"background-color: rgb(245, 245, 245);\"> <td>宽带接入<\/td> <td>2008-4-23　12:40:18<\/td> <td>2008-4-23　14:50:28<\/td> <td>2小时10分10秒<\/td> <\/tr> <tr style=\"background-color: rgb(255, 255, 255);\"> <td>宽带接入<\/td> <td>2008-4-23　12:40:18<\/td> <td>2008-4-23　14:50:28<\/td> <td>2小时10分10秒<\/td> <\/tr> <tr style=\"background-color: rgb(245, 245, 245);\"> <td>asp.net<\/td> <td>2008-4-23　12:40:18<\/td> <td>2008-4-23　14:50:28<\/td> <td>2小时10分10秒<\/td> <\/tr> <tr style=\"background-color: rgb(255, 255, 255);\"> <td>宽带接入<\/td> <td>2008-4-23　12:40:18<\/td> <td>2008-4-23　14:50:28<\/td> <td>2小时10分10秒<\/td> <\/tr> <tr style=\"background-color: rgb(245, 245, 245);\"> <td>宽带接入<\/td> <td>2008-4-23　12:40:18<\/td> <td>2008-4-23　14:50:28<\/td> <td>2小时10分10秒<\/td> <\/tr> <\/tbody><\/table> <script language=\"javascript\"><!-- //ejiaA1(\"表格名称\",\"奇数行背景\",\"偶数行背景\",\"鼠标经过背景\",\"点击后背景\"); ejiaA1(\"ejiaA1\",\"#fff\",\"#F5F5F5\",\"#FFFFCC\",\"#FFFF84\"); --><\/script> <\/body><\/html> 来自:http://blog.csdn.net/jhl52771/article/details/8443517","title":"超好看的table样式格行换色加单击事件"},{"content":"css 控制submit加载背景图片做提交按钮 <style   type=\"text/css\">    <!--       .button1{font-size:12px;cursor:hand;width:   58px;height:   21px;background-color:   #ffffff;background-image:   url(images/baby/denglu_button.jpg);background-repeat:   repeat;background-attachment:   scroll;background-position:   center;border:   0   solid   #000000;text-align:   center;padding-top:   3px;}    -->    <\/style>   <form> <input class=\"button1\" type=\"submit\" name=\"loginsubmit\" value=\" \"/> <\/form>","title":"submit按钮的背景阴影如何去掉？"},{"content":"进度条是网站中常见的一种，今天经过研究外国一个网站的例子，试着用css3来实现进度条：        html代码如下：     <div class=\"progress-bar blue stripes\">     <span style=\"width: 40%\"><\/span> <\/div> <p>Set above to:     <a href=\"#\" class=\"quarter\">25%<\/a> /     <a href=\"#\" class=\"half\">50%<\/a> /     <a href=\"#\" class=\"three-quarters\">75%<\/a> /     <a href=\"#\" class=\"full\">100%<\/a> <\/p> <div class=\"progress-bar orange shine\">     <span style=\"width: 65%\"><\/span> <\/div> <p>Set above to:     <a href=\"#\" class=\"quarter\">25%<\/a> /     <a href=\"#\" class=\"half\">50%<\/a> /     <a href=\"#\" class=\"three-quarters\">75%<\/a> /     <a href=\"#\" class=\"full\">100%<\/a> <\/p> <div class=\"progress-bar green glow\">     <span style=\"width: 55%\"><\/span> <\/div> <p>Set above to:     <a href=\"#\" class=\"quarter\">25%<\/a> /     <a href=\"#\" class=\"half\">50%<\/a> /     <a href=\"#\" class=\"three-quarters\">75%<\/a> /     <a href=\"#\" class=\"full\">100%<\/a> <\/p> css样式： body{ background:#222; width:360px; margin:0 auto; font:13px 'trebuchet MS',Arial,Helvetica;} h2, p {text-align: center;color: #fafafa;text-shadow: 0 1px 0 #111;    }  a {color: #777;}  .progress-bar{ background-color:#1a1a1a; height:25px; padding:5px; width:350px; margin:70px 0 20px 0;-moz-border-radius:5px; -webkit-border-raidus:5px; border-radius:5px;-moz-box-shadow:0 1px 5px #000 inset, 0 1px 0 #444;-webkit-box-shadow:0 1px 5px #1a1a1a inset,0 1px 0 #444; box-shadow:0 1px 5px inset,0 1px 0 #444;  } .progress-bar span{ display:inline-block; height:100%; background-color:#777; -moz-border-radius:3px;-webkit-border-radius:3px; border-radius:3px; border-radius:3px; box-shadow:0 1px 0 rgba(255,255,255,.5) inset; -webkit-box-shadow:0 1px 0 rgba(255,255,.5) inset; -moz-box-shadow:0 1px 0 rgba(255,255,.5) inset;  -webkit-transition:width .4s ease-in-out; -moz-transition:width .4s ease-in-out;-ms-transition:width .4s ease-in-out;transition: width .4s ease-in-out;    } 主要实现进度条的背景：     .blue span {             background-color: #34c2e3;            } .orange span{      background-color:#fecf23;      background-image:-webkit-gradient(linear,left top,left bottom,from(#fecf23), to(#fd9215));      background-image:-webkit-linear-gradient(top,#fecf23, #fd9215);      background-image:-moz-linear-gradient(top,#fecf23, #fd9215);      background-image:-ms-linear-gradient(top, #fecf23, #fd9215);      background-image:-o-linear-gradient(top, #fecf23, #fd9215);      background-image: linear-gradient(top, #fecf23, #fd9215);      filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#fecf23', endColorstr='#fd9215'); /* IE6 & IE7 */    -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#fecf23', endColorstr='#fd9215')\"; /* IE8 */        }     .green span{         background-color:#a5df41;         background-image:-webkit-gradient(linear,left top,left bottom,from(#a5df41), to(#4ca916));         background-image:-webkit-linear-gradient(top,#a5df41, #4ca916);         background-image:-moz-linear-gradient(top,#a5df41, #4ca916);         background-image: -ms-linear-gradient(top, #a5df41, #4ca916);         background-image: -o-linear-gradient(top, #a5df41, #4ca916);         background-image: linear-gradient(top, #a5df41, #4ca916);          filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#a5df41', endColorstr='#4ca916'); /* IE6 & IE7 */        -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#a5df41', endColorstr='#4ca916')\"; /* IE8 */      }         .stripes span {             -webkit-background-size: 30px 30px;             -moz-background-size: 30px 30px;             background-size: 30px 30px;                         background-image: -webkit-gradient(linear, left top, right bottom,                                 color-stop(.25, rgba(255, 255, 255, .15)), color-stop(.25, transparent),                                 color-stop(.5, transparent), color-stop(.5, rgba(255, 255, 255, .15)),                                 color-stop(.75, rgba(255, 255, 255, .15)), color-stop(.75, transparent),                                 to(transparent));             background-image: -webkit-linear-gradient(135deg, rgba(255, 255, 255, .15) 25%, transparent 25%,                                 transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%,                                 transparent 75%, transparent);             background-image: -moz-linear-gradient(135deg, rgba(255, 255, 255, .15) 25%, transparent 25%,                                 transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%,                                 transparent 75%, transparent);             background-image: -ms-linear-gradient(135deg, rgba(255, 255, 255, .15) 25%, transparent 25%,                                 transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%,                                 transparent 75%, transparent);             background-image: -o-linear-gradient(135deg, rgba(255, 255, 255, .15) 25%, transparent 25%,                                 transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%,                                 transparent 75%, transparent);             background-image: linear-gradient(135deg, rgba(255, 255, 255, .15) 25%, transparent 25%,                                 transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%,                                 transparent 75%, transparent);                                      -webkit-animation: animate-stripes 3s linear infinite;             -moz-animation: animate-stripes 3s linear infinite;                        }         @-webkit-keyframes animate-stripes {              0% {background-position: 0 0;} 100% {background-position: 60px 0;}         }                           @-moz-keyframes animate-stripes {             0% {background-position: 0 0;} 100% {background-position: 60px 0;}         }         .shine span {             position: relative;         }                  .shine span::after {             content: '';             opacity: 0;             position: absolute;             top: 0;             right: 0;             bottom: 0;             left: 0;             background: #fff;             -moz-border-radius: 3px;             -webkit-border-radius: 3px;             border-radius: 3px;                                      -webkit-animation: animate-shine 2s ease-out infinite;             -moz-animation: animate-shine 2s ease-out infinite;                      }         @-webkit-keyframes animate-shine {              0% {opacity: 0; width: 0;}             50% {opacity: .5;}             100% {opacity: 0; width: 95%;}         }                           @-moz-keyframes animate-shine {             0% {opacity: 0; width: 0;}             50% {opacity: .5;}             100% {opacity: 0; width: 95%;}         }         /*---------------------------*/                       .glow span {             -moz-box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;             -webkit-box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;             box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;                          -webkit-animation: animate-glow 1s ease-out infinite;             -moz-animation: animate-glow 1s ease-out infinite;                      }         @-webkit-keyframes animate-glow {          0% { -webkit-box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;}          50% { -webkit-box-shadow: 0 5px 5px rgba(255, 255, 255, .3) inset, 0 -5px 5px rgba(255, 255, 255, .3) inset;}          100% { -webkit-box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;}          }         @-moz-keyframes animate-glow {          0% { -moz-box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;}          50% { -moz-box-shadow: 0 5px 5px rgba(255, 255, 255, .3) inset, 0 -5px 5px rgba(255, 255, 255, .3) inset;}          100% { -moz-box-shadow: 0 5px 5px rgba(255, 255, 255, .7) inset, 0 -5px 5px rgba(255, 255, 255, .7) inset;}          }                 预览效果： jquey部分： $(document).ready(function(){     $('.quarter').click(function(){         $(this).parent().prev().children(\"span\").css('width','25%');         });         $('.half').click(function(){             $(this).parent().prev().children('span').css(\"width\",'50%');             });             $('.three-quarters').click(function(){                 $(this).parent().prev().children('span').css('width','75%');                 });                 $('.full').click(function(){                     $(this).parent().prev().children('span').css('width','100%');                     })     })","title":"用css3和jquery实现的渐变的动态进度条"},{"content":"验证码的功能大多数人可能不都理解，但几乎每个安全网站都会有。验证码是用来防止非人为因素操作的行为，例如一个黑客要黑一个网站，怎么弄呢？最简单的思路当然是造成其网路拥堵直至系统瘫痪掉。如果没有验证码，那么我就可以在注册页面，写一个程序，只有注册表单，不断更换主键或不可重复的内容，不停的提交。那这样每秒可以注册几万次都有可能，这样服务器就大量负载，很容易就瘫痪并死掉。而达到这样的目的并不困难。 增加验证码之后，就不是机器人能识别的了，必须是人在操作系统，由于是图片形式的，而且歪歪斜斜乱七八糟，而现阶段图形模式识别技术还没做到能够识别验证码的程度，所以加上验证码就相对安全了很多。在软件开发中难免会遇到这样的情况，客户压根不知道验证码用来干什么的，但一定要加不可。为什么要加？因为大家都有。没法子总要加上才显得自己专业，其实这个东西很容易加，就是用数字或字母做模板用swing的图形API，画出一个图片出来。完整的逻辑和代码如下： <img id=\"validateCodeId\" src=\"validateCodeServlet\"                                    onclick=\"flushValidateCode(this);\" title='看不清,点击刷新'                                    style=\"cursor: pointer;\" /> //刷新验证码flushValidateCode = function(obj) {\tobj.src  ='validateCodeServlet?d='+new Date();} 请求的URL是validateCodeServlet，后面参数d=new Date()是保证每次点击刷新的时候URL都不一样，否则会不刷新。别的地方也使用Math.rand();这样的办法取得一个随机数，这样也是可以的。 web.xml这样来配置servlet的映射信息。   <servlet>    <servlet-name>validateCode<\/servlet-name>    <servlet-class>com.xzfy.mainpage.web.action.ValidateCodeServlet<\/servlet-class>  <\/servlet>    <servlet-mapping>        <servlet-name>validateCode<\/servlet-name>        <url-pattern>/validateCodeServlet<\/url-pattern>    <\/servlet-mapping>ValidateCodeServlet package com.xzfy.mainpage.web.action;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.image.BufferedImage;import java.io.IOException;import java.io.PrintWriter;import java.util.Random;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.commons.io.output.ByteArrayOutputStream;public class ValidateCodeServlet extends HttpServlet {\t/**\t * Constructor of the object.\t */\tpublic ValidateCodeServlet() {\t\tsuper();\t}\t/**\t * Destruction of the servlet. <br>\t */\tpublic void destroy() {\t\tsuper.destroy(); // Just puts \"destroy\" string in log\t\t// Put your code here\t}\t/**\t * The doGet method of the servlet. <br>\t *\t * This method is called when a form has its tag value method equals to get.\t * \t * @param request the request send by the client to the server\t * @param response the response send by the server to the client\t * @throws ServletException if an error occurred\t * @throws IOException if an error occurred\t */\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\t\t\tthrows ServletException, IOException {\t\tresponse.setContentType(\"image/jpeg\");\t\tresponse.setHeader(\"Pragma\", \"No-cache\");\t\tresponse.setHeader(\"Cache-Control\", \"no-cache\");\t\tresponse.setDateHeader(\"Expires\", 0);\t\tHttpSession session = request.getSession();\t\tint width = 60, height = 20;\t\tBufferedImage image = new BufferedImage(width, height,\t\t\t\tBufferedImage.TYPE_INT_RGB);\t\tGraphics g = image.getGraphics();\t\tRandom random = new Random();\t\tg.setColor(getRandColor(200, 250));\t\tg.fillRect(0, 0, width, height);\t\tg.setFont(new Font(\"Times New Roman\", Font.PLAIN, 18));\t\tg.setColor(getRandColor(160, 200));\t\tfor (int i = 0; i < 155; i++) {\t\t\tint x = random.nextInt(width);\t\t\tint y = random.nextInt(height);\t\t\tint xl = random.nextInt(12);\t\t\tint yl = random.nextInt(12);\t\t\tg.drawLine(x, y, x + xl, y + yl);\t\t}\t\tString sRand = \"\";\t\tfor (int i = 0; i < 4; i++) {\t\t\tString rand = String.valueOf(random.nextInt(10));\t\t\tsRand += rand;\t\t\tg.setColor(new Color(20 + random.nextInt(110), 20 + random\t\t\t\t\t.nextInt(110), 20 + random.nextInt(110)));// 调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成\t\t\tg.drawString(rand, 13 * i + 6, 16);\t\t}\t\tsession.setAttribute(\"rand\", sRand);\t\tg.dispose();\t\tServletOutputStream responseOutputStream = response.getOutputStream();\t\tImageIO.write(image, \"JPEG\", responseOutputStream);\t\tresponseOutputStream.flush();\t\tresponseOutputStream.close();\t}\t/**\t * The doPost method of the servlet. <br>\t *\t * This method is called when a form has its tag value method equals to post.\t * \t * @param request the request send by the client to the server\t * @param response the response send by the server to the client\t * @throws ServletException if an error occurred\t * @throws IOException if an error occurred\t */\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\t\t\tthrows ServletException, IOException {\t\tdoGet(request, response);\t}\t/**\t * Initialization of the servlet. <br>\t *\t * @throws ServletException if an error occurs\t */\tpublic void init() throws ServletException {\t\t// Put your code here\t}\tColor getRandColor(int fc, int bc) {// 给定范围获得随机颜色\t\tRandom random = new Random();\t\tif (fc > 255)\t\t\tfc = 255;\t\tif (bc > 255)\t\t\tbc = 255;\t\tint r = fc + random.nextInt(bc - fc);\t\tint g = fc + random.nextInt(bc - fc);\t\tint b = fc + random.nextInt(bc - fc);\t\treturn new Color(r, g, b);\t\t\t\t\t}} 效果如下：","title":"jsp+servlet实现验证码功能"},{"content":"1，假设页面中有如下一个form表单 <form name=\"saveform\"> <input type=\"text\" name=\"userName\" id=\"userName\"/> <input type=\"password\" name=\"passWord\" name=\"passWord\"/> <\/form> 2，现在需要用dwr方法提交表单，比如调用func()这个js函数： func(){\tvar frm=DWRUtil.getValues(getValue$('saveform'));\tuserAjax.saveuser(frm,confirmcallback);} 3,在userAjax中使用表单作为参数：这里是一个map： \t/**\t * 保存基本信息\t * formMap:提交的表单，可以通过key-value方式取得表单值\t * @return\t */\tpublic String saveDwjbxx(Map<String,String> formMap){ String user=formmap.get(\"userName\");} 相关文章： bookblog dwr表单验证","title":"dwr ajax方法提交表单"},{"content":"【原创】 解决VS.NET中的MVC Razor无智能提示 作者：寒羽枫(cityhunter172)  在使用 MVC Razor 过程中，突然发现 vs.net 的智能提示不管用了，Razor代码不变色，全是一片黑。令人费解的是新建项目却是好好的，真是坑爹呀，耗费了尽一天的时间，终于找到了原因。  1、查找原因过程中，出现过以下错误提示：        ASP.NET 运行时错误: 没有为扩展名“.cshtml”注册的生成提供程序。可以在 machine.config 或 web.config 中的 <compilation><buildProviders> 节注册一个。请确保所注册的提供程序具有包含值“Web”或“All”的 BuildProviderAppliesToAttribute 特性。       对比两个项目，在 Views 目录中少了个 Web.config ，查看该文件内容，正是一些程序的注册，赶紧复制过来（注：此文件可以排除在项目之外，但必须在 Views 目录中存在）。    2、右击项目→属性→生成→输出路径：必须是 bin ，若不是，改回来吧；   3、重新加载项目，或重新打开解决方案；     问题到此也就解决了，至于原因嘛，我个人认为，VS.NET 对于 Razor 的支持还处于磨合阶段，希望对大家有所帮助。  寒羽枫（cityhunter172） 2012-12-27 完稿       ","title":"解决VS.NET中的MVC Razor无智能提示"},{"content":"SharePoint 2013 客户端模型(Client Object Model) 调用搜索(Query Search): SharePoint 2013 提供客户端调用Search 模型的方式，方便把SharePoint 搜索和其他系统整合。 下面说明如何在一个Asp.net程序中调用SharePoint 搜索：  1. 使用VS2010 新建一个 Asp.net Web Application 项目     2. 在该项目中添加如下引用 C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\15\\ISAPI\\Microsoft.SharePoint.Client.dll C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\15\\ISAPI\\Microsoft.SharePoint.Client.Runtime.dll C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\15\\ISAPI\\Microsoft.SharePoint.Client.Search.dll      3. 新建一个Web form,使用默认文件名 WebForm1.aspx       4. 在web form提添加如下控件          a. 添加一个TextBox (给用户输入搜索关键字用，命名为txtSearchBox)          b. 添加一个Button, text 改为Search , 用于提交搜索查询          c. 添加一个GridView,命名为 resultGrid， 用于显示查询结果           5. 给Button 添加点击事件，代码如下：       using (ClientContext clientContext = new ClientContext(\"http://SharePointServer/SubSite\"))            {                KeywordQuery keywordQuery = new KeywordQuery(clientContext);                keywordQuery.QueryText = txtSearchBox.Text;                SearchExecutor searchExecutor = new SearchExecutor(clientContext);                ClientResult<ResultTableCollection> results = searchExecutor.ExecuteQuery(keywordQuery);                clientContext.ExecuteQuery();                           DataTable table = new DataTable();                DataColumn titleCol = new DataColumn(\"Title\");                table.Columns.Add(titleCol);                DataColumn pathCol = new DataColumn(\"Path\");                table.Columns.Add(pathCol);                foreach(var resultRow in results.Value[0].ResultRows)                {                    DataRow row = table.NewRow();                    row[\"Title\"] = resultRow[\"Title\"];                    row[\"Path\"] = resultRow[\"Path\"];                    table.Rows.Add(row);                }                this.resultGrid.DataSource = table;                this.resultGrid.DataBind();            }      ","title":"SharePoint 2013 客户端模型(Client Object Model) 调用搜索(Query Search)"},{"content":"作者:zhanhailiang 日期:2012-12-27 语法说明： # find path -option [ -print ] [ -exec | -ok | command ] {} \\;# -print 将查找到的文件输出到标准输出# -exec command {} \\; -----将查到的文件执行command操作, {} 和 \\;之间有空格# -ok 和-exec相同，只不过在操作前要询用户 场景1：想递归查询某目录下匹配文件，并输出其文件信息 # find . -name \"*.php\"|xargs ls -al      -rwxr--r-- 1 zhanhailiang users    1984 2012-12-18 10:54 ./conf/config.php-rwxr--r-- 1 zhanhailiang users    1131 2012-12-18 10:50 ./conf/sso_config.php-rwxr--r-- 1 zhanhailiang users    2415 2012-12-21 17:11 ./htdocs/about/about.php 今天细研究了下find命令，发现其原生就支持-exec参数，所以可以采取如下方式： # find . -name \"*.php\" -exec ls -al {} \\;-rwxr--r-- 1 zhanhailiang users 6925 2012-12-18 10:48 ./htdocs/interflight/jump.php-rwxr--r-- 1 zhanhailiang users 15222 2012-12-18 10:48 ./htdocs/interflight/order.php-rwxr--r-- 1 zhanhailiang users 1416 2012-12-18 10:48 ./htdocs/interflight/confirm.php 输出的文件顺序不太一样，如果有必要的，请使用awk&sort对输出流按最后一个参数“文件名”称排序。 其实find本身就具备输出文件信息的参数-ls： # find . -name \"*.php\" -ls3467875    8 -rwxr--r--   1 zhanhailiang users        6925 12月 18 10:48 ./htdocs/interflight/jump.php3467876   16 -rwxr--r--   1 zhanhailiang users       15222 12月 18 10:48 ./htdocs/interflight/order.php3467877    4 -rwxr--r--   1 zhanhailiang users        1416 12月 18 10:48 ./htdocs/interflight/confirm.php 场景2：想递归查询某目录下匹配文件里是否包含某关键字都是使用 # find . -name \"*.php\"|xargs -n 1 grep -in \"json_encode\" 61:$tpl->assign('userInfo', json_encode($userInfo));207:                echo json_encode($ret);238:                echo json_encode($ret);270:                echo json_encode($ret); 使用-exec参数： # find . -name \"*.php\" -exec grep -in \"json_encode\" {} \\;61:$tpl->assign('userInfo', json_encode($userInfo));207:                echo json_encode($ret);238:                echo json_encode($ret);270:                echo json_encode($ret); # find . -name \"*.php\" -exec grep -in \"json_encode\" \"{}\" \";\"61:$tpl->assign('userInfo', json_encode($userInfo));207:                echo json_encode($ret);238:                echo json_encode($ret);270:                echo json_encode($ret); 注：这里-exec参数可替换成-ok参数，这样每次由用户来确认是否对匹配的文件（目录）执行相应命令，如下(这里只是当做一个例子告诉你可以使用-exec的地方都可以用-ok替换，但一般只有当执行rm之类的操作时才会用到-ok参数来确认) # find . -name \"*.php\" -ok grep -in \"json_encode\" {} \\;< grep ... ./htdocs/interflight/jump.php > ? y< grep ... ./htdocs/interflight/order.php > ? y< grep ... ./htdocs/interflight/confirm.php > ? y< grep ... ./htdocs/interflight/select.php > ? y 场景3：系统管理员经常需要根据用户或组来搜索特定用户或组的文件，比如需要查询Web根目录下用户所有者是nobody和root的普通文件： # find . -user root -group root -ls# find . -user nobody -group nobody -ls 接下来是一些常用场景的总结(来源：Linux下find命令用法) 1)在/logs目录中查找更改时间在5日以前的文件并删除它们：# find logs -type f -mtime +5 -ok rm {} \\; 2)查询当天修改过的文件# find ./ -mtime -1 -type f -exec ls -l {} \\; 3)查询文件并询问是否要显示# find ./ -mtime -1 -type f -ok ls -l {} \\;< ls ... ./classDB.inc.php > ? y-rw-r--r--      1 cnscn      cnscn         13709    1月 12 12:22 ./classDB.inc.php# find ./ -mtime -1 -type f -ok ls -l {} \\;< ls ... ./classDB.inc.php > ? n 4)在/tmp中查找所有的*.h，并在这些文件中查找\"SYSCALL_VECTOR\"，最后打印出所有包含\"SYSCALL_VECTOR\"的文件名A) # find /tmp -name \"*.h\" | xargs -n 50 grep SYSCALL_VECTORB) # grep SYSCALL_VECTOR /tmp/*.h | cut -d':' -f1| uniq > filenameC) # find /tmp -name \"*.h\" -exec grep \"SYSCALL_VECTOR\" {} \\; -print 5)# find / -name filename -exec rm -rf {} \\;  # find / -name filename -ok rm -rf {} \\; 6)比如要查找磁盘中大于3M的文件：# find . -size +3000k -exec ls -ld {} \\; 4)将find出来的东西拷到另一个地方# find . -name \"*.php\" -exec cp '{}' /tmp ';' 7)如果有特殊文件，可以用cpio，也可以用这样的语法：# find dir -name filename -print | cpio -pdv newdir 8)查找2004-11-30 16:36:37时更改过的文件# find ./ -name \"*.php\" -exec ls -l --full-time {} \\;|grep \"2012-12-21 14:19:04\" 附录：注意，使用–maxdepth和-name时需要注意传参的顺序，若顺序不对可能会发出警告： find: warning: you have specified the -maxdepth option after a non-option argument -name, but options are not positional (-maxdepth affects tests specified before it as well as those specified after it). Please specify options before other arguments. zhanhailiang@linux-06bq:~/public_html> find . -name \"data.php\" -maxdepth 1 -exec php -f {} \\;find: warning: you have specified the -maxdepth option after a non-option argument -name, but options are not positional (-maxdepth affects tests specified before it as well as those specified after it). Please specify options before other arguments. // php执行输出 zhanhailiang@linux-06bq:~/public_html> find . -maxdepth 1 -name \"data.php\" -exec php -f {} \\;// php执行输出 参考文档： Linux Find 命令精通指南 Linux下find命令用法","title":"find高级应用场景详解"},{"content":"盘点：崛起中的九大HTML5开发工具 HTML5被看做是Web开发者创建流行Web应用的利器，增加了对视频和Canvas 2D的支持。HTML5的诞生还让人们重新审视浏览器专用多媒体插件的未来，如Adobe的Flash和微软的Silverlight，HTML5为实现这些插件的功能提供了一种标准化的方式。 　　虽然HTML5标准尚未开发完成，但是随着开发者对HTML5的兴趣日渐浓厚，开发工具提供商也开始跟进。以下介绍的9款应用工具已经能够帮助开发者在程序中集成HTML5功能。 　　一、Adobe Edge 　　目前还处于预览阶段的Adobe Edge是用HTML5、CSS、JavaScript开发动态互动内容的设计工具。内容可以同时兼容移动设备和桌面电脑。Edge的一个重要功能是Web工具包界面，方便确保页面在不同浏览器中的架构一致性，此外Edge还将整合TypeKit这样的字体服务。 　　动画和图形可以添加到HTML元素中，程序也能通过Edge自身的代码片段库或者JavaScript代码进行扩展。动画可以在独立的时间线上进行嵌套，还能实现互动功能。符合可以服用并通过API和代码片段控制。通过Edge设计的内容可以兼容iOS和Android设备，也可以运行在火狐、Chrome、Safari和IE9等主流浏览器。 二、Adobe Dreamweaver CS6 　　Adobe Dreamweaver CS6作为一个Web设计软件，提供了对HTML网站和移动程序的可视化编辑界面。其Fluid Grid排版系统整合CSS样式表功能，提供自适应版面的跨平台兼容性。开发者可以完全实现Web设计的可视化操作，无需为代码所困。 　　用户不但还能在Live View中预览，还提供多屏幕预览功能。开发者可以通过MultiScreen预览面板查看HTML5内容的渲染效果。Live View通过WebKit渲染引擎支持HTML5。 　　三、Adobe ColdFusion 10 　　ColdFusion是用来开发企业Web程序的服务器端技术，通过Websockets、互动表单、视频和地理标签等HTML5技术创建富媒体用户体验。 　　四、Sencha Architect 2 　　在开发移动和桌面应用的工具中，Sencha的定位是HTML5可视化应用开发。开发团队可以在一个单一集成的环境中完成应用的设计、开发和部署。开发者还可以开发Sencha Touch2和Ext JS4 JavaScript应用，并实时预览。 　　五、Sencha Touch 2 　　Sencha Touch2是移动应用框架，也被看作是Sencha的HTML5平台。开发者可以用它开发面向iOS、Android和Blackberry、Kindle Fire等多种平台的移动应用。 　　六、Dojo Foundation Maqetta 　　来自于IBM的一个项目，Dojo Foundation Maqetta是为桌面和移动设备开发HTML5应用的开源工具，支持在浏览器中查看HTML5界面。用户体验设计师可以通过拖放组装UI样板。 　　七、微软Visual Studio 2010 ServicePack 1 　　虽然一开始并不支持HTML5，但微软在2011年三月发布的Visual Studio 2010 SP1中提供了IntelliSense，追加了针对HTML5的一些元素。 　　八、JetBrains WebStorm 4.0 　　作为拥有HTML编辑器的JavaScript集成开发环境，WebStorm4.0提供了开发web应用的HTML5样板。开发者可以在创建HTML文档时可获得对HTML5文件的支持。例如砍伐者键入。开发者还可以在chrome浏览器中实时预览HTML文档。 　　九、Google Web Toolkit 　　该开发工具用于开发浏览器应用，但库中支持很多HTML5功能。包括对客户端或web存储的支持。其他HTML5功能还包括支持Canvas可视化，以及音频和视频widget。 原文链接： http://dev.yesky.com/457/33875957.shtml ","title":"2013盘点：崛起中的九大HTML5开发工具"},{"content":"<s:checkboxlist name=\"mallApp.devices\" list=\"#{'0':'Touch智控','1':'鼠标','2':'多屏互动','3':'遥控器'}\" theme=\"simple\" value=\"mallApp.devices\"><\/s:checkboxlist> 如果value使用了String[]数组则不能回显 将值打印出：0, 1, 2, 3 最后使用了List<String> 搞定","title":"关于struts2<s:checkboxlist 标签的 回显问题"},{"content":"http://www.csdn.net/article/2012-01-10/310412   作者陈皓 JavaScript是一个类C的语言，他的面向对象的东西相对于C++/Java比较奇怪，但是其的确相当的强大，本文主要从一个整体的角度来说明一下JavaScript的面向对象的编程。这篇文章主要基于ECMAScript 5，旨在介绍新技术。关于兼容性的东西，请看最后一节。 初探 我们知道JavaScript中的变量定义基本如下： var name = 'Chen Hao';;   var email = 'haoel(@)hotmail.com';   var website = 'http://coolshell.cn';  如果要用对象来写的话，就是下面这个样子： var chenhao = {       name :'Chen Hao',       email : 'haoel(@)hotmail.com',       website : 'http://coolshell.cn'   };  于是，我就可以这样访问： //以成员的方式   chenhao.name;   chenhao.email;   chenhao.website;       //以hash map的方式   chenhao[\"name\"];   chenhao[\"email\"];   chenhao[\"website\"];  关于函数，我们知道JavaScript的函数是这样的： var doSomething = function(){      alert('Hello World.');   };  于是，我们可以这么干： var sayHello = function(){      var hello = \"Hello, I'm \"+ this.name                   + \", my email is: \" + this.email                   + \", my website is: \" + this.website;      alert(hello);   };       //直接赋值，这里很像C/C++的函数指针   chenhao.Hello = sayHello;       chenhao.Hello();  相信这些东西都比较简单，大家都明白了。可以看到JavaScript对象函数是直接声明，直接赋值，直接就用了。runtime的动态语言。 还有一种比较规范的写法是： //我们可以看到， 其用function来做class。   var Person = function(name, email, website){       this.name = name;       this.email = email;       this.website = website;           this.sayHello = function(){           var hello = \"Hello, I'm \"+ this.name  + \", \\n\" +                       \"my email is: \" + this.email + \", \\n\" +                       \"my website is: \" + this.website;           alert(hello);       };   };       var chenhao = new Person(\"Chen Hao\", \"haoel@hotmail.com\",                                        \"http://coolshell.cn\");   chenhao.sayHello();  顺便说一下，要删除对象的属性，很简单： delete chenhao['email']   上面的这些例子，我们可以看到这样几点： Javascript 的数据和成员封装很简单。没有类完全是对象操作。纯动态！ Javascript function中的this指针很关键，如果没有的话，那就是局部变量或局部函数。 Javascript 对象成员函数可以在使用时临时声明，并把一个全局函数直接赋过去就好了。 Javascript 的成员函数可以在实例上进行修改，也就是说不同实例相同函数名的行为不一定一样。 属性配置 – Object.defineProperty 先看下面的代码： //创建对象   var chenhao = Object.create(null);       //设置一个属性    Object.defineProperty( chenhao,                   'name', { value:  'Chen Hao',                             writable:     true,                             configurable: true,                             enumerable:   true });       //设置多个属性   Object.defineProperties( chenhao,       {           'email'  : { value:  'haoel@hotmail.com',                        writable:     true,                        configurable: true,                        enumerable:   true },           'website': { value: 'http://coolshell.cn',                        writable:     true,                        configurable: true,                        enumerable:   true }       }   );  下面就说说这些属性配置是什么意思。 writable：这个属性的值是否可以改。 configurable：这个属性的配置是否可以改。 enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。 value：属性值。 get ()/set (_value)：get 和 set 访问器。 Get/Set访问器 关于get/set访问器，它的意思就是用 get/set 来取代 value（其不能和 value 一起使用），示例如下： var  age = 0;   Object.defineProperty( chenhao,               'age', {                         get: function() {return age+1;},                         set: function(value) {age = value;}                         enumerable : true,                         configurable : true                       }   );   chenhao.age = 100; //调用set   alert(chenhao.age); //调用get 输出101（get中+1了）;  我们再看一个更为实用的例子——利用已有的属性(age)通过get 和 set 构造新的属性(birth_year)： Object.defineProperty( chenhao,               'birth_year',               {                   get: function() {                       var d = new Date();                       var y = d.getFullYear();                       return ( y - this.age );                   },                   set: function(year) {                       var d = new Date();                       var y = d.getFullYear();                       this.age = y - year;                   }               }   );       alert(chenhao.birth_year);   chenhao.birth_year = 2000;   alert(chenhao.age);  这样做好像有点麻烦，你说，我为什么不写成下面这个样子： var chenhao = {       name: \"Chen Hao\",       email: \"haoel@hotmail.com\",       website: \"http://coolshell.cn\",       age: 100,       get birth_year() {           var d = new Date();           var y = d.getFullYear();           return ( y - this.age );       },       set birth_year(year) {           var d = new Date();           var y = d.getFullYear();           this.age = y - year;       }       };   alert(chenhao.birth_year);   chenhao.birth_year = 2000;   alert(chenhao.age);  是的，你的确可以这样的，不过通过defineProperty ()你可以干这些事： 1）设置如writable，configurable，enumerable 等这类的属性配置。 2）动态地为一个对象加属性。比如：一些 HTML 的 DOM 对像。 查看对象属性配置 如果查看并管理对象的这些配置，下面有个程序可以输出对象的属性和配置等东西： //列出对象的属性.   function listProperties(obj)   {       var newLine = \"<br />\";       var names = Object.getOwnPropertyNames(obj);       for (var i = 0; i < names.length; i++) {           var prop = names[i];           document.write(prop + newLine);               // 列出对象的属性配置（descriptor）动用getOwnPropertyDescriptor函数。           var descriptor = Object.getOwnPropertyDescriptor(obj, prop);           for (var attr in descriptor) {               document.write(\"...\" + attr + ': ' + descriptor[attr]);               document.write(newLine);           }           document.write(newLine);       }   }       listProperties(chenhao);  call，apply，bind和this 关于 Javascript 的 this 指针，和C++/Java 很类似。 我们来看个示例：（这个示例很简单了，我就不多说了） function print(text){       document.write(this.value + ' - ' + text+ '<br>');   }       var a = {value: 10, print : print};   var b = {value: 20, print : print};       print('hello');// this => global, output \"undefined - hello\"       a.print('a');// this => a, output \"10 - a\"   b.print('b'); // this => b, output \"20 - b\"       a['print']('a'); // this => a, output \"10 - a\"  我们再来看看call和apply，这两个函数的差别就是参数的样子不一样，另一个就是性能不一样，apply 的性能要差很多。（关于性能，可到 JSPerf 上去跑跑看看） print.call(a, 'a'); // this => a, output \"10 - a\"   print.call(b, 'b'); // this => b, output \"20 - b\"       print.apply(a, ['a']); // this => a, output \"10 - a\"   print.apply(b, ['b']); // this => b, output \"20 - b\"  但是在 bind 后，this 指针，可能会有不一样，但是因为 Javascript 是动态的。如下面的示例 var p = print.bind(a);   p('a');             // this => a, output \"10 - a\"   p.call(b, 'b');     // this => a, output \"10 - b\"   p.apply(b, ['b']);  // this => a, output \"10 - b\"  继承和重载 通过上面的那些示例，我们可以通过 Object.create ()来实际继承，请看下面的代码，Student 继承于 Object。 var Person = Object.create(null);       Object.defineProperties   (       Person,       {           'name'  : {  value: 'Chen Hao'},           'email'  : { value : 'haoel@hotmail.com'},           'website': { value: 'http://coolshell.cn'}       }   );       Person.sayHello = function () {       var hello = \"<p>Hello, I am \"+ this.name  + \", <br>\" +                   \"my email is: \" + this.email + \", <br>\" +                   \"my website is: \" + this.website;       document.write(hello + \"<br>\");   }       var Student = Object.create(Person);   Student.no = \"1234567\"; //学号   Student.dept = \"Computer Science\"; //系       //使用Person的属性   document.write(Student.name + ' ' + Student.email + ' ' + Student.website +'<br>');       //使用Person的方法   Student.sayHello();       //重载SayHello方法   Student.sayHello = function (person) {       var hello = \"<p>Hello, I am \"+ this.name  + \", <br>\" +                   \"my email is: \" + this.email + \", <br>\" +                   \"my website is: \" + this.website + \", <br>\" +                   \"my student no is: \" + this. no + \", <br>\" +                   \"my departent is: \" + this. dept;       document.write(hello + '<br>');   }   //再次调用   Student.sayHello();       //查看Student的属性（只有 no 、 dept 和 重载了的sayHello）   document.write('<p>' + Object.keys(Student) + '<br>');  通用上面这个示例，我们可以看到，Person 里的属性并没有被真正复制到了 Student 中来，但是我们可以去存取。这是因为 Javascript 用委托实现了这一机制。其实，这就是 Prototype，Person 是 Student 的 Prototype。 当我们的代码需要一个属性的时候，Javascript 的引擎会先看当前的这个对象中是否有这个属性，如果没有的话，就会查找他的 Prototype 对象是否有这个属性，一直继续下去，直到找到或是直到没有 Prototype 对象。 为了证明这个事，我们可以使用 Object.getPrototypeOf ()来检验一下： Student.name = 'aaa';       //输出 aaa   document.write('<p>' + Student.name + '<\/p>');       //输出 Chen Hao   document.write('<p>' +Object.getPrototypeOf(Student).name + '<\/p>');  于是，你还可以在子对象的函数里调用父对象的函数，就好像 C++ 里的 Base::func () 一样。于是，我们重载 hello 的方法就可以使用父类的代码了，如下所示： //新版的重载SayHello方法   Student.sayHello = function (person) {       Object.getPrototypeOf(this).sayHello.call(this);       var hello = \"my student no is: \" + this. no + \", <br>\" +                   \"my departent is: \" + this. dept;       document.write(hello + '<br>');   }  这个很强大吧。 组合 上面的那个东西还不能满足我们的要求，我们可能希望这些对象能真正的组合起来。为什么要组合？因为我们都知道是这是 OO 设计的最重要的东西。不过，这对于 Javascript 来并没有支持得特别好，不好我们依然可以搞定个事。 首先，我们需要定义一个 Composition 的函数：（target 是作用于是对象，source 是源对象），下面这个代码还是很简单的，就是把 source 里的属性一个一个拿出来然后定义到 target 中。 function Composition(target, source)   {       var desc  = Object.getOwnPropertyDescriptor;       var prop  = Object.getOwnPropertyNames;       var def_prop = Object.defineProperty;           prop(source).forEach(           function(key) {               def_prop(target, key, desc(source, key))           }       )       return target;   }  有了这个函数以后，我们就可以这来玩了： //艺术家   var Artist = Object.create(null);   Artist.sing = function() {       return this.name + ' starts singing...';   }   Artist.paint = function() {       return this.name + ' starts painting...';   }       //运动员   var Sporter = Object.create(null);   Sporter.run = function() {       return this.name + ' starts running...';   }   Sporter.swim = function() {       return this.name + ' starts swimming...';   }       Composition(Person, Artist);   document.write(Person.sing() + '<br>');   document.write(Person.paint() + '<br>');       Composition(Person, Sporter);   document.write(Person.run() + '<br>');   document.write(Person.swim() + '<br>');       //看看 Person中有什么？（输出：sayHello,sing,paint,swim,run）   document.write('<p>' + Object.keys(Person) + '<br>');  Prototype和继承 我们先来说说 Prototype。我们先看下面的例程，这个例程不需要解释吧，很像C语言里的函数指针，在C语言里这样的东西见得多了。 var plus = function(x,y){       document.write( x + ' + ' + y + ' = ' + (x+y) + '<br>');       return x + y;   };       var minus = function(x,y){       document.write(x + ' - ' + y + ' = ' + (x-y) + '<br>');       return x - y;   };       var operations = {       '+': plus,       '-': minus   };       var calculate = function(x, y, operation){       return operations[operation](x, y);   };       calculate(12, 4, '+');   calculate(24, 3, '-');  那么，我们能不能把这些东西封装起来呢，我们需要使用 prototype。看下面的示例： var Cal = function(x, y){       this.x = x;       this.y = y;   }       Cal.prototype.operations = {       '+': function(x, y) { return x+y;},       '-': function(x, y) { return x-y;}   };       Cal.prototype.calculate = function(operation){       return this.operations[operation](this.x, this.y);   };       var c = new Cal(4, 5);       c.calculate('+');   c.calculate('-');  这就是 prototype 的用法，prototype 是 javascript 这个语言中最重要的内容。网上有太多的文章介始这个东西了。说白了，prototype 就是对一对象进行扩展，其特点在于通过“复制”一个已经存在的实例来返回新的实例，而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的（当然，这里没有真正的复制，实际只是委托）。上面的这个例子中，我们扩展了实例 Cal，让其有了一个 operations 的属性和一个 calculate 的方法。 这样，我们可以通过这一特性来实现继承。还记得我们最最前面的那个 Person 吧， 下面的示例是创建一个 Student 来继承 Person。 function Person(name, email, website){       this.name = name;       this.email = email;       this.website = website;   };       Person.prototype.sayHello = function(){       var hello = \"Hello, I am \"+ this.name  + \", <br>\" +                   \"my email is: \" + this.email + \", <br>\" +                   \"my website is: \" + this.website;       return hello;   };       function Student(name, email, website, no, dept){       var proto = Object.getPrototypeOf;       proto(Student.prototype).constructor.call(this, name, email, website);       this.no = no;       this.dept = dept;   }       // 继承prototype   Student.prototype = Object.create(Person.prototype);       //重置构造函数   StudentStudent.prototype.constructor = Student;       //重载sayHello()   Student.prototype.sayHello = function(){       var proto = Object.getPrototypeOf;       var hello = proto(Student.prototype).sayHello.call(this) + '<br>';       hello += \"my student no is: \" + this. no + \", <br>\" +                \"my departent is: \" + this. dept;       return hello;   };       var me = new Student(       \"Chen Hao\",       \"haoel@hotmail.com\",       \"http://coolshell.cn\",       \"12345678\",       \"Computer Science\"   );   document.write(me.sayHello());  兼容性 上面的这些代码并不一定能在所有的浏览器下都能运行，因为上面这些代码遵循 ECMAScript 5 的规范，关于 ECMAScript 5 的浏览器兼容列表，你可以看这里“ES5浏览器兼容表”。 本文中的所有代码都在 Chrome 最新版中测试过了。 下面是一些函数，可以用在不兼容 ES5 的浏览器中： Object.create ()函数 function clone(proto) {       function Dummy() { }           Dummy.prototype             = proto;       DummyDummy.prototype.constructor = Dummy;           return new Dummy(); //等价于Object.create(Person);   }       var me = clone(Person);  defineProperty ()函数 function defineProperty(target, key, descriptor) {       if (descriptor.value){           target[key] = descriptor.value;       }else {           descriptor.get && target.__defineGetter__(key, descriptor.get);           descriptor.set && target.__defineSetter__(key, descriptor.set);       }           return target   }  keys ()函数 function keys(object) { var result, key       result = [];       for (key in object){           if (object.hasOwnProperty(key))  result.push(key)       }           return result;   }  Object.getPrototypeOf() 函数 function proto(object) {       return !object?                null            : '__proto__' in object?  object.__proto__            : /* not exposed? */      object.constructor.prototype   }  bind函数 var slice = [].slice       function bind(fn, bound_this) { var bound_args       bound_args = slice.call(arguments, 2)       return function() { var args           args = bound_args.concat(slice.call(arguments))           return fn.apply(bound_this, args) }   }  文章出自：酷壳网","title":"JavaScript面向对象编程"},{"content":"JSON是什么? JSON代表“javascript对象符号”,引用: “被广泛誉为的XML的浏览器继任者,JSON渴望只不过是一个简单的、优雅的数据格式进行信息交换的浏览器和服务器之间,在执行这个简单任务将引领下一版本的万维网本身。” 所以基本上认为JSON是一个PHP和Javascript之间的联结语言(在我们的例子中，jQuery)。所以当构建web页面(与jquery)我们可以使用ajax调用(无论是负载，$。ajax或其他)去从客户端到服务器,然后我们使用JSON去从服务器返回到客户机。现在你可能会问,我们不能使用json在两个方向吗?是的我们可以,但因为我们使用jquery,它已经发送到服务器的信息很好地格式化在$ _GET或$ _POST格式。   步骤1 -设置php文件   如果使用json,设置php文件变得更加容易。   <?php   if ($_GET['action']=='getlink'){   $ld=loadInfo ($_GET['link']); echo $ld; }   function loadInfo ($lnk){   switch ($lnk) { case 1: $list['name']='name john'; $list['desc']='my desc fsdfsd'; break; case 2: $list['name']='orians gate'; $list['desc']='bla for bla'; break; case 3: $list['name']='space 1999'; $list['desc']='whos there anyone'; break; } //正确格式用于javascript $str=json_encode($list);   return $str; } ?>   注意,我的数组在有名称\" $ list[' name ']”,我也改变了这个: $ str = json_encode($list); 这一行需要我们的php数组,并将它作为一个json字符串。 我已经说过我在先前的教程中,javascript不支持关联数组,但是,我们可以使用json来模拟他们。   步骤2 - HTML   开启测试。html和替换所有代码:   <style type=\"text/css\"> #ajaxBox { background-color:#FFFF99; border:thin solid #FF0000; width:70%; height:50px;} #formHeader{text-align:center; font-size:18px; color:#0000FF;} #myform{text-align:center;} <\/style>   <script language=\"javascript\" src=\"jquery-1.3.2.min.js\"><\/script> <script language=\"javascript\" src=\"jquery.delay.js\"><\/script>   <script language=\"javascript\"> $(document).ready(function() { //Finish loading the entire page before processing any javascript   $(\"#hidden\").hide(); $(\"#textfield\").val(\"\"); $(\"#textarea\").val(\"\");   $(\"#mylist a\").bind(\"click\", function() { var hol=$(this).attr('myval'); var formContent =\"action=getlink&link=\"+hol;   $.getJSON(\"myserv.php\",formContent, function(json){ $(\"#textfield\").val(json.name); $(\"#textarea\").val(json.desc); $(\"#formHeader\").text(\"Edit\"); $(\"#ajaxBox\").text(\"All info loaded OK\"); }); //结束json   }); //端点击   }); //最终准备好了函数 <\/script>   <div id=\"ajaxBox\"><\/div>   <div id=\"mylist\"> <ul> <li><a href=\"#\" myval=\"1\">cool site<\/a><\/li> <li><a href=\"#\" myval=\"2\">new name<\/a><\/li> <li><a href=\"#\" myval=\"3\">great space<\/a><\/li> <\/ul> <\/div>   <div id=\"myform\"> <div id=\"formHeader\">Add New<\/div> <form name=\"form1\" method=\"post\" action=\"\"> <label>Name<input type=\"text\" name=\"textfield\" id=\"textfield\"><\/label><br /><br /> <label>Desc<textarea name=\"textarea\" id=\"textarea\" cols=\"45\" rows=\"5\"><\/textarea><\/label> <\/form> <\/div>   现在尝试运行该页面。不错,不是吗?让我解释的变化。一段代码,真正重要的是这样的:   $.getJSON(\"myserv.php\",formContent, function(json){ $(\"#textfield\").val(json.name); $(\"#textarea\").val(json.desc); $(\"#formHeader\").text(\"Edit\"); $(\"#ajaxBox\").text(\"All info loaded OK\"); }); //结束json   我现在使用jquery函数,做一个ajax调用和返回数据作为json对象($ getjson)。这些数据然后被放置在一个变量称为“json”,模拟一个关联数组。注意到这一行:   $(\"#textfield\").val(json.name);   我分配形式元素“#textfield”与“json.name”。酷的一件事关于json是,除了模拟关联数组,您可以编写它们深达你想要的, 为例:   $list['country']='england'; $list['country']['city']='london'; $list['country']['city']['zip code']='12345'; etc   现在我们是检索正确格式化的数据从服务器,我们现在可以生成html在一个完全不同的方式.   步骤3——回顾   所以现在我们看了几个方面做的ajax调用和jquery函数,让我们简要复习其中的一些。   $.load——做一个ajax调用并返回的html。   $.getJSON——做一个ajax调用并返回的数据格式化为json。   $.change——检测变化在一个选择器。   .bind(“点击”,函数()),等待一个点击一个选择器   $.hide——隐藏一个选择器如div,p,等等   $.show——显示一个选择器","title":"jQuery的教程：PHP数组传递JSON"},{"content":"         HTML5去掉了很多过时的标签，例如<center>和<frameset>，同时又引入了许多有趣的新标签，例如<video>和<audio>标签可以允许动态的加载音频和视频。          HTML5引入的新标签包括<Audio>、<Video>、<Canvas>、<Article>、<Footer>等等，而这些标签又有一些有趣的属性，例如poster、autofocus、onerror、formaction、oninput，这些属性都可以用来执行javascript。这会导致XSS和CSRF跨域请求伪造。          下面我们要讲到就是这些关键载体。它允许创建XSS的变种并且可以绕过现有的XSS过滤器。          首先来看一个标签： <video><sourceonerror=\"javascript:alert(1)“>          它使用了一个source标签，而没有指定具体的src，所以后面的onerror方法会立即得到执行。          下面是video的poster属性，它链接到一个图像，是指当视频未响应或缓冲不足时，显示的占位符。 <videoposter=”javascript:alert(1)”>          另外还有HTML5新引入的autofocus和formaction属性，autofocus会让元素自动的获取焦点，而formaction属性能覆盖 form 元素的action 属性。 <inputautofocus onfocus=“alert(1)”><form><buttonformaction=\"javascript:alert(1)\">          在这个项目里存在用户输入的地方，我们虽然已经针对旧有的标签以及属性进行了过滤和清洗，但是还会存在新标签攻击的漏洞，攻击者利用上面的示例方式就可以对系统进行XSS注入攻击。例如攻击者输入http://www.yujie.com/1.php?text=<videoposter=”javascript:alert(1)”>时就能立即运行攻击脚本。          我们对此攻击的防御方式是，对前端或者后端的过滤器进行优化，添加过滤规则或者黑名单。          相关文章：          《关注HTML5安全风险》          《HTML5安全风险详析之一：CORS攻击》          《HTML5安全风险详析之二：WebStorage攻击》          《HTML5安全风险详析之三：WebSQL攻击》          《HTML5安全风险详析之四：Web Worker攻击》          《HTML5安全风险详析之五：劫持攻击》          《HTML5安全风险详析之六：API攻击》         本文为原创文章，转载请注明：来自蒋宇捷的博客：http://blog.csdn.net/hfahe","title":"HTML5安全攻防详析之七：新标签攻击"},{"content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /><title>黑色横条红色竖直下拉导航栏代码-免费模板<\/title><link href=\"http://cssdh.mianfeimoban.com/uploadfile/2012/0311/menu10/css/base.css\" rel=\"stylesheet\" /><script src=\"http://cssdh.mianfeimoban.com/uploadfile/2012/0311/menu3/js/jquery-1.6.1.min.js\" type=\"text/javascript\"><\/script><\/head><body><div id=\"header\"><\/div>\t<div id=\"dd-navigation\">    \t<div id=\"nav-strip\">            <ul>                <li class=\"nav-item no-subnav active\" id=\"nav-item_1\"><a href=\"http://www.duice.net\" ><span class=\"primary-link\">首页<\/span><\/a>              <\/li>                <li class=\"nav-item\" id=\"nav-item_2\"><a href=\"#\" ><span class=\"primary-link\">关于我们<\/span><\/a>                    <div class=\"subnav \" id=\"subnav_2\">                                              <div class=\"subnav-inner\">                        <ul>                                                   <li class=\"\"><a href=\"#\" target=\"_top\">电子商务人才<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站建设<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站推广<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">导航条代码<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网络营销外包<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站制作<\/a><\/li>                           <\/ul>                                             <\/div>                                         <\/div>              <\/li>                <li class=\"nav-item\" id=\"nav-item_3\"><a href=\"#\" ><span class=\"primary-link\">产品展示<\/span><\/a>                    <div class=\"subnav \" id=\"subnav_3\">                                             <div class=\"subnav-inner\">                        <ul>                                                   <li class=\"\"><a href=\"#\" target=\"_top\">电子商务人才<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站建设<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站推广<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">导航条代码<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网络营销外包<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站制作<\/a><\/li>                         <\/ul>                                            <\/div>                                         <\/div>              <\/li>                <li class=\"nav-item\" id=\"nav-item_4\"><a href=\"#\" ><span class=\"primary-link\">行业资讯<\/span><\/a>                    <div class=\"subnav \" id=\"subnav_4\">                                               <div class=\"subnav-inner\">                        <ul>                                                   <li class=\"\"><a href=\"#\" target=\"_top\">网站制作<\/a><\/li>                                                      <li class=\" \"><a href=\"#\" target=\"_top\">电子商务人才<\/a><\/li>                          <\/ul>                                             <\/div>                                         <\/div>              <\/li>                <li class=\"nav-item\" id=\"nav-item_5\"><a href=\"#\" ><span class=\"primary-link\">工程案例<\/span><\/a>                    <div class=\"subnav \" id=\"subnav_5\">                                               <div class=\"subnav-inner\">                        <ul>                                                   <li class=\"\"><a href=\"#\" target=\"_top\">网站建设<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站推广<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">导航条代码<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网络营销外包<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站制作<\/a><\/li>                             <\/ul>                                             <\/div>                                         <\/div>              <\/li>              <li class=\"nav-item no-subnav\" id=\"nav-item_6\"><a href=\"#\" ><span class=\"primary-link\">免费模板<\/span><\/a>              <\/li>                <li class=\"nav-item\" id=\"nav-item_7\"><a href=\"#\" ><span class=\"primary-link\">联系我们<\/span><\/a>                    <div class=\"subnav\" id=\"subnav_7\">                                               <div class=\"subnav-inner\">                        <ul>                                                   <li class=\"\"><a href=\"#\" target=\"_top\">导航条代码<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网络营销外包<\/a><\/li>                            <li class=\"\"><a href=\"#\" target=\"_top\">网站制作<\/a><\/li>                             <\/ul>                                             <\/div>                                         <\/div>              <\/li>                                                           <li class=\"nav-item no-subnav end\" id=\"nav-item_8\"><a href=\"#\" ><span class=\"primary-link\">客服中心<\/span><\/a>              <\/li>         <\/ul>       \t<\/div>    <\/div><\/div><script src=\"http://cssdh.mianfeimoban.com/uploadfile/2012/0311/menu3/js/rcom-nav.js\" type=\"text/javascript\"><\/script><\/body><\/html> http://cssdh.mianfeimoban.com/tag.php?tag=%BA%DA%C9%AB&page=1","title":"横向导航菜单"},{"content":"ie9都不支持websocket,何况ie6,但是websocket能开发那么酷的功能,怎么能让ie拦住我们的脚步? 但是怎么办? 用flash封装吧 具体的flash代码如下: package {\timport flash.display.Stage;\timport flash.display.Sprite;\timport flash.events.*;\timport flash.external.ExternalInterface;\timport flash.system.Security;\timport flash.utils.Timer;        import flash.net.Socket;        import flash.utils.ByteArray;        import flash.utils.Endian;\tpublic class websocket4ie extends Sprite {                        public static function main():void            {                       var websocket4ie:websocket4ie = new websocket4ie();            }            private var debugEnabled:Boolean;            private var movieName:String;            private var handlers:String;            private var server:String;                        private var port:Number;            private var isDebug:Number;            private var socket:Socket;             private var socketBuffer:ByteArray = new ByteArray();            public function websocket4ie() {                Security.allowDomain(\"*\");\t                var counter:Number = 0;                root.addEventListener(Event.ENTER_FRAME, function ():void { if (++counter > 100) counter = 0; });                this.movieName = root.loaderInfo.parameters.movieName;                this.handlers = root.loaderInfo.parameters.handlers;                this.server = root.loaderInfo.parameters.server;                this.port = root.loaderInfo.parameters.port;                this.isDebug = root.loaderInfo.parameters.debug;                this.debug(this.port+''+this.server);                try {                    this.debugEnabled = root.loaderInfo.parameters.debugEnabled == \"true\" ? true : false;                } catch (ex:Object) {                    this.debugEnabled = false;                }                this.connectServer();                ExternalInterface.addCallback(\"sendData\", this.sendData);            }            public function connectServer():void {                socket = new Socket();                socket.endian = Endian.BIG_ENDIAN;                socket.addEventListener(Event.CONNECT, onConnect);                       socket.addEventListener(Event.CLOSE, onClose);                socket.addEventListener(IOErrorEvent.IO_ERROR, onIOError);                socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);                socket.addEventListener(ProgressEvent.SOCKET_DATA, onSocketData);                socket.connect(this.server, this.port);                 this.socket = socket;            }            public function onConnect(e:Event):void {                                //握手                var headers:Array = new Array();                headers.push(\"GET /chat HTTP/1.1\\r\\n\");                headers.push(\"Upgrade: websocket\\r\\n\");                headers.push(\"Connection: Upgrade\\r\\n\");                headers.push(\"Host: \"+this.server+\":\"+this.port+\"\\r\\n\");                headers.push(\"Origin: null\\r\\n\");                headers.push(\"Sec-WebSocket-Key: 6z4ezNfATjW5/FEMYpqRuw==\\r\\n\");                headers.push(\"Sec-WebSocket-Version: 13\\r\\n\\r\\n\\r\\n\");                this.socket.writeUTFBytes(headers.join(''));                 this.socket.flush();            }            public function onTrueConnect():void {                ExternalInterface.call(this.handlers+\".onConnect\",this.movieName);            }                        public function onClose(e:Event):void {                ExternalInterface.call(this.handlers+\".onClose\",this.movieName,'1');            }            public function onIOError(e:IOErrorEvent):void {                ExternalInterface.call(this.handlers+\".onClose\",this.movieName,'2');            }            public function onSecurityError(e:SecurityErrorEvent):void {                ExternalInterface.call(this.handlers+\".onClose\",this.movieName,'3');            }                        public var step:String = \"head\";                                    public var position:Number = 0;                        public function readOnData():void {                var tmpPos:Number = this.position;                this.socketBuffer.position = this.position;                //read 一个 0x81                if(this.socketBuffer.bytesAvailable>=1) {                    var h:Number = this.socketBuffer.readUnsignedByte();                    this.debug(\"头:\"+h);                    this.position += 1;                    if(this.socketBuffer.bytesAvailable>=1) {                         var len:Number = this.socketBuffer.readUnsignedByte();                        this.debug(\"长度:\"+len);                        this.position += 1;                        if(len<=125) {                            if(this.socketBuffer.bytesAvailable>=len) {                                 this.onText(this.socketBuffer.readUTFBytes(len));                                this.position += len;                                this.readOnData();                            } else {                                this.position = tmpPos;                                return;                            }                        } else if(len==126) {                            if(this.socketBuffer.bytesAvailable>=2) {                                var trueLen:Number = this.socketBuffer.readUnsignedShort();                                if(this.socketBuffer.bytesAvailable>=trueLen) {                                    this.onText(this.socketBuffer.readUTFBytes(trueLen));                                    this.position += trueLen;                                    this.readOnData();                                }                            } else {                                this.position = tmpPos;                                return;                            }                        }                    } else {                        this.position = tmpPos;                        return;                    }                } else {                    this.position = tmpPos;                    return;                }            }            public function onText(text:String):void {                ExternalInterface.call(this.handlers+\".onData\",this.movieName,text);            }                        public function writeBytes(bytes:ByteArray):void {                                this.socketBuffer.position = this.socketBuffer.length;                this.socketBuffer.writeBytes(bytes,0,bytes.length);                this.debug(\"buffer数据:\"+this.socketBuffer.length);                this.readOnData();            }            public var is_head:Boolean = true;            public var header:ByteArray = new ByteArray();            public var headers:Array = new Array();            public function onSocketData(e:Event):void {                var bytes:ByteArray = new ByteArray();                                if(this.is_head) {                    while(this.socket.bytesAvailable) {                        var x:Number = this.socket.readUnsignedByte();                                                if(x==0x81) {                            this.is_head = false;                            bytes.writeByte(0x81);                            this.debug(this.headers);                            break;                        } else {                            this.header.writeByte(x);                                                        if(x==10) {                                this.header.position = 0;                                                                this.headers.push(this.header.readUTFBytes(this.header.length));                                if(this.header.length==2) {                                    this.onTrueConnect();                                }                                this.header = new ByteArray();                            }                            continue;                         }                    }                    if(this.socket.bytesAvailable) {                         this.socket.readBytes(bytes,1,this.socket.bytesAvailable);                    }                } else {                    this.socket.readBytes(bytes,0,this.socket.bytesAvailable);                }                bytes.position = 0;                this.writeBytes(bytes);            }            public function sendData(text:String):void {                var head:ByteArray = new ByteArray();                head.writeByte(0x81);                var body:ByteArray = new ByteArray();                body.writeUTFBytes(text);                var len:Number = body.length;                if(len<=125) {                    head.writeByte(len);                } else if(len<65536){                    head.writeByte(126);                    head.writeShort(len);                } else {                    head.writeByte(127);                    head.writeUnsignedInt(len);                }                body.position = 0;                head.position = 0;                this.socket.writeBytes(head);                this.socket.writeBytes(body);                this.socket.flush();            }                        public function debug(str:*):void {                if(this.isDebug) {                    ExternalInterface.call(this.handlers+\".debug\",this.movieName,str);                }            }\t}} js代码如下 var handlers = {    'connects':[],    'onClose':function(index,flag) {        this.connects[index.replace(\"socket_\",\"\")].onClose();    },    'onConnect':function(index) {        this.connects[index.replace(\"socket_\",\"\")].onConnect();    },    'onData':function(index,text) {        this.connects[index.replace(\"socket_\",\"\")].onData(text);    },    'debug':function(index,str) {        console.log(str);    }};function socket4ie() {    this.debug = 0;    this.init = function() {        this.index = handlers.connects.length;        handlers.connects.push(this);    }    this.connect = function(domain,port) {        this.createFlash(domain,port);    }    this.createFlash = function(domain,port) {        var html = '<object id=\"socket_'+this.index+'\" type=\"application/x-shockwave-flash\" data=\"websocket4ie.swf\" width=0 height=0 class=\"swfupload\">\\            <param name=\"wmode\" value=\"window\">\\            <param name=\"movie\" value=\"websocket4ie.swf\">\\            <param name=\"quality\" value=\"high\">\\            <param name=\"menu\" value=\"false\">\\            <param name=\"allowScriptAccess\" value=\"always\">\\            <param name=\"flashvars\" value=\"movieName=socket_'+this.index+'&handlers=handlers&server='+domain+'&port='+port+'&debug='+this.debug+'\"><\/object>';            var div = document.createElement('div');        div.id = \"flash_\"+this.index;        div.innerHTML = html;        document.body.appendChild(div);    }    this.onClose  = function() {            }    this.onConnect = function() {            }    this.onData = function(text) {            }    this.init();} 具体代码请去我的github下载 https://github.com/suxianbaozi/websocket4ie","title":"让ie6也支持websocket"},{"content":"开头语：SQL注入攻击的危害性很大。在讲解其防止办法之前，数据库管理员有必要先了解一下其攻击的原理。这有利于管理员采取有针对性的防治措施 -----解决方案-------------------------------------------------------- 过滤URL中的一些特殊字符，动态SQL语句使用PrepareStatement.. ------解决方案-------------------------------------------------------- 注入的方式就是在查询条件里加入SQL字符串. 可以检查一下提交的查询参数里是否包含SQL,但通常这样无益. 最好的办法是不要用拼接SQL字符串,可以用prepareStatement,参数用set方法进行填装 ------解决方案-------------------------------------------------------- sql注入形式：...where name=\"+name+\",这样的sql语句很容易sql注入，可以这样： jdbcTemplate.update(\"delete from userinfo where id=? and userId=?\", new Object[]{userInfo.getId(),userInfo.getUserId()}); 我的一些代码，望有用！ ------解决方案-------------------------------------------------------- Sql注入漏洞攻击：如1'or'1'='1 使用参数化查询避免 cmd.CommandText=\"select count(*) from 表名 where username=@a and password=@b\"; cmd.parameters.Add(new SqlParameter(\"a\",\"..\")); cmd.parameters.Add(new SqlParameter(\"b\",\"..\")); ------解决方案-------------------------------------------------------- 恩，用框架，用jpa的pojo。。就没这种事情了 SSH2架构中 怎么防止SQL注入呢？还有其他相关安全问题怎么设计呢？ 目前的安全，只是对用户密码加密，前台jquery验证。 如何实现防止注入攻击还有我的页面有些隐藏域保存这当前登录用户的信息等信息。 用户查看页面源代码就可以查看到了。 有没好的解决方案呢？还有其他哪些要注意的地方呢？ Struts2 hibernate3 spring 3.0 sql server 2000 sp4 ------解决方案-------------------------------------------------------- 1：向 CA 购买证书，使用 HTTPS 进行通信，以保证在网络传输过程中是安全的 2：避免 XSS 注入（页面回显的 input text, input hidden 均过滤 <、>、\"、' 等字符等） 3：使用随机键盘或者安全控件防止键盘木马记录用户的输入 4：若要在 Cookie 中写入数据，尽量使用 Cookie 的 HttpOnly 属性 5：响应中设置一些诸如 X-Frame-Options、X-XSS-Protection 等高版本浏览器支持的 HTTP 头 6: 不管客户端是否做过数据校验，在服务端必须要有数据校验（长度、格式、是否必填等等） 7: SQL 语句采用 PreparedStatement 的填充参数方式，严禁使用字符串拼接 SQL 或者 HQL 语句 六个建议防止SQL注入式攻击 2009-04-01 14:38 SQL注入攻击的危害性很大。在讲解其防止办法之前，数据库管理员有必要先了解一下其攻击的原理。这有利于管理员采取有针对性的防治措施。 　　一、 SQL注入攻击的简单示例。 　　statement := \"SELECT * FROM Users WHERE Value= \" + a_variable + \" 　　上面这条语句是很普通的一条SQL语句，他主要实现的功能就是让用户输入一个员工编号然后查询处这个员工的信息。但是若这条语句被不法攻击者改装过后，就可能成为破坏数据的黑手。如攻击者在输入变量的时候，输入以下内容SA001’;drop table c_order--。那么以上这条SQL语句在执行的时候就变为了SELECT * FROM Users WHERE Value= ‘SA001’;drop table c_order--。 　　这条语句是什么意思呢?‘SA001’后面的分号表示一个查询的结束和另一条语句的开始。c_order后面的双连字符 指示当前行余下的部分只是一个注释，应该忽略。如果修改后的代码语法正确，则服务器将执行该代码。系统在处理这条语句时，将首先执行查询语句，查到用户编号为SA001 的用户信息。然后，数据将删除表C_ORDER(如果没有其他主键等相关约束，则删除操作就会成功)。只要注入的SQL代码语法正确，便无法采用编程方式来检测篡改。因此，必须验证所有用户输入，并仔细检查在您所用的服务器中执行构造 SQL命令的代码。 　　二、 SQL注入攻击原理。 　　可见SQL注入攻击的危害性很大。在讲解其防止办法之前，数据库管理员有必要先了解一下其攻击的原理。这有利于管理员采取有针对性的防治措施。 　　SQL注入是目前比较常见的针对数据库的一种攻击方式。在这种攻击方式中，攻击者会将一些恶意代码插入到字符串中。然后会通过各种手段将该字符串传递到SQLServer数据库的实例中进行分析和执行。只要这个恶意代码符合SQL语句的规则，则在代码编译与执行的时候，就不会被系统所发现。 　　SQL注入式攻击的主要形式有两种。一是直接将代码插入到与SQL命令串联在一起并使得其以执行的用户输入变量。上面笔者举的例子就是采用了这种方法。由于其直接与SQL语句捆绑，故也被称为直接注入式攻击法。二是一种间接的攻击方法，它将恶意代码注入要在表中存储或者作为原书据存储的字符串。在存储的字符串中会连接到一个动态的SQL命令中，以执行一些恶意的SQL代码。 　　注入过程的工作方式是提前终止文本字符串，然后追加一个新的命令。如以直接注入式攻击为例。就是在用户输入变量的时候，先用一个分号结束当前的语句。然后再插入一个恶意SQL语句即可。由于插入的命令可能在执行前追加其他字符串，因此攻击者常常用注释标记“—”来终止注入的字符串。执行时，系统会认为此后语句位注释，故后续的文本将被忽略，不背编译与执行。 　　三、 SQL注入式攻击的防治。 既然SQL注入式攻击的危害这么大，那么该如何来防治呢?下面这些建议或许对数据库管理员防治SQL注入式攻击有一定的帮助。 　　1、 普通用户与系统管理员用户的权限要有严格的区分。 　　如果一个普通用户在使用查询语句中嵌入另一个Drop Table语句，那么是否允许执行呢?由于Drop语句关系到数据库的基本对象，故要操作这个语句用户必须有相关的权限。在权限设计中，对于终端用户，即应用软件的使用者，没有必要给他们数据库对象的建立、删除等权限。那么即使在他们使用SQL语句中带有嵌入式的恶意代码，由于其用户权限的限制，这些代码也将无法被执行。故应用程序在设计的时候，最好把系统管理员的用户与普通用户区分开来。如此可以最大限度的减少注入式攻击对数据库带来的危害。 　　2、 强迫使用参数化语句。 　　如果在编写SQL语句的时候，用户输入的变量不是直接嵌入到SQL语句。而是通过参数来传递这个变量的话，那么就可以有效的防治SQL注入式攻击。也就是说，用户的输入绝对不能够直接被嵌入到SQL语句中。与此相反，用户的输入的内容必须进行过滤，或者使用参数化的语句来传递用户输入的变量。参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。采用这种措施，可以杜绝大部分的SQL注入式攻击。不过可惜的是，现在支持参数化语句的数据库引擎并不多。不过数据库工程师在开发产品的时候要尽量采用参数化语句。 3、 加强对用户输入的验证。 　　总体来说，防治SQL注入式攻击可以采用两种方法，一是加强对用户输入内容的检查与验证;二是强迫使用参数化语句来传递用户输入的内容。在SQLServer数据库中，有比较多的用户输入内容验证工具，可以帮助管理员来对付SQL注入式攻击。测试字符串变量的内容，只接受所需的值。拒绝包含二进制数据、转义序列和注释字符的输入内容。这有助于防止脚本注入，防止某些缓冲区溢出攻击。测试用户输入内容的大小和数据类型，强制执行适当的限制与转换。这即有助于防止有意造成的缓冲区溢出，对于防治注入式攻击有比较明显的效果。 　　如可以使用存储过程来验证用户的输入。利用存储过程可以实现对用户输入变量的过滤，如拒绝一些特殊的符号。如以上那个恶意代码中，只要存储过程把那个分号过滤掉，那么这个恶意代码也就没有用武之地了。在执行SQL语句之前，可以通过数据库的存储过程，来拒绝接纳一些特殊的符号。在不影响数据库应用的前提下，应该让数据库拒绝包含以下字符的输入。如分号分隔符，它是SQL注入式攻击的主要帮凶。如注释分隔符。注释只有在数据设计的时候用的到。一般用户的查询语句中没有必要注释的内容，故可以直接把他拒绝掉，通常情况下这么做不会发生意外损失。把以上这些特殊符号拒绝掉，那么即使在SQL语句中嵌入了恶意代码，他们也将毫无作为。 　　故始终通过测试类型、长度、格式和范围来验证用户输入，过滤用户输入的内容。这是防止SQL注入式攻击的常见并且行之有效的措施。 　　4、 多多使用SQL Server数据库自带的安全参数。 　　为了减少注入式攻击对于SQL Server数据库的不良影响，在SQLServer数据库专门设计了相对安全的SQL参数。在数据库设计过程中，工程师要尽量采用这些参数来杜绝恶意的SQL注入式攻击。 　　如在SQL Server数据库中提供了Parameters集合。这个集合提供了类型检查和长度验证的功能。如果管理员采用了Parameters这个集合的话，则用户输入的内容将被视为字符值而不是可执行代码。即使用户输入的内容中含有可执行代码，则数据库也会过滤掉。因为此时数据库只把它当作普通的字符来处理。使用Parameters集合的另外一个优点是可以强制执行类型和长度检查，范围以外的值将触发异常。如果用户输入的值不符合指定的类型与长度约束，就会发生异常，并报告给管理员。如上面这个案例中，如果员工编号定义的数据类型为字符串型，长度为10个字符。而用户输入的内容虽然也是字符类型的数据，但是其长度达到了20个字符。则此时就会引发异常，因为用户输入的内容长度超过了数据库字段长度的限制。 　　5、 多层环境如何防治SQL注入式攻击? 　　在多层应用环境中，用户输入的所有数据都应该在验证之后才能被允许进入到可信区域。未通过验证过程的数据应被数据库拒绝，并向上一层返回一个错误信息。实现多层验证。对无目的的恶意用户采取的预防措施，对坚定的攻击者可能无效。更好的做法是在用户界面和所有跨信任边界的后续点上验证输入。如在客户端应用程序中验证数据可以防止简单的脚本注入。但是，如果下一层认为其输入已通过验证，则任何可以绕过客户端的恶意用户就可以不受限制地访问系统。故对于多层应用环境，在防止注入式攻击的时候，需要各层一起努力，在客户端与数据库端都要采用相应的措施来防治SQL语句的注入式攻击。","title":"防止SQL注入攻击的一些方法小结"},{"content":"今天看了篇博文，说用HTML和CSS来实现画三角形的目的，于是比葫芦画瓢做了个例子，代码为： <!DOCTYPE HTML><html><head><meta content=\"text/html;charset=gb2312\" http-equiv=\"Content-Type\"/><meta name=\"viewport\" content=\"user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0\"/><meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /><meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /><title>股票行情<\/title><style>  *{margin:0;padding:0;}.rectangle{width:0;padding:0;border:100px solid transparent;border-left-color:red;}<\/style><\/head><body><div class=\"rectangle\"><\/div><\/body><\/html> 执行效果为： 但是这个只是在Chrome,Firefox,IE8+才能够正确显示。 IE7-的版本执行的结果为： 虽然兼容性有问题，但是这个丝毫不影响我们应用它，我们可将这个小技巧应用于开发触屏版WAP站上，因为触屏版的手机对这个支持的都很好，因为智能手机如果是Windows系统上话，上面的IE基本上都是IE9+，所以不存在兼容IE低版本的问题。","title":"HTML+CSS 画三角形"},{"content":"这是一个linux常见命令的列表。 命令 描述 • apropos whatis 显示和word相关的命令。 参见线程安全 • man -t man | ps2pdf - > man.pdf 生成一个PDF格式的帮助文件   which command 显示命令的完整路径名   time command 计算命令运行的时间 • time cat 开始计时. Ctrl-d停止。参见sw • nice info 运行一个低优先级命令（这里是info） • renice 19 -p $$ 使脚本运行于低优先级。用于非交互任务。 目录操作 • cd - 回到前一目录 • cd 回到用户目录   (cd dir && command) 进入目录dir，执行命令command然后回到当前目录 • pushd . 将当前目录压入栈，以后你可以使用popd回到此目录 文件搜索 • alias l='ls -l --color=auto' 单字符文件列表命令 • ls -lrt 按日期显示文件. 参见newest • ls /usr/bin | pr -T9 -W$COLUMNS 在当前终端宽度上打印9列输出   find -name '*.[ch]' | xargs grep -E 'expr' 在当前目录及其子目录下所有.c和.h文件中寻找'expr'. 参见findrepo   find -type f -print0 | xargs -r0 grep -F 'example' 在当前目录及其子目录中的常规文件中查找字符串'example'   find -maxdepth 1 -type f | xargs grep -F 'example' 在当前目录下查找字符串'example'   find -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done 对每一个找到的文件执行多个命令(使用while循环) • find -type f ! -perm -444 寻找所有不可读的文件(对网站有用) • find -type d ! -perm -111 寻找不可访问的目录(对网站有用) • locate -r 'file[^/]*\\.txt' 使用locate 查找所有符合*file*.txt的文件 • look reference 在（有序）字典中快速查找 • grep --color reference /usr/share/dict/words 使字典中匹配的正则表达式高亮 归档 and compression   gpg -c file 文件加密   gpg file.gpg 文件解密   tar -c dir/ | bzip2 > dir.tar.bz2 将目录dir/压缩打包   bzip2 -dc dir.tar.bz2 | tar -x 展开压缩包 (对tar.gz文件使用gzip而不是bzip2)   tar -c dir/ | gzip | gpg -c | ssh user@remote 'dd of=dir.tar.gz.gpg' 目录dir/压缩打包并放到远程机器上   find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2 将目录dir/及其子目录下所有.txt文件打包   find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents 将目录dir/及其子目录下所有.txt按照目录结构拷贝到dir_txt/   ( tar -c /dir/to/copy ) | ( cd /where/to/ && tar -x -p ) 拷贝目录copy/到目录/where/to/并保持文件属性   ( cd /dir/to/copy && tar -c . ) | ( cd /where/to/ && tar -x -p ) 拷贝目录copy/下的所有文件到目录/where/to/并保持文件属性   ( tar -c /dir/to/copy ) | ssh -C user@remote 'cd /where/to/ && tar -x -p' 拷贝目录copy/到远程目录/where/to/并保持文件属性   dd bs=1M if=/dev/sda | gzip | ssh user@remote 'dd of=sda.gz' 将整个硬盘备份到远程机器上 rsync (使用 --dry-run选项进行测试)   rsync -P rsync://rsync.server.com/path/to/file file 只获取diffs.当下载有问题时可以作多次   rsync --bwlimit=1000 fromfile tofile 有速度限制的本地拷贝，对I/O有利   rsync -az -e ssh --delete ~/public_html/ remote.com:'~/public_html' 镜像网站(使用压缩和加密)   rsync -auz -e ssh remote:/dir/ . && rsync -auz -e ssh . remote:/dir/ 同步当前目录和远程目录 ssh (安全 Shell)   ssh $USER@$HOST command 在$Host主机上以$User用户运行命令(默认命令为Shell) • ssh -f -Y $USER@$HOSTNAME xeyes 在名为$HOSTNAME的主机上以$USER用户运行GUI命令   scp -p -r $USER@$HOST: file dir/ 拷贝到$HOST主机$USER'用户的目录下   ssh -g -L 8080:localhost:80 root@$HOST 由本地主机的8080端口转发到$HOST主机的80端口   ssh -R 1434:imap:143 root@$HOST 由主机的1434端口转发到imap的143端口 wget (多用途下载工具) • (cd cmdline && wget -nd -pHEKk http://www.pixelbeat.org/cmdline.html) 在当前目录中下载指定网页及其相关的文件使其可完全浏览   wget -c http://www.example.com/large.file 继续上次未完的下载   wget -r -nd -np -l1 -A '*.jpg' http://www.example.com/ 批量下载文件到当前目录中   wget ftp://remote/file[1-9].iso/ 下载FTP站上的整个目录 • wget -q -O- http://www.pixelbeat.org/timeline.html | grep 'a href' | head 直接处理输出   echo 'wget url' | at 01:00 在下午一点钟下载指定文件到当前目录   wget --limit-rate=20k url 限制下载速度(这里限制到20KB/s)   wget -nv --spider --force-html -i bookmarks.html 检查文件中的链接是否存在   wget --mirror http://www.example.com/ 更新网站的本地拷贝(可以方便地用于cron) 网络(ifconfig, route, mii-tool, nslookup 命令皆已过时)   ethtool eth0 显示网卡eth0的状态   ethtool --change eth0 autoneg off speed 100 duplex full 手动设制网卡速度   iwconfig eth1 显示无线网卡eth1的状态   iwconfig eth1 rate 1Mb/s fixed 手动设制无线网卡速度 • iwlist scan 显示无线网络列表 • ip link show 显示interface列表   ip link set dev eth0 name wan 重命名eth0为wan   ip link set dev eth0 up 启动interface eth0(或关闭) • ip addr show 显示网卡的IP地址   ip addr add 1.2.3.4/24 brd + dev eth0 添加ip和掩码(255.255.255.0) • ip route show 显示路由列表   ip route add default via 1.2.3.254 设置默认网关1.2.3.254 • tc qdisc add dev lo root handle 1:0 netem delay 20msec 增加20ms传输时间到loopback设备(调试用) • tc qdisc del dev lo root 移除上面添加的传输时间 • host pixelbeat.org 查寻主机的DNS IP地址 • hostname -i 查寻本地主机的IP地址(同等于host `hostname`) • whois pixelbeat.org 查寻某主机或莫IP地址的whois信息 • netstat -tupl 列出系统中的internet服务 • netstat -tup 列出活跃的连接 windows networking (samba提供所有windows相关的网络支持) • smbtree 寻找一个windows主机. 参见findsmb   nmblookup -A 1.2.3.4 寻找一个指定ip的windows (netbios)名   smbclient -L windows_box 显示在windows主机或samba服务器上的所有共享   mount -t smbfs -o fmask=666,guest //windows_box/share /mnt/share 挂载一个windows共享   echo 'message' | smbclient -M windows_box 发送一个弹出信息到windows主机(XP sp2默认关闭此功能) 文本操作 (sed使用标准输入和标准输出，如果想要编辑文件，则需添加<oldfile >newfile)   sed 's/string1/string2/g' 使用string2替换string1   sed 's/\\(.*\\)1/\\12/g' 将任何以1结尾的字符串替换为以2结尾的字符串   sed '/ *#/d; /^ *$/d' 删除注释和空白行   sed ':a; /\\\\$/N; s/\\\\\\n//; ta' 连接结尾有\\的行和其下一行   sed 's/[ \\t]*$//' 删除每行后的空白   sed 's/\\([\\\\`\\\\\"$\\\\\\\\]\\)/\\\\\\1/g' 将所有转义字符之前加上\\ • seq 10 | sed \"s/^/      /; s/ *\\(.\\{7,\\}\\)/\\1/\" 向右排N(任意数)列   sed -n '1000p;1000q' 输出第一千行   sed -n '10,20p;20q' 输出第10-20行   sed -n 's/.*<title>\\(.*\\)<\\/title>.*/\\1/ip;T;q' 输出HTML文件的<title><\/title>字段中的 内容   sort -t. -k1,1n -k2,2n -k3,3n -k4,4n 排序IPV4地址 • echo 'Test' | tr '[:lower:]' '[:upper:]' 转换成大写 • tr -dc '[:print:]' < /dev/urandom 过滤掉不能打印的字符 • history | wc -l 计算指定单词出现的次数 集合操作 (如果是英文文本的话export LANG=C可以提高速度)   sort file1 file2 | uniq 两个未排序文件的并集   sort file1 file2 | uniq -d 两个未排序文件的交集   sort file1 file1 file2 | uniq -u 两个未排序文件的差 集   sort file1 file2 | uniq -u 两个未排序文件的对称差集   join -t'\\0' -a1 -a2 file1 file2 两个有序文件的并集   join -t'\\0' file1 file2 两个有序文件的交集   join -t'\\0' -v2 file1 file2 两个有序文件的差集   join -t'\\0' -v1 -v2 file1 file2 两个有序文件的对称差集 数学 • echo '(1 + sqrt(5))/2' | bc -l 方便的计算器(计算 φ) • echo 'pad=20; min=64; (100*10^6)/((pad+min)*8)' | bc 更复杂地计算，这里计算了最大的FastE包率 • echo 'pad=20; min=64; print (100E6)/((pad+min)*8)' | python Python处理数值的科学表示法 • echo 'pad=20; plot [64:1518] (100*10**6)/((pad+x)*8)' | gnuplot -persist 显示FastE包率相对于包大小的图形 • echo 'obase=16; ibase=10; 64206' | bc 进制转换(十进制到十六进制) • echo $((0x2dec)) 进制转换(十六进制到十进制)((shell数学扩展)) • units -t '100m/9.58s' 'miles/hour' 单位转换(公尺到英尺) • units -t '500GB' 'GiB' 单位转换(SI 到IEC 前缀) • units -t '1 googol' 定义查找 • seq 100 | (tr '\\n' +; echo 0) | bc 加N(任意数)列. 参见 add and funcpy 日历 • cal -3 显示一日历 • cal 9 1752 显示指定月，年的日历 • date -d fri 这个星期五是几号. 参见day • date --date='25 Dec' +%A 今年的圣诞节是星期几 • date --date '1970-01-01 UTC 2147483647 seconds' 将一相对于1970-01-01 00：00的秒数转换成时间 • TZ=':America/Los_Angeles' date 显示当前的美国西岸时间(使用tzselect寻找时区)   echo \"mail -s 'get the train' P@draigBrady.com < /dev/null\" | at 17:45 在指定的时间发送邮件 • echo \"DISPLAY=$DISPLAY xmessage cooker\" | at \"NOW + 30 minutes\" 在给定的时间弹出对话框 locales • printf \"%'d\\n\" 1234 根据locale输出正确的数字分隔 • BLOCK_SIZE=\\'1 ls -l 用ls命令作类适于locale()文件分组 • echo \"I live in `locale territory`\" 从locale数据库中展开信息 • LANG=en_IE.utf8 locale int_prefix 查找指定地区的locale信息。参见ccodes • locale | cut -d= -f1 | xargs locale -kc | less 显示在locale数据库中的所有字段 recode (iconv, dos2unix, unix2dos 已经过时了) • recode -l | less 显示所有有效的字符集及其别名   recode windows-1252.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集(自动进行回车换行符的转换)   recode utf-8/CRLF.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集   recode iso-8859-15..utf8 file_to_change.txt 转换Latin9（西欧）字符集文件到utf8   recode ../b64 < file.txt > file.b64 Base64编码   recode /qp.. < file.txt > file.qp Quoted-printable格式解码   recode ..HTML < file.txt > file.html 将文本文件转换成HTML • recode -lf windows-1252 | grep euro 在字符表中查找欧元符号 • echo -n 0x80 | recode latin-9/x1..dump 显示字符在latin-9中的字符映射 • echo -n 0x20AC | recode ucs-2/x2..latin-9/x 显示latin-9编码 • echo -n 0x20AC | recode ucs-2/x2..utf-8/x 显示utf-8编码 光盘   gzip < /dev/cdrom > cdrom.iso.gz 保存光盘拷贝   mkisofs -V LABEL -r dir | gzip > cdrom.iso.gz 建立目录dir的光盘镜像   mount -o loop cdrom.iso /mnt/dir 将光盘镜像挂载到 /mnt/dir (只读)   cdrecord -v dev=/dev/cdrom blank=fast 清空一张CDRW   gzip -dc cdrom.iso.gz | cdrecord -v dev=/dev/cdrom - 烧录光盘镜像 (使用 dev=ATAPI -scanbus 来确认该使用的 dev)   cdparanoia -B 在当前目录下将光盘音轨转录成wav文件   cdrecord -v dev=/dev/cdrom -audio *.wav 将当前目录下的wav文件烧成音乐光盘 (参见cdrdao)   oggenc --tracknum='track' track.cdda.wav -o 'track.ogg' 将wav文件转换成ogg格式 磁盘空间 (参见FSlint) • ls -lSr 按文件大小降序显示文件 • du -s * | sort -k1,1rn | head 显示当前目录下占用空间最大的一批文件. 参见dutop • df -h 显示空余的磁盘空间 • df -i 显示空余的inode • fdisk -l 显示磁盘分区大小和类型（在root下执行） • rpm -q -a --qf '%10{SIZE}\\t%{NAME}\\n' | sort -k1,1n 显示所有在rpm发布版上安装的包，并以包字节大小为序 • dpkg-query -W -f='${Installed-Size;10}\\t${Package}\\n' | sort -k1,1n 显示所有在deb发布版上安装的包，并以KB包大小为序 • dd bs=1 seek=2TB if=/dev/null of=ext3.test 建立一个大的测试文件（不占用空间）. 参见truncate 监视/调试 • tail -f /var/log/messages 监视Messages日志文件 • strace -c ls >/dev/null 总结/剖析命令进行的系统调用 • strace -f -e open ls >/dev/null 显示命令进行的系统调用 • ltrace -f -e getenv ls >/dev/null 显示命令调用的库函数 • lsof -p $$ 显示当前进程打开的文件 • lsof ~ 显示打开用户目录的进程 • tcpdump not port 22 显示除了ssh外的网络交通. 参见tcpdump_not_me • ps -e -o pid,args --forest 以树状结构显示进程 • ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed '/^ 0.0 /d' 以CPU占用率为序显示进程 • ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS 以内存使用量为序显示进程. 参见ps_mem.py • ps -C firefox-bin -L -o pid,tid,pcpu,state 显示指定进程的所有线程信息 • ps -p 1,2 显示指定进程ID的进程信息 • last reboot 显示系统重启记录 • free -m 显示(剩余的)内存总量(-m以MB为单位显示) • watch -n.1 'cat /proc/interrupts' 监测文件/proc/interrupts的变化 系统信息 (参见sysinfo) • uname -a 查看内核/操作系统/CPU信息 • head -n1 /etc/issue 查看操作系统版本 • cat /proc/partitions 显示所有在系统中注册的分区 • grep MemTotal /proc/meminfo 显示系统可见的内存总量 • grep \"model name\" /proc/cpuinfo 显示CPU信息 • lspci -tv 显示PCI信息 • lsusb -tv 显示USB信息 • mount | column -t 显示所有挂载的文件系统并对齐输出 # dmidecode -q | less 显示SMBIOS/DMI 信息 # smartctl -A /dev/sda | grep Power_On_Hours 系统开机的总体时间 # hdparm -i /dev/sda 显示关于磁盘sda的信息 # hdparm -tT /dev/sda 检测磁盘sda的读取速度 # badblocks -s /dev/sda 检测磁盘sda上所有的坏扇区 交互 (参见linux keyboard shortcut database) • readline Line editor used by bash, python, bc, gnuplot, ... • screen 多窗口的虚拟终端, ... • mc 强大的文件管理器，可以浏览rpm, tar, ftp, ssh, ... • gnuplot 交互式并可进行脚本编程的画图工具 • links 网页浏览器 miscellaneous • alias hd='od -Ax -tx1z -v' 方便的十六进制输出。 (用法举例: • hd /proc/self/cmdline | less) • alias realpath='readlink -f' 显示符号链接指向的真实路径((用法举例: • realpath ~/../$USER) • set | grep $USER 在当前环境中查找   touch -c -t 0304050607 file 改变文件的时间标签 (YYMMDDhhmm) • python -m SimpleHTTPServer Serve current directory tree at http://$HOSTNAME:8000/","title":"常用指令列表"},{"content":"        最近看到了需要关于移动前端开发HTML5,JQuery技术的一些文章,感觉时代的进步,跨平台的技术是人们需要的技术....移动设备可以不分系统,使用相同的服务! 适应不同屏幕,不同系统的手机和平板的手机网站开发必将引起一波潮流。         国外很有多优秀的HTML5前端开发框架相信大家都耳熟能详：JQuery Mobile，Twitter Bootstrap， Schena Touch,  BackBone等等。 同样，也存在很多国内比较优秀的前端开发框架，其中中国互联网三巨头贡献了近一半：腾讯，阿里巴巴，百度。 框架不是万能的，选择和项目匹配的框架可以显著提高开发效率，但是也有可能带来代码的臃肿，本着“write less, do more”思想，选择合适的框架是最重要的。其中每个框架各有特点，还需要读者自己把关。如：腾讯的JX比较适合构建和组织大规模、工业级的Web App，腾讯内部的WebQQ、Q+等产品都是采用JX框架开发。      JX(腾讯) – http://alloyteam.github.com/JX      KISSY(淘宝) – http://www.kissyui.com      QWrap(百度) - http://www.qwrap.com      Tangram(百度) – http://tangram.baidu.com          国内的大家可以下载上面的,百度QQ的。上个月和前几天还下载了一些国外的免费例子程序,成功制作了几个手机网站.很有感想.大家可以下载品品。        http://mobifreaks.com/free-website-templates/         ","title":"从HTML5前端开发框架想到的"},{"content":"日期：2012-12-25  来源：GBin1.com 相关阅读： 分享一个快速开发jQuery插件工具：jqueryboilerplate 熟悉前端开发的朋友肯定都知道Boilerplates，它可以有效地帮助我们搭建网站页面的最初版本。 在今天的文章中，我们将介绍一个新的HTML5 Boilerplates - HTML5 Bones。这个模板可以帮助你搭建最基础的HTML5页面。最棒的地方在于它包含了很完整的行内注视，可以有效地指导你如何正确的使用HTML5。它可以作为你正确使用HTML5的一个指导性手册。 模板本身并不带有任何的javascript类库，例如 jQuery or Modernizr，但是带有Normalize.css和原始的html5shiv，能够很好的帮助你处理不同浏览器的显示差别和浏览器兼容性问题。 同时也包含了WAI-ARIA roles等。 来源：帮助你开发基于HTML5的网站原型页面 - HTML5 Bones","title":"帮助你开发基于HTML5的网站原型页面 - HTML5 Bones"},{"content":"日期：2012-12-21  来源：GBin1.com   响应式的设计现在越来越受设计师推崇，面对这越来越多的响应式设计页面，我们需要找到高效的测试工具来验证设计的合理和正确，在今天这篇文章中，我们将介绍16款帮助你在线测试响应式页面设计的工具，希望大家喜欢！ 相关阅读： 分享一个帮助你在线测试响应式设计的web工具- Screenqueri.es 帮助你在不同尺寸屏幕下浏览网站效果的工具- Responsivator  分享一个在不同客户端查看网站的工具- Screenfly Responsinator Responsinator提供了大家在不同设备viewport下查看网站效果的特性，提供了iphone，android，ipad，kindle及其多种设备上的预览效果，你可以方便的看到需要支持的设备的响应式设计效果图。   Responsivator 和responsinator不一样，responsivator提供了不同尺寸下的显示效果图   Responsive.is responsive提供了5种设备下的预览效果展示   Responsive Web Design Testing Tool 类似responsivator，但是界面更简单   Responsivepx 允许你用拖动的方式来修改窗口大小，模拟不同的设备屏幕    screenqueri.es 这个工具在gbin1以前的文章中我们曾今介绍过，如果想更多了解请阅读 分享一个帮助你在线测试响应式设计的web工具- Screenqueri.es，最有意思的是它支持localhost本地方式测试你的应用或者网站。   Aptus 一个工具类的浏览器，可以帮助你测试响应式设计    Bricss 一个帮助你测试响应式的书签，你可以方便的整合到你的浏览器里   Izilla Media Query Debugger 这个js可以帮助你添加伪元素到body元素上用来侦测宽高 ，当然你也可以使用他们提供的bookmark：http://izilla.com.au/git/izilla.mq.debugger.bookmarklet.html   Screenfly 支持4种设备的在线响应式设计测试工具，并且还提供相关开发的设计图和文档。具体请查看我们过去文章：分享一个在不同客户端查看网站的工具- Screenfly   Firefox Developer Tools 如果你使用Firefox的话，你可以直接使用开发工具实现，快捷键（Ctrl + shift + M）   ViewPort Resizer 另外一个书签式的工具   Jresizer 一个jQuery的响应式开发工具插件，帮助你创建响应式的窗口，方便你的开发和设计流程   Resize My Browser 一个简单的帮助你创建指定宽高新开窗口的web工具    juicer 一个在线的展示响应式的工具，支持iphone，android等设备的显示，带有实物图。   ish 一个比较新的在线查看响应式效果的web工具，支持不同尺寸的展示。   以上就是16款我们收集的在线的和本地的响应式测试工具，相对来说，在线工具更适合和你的朋友或者同事分享，本地工具适合开发时调试，具体的使用请根据自己需要来选择，如果你也有相关的响应式测试工具，请到gb标签社区与我们分享，希望大家喜欢！谢谢！  来源：16个帮助你高效测试响应式设计界面的工具","title":"16个帮助你高效测试响应式设计界面的工具"},{"content":"什么是 Web Worker？ 当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。 web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。 浏览器支持 所有主流浏览器均支持 web worker，除了 Internet Explorer。 HTML5 Web Workers 实例 检测 Web Worker 支持 在创建 web worker 之前，请检测用户的浏览器是否支持它： if(typeof(Worker)!==\"undefined\")  {  // Yes! Web worker support!  // Some code.....  }else  {  // Sorry! No Web Worker support..  } 创建 web worker 文件 现在，让我们在一个外部 JavaScript 中创建我们的 web worker。 在这里，我们创建了计数脚本。该脚本存储于 \"demo_workers.js\" 文件中： var i=0;function timedCount(){i=i+1;postMessage(i);setTimeout(\"timedCount()\",500);}timedCount(); 以上代码中重要的部分是 postMessage() 方法 - 它用于向 HTML 页面传回一段消息。 注释：web worker 通常不用于如此简单的脚本，而是用于更耗费 CPU 资源的任务。 创建 Web Worker 对象 我们已经有了 web worker 文件，现在我们需要从 HTML 页面调用它。 下面的代码检测是否存在 worker，如果不存在，- 它会创建一个新的 web worker 对象，然后运行 \"demo_workers.js\" 中的代码： if(typeof(w)==\"undefined\")  {  w=new Worker(\"demo_workers.js\");  } 然后我们就可以从 web worker 发生和接收消息了。 向 web worker 添加一个 \"onmessage\" 事件监听器： w.onmessage=function(event){document.getElementById(\"result\").innerHTML=event.data;}; 当 web worker 传递消息时，会执行事件监听器中的代码。event.data 中存有来自 event.data 的数据。 终止 Web Worker 当我们创建 web worker 对象后，它会继续监听消息（即使在外部脚本完成之后）直到其被终止为止。 如需终止 web worker，并释放浏览器/计算机资源，请使用 terminate() 方法： w.terminate(); 完整的 Web Worker 实例代码 我们已经看到了 demo_workers.js 文件中的 Worker 代码。下面是 HTML 页面的代码： <!DOCTYPE html><html><body><p>Count numbers: <output id=\"result\"><\/output><\/p><button onclick=\"startWorker()\">Start Worker<\/button><button onclick=\"stopWorker()\">Stop Worker<\/button><br /><br /><script>var w;function startWorker(){if(typeof(Worker)!==\"undefined\"){  if(typeof(w)==\"undefined\")    {    w=new Worker(\"demo_workers.js\");    }  w.onmessage = function (event) {    document.getElementById(\"result\").innerHTML=event.data;  };}else{document.getElementById(\"result\").innerHTML=\"Sorry, your browser does not support Web Workers...\";}}function stopWorker(){w.terminate();}<\/script><\/body><\/html> W3C Spec http://www.w3.org/TR/2012/WD-workers-2012031","title":"HTML5 Web Workers"},{"content":"Android特性 Android是Google公司基于Linux内核的开源操作系统，主要用于移动设备，目前在智能手机市场占有重要份额。Android应用层使用Java语言开发，运行于Dalvik虚拟机，每个Android应用运行在独立的虚拟机中，这保证了各应用间资源的保护和线程安全。 Android架构简图 Android编程方式：Java，NDK，HTML 通常使用Java语言开发Android应用，但也可借助其他语言，如Android NDK（Native Development Kit）开发模式，可用Java调用C语言库，此外HTML也可以包装成Android应用。 三种方式都有各自的特点，Java为Android原生支持的语言，便于开发本地应用，随着Android系统的不断优化，其效率也在不断提升，TWaver Android就使用Java开发；Android NDK开发相对复杂，但可借助C语言的性能优势，改善程序效率，并且C语言也具有很好的跨平台性，在游戏领域应用普遍；而Html方式也逐渐成为趋势，Web App可用于实现跨浏览器，跨平台的应用。 Android性能测试 Android设备很丰富，系统升级也很频繁，Google对Dalvik虚拟机的优化和Android应用架构的改善有长足的进步，如Android 2.1升级到2.2时引入了JIT（just in time）机制，使应用效率提升了2－4倍，而Android 4.1黄油计划对UI流畅度也有作出了贡献，Google的努力值得赞扬，但一方面也说明此前Android效率的低下，而未来进步的空间还有多少？我们用数据来说话。下面我们将分别在Android平板与电脑下对Android Java与Sun Java作对比测试，以了解两者的性能差异和各自适用的场景。 Dalvik VM与Sun Java VM的性能差异 测试设备分别为：MacBook Pro(2.26 GHz Intel Core 2 Duo)，Google Nexus 7(1.3GHz四核Tegra 3) 软件环境：Java 1.6.0_37和Android 4.2.1 测试内容：包括数学运算，集合操作（List和Map操作）等基本API 因为同为java语言，测试代码基本一致，详见TWaver Android Demo中的PerformanceDemo.java，这里只列出结果： Android 4.2.1耗时是Java 6的12 － 50倍，此外其他语言（Flex，JavaScript）在电脑上的运行效率也大大优于Nexus 7平板。 另外看看HTML的情况，Chrome浏览器移动版与桌面版有四倍的差距，这基本上反映了硬件的真实水平，Android中JavaScript语言相比原生的Java性能更优，至少对于Chrome浏览器是如此，当然这个测试只是反映语言的基本性能，从开发的便易上看，Java还是最佳选择。 测试的结果表明相比PC，android设备在性能上尚有明显差距，而Dalvik VM尚不能充分发挥硬件的性能，在开发应用时需要意识到这点，以达到用户体验与功能上的平衡。 编程语言各平台下的性能差异 TWaver Android的定位 TWaver图形组件在桌面上有很多开发语言可选择，独移动平台上空缺，虽然TWaver Html5也能运行在Android和iOS之上，但要达到本地应用的体验绝非易事，TWaver Android定位于移动平台，用于图形化的数据展示，采用了全新设计架构，提升了UI效率，以应对移动设备自身性能的不足，全新的多点触控交互模式，漫游操作，实现流畅的交互体验。 TWaver Android的数量级支持 相比TWaver其他版本，TWaver Android架构做了变化，数据模型上提高了数倍效率，解决了Link, Group的性能问题，UI呈现上优化了延迟无效机制，交互上完全适应触控操作，综合测试，对于Node，Link，Group混合使用的场景，一千数量级在Nexus 7平板上可以流畅的操作，考虑到平板硬件差异和Android虚拟机的效率问题，这样的结果还是让人满意的，可以有广泛的应用场景。 Nexus 7中，不同网元数量级下拓扑图的加载时间对比 TWaver Android推荐平台 考虑到更佳的展示效果，大屏幕或许更便于数据的图形化展示，所以TWaver推荐使用平板，支持Android 3.0＋以上版本（该版本支持Drag and Drop），实际上TWaver Android内部主要使用Nexus 7 / 10以及三星平板作开发测试与调优。当然这并不意味着TWaver Android不能用于手机或者低版本的Android设备，TWaver Android Demo在Google Nexus S手机上也可以流畅的运行，如果需要兼容Android 2.*较低版本设备，你可以申请TWaver Android的精简版本。 TWaver Android Demo运行于Nexus 7 和Nexus S","title":"TWaver Android 概述"},{"content":"现在做网站的大都是使用现成的CMS，都很少使用到CSS了。 我自网站建成到现在五个月，期间一直是在用后台在维持网站更新，今天浏览主页时发现有个地方已经过时了，需要修改以下，然后通过编辑器找到CSS源代码 发现如果改了其它页面也会受影响，所以就决定使用CSS行内样式了。但是想动手修改时发现写不出来了（忘了行内样式的书写规范了），然后在网站找了一些CSS样式表 行内样式的范例参考了一下，改出了自己想要的结果。 <html>   <head>   <\/head>   <body>     <h3>站长中心<\/h3> <p style=\"padding-left: 60;color: blue\"> 站长  <\/p> <p>站长，<\/p> <p>网站。 <\/p> <p>网站推广，<\/p> <p>网站建设。<\/p>   <\/body> <\/html>","title":"CSS的行内样式书写规范"},{"content":"关联关系映射 关联关系包括多样性和方向性的关联。 映射关联关系就是把对象模型中类之间的关联关系映射成关系模型中数据库表之间的外键引用关系。 单向多对一:(员工与部门)     private Department dept   Employee.hbm.xml <many-to-one name=“dept” column=“dept_id”/> 单向一对一   方式一：基于唯一外键 Citizen.hbm.xml <many-to-one name=“idCard” column=“idCard_id” unique=“true” cascade=“all”/>   方式二：基于主键 Citizen.hbm.xml: <id name=“id” column=“id”>   <generator class=“foreign”>      <param name=“property”>idCard<\/param>    <\/generator> <\/id> …. <one-to-one name=“idCard” constrained=“true” cascade=“all”/>   双向一对一：基于唯一外键;   基于主键 public class Citizen {        private Long id;        private String name;                   private boolean gender;                private IDCard idCard; …}   public class IDCard {        private Long id;)        private String no;        private Citizen citizen; …}   对于基于唯一外键的一对一关联，其外键可以放在任意一端，在需要存放外键的一端，使用many-to-one元素，添加unqiue=true；没有存放外键的那一端需要使用one-to-one元素，此时还需要通过property-ref属性来指定这一端只是关联另一端，不需要额外的列或外键，由hibernate管理这个关系。 Citizen.hbm.xml <many-to-one name=“idCard” column=“idCard_id” unique=“true” cascade=“all”/>   IDCard.hbm.xml <one-to-one name=“citizen” property-ref=“idCard”/>   •          基于主键，一端的主键使用foreign策略来参照另一端的主键来生成。这样两端就具有相同的主键值。   单向一对多：帐号与订单   Account.hbm.xml <set name=“orderSet” cascade=“save-update”>   <key column=“account_id”/>   <one-to-many class=“com.qiujy.domain.Order”/> <\/set>   双向一对多：帐号与订单   Order.hbm.xml <many-to-one name=“account” column=“account_id” not-null=“true”/>   Account.hbm.xml <bag name=“orderList” cascade=“all” inverse=“true”>  <key column=“account_id”/>  <one-to-many class=“com.qiujy.domain.Order”/> <\/bag>   单向多对多: 学生与课程 Student.hbm.xml <set name=“courses” table=“student_course”>     <key column=“student_id”/>    <many-to-many column=“course_id” class=“com.qiujy.domain.Course”/> <\/set> 双向多对多 Student.hbm.xml <set name=“courses” table=“student_course”>     <key column=“student_id”/>    <many-to-many column=“course_id” class=“com.qiujy.domain.Course”/> <\/set> Course.hbm.xml <set name=“students” table=“student_course”inverse=“true”> <key column=“course_id”/> <many-to-many column=“student_id” class=“com.qiujy.domain.Student”/> <\/set>  ","title":"Hibernate4"},{"content":"日期：2012-12-26  来源：GBin1.com  在线演示 如果你使用过pinterest的话，应该非常熟悉它的图片布局方式，今天这里我们介绍一款新的jQuery布局插件 -  jQuery.Shapeshift，能够帮助你生成类似pinterest页面布局的展示方式。 相关阅读：分享一个jQuery动态网格布局插件：Masonry 主要特性： 网格系统：所有的项目都是自左向右，自下向上的流动布局 支持拖拽：点击和拖拽来移动元素，支持不同的容器间的拖拽 支持响应式：你可以重新缩放浏览器，可以看到内容自适应。 支持Media Queries：支持响应式的网格。   支持触摸:  使用jQuery UI Touch Punch可以支持触摸设备的拖拽功能 来源：一个帮助你实现pinterest页面布局的jQuery插件 - jQuery.Shapeshift","title":"一个帮助你实现pinterest页面布局的jQuery插件 - jQuery.Shapeshift"},{"content":"首先给大家讲个《买毛笔的故事》很多人应该都听过说出来乐乐哦。        long long ago!有个老头在大街上卖毛笔,一个美女来到老头边上看了看毛笔摸了下毛笔的毛,结果没买就走了，然后老头子就来了一句假如你是个卖逼的别人不要你的逼反而把你的逼毛拨来拨去你愿不愿意。   myeclipse开发工具中经常在Struts2中敲命令是没有自动提示的功能,为了开发方便我们配置下自动提示的功能。详细步骤看截图： 一首先我们要获取一个后缀名为dtd的文件，这个文件在核心库中就有找打核心库解压dtd文件即可。 第一步找到核心库解压dtd文件   第二步将dtd文件解压到myeclipse的工作空间下面   第三步打开myeclispe的windows------->Preference 第四部找到XmlCatalog 第五步复制Struts.xml中的路径 第六步设置路径保存 Struts.xml自动提示功能设置完毕。还未能配置成功的请留言...","title":"设置Struts2配置文件自动提示的技巧"},{"content":"注：主要功能就是监听你的错误，哪里有错误就滑到哪里去提示，并且速度可设置，超级人性化，但是错误绑定是必须有id属性的，id作为你验证的唯一身份证， 因为在项目中用到了所以临时挑拣出来的代码，比如监听事件哪里应当封装，加上特殊验证类等，时间问题回头再弄，以下如有问题请留言 ： 下载地址：点击打开链接 列出两个类，演示就不列了因为实在样式太不好看了！ /***error store class*/var Errortop = {\tsetErrorTop:function (_this){   \t\tvar height = jQuery(_this).offset().top;\t\tvalidateExam.put(height, height, jQuery(_this).attr('id'));\t},\tgetErrorTopTip:function (min,time){ \t\t\tif(validateExam.keys.length > 0){\t\tvar maxhight = Math.max.apply(null,validateExam.keys); \t\t\t\tjQuery('html,body').animate({scrollTop:maxhight-min},time);   // alert(validateExam.obj[maxhight]);\t\t\t\tjQuery(\"#\"+validateExam.obj[maxhight]).focus().css('borderColor', 'red');\t\t\t}\t},\tremove:function(id){\t\tvalidateExam.remove(id);\t}}/***error collection class*/function CollectionError ()  { this.keys = new Array(); this.data = new Array(); this.obj = new Array(); this.distinct = new Array(); this.put = function (key,value,id){  if (this.data[key] == null){   this.keys.push (key); \t this.data[key] = value;\t this.obj[key] = id;\t this.distinct[id] = key;    } }; this.get = function (key){\treturn this.data[key]; }; this.indexOf = function(val) {\tfor (var i = 0; i < this.keys.length; i++) {\t\t\tif (this.keys[i] == val) return i;\t}\treturn -1; }; this.removekey = function(val) {\tvar index = this.indexOf(val);\tif (index > -1) {\t\t\tthis.keys.splice(index, 1);\t} }; this.remove = function (id){\tif(this.distinct[id] != null){  \t\tvar key = this.distinct[id];\t\tthis.distinct[id] = null;\t\tthis.removekey(key);\t\tthis.data[key] = null;\t\tthis.obj[key] = null;\t} }; this.size = function  ()  {  return this.keys.length; };}  ","title":"js利用apply()， Math object， js数组，对象完全智能验证"},{"content":"日期：2012-12-22  来源：GBin1.com 如果你是iOS的狂热分子的话，对于iOS风格app目录肯定非常熟悉，今天这里我们介绍一个实现iOS app风格目录的jQuery插件：App-Folders 相关阅读： 使用jQuery开发iOS风格的页面导航菜单 这个插件同时支持桌面和Mobile应用，所以你可以创建俩种不同的样式，如下： 或者是移动设备的效果，如下： HTML代码     <!--This is what you call in the function above-->    <div class=\"app-folders-container\">     \t    \t<!-- jaf-row 1 (You can have as many rows as you like) -->        <div class=\"jaf-container jaf-row\">                  <!--You can have as many folders as you like-->          <!--Folder's ID must match Class of the item that it opens-->          <div class=\"folder\" id=\"uno\">                        <!--Anything wrapped by this link can open the content on click.-->            <a href=\"#\">              <p>Folder 1<\/p>            <\/a>          <\/div><!--End Folder-->        <\/div><!--End Row-->                        <!--Now, include the content that you want to show for each Folder-->        <!-- CLASS must equal the ID of the item that calls it.-->        <div class=\"uno folderContent\">          <div class=\"jaf-container\">                      <!--Add whatever HTML you want in this area-->            <p>Content for folder one.<\/p>                    <\/div>        <\/div><!-- End folderContent uno-->            <\/div><!--End app-folders-container--> Javascript代码 $(function() {\t$('.app-folders-container').appFolders();}); 实现是不是非常简单，如果你希望使用这种超酷的展示目录的方式，赶快下载吧！ 来源：一个帮助你生成iOS文件夹效果的jQuery插件 - App-Folders","title":"一个帮助你生成iOS文件夹效果的jQuery插件 - App-Folders"},{"content":"每当您的web应用程序与服务器进行交互时有一个不可避免的延迟。这可能是一个Ajax请求,上传一个文件,或者使用新的HTML5 web sockets api(比如或服务器发送事件。   理想情况下,你应该给用户一些反馈以表明他们的行动是被处理。你会经常看到小gif动画与旋转模式。   图像是最好的跨浏览器的选择,但他们有许多问题:       gif不支持alpha透明度。您需要谨慎将图像在一个彩色背景。     位图图像不会规模好。如果你改变的维度,您需要创建一个新形象。     如果你不小心,动画图形可以有一个大文件的大小。     图像招致额外的HTTP请求。虽然图像将被缓存,初始下载时间可能超过它所代表的后台进程!你可以通过预加载代码围绕这个问题的图像或使用嵌入式数据的url,但它更努力。   幸运的是,CSS3允许我们创建加载图标没有图像。他们很容易创建、规模、再保证颜色,使用于任何背景和不产生图像下载。你需要:       一个HTML元素,例如。 <div id=\"ajaxloader\"><\/div>.     一些CSS背景、边界和阴影效果,创造了一个图形图标。     CSS3转换和动画旋转或移动元素。   CSS3转换和动画是实验性质要求供应商前缀-而且你知道他们造成麻烦。示例代码实现最后的财产以及前缀为webkit(Chrome和Safari),-moz(Firefox),- ms(IE),和- o(Opera),但谁也不能保证他们会始终工作。   在撰写本文时,最新版本的Chrome、Safari和Firefox提供CSS3动画。IE9/8/7/6显示一个静态图像,虽然IE10和oper12可能支持的属性。   只是让事情更加复杂的是,Firefox允许你激活伪元素分别。因此,您可以添加两个元素使用:之前和之后和旋转或移动它们在不同的方向来创建更复杂的动画。虽然我最初希望这样做,它不工作在webkit浏览器。Chrome和Safari只允许真正的元素动画。这似乎是一个bug或监督,但它不是被固定在当前或beta版本。 创建图标   我们的HTML div可以放置在文档的任何地方虽然最好将它作为最后的孩子吗 body。然后,它将出现高于其他元素,可以定位在关系到页面。   图标CSS简单地设置宽的白色圆形边界。正确的边框颜色然后设为透明和一个小阴影是应用:     #ajaxloader { position: absolute; width: 30px; height: 30px; border: 8px solid #fff; border-right-color: transparent; border-radius: 50%; box-shadow: 0 0 25px 2px #eee; }   结果:   CSS Ajax图标1   很容易调整的属性不同的效果,如添加 border-right: 0 none;生产:   CSS Ajax图标2 动画图标   使图标自旋和脉动,我们应用旋转转换和透明度的变化在一个CSS3动画。动画的名字、持续时间、宽松类型和重复应用于元素:     #ajaxloader { animation: spin 1s linear infinite; }   紧随其后的是动画帧:     @keyframes spin { from { transform: rotate(0deg);   opacity: 0.2; } 50%  { transform: rotate(180deg); opacity: 1.0; } to   { transform: rotate(360deg); opacity: 0.2; } }   所有的浏览器都支持动画没有前缀,这样你会看到webkit,-moz,- ms和- o替代品在源代码中当你查看演示页面.   显示的图标现在可以使用一些JavaScript每当一个Ajax请求启动。这是一个很好的效果,可以定制轻松和作品55%的当前浏览器.   不幸的是,45%的网络用户不会看到动画。这个数字将下降当IE10释放和用户切换到其他浏览器的最新版本,但它仍然是一个很大的百分比。你可以回到一个图像,但是如果你这样做,你不妨使用图像适合所有浏览器。   因此,我建议你看看你自己的统计数据。如果你的访客是主要是使用Chrome、Safari和Firefox你可以采用今天的技术。如果不是,坚持图像现在和少许等待更一致的浏览器支持。","title":"如何创建一个CSS3 Ajax加载图标没有图像"},{"content":"下载地址：http://code.google.com/p/freecms/  信息管理 1.    快速添加 从左侧管理菜单点击快速添加进入。 输入相关属性后添加“保存”按钮即可。 2.    添加信息 从左侧管理菜单点击信息管理进入信息管理页面。   进入指定栏目，点击“添加”按钮   输入相关属性后添加“保存”按钮即可。 提示：使用此处的添加信息，栏目会默认设置为当前栏目。 3.    编辑信息 进入指定栏目，选择需要编辑的信息，点击“编辑”按钮。 注意：同时只能对一条信息进行编辑操作。   输入相关属性后添加“保存”按钮即可。 4.    删除信息 进入指定栏目，选择需要删除的信息，点击“删除”按钮。 提示：同时可以选择多条信息进行删除操作。   为防止用户误操作，系统会提示用户确认，点击“确定”按钮即可。 5.    信息属性说明 属性 说明 栏目 所属栏目名称 标题 信息标题 短标题 如果标题比较长列表显示不完时可以设置短标题，信息列表会显示短标题 信息模板 选择此信息静态化时使用的模板文件，默认为“信息页面.html” 标题颜色 标题显示的颜色 标题是否加粗 标题是否加粗显示 来源 信息来源 作者 信息作者 摘要 信息摘要内容 信息内容 信息完整内容 是否固顶 是否显示在列表顶部 Tag标签 多个之间用,分隔 外部链接 如果想让此信息直接链接到其它页面可以在这里设置。 信息图片 此信息在图片列表显示时的图片，只能上传一个。 附件 可上传多个 添加时间 默认不填写是当前时间，如果选择时间则设置此信息添加时间。","title":"开源 免费 java CMS - FreeCMS-功能说明-信息管理"},{"content":"基础知识 编写一个插件是一个方法或函数。   创建一个jQuery功能 语法 函数必须返回this . each(. .)保持链接性——因此,该函数可以用于单个或多个jQuery对象。   jQuery.fn.myFunction = function(){     return this.each(function(){         // 特定于元素的代码在这里     }); }; 例子 jQuery.fn.makeTextRed = function(){     return this.each(function(){         $(this).css('color', 'red');     }); };   // Example usage $('#my-div').makeTextRed(); // make text in \"my-div\" red $('p').makeTextRed(); // 让所有段落红   创建一个jQuery的方法   例子 jQuery.sayHelloWorld = function（）{    alert('Hello World'); } ;   / /使用示例 $.sayHelloWorld(); // alerts \"Hello World\"   选项 你的插件的灵活和用户友好尽可能使用选项。扩大（）方法将两个或多个对象作为参数，并合并它们的含量在第一个对象。   例子 一个函数，设置文本颜色（默认为红色）。   jQuery.fn.makeTextColored = function(settings){     var config = {         'color': 'red'     };     if (settings){$.extend(config, settings);}       return this.each(function(){         $(this).css('color', config.color);     }); }; 现在，我们可以选择通过设置参数或不使用此功能。   $('#my-div').makeTextColored(); // 使文本红(默认) $('#my-div').makeTextColored('blue');//使文本蓝色 兼容性 由于变量可能会使用其他插件，使用别名技术，使您的插件向前兼容。   (function($){ $.fn.myFunction = function() {     return this.each(function() {         // 特定于元素的代码在这里     });  }; })(jQuery); 我们传递的功能，现在可以使用我们喜欢的任何别名为jQuery jQuery的。因此，而不是美元，你也可以使用任何其他有效的JavaScript变量名。   jQuery插件清单 这是一个重要的点开发一个jQuery插件（从jQuery.com）的时要记住。   [插入插件的名称。JS，例如将文件命名为jQuery的。jquery.debug.js 连接到jQuery.fn对象，jQuery对象的所有功能，所有新的方法。 里面的方法，这是当前jQuery对象的引用。 你附加的任何方法或函数必须有一​​个分号（;)结束“，否则压缩的代码时，将打破。 您的方法必须返回jQuery对象，除非明确地指出，否则。 使用this.each来遍历当前匹配的元素集合。 务必将插件jQuery的，而不是美元，所以通过noConflict（），用户可以使用一个自定义的别名。 jQuery插件模板 这是两个很好的的代码模板开始开发jQuery插件时。   函数模板 (function($){     $.fn.myPlugin = function(settings){         var config = {             'foo': 'bar'         };         if (settings){$.extend(config, settings);}           return this.each(function(){             // 特定于元素的代码在这里         });     }; })(jQuery); 方法模板 (function($){     $.myPlugin = function(settings){         var config = {             'foo': 'bar'         };         if (settings){$.extend(config, settings);}           // 代码在这里           return this;     }; })(jQuery); 例如：jQuery的幻灯片插件 我选择了使用非常简单的例子，到目前为止，为了让您开始浏览网页。下面的例子是一个比较复杂，可能有助于让您的灵感。   它使用setInterval（）的函数的一个HTML元素的组合与jQuery效果淡出（）和淡入（）周期的任意数量的图像内。   在setUp HTML <div id=\"slideshow\">     <img src=\"img/sample-image-1.png\" alt=\"\" />     <img src=\"img/sample-image-2.png\" alt=\"\" />     <img src=\"img/sample-image-3.png\" alt=\"\" />     <img src=\"img/sample-image-4.png\" alt=\"\" /> <\/div> CSS #slideshow img {     display: none;     position: absolute; } 使用Javascript (function($){     $.simpleSlideShow = function(selector, settings){         // 设置         var config = {             'delay': 2000,             'fadeSpeed': 500         };         if ( settings ){$.extend(config, settings);}           // 变量         var obj = $(selector);         var img = obj.children('img');         var count = img.length;         var i = 0;           // 显示第一个图像         img.eq(0).show();           // 运行幻灯片           setInterval(function(){             img.eq(i).fadeOut(config.fadeSpeed);             i = ( i+1 == count ) ? 0 : i+1;             img.eq(i).fadeIn(config.fadeSpeed);         }, config.delay);           return this;     }; })(jQuery); 用法 为了使幻灯片上的＃幻灯片的 div，我们只需调用它使用下面的JavaScript代码：   <script type=\"text/javascript\">   $.simpleSlideShow('#slideshow'); <\/script> 因为我们允许设置来改变行为的幻灯片,我们可以让它等待5秒钟图像之间和设置“渐”持续到200 ms使用:   <script type=\"text/javascript\"> $.simpleSlideShow('#slideshow', {'delay':5000, 'fadeSpeed': 200}); <\/script> web开发网http://www.software8.co/wzjs/jquery/515.html","title":"创建一个jQuery插件教程"},{"content":"Hibernate 高级映射 集合映射：set    list   bag  map •          示例： hb_02_set、hb_02_list、hb_02_map、hb_02_bag、hb_02_orderedcollection、hb_02_sortedcollection <set>元素：可以映射java.util.Set接口的属性，元素没有顺序且不允许重复。   <list>元素：可以映射java.util.List接口的属性，有顺序，需要在集合属性对应的表中用一个额外的索引保存每个元素的位置。   <bag> <idbag>元素：可以映射java.util.Collection接口的属性，元素可重复，但不保存顺序。   <map>元素：可以映射java.util.Map接口的属性，元素以键/值对的形式保存，也是无序的。   <primitive-array> <array>:可以映射数组元素。 下面是每个集合映射的例子 <set>元素 private Set<String> hobbies;   <set name=“hobbies” table=“student_hobby”>    <key column=“student_id”/>   <element type=“string” column=“hobby_name” not-null=“true”/> <\/set>   <list>元素 private List<String> hobbies;   <list name=“hobbies” table=“student_hobby”>    <key column=“student_id”/>   <list-index column=“posistion”/>   <element type=“string” column=“hobby_name” not-null=“true”/> <\/list>   <bag>元素 private Collection<String> hobbies;   <bag name=“hobbies” table=“student_hobby”>    <key column=“student_id”/>    <element type=“string” column=“hobby_name” not-null=“true”/> <\/bag> <map>元素 private Map<Long String> hobbies;   <map name=“hobbies” table=“student_hobby”>     <key column=“student_id”>     <map-key column=“hobby_id” type=“long”/>     <element type=“string” column=“hobby_name” not-null=“true”/> <\/map> 组件映射 组件类是值类型的，它没有对象标识符属性，在数据库中没有对应的表，它只隶属于另一个持久化类的实例。     把组件类作为持久化类的单个属性来使用   把组件类作为持久化类的集合属性来使用   把组件类作为持久化类的对象标识符来使用 把组件类作为持久化类的单个属性来使用 例子 public class  Address{ … }   public class Customer{   private Long id;   …..   private Address homeAddress;   private Address deliverAddress;  ….}   下面是在Customer配置文件加的语句 <componet name=“homeAddress ”               class=“com.qiujy.domain.Address”>  <property name=“province”  column=“home_province”/>   ……  <\/componet>  <componet name=“deliverAddress ”               class=“com.qiujy.domain.Address”>  <property name=“province”  column=“deliver_province”/>   ……  <\/componet>   把组件类作为持久化类的集合属性来使用 例子 public class Photo{….}   public class Album{   private Long id;   private String title;   ….   private List<Photo> photos;   …}   <bag name=“photos” table=“photo”>   <key column=“album_id” not-null=“true”/>   <composite-element class=“com.qiujy.domain.Photo”>     <property name=“name”/>     ….    <\/composite-element> <\/bag>","title":"Hibernate3"},{"content":"下载地址：http://code.google.com/p/freecms/   site 在首页静态化时,系统会自动向模板文件传递site对象，此对象存储当前站点信息。 属性 说明 id id name 名称 sitedomain 域名 sourcepath 源文件目录 copyright 版权信息 recordcode 备案信息 parid 父站点id state 有效性：1有效0无效 url 外部链接 logo Logo地址 ordernum 显示顺序 clicknum 点击量","title":"开源 免费 java CMS - FreeCMS-数据对象-site"},{"content":"今天(2012-12-27)修改了一个页码输入框为空时仍分页的bug和刷新时清空历史数据 网页: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> <html> <head>     <title>查验表<\/title>     <meta http-equiv=\"keywords\" content=\"监测线\">     <meta http-equiv=\"description\" content=\"监测线\">     <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">  <link rel=\"stylesheet\" type=\"text/css\" href=\"css/remote.css\">  <script type=\"text/javascript\" src=\"../script/jquery-1.7.2.min.js\"><\/script>  <script type=\"text/javascript\" src=\"js/remote.js\"><\/script> <\/head> <body> <div class=\"query\"> <fieldset class=\"query\"> <span class=\"tip\">所有人:<\/span><input type=\"text\" class=\"txt\" title=\"按Enter键查询\" id=\"query_user\"> <span class=\"tip\">VIN:<\/span><input type=\"text\" class=\"txt\" title=\"按Enter键查询\" id=\"query_vin\"> <span class=\"tip\">发动机型号:<\/span><input type=\"text\" class=\"txt\" title=\"按Enter键查询\" id=\"query_enery\"> <span class=\"tip\">号牌号码:<\/span><input type=\"text\" class=\"txt\" id=\"query_num\"> <input type=\"button\" class=\"bts\" value=\"清空\" title=\"点击清空参数\" onclick=\"blankArgs();\"> <input type=\"button\" class=\"bts\" value=\"查询\" title=\"点击执行查询\" onclick=\"getDataList();\"> <\/fieldset> <\/div> <!--------------------------------------------end 查询div----------------------------------------------------> <table class=\"data\" cellspacing=\"0px\" cellpadding=\"0px\" id=\"tabList\"> <tr> <th><input type=\"checkbox\" id=\"checkall\" onclick=\"selectAll(this);\"><\/th> <th>流水号<\/th> <th>号牌种类<\/th> <th>号牌号码<\/th> <th>所有人<\/th> <th>车辆识别号<\/th> <th>发动机号<\/th> <th>车身颜色<\/th> <th>查验状态<\/th> <th>查验员<\/th> <th>查验时间<\/th> <th style=\"border-right:1px #00FFFF solid;\">操作<\/th> <\/tr> <\/table> <!--------------------------------------------end 数据列表----------------------------------------------------> <div class=\"page\"> <input type=\"button\" class=\"bts\" value=\"删除选中项\" onclick=\"delSeledRecord();\"> <span class=\"tip\" id=\"pageinfo\">当前页:第0/0页<\/span> <img src=\"imgs/page/first.gif\" class=\"page\" alt=\"首页\" onclick=\"setPage(1);\"> <img src=\"imgs/page/prev.gif\" class=\"page\" alt=\"上一页\" onclick=\"setPage(2);\"> <img src=\"imgs/page/next.gif\" class=\"page\" alt=\"下一页\" onclick=\"setPage(3);\"> <img src=\"imgs/page/last.gif\" class=\"page\" alt=\"尾页\" onclick=\"setPage(4);\"> <input type=\"text\" class=\"txt\" style=\"width:40px;\" value=\"0\" title=\"按Enter键跳页\" id=\"jumppage\" onkeyup=\"this.value=this.value.replace(/\\D/g,'');\"> <input type=\"button\" class=\"bts\" value=\"翻页\" onclick=\"jumpPage();\"> <\/div> <!--------------------------------------------end 分页div----------------------------------------------------> <\/body> <\/html>   样式文件: @CHARSET \"UTF-8\"; body{  margin:0px;  padding:10px;  background-color:#FFFFFF;  font-size:12px; } fieldset{  margin:0px 0px 0px 20px;  padding:5px;  width:95%;  border:1px #FFCCFF solid; } input.bts{  margin:0px 0px 0px 5xp;  padding:2px 3px 1px 3px;  background-color:#66CCFF;  border:1px #000000 solid;  font-size:11px;  color:#FFFFFF; } img.page{  margin:0px;  padding:0px;  width:12px;  height:12px;  border:none; } span.tip{  margin:0px 3px 0px 5px;  padding:0px; } div.query{  margin:0px;  padding:5px;  width:100%;  background-color:#F0FFFF;  text-align:left;  overflow:auto; } div.page{  margin:0px;  padding:3px 2px 2px 2px;  width:100%;  background-color:#F0FFFF;  border:1px #CCCCCC solid;  vertical-align:bottom;  overflow:hidden; } table{  margin:0px;  padding:0px;  border:none; } table.data{  width:100%;  border:none;  overflow:auto; } th{  margin:0px;  padding:0px;  background-color:#AFEEEE;  border-top:1px #00FFFF solid;  border-right:none;  border-bottom:1px #00FFFF solid;  border-left:1px #00FFFF solid;  font-size:13px;  text-align:center;  vertical-align:middle; } td{  padding:0px;  margin:0px;  border:none;  border-right:1px #CCCCCC dotted;  border-bottom:1px #CCCCCC dotted;  font-size:12px;  text-align:center;  vertical-align:middle;  overflow:hidden; } /*以下样式被脚本调用*/ input.txt{  padding:1px 0px 1px 2px;  width:140px;  border:1px solid #87C6F9;  border-radius:6px; } input.txtfocus{  padding:1px 0px 1px 2px;  width:140px;     border:1px #00FFFF solid;     box-shadow:0px 0px 8px rgba(103, 166, 217, 1);     outline:none; } tr.ou{  background-color:\"#EEEEFF\"; } tr.qi{  background-color:\"#FFFFFF\"; } tr.hover{  background-color:#FFCCFF; }   分页图片:   脚本: //所有记录 var allRecord=null; //记录数 var allCount=0; //每页记录数 var pageSize=10; //总页数 var pageCount=0; //当前页 var currPage=1; //Enter键监听 $(document).ready(function(){ blankArgs();  $(\"#checkall\").removeAttr(\"checked\");  $(\"#jumppage\").val(0); var $inp=$(\"input:text\");  $inp.keypress(function(e){   if(!e){    e=window.event;   }      if(e.which==13){       if(this.id==\"jumppage\"){     jumpPage();    }else{     getDataList();    }      }  });  var oldcss=\"\";  $inp.focus(function(){   oldcss=$(this).attr(\"class\");   $(this).removeClass(oldcss).addClass(\"txtfocus\");  });  $inp.blur(function(){   $(this).removeClass(\"txtfocus\").addClass(oldcss);  });  $inp[0].focus(); }); //清空查询参数 function blankArgs(){  $(\"#query_user\").val(\"\");  $(\"#query_vin\").val(\"\");  $(\"#query_enery\").val(\"\");  $(\"#query_num\").val(\"\"); } //清空数据表 function blankList(){  var trLen=$(\"#tabList\").find(\"tr\").length;  for(var i=trLen;i>0;i--){      $(\"#tabList\").find(\"tr\").eq(i).remove();  } } //执行查询 function getDataList(){  allRecord=null;  blankList();  //添加aJax请求后台数据的代码,allRecord最好是JSON数组,这样解析数据容易  allRecord=new Object();  allCount=56;  if(allCount%pageSize==0){   pageCount=allCount/pageSize;  }else{   pageCount=parseInt(allCount/pageSize)+1  }  //显示第一页数据  currPage=-1;  setPage(1); } //分页 function setPage(type){  if(!allRecord){   window.alert(\"没有数据\");   return;  }  if(pageCount<=1){   window.alert(\"总页数不够\");   return;  }  if(currPage==1&&type==1){   window.alert(\"已是首页\");   return;  }  if(currPage==1&&type==2){   window.alert(\"已是第一页\");   return;  }  if(currPage==pageCount&&type==3){   window.alert(\"已是最后一页\");   return;  }  if(currPage==pageCount&&type==4){   window.alert(\"已是尾页\");   return;  }  var start=0;  var end=0;  if(type==1){   currPage=1;   start=0;   end=pageSize;  }else if(type==2){   currPage--;   start=(currPage-1)*pageSize;   end=currPage*pageSize;  }else if(type==3){   currPage++;   start=(currPage-1)*pageSize;   end=Math.min(currPage*pageSize,allCount);  }else if(type==4){   currPage=pageCount;   start=(currPage-1)*pageSize;   end=allCount;  }  blankList();  //向表格写入数据  for(var i=start;i<end;i++){   var id=i;   var bgcss=\" \";   if(i%2==0){    bgcss=\" class='ou'\";   }else if(i%2==1){    bgcss=\" class='qi'\";   }   var strHtml=\"<tr name='datarow' \"+bgcss+\">\";         strHtml+=\"<td><input type='checkbox' name='item' value='\"+id+\"' id='\"+id+\"'><\/td>\";         strHtml+=\"<td>\"+i+\"<\/td>\";                 strHtml+=\"<td>小型汽车<\/td>\";         strHtml+=\"<td>京A12033<\/td>\";         strHtml+=\"<td>张飞<\/td>\";         strHtml+=\"<td>LSYBCAAF38K019621<\/td>\";         strHtml+=\"<td>016355<\/td>\";         strHtml+=\"<td>蓝色<\/td>\";   strHtml+=\"<td>通过<\/td>\";         strHtml+=\"<td>李四<\/td>\";         strHtml+=\"<td>2012-12-16<\/td>\";         strHtml+=\"<td><a href=javascript:preView('\"+id+\"');>查看照片<\/a>&nbsp;\";   strHtml+=\"<a href=javascript:delSingleRecord('\"+id+\"');>删除<\/a>&nbsp;\";   strHtml+=\"<a href=javascript:getDetail('\"+id+\"');>详细<\/a><\/td>\";         strHtml+=\"<\/tr>\";         $(\"#tabList\").append(strHtml);  }  var oldcss=null;  $(\"tr[name='datarow']\").hover(   function(){      oldcss=$(this).attr(\"class\");      $(this).removeClass(oldcss).addClass(\"hover\");   },   function(){      $(this).removeClass(\"hover\").addClass(oldcss);   }  );  $(\"#checkall\").removeAttr(\"checked\");  $(\"#pageinfo\").html(\"当前页:第\"+currPage+\"/\"+pageCount+\"页\");     $(\"#jumppage\").val(currPage); } //跳转分页 function jumpPage(){  if(!allRecord){   $(\"#jumppage\").val(0);   window.alert(\"没有数据\");   return;  } var pageStr=$(\"#jumppage\").val();  if(!pageStr){   $(\"#jumppage\").val(currPage);   window.alert(\"请输入页数\");   return;  }  if(page<1||page>pageCount){   $(\"#jumppage\").val(currPage);   window.alert(\"输入的页数不对\");   return;  }  if(page==currPage){   return;  }  if(page==1){   currPage=-1;   setPage(1);  }else if(page==pageCount){   currPage=-1;   setPage(4);  }else{   currPage=page-1;   setPage(3);  } } //全选或全不选 function selectAll(obj){  $(\"input:checkbox[name='item']\").each(function(i){   $(this).attr(\"checked\",obj.checked);  }); } //查看照片 function preView(id){  window.alert(\"查看照片 \"+id); } //删除单个记录记录 function delSingleRecord(id){  $(\"#\"+id).attr(\"checked\",true);  delAct(1,id); } //删除选中的所有记录 function delSeledRecord(){  delAct(2,null); } //执行删除 function delAct(type,id){  if(!allRecord){   window.alert(\"没有数据\");   return;  }  var args=\"\";  if(type==1&&id!=null){   args=id;  }else if(type==2){   var objDels=$(\"input[name='item']:checked\");      objDels.each(function(i){          args+=$(this).val()+\",\";      });   args=args.substring(0,args.length-1);  }else{   return;  }  if(args==\"\"){   window.alert(\"还没进行选择\");   return;  }  if(!window.confirm(\"确认删除被选记录吗\")){   return;  }  args=\"?type=del&dels=\"+agrs;  $.ajax({   type:\"POST\",      processData:true,      url:\"../servlet/TestServlet\",      data:agrs,      success:function(msg){    if($.trim(msg.result)==\"succ\"){     window.alert(\"删除成功\");    }else{     window.alert(\"删除失败\");    }   }  }); } //查看详细 function getDetail(id){  window.alert(\"查看详细 \"+id); }   效果预览:","title":"网页前台分页算法案例"},{"content":"在jQuery1.4.2版本在使用ajax时存在一个严重问题，如果指定dataType为json，竟然死活不进入success回调函数，值进入error回调函数里面，而其他版本，如1.2.6是正常的。 示例代码如下： jQuery.ajax({\turl: \"text.html\",\ttype: \"POST\",        data: strjson,        success:function(obj){alert(obj)},        error:function(){alert('发生错误')},        complete: function(obj) {            if(obj.status == 200)alert('有效');            else alert('无效');        }}); 在jquery的网站找到了在线的api文档看了下，地址：http://api.jquery.com/jQuery.ajax/，发现dataType如下的说明 　　\"json\": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See json.org for more information on proper JSON formatting.)  　　原来是jquery1.4版本以后对json格式要求非常严格了，要满足json.org网站定义的格式才能执行success回调，其他怪异模式的json字符串都会出错，无法解析返回json数据。说的是1.4+以上的，那为什么下载的1.3.2指定dataType为json时也不能执行success回调呢？     所以在使用ajax的时候需要注意json格式的返回数据时候严格！ 正确返回的obj格式为：{\"success\":true,\"id\":\"1\"}就可以正常执行success回调了。 　　JSON格式总结下，详细的去json.org查看。 　　1）键名称：用双引号括起 　　2）字符串：用使用双引号括起 　　3）数字，布尔类型不需要使用双引号括起","title":"jQuery1.4+版本 ajax 不执行success回调函数，却进入error回调函数"},{"content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html><head>    <title>js获取height和width总结<\/title>    <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-Type\"/>    <script type=\"text/javascript\" src=\"js/jquery-1.5.2.js\"><\/script>    <script type=\"text/javascript\" >       $(document).ready(function()        {        alert(\"浏览器当前窗口可视区域高度:\"+$(window).height()); //浏览器当前窗口可视区域高度        alert(\"浏览器当前窗口文档的高度:\"+$(document).height()); //浏览器当前窗口文档的高度        alert(\"浏览器当前窗口文档body的高度:\"+$(document.body).height());//浏览器当前窗口文档body的高度        alert(\"浏览器当前窗口文档body的总高度 包括border padding margin:\"+$(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin        alert(\"浏览器当前窗口可视区域宽度:\"+($(window).width())); //浏览器当前窗口可视区域宽度        alert(\"浏览器当前窗口文档对象宽度:\"+$(document).width());//浏览器当前窗口文档对象宽度        alert(\"浏览器当前窗口文档body的高度:\"+$(document.body).width());//浏览器当前窗口文档body的高度        alert(\"浏览器当前窗口文档body的总宽度 包括border padding margin:\"+$(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin        alert(\"显示器分辨率，只能用JavaScript代码获取高度:\"+screen.height);//显示器分辨率，只能用JavaScript代码获取        alert(\"显示器分辨率，只能用JavaScript代码获取宽度:\"+screen.width);        })  ;    <\/script><\/head><body>    <ul>         <li>  网页可见区域宽： document.body.clientWidth    <\/li>         <li>   网页可见区域高： document.body.clientHeight  <\/li>         <li>   网页可见区域宽： document.body.offsetWidth (包括边线的宽)<\/li>         <li>  网页可见区域高： document.body.offsetHeight (包括边线的高)    <\/li>         <li>  网页正文全文宽： document.body.scrollWidth                   <\/li>         <li>   网页正文全文高： document.body.scrollHeight                       <\/li>         <li>    网页被卷去的高： document.body.scrollTop  <\/li>         <li>    网页被卷去的左： document.body.scrollLeft  <\/li>         <li>    网页正文部分上： window.screenTop   <\/li>         <li>    网页正文部分左： window.screenLeft   <\/li>         <li>   屏幕分辨率的高： window.screen.height<\/li>         <li>   屏幕分辨率的宽： window.screen.width  <\/li>         <li>   屏幕可用工作区高度： window.screen.availHeight<\/li>         <li>   屏幕可用工作区宽度： window.screen.availWidth <\/li>     <\/ul><\/body><\/html>","title":"js获取height和width总结"},{"content":"待总结","title":"天轰穿视频收尾（待完成）"},{"content":"先把下面的代码拷贝到个html中，运行看效果 <html><head><script type=\"text/javascript\">var currentPosition,timer;function GoTop(){\ttimer=setInterval(\"runToTop()\",1);}function runToTop(){\tcurrentPosition=document.documentElement.scrollTop || document.body.scrollTop; \tcurrentPosition-=10;\tif(currentPosition>0)\t{\t\twindow.scrollTo(0,currentPosition);\t}\telse\t{\t\twindow.scrollTo(0,0);\t\tclearInterval(timer);\t}}<\/script><style type=\"text/css\"><\/style><\/head><body><div style=\"height:1000px;text-align:center;font-size:200px;font-weight:bold;\">饭<\/div><div style=\"height:1000px;text-align:center;font-size:200px;font-weight:bold;\">吃<\/div><div style=\"height:1000px;text-align:center;font-size:200px;font-weight:bold;\">家<\/div><div style=\"height:1000px;text-align:center;font-size:200px;font-weight:bold;\">回<\/div><div style=\"height:1000px;text-align:center;font-size:200px;font-weight:bold;\">你<\/div><div style=\"height:1000px;text-align:center;font-size:200px;font-weight:bold;\">带<\/div><div id=\"back-up\" onclick=\"GoTop()\" style=\"border:1px solid red;height:100px;width:15px;position:fixed;cursor:pointer;right:10px;bottom:30px;\">返回顶部<\/div><script>window.scrollTo(0,document.body.scrollHeight);<\/script><\/body><\/html>速度可以自己控制哦。","title":"js控制滚动条缓慢滚动到顶部"},{"content":"HTML标签详细讲解说明[HTML语法] (2007-12-17 13:35) 分类： html HTML标签详细讲解说明[HTML语法] 标签和属性 在HTML中，通常标签都是由开始标签和结束标签组成的，开始标签用“<标签名>”表示，结束标签用“<\/标签名>”表示。 元素指的是包含标签在内的整体，除去标签的部分叫做内容。 属性要在开始标签中指定，用来表示该标签的性质和特性。通常都是以“属性名=”值””的形式来表示，用空格隔开后，还可以指定多个属性。指定多个属性时不用区分顺序 颜色的指定方法 用HTML指定颜色有两种方法 1、用16进制数值来指定：在#号的后面，把RGB的各个选项用十六进制的数值来表示，数值保持两位数。 2、指定颜色的名称：可以对基本的16色用名称来指定其颜色 指定文件的位置 在对某部分设置链接的时候，需要指定链接端HTML文件的位置；同样，如果想在该处显示图像也需要指定图像的位置。在HTML中，这个位置用URL来表示，有以下两种表示方法： 1、绝对URL：绝对URL就是用Web浏览器查看网页时，地址栏中显示的以http://开头的路径 2、相对URL：相对URL是在同一站点内进行设置，类似于在同一磁盘上管理文件的形式。这种方法是以当前文件的位置为基准。使用相对URL时，如果要指定的文件在当前文件的下级，就从目录名开始一直写到要指定的文件名，中间用“/”符号隔开。如果在当前文件的上级，每上一级就加一个“../”符号 显示HTML的版本 <!DOCTYPE~> HTML的版本表明HTML文件是按照哪个版本进行编写的（标明该HTML文件遵循的DTD文件），不同的版本和种类都有固定的书写格式，要按照固定的格式输入文件开头，然后在文件开头处写明版本，按照这种版本的规定格式进行编写 必须使用的标签 <html>~<\/html> <head>~<\/head> <title>~<\/title> <body>~<\/body> HTML文件的开头写有<!DOCTYPE~>的部分，代表HTML的版本，其后是必须存在的四种标签 首先，<!DOCTYPE~>后面的整个都要用html标签(<html>~<\/html>)括起来，其中要按照head标签(<head>~<\/head)和body标签的顺序(<body>~<\/body>)的顺序进行排列。 在head标签中填写与该文件相关的信息，body标签中填写世纪要在浏览器上显示的内容。另外，在head标签中，只能有一个代表文件标题的title标签 设置页面的文字颜色 <body text=”颜色指定”>~<\/body> 设置页面的背景颜色 <body bgcolor=”颜色指定”>~<\/body> 设置页面的背景图像 <body background=”图像的URL”>~<\/body> 按照目的设定范围 <div>~<\/div> <span>~<\/span> 插入注释 <!—注释语句--> 添加标题 <title>~<\/title> title标签用来给HTML文件添加标题 这个标签一定要位于<head>~<\/head>圈定的范围内。在这里指定的标题除了可以在通常的浏览器窗口的标题栏中显示以外，还可以作为加入收藏夹时的标题 显示文件编码 <meta http-equiv=\"Content-Type\" content=\"text/html; charset=文字编码\" /> meta标签的charset属性表示该HTML文件是用什么文字编码编写的 注意，该标签一定要位于<head>~<\/head>范围内 添加关键字、内容介绍及作者姓名 <meta name=\"keywords\" content=\"关键字1，关键字2，…\" /> <meta name=\"description\" content=\"内容介绍\" /> <meta name=\"author\" content=\"作者姓名\" /> 这些信息都不会在画面上显示出来，但是搜索引擎在收集信息时要用到 注意，该标签一定要位于<head>~<\/head>范围内 设置样式表和脚本语言的种类 <meta http-equiv=\"Content-Style-Type\" content=\"样式表的种类\" /> <meta http-equiv=\"Content-Script-Type\" content=\"脚本的种类\" /> 在HTML文件内可以设置样式表和脚本的默认语言 注意，该标签一定要位于<head>~<\/head>范围内 设置进入网页 <link rel=”关系” href=”URL”> <link rev=”关系” href=”URL”> rel：在本页看到的，与URL标明的网页之间的关系 rev：在URL标明的网页中看到的，与本页之间的关系 link标签表示的是该文件和与其相关的其他文件之间的关系 注意，该标签一定要位于<head>~<\/head>范围内 设置标准URL <base href=”绝对URL”> <base href=”绝对URL” target=”目标名”> base标签用来设置将该页中使用的相对URL的标准指向成绝对URL，指定了这个标签之后，在该页指定的相对URL就会全部认定为已在这里指定的绝对URL。如果不进行这项设置，就以当前页的位置为标准，如果指定了Target属性，就可以指定打开链接地址网页的默认框架和窗口 注意，该标签一定要位于<head>~<\/head>范围内 设置自动倒入网页功能 <meta http-equiv=\"refresh\" content=\"秒数\" /> <meta http-equiv=\"refresh\" content=\"秒数\"；URL=要移动到的URL /> 在经过数秒后，自动开始导入网页。如果指定了要移动到的URL，就会导入URL指定的网页。如果没有指定，就会再次导入相同的页 注意，该标签一定要位于<head>~<\/head>范围内 设置各级标题 <h1>~<h1> 设置段落 <p>~<\/p> p标签表示的是该部分为一个段落 设置联系地址 <address>~<\/address> address标签表示的内容是该网页制作者的联系地址和有关网页内容的咨询地址等信息 设置强调内容 <em>~<\/em> <strong>~<\/strong> 这两个标签所圈内容表示该部分是强调的内容 设置较短的引用文字 <q>~<\/q> <q cite=”引用页的URL”>~<\/q> q标签代表的意思是该部分为较短的引用文，在引用段落的某一部分的时候使用，如果使用cite属性，还能够把引用页的URL显示出来 设置较长的引用文章 <blockquote>~<\/blockquote> <blockquote cite=”引用页的URL”>~<\/blockquote> 设置文字内容的出处 <cite>~<\/cite> 设置缩略语 <abbr title=”字符串”>~<\/abbr> <acronym title=”字符串”>~<\/acronym> title：不处于省略状态下的词汇（字符串） 设置添加的内容 <ins cite=”URL” datetime=”添加日期时间”>~<\/ins> 设置需要删除的内容 <de cite=”URL” datetime=”删除日期时间”>~<\/del> 突出显示段落中的术语 <dfn>~<\/dfn> 表示与程序关联的文本 <kbd>~<\/kbd>：输入文本 <samp>~<\/samp>：输出样本 <code>~<\/code>：源代码 <var>~<\/var>：变量 显示特殊符号 &lt：< &gt：> &quot：” &amp：& 设置文字的换行 <br> 添加了br标签之后，文本就会再该处换行。即使在HTML代码中已经换行了，在浏览器上显示的时候却反映不出来，因此如果想在浏览器上换行的话，就要使用br标签 添加不同横线效果 <hr> <hr size=”粗细” width=”长度” align=”对齐方式” noshade> 加入了hr标签后，就可以在其标注的地方显示横线 设置文本格式 <b>~<\/b>：黑体字 <i>~<\/i>：斜体字 <tt>~<\/tt>：等大字体 <sup>~<\/sup>：上标 <sub>~<\/sub>：下标 <u>~<\/u>：下划线 <s>~<\/s>：删除线 设置空格和换行 <pre>~<\/pre> <pre>标签可以保留文字在源代码中的格式，使得页面中显示的内容和源代中的格式完全一致 设置居中效果 <center>~<\/center> center标签用于将指定范围内的内容设置为居中 设置行对齐方式 <h1 align=”行对齐方式”>~<h1> <p align=”行对齐方式”>~<p> <div align=”行对齐方式”>~<div> 使用align属性可以设置标题、段落以及指定范围内的行对齐方式 设置文字颜色 <font color=”设置颜色”>~<\/font> 设置字体类型 <font>字体名”>~<\/font> 设置字体字号 <font size=”字号”>~<\/font> 相对改变字体大小 <big>~<\/big>：增大 <small>~<\/small>：减小 <font size=”+n”>：增大n号 <font size=”-n”>：减小n号 设置字号的基本大小 <basefont size=”字号”> size：1~7  链接到其他页面 <a href=”链接目标URL”>~<\/a> a标签的href属性能把指定的范围链接到其他页面上，链接部分的词语要设置得让人看到这个部分就能联想到链接网页上的具体内容 另外，在链接图像的时候，一定要插入替代的文字（alt=”~”）使用户能够很明确的了解到链接的目标 链接到当前页的特定位置 <a href=”#位置名”>~<\/a>：指定链接文件（从什么位置开始链接） <a name=”位置名”>~<\/a>：指定链接的地址（要链接的位置） 如果一页上的内容非常多，可以在一个网页中给特定的位置命名，然后再链接到该位置（跳转）。在给链接对象位置命名的时候要使用name属性。然后，在链接的时候，要用href属性在链接地址名称的前面加上#号 设置链接到其他页面的特定位置 <a href=”URL#位置名”>~<\/a>：指定链接源（从什么位置开始链接） <a name=”位置名”>~<\/a>：指定链接的地址（要链接的位置） 在链接到其他网页上的时候，可以先给那一页上特定的位置命名，然后链接到该位置。在给链接对象位置命名的时候要使用name属性。然后，在链接的时候，要用href属性设置成”URL+#+位置名”这样一种格式 设置链接文字的颜色 <body link=”指定颜色” vlink=”指定颜色” alink=”指定颜色”>~<body> link：还没有看见的链接部分的文字颜色 vlink：已经看见的链接部分的文字颜色 alink：鼠标单击链接部分的文字颜色 body标签用于设置网页整体链接部分的文字颜色 在新窗口中打开链接网页 <a href=” URL” target=”窗口名”>~<\/a> 利用target属性可以设置打开链接窗口的方式 通过设置链接来启动邮箱 <a href=”mailto：邮箱地址”>~<\/a> 为列表添加不同类型的标记 <ul><li>列表项目1<\/li><><li>列表项目2<\/li>…<ul> ul标签的作用是将列表（条款形式）加上圆点或方括号的标记。列表的整体要在<ul>~<\/ul>标签范围内，在这之间的各个项目要在<li>~<\/li>标签之内 更改列表标记 <ul type=”标记种类”>~<\/ul> <li type=”标记种类”>~<\/li> 标记的种类包括disc、cicle和square 制作带序号的列表 <ol><li>列表项目1<\/li><><li>列表项目2<\/li>…<ol> 改变序号的样式 <ol type=”序号样式”>~<\/ol> <li type=”序号样式”>~<\/li> 改变序号的顺序 <ol start=”开始序号”>~<\/ol> <li value=”开始序号”>~<\/li> 制作包含专用语和解释的列表 <dl><dt>专用语<dt><dd>对其解释<\/dd>…<dl> 表格的基本形式 <table border=”边框的粗度”>~<\/table>：整个表格 <tr>~<\/tr>：单独一行 <th>~<\/th>：单元格：标题用 <td>~<\/td>：单元格：数据用 表格的整体要圈在<table>~<\/table>之间显示，表格当中某一个单元格用<th>~<\/th>表示或者<td>~<\/td>表示。每个单元格都在表的单独以行，放置在<tr>~<\/tr>中。也就是说，table标签的内容是由tr标签构成的。各个tr标签的内容是由表示单元格的th或者td标签构成的。th标签代表这个单元格的内容是标题。td标签代表这个单元格的内容是数据 为表格添加标题 <caption>~<\/caption> <caption align=”对齐方式”>~<\/caption> caption标签用来给表格添加标题 该标签一定要放在table标签的紧后面。标题的显示位置（即对齐方式）可以指定在表格的上部，或者表格的下部 指定表格的大小 <table width=”宽度”>~<\/table> 宽度：针对像素或者窗口的百分比 指定单元格大小 <th width=”宽度” height=”高度”>~<\/th> <td width=”宽度” height=”高度”>~<\/td> 合并单元格 <th rowspan=”垂直方向的合并数”>~<\/th> <th colspan=”水平方向的合并数”>~<\/th> <td rowspan=”垂直方向的合并数”>~<\/td> <td colspan=”水平方向的合并数”>~<\/td> 垂直方向的合并数：从当前单元格开始向下合并的单元格数 水平方向的合并数：从当前单元格开始向右合并的单元格数 设置单元格之间的距离 <table cellspacing=”单元格的距离”>~<\/table> 设置单元格边框与内容之间的距离 <table cellpadding=”单元格边框与内容之间的距离”>~<\/table> 设置单元格中的行对齐方式和列对齐方式 align属性用于设置单元格内的行对齐方式，valign属性用来设置单元格内的列对齐方式 禁止在单元格内换行 <th nowrap>~<\/th> <td nowrap>~<\/td> 设置表格和单元格的背景颜色 bgcolor属性用于指定表格和单元格中的背景颜色 设置表格和单元格的背景图像 background属性用于指定表格和单元格中的背景图像 设置表格外框的宽度 <table border=”外框的宽度”>~<\/table> 设置表格外框的显示形式 <table frame=”外框的显示形式”>~<\/table> 设置表格内补边框线的显示形式 <table rules=”内部边框线的显示形式”>~<\/table> 定义表格中的横行 <thead>~<\/thead>：表头部分 <tbody>~<\/tbody>：表体部分 <tfoot>~<\/tfoot>：表底部分 thead标签、tbody标签和tfoot标签都是用来定义表格的横行（tr标签）的 这样组合之后，就可以针对该组合的整体来应用属性和样式表。 使用这些标签的时候，一定要以thead标签、tfoot标签和tbody标签的顺序进行排列。在一个表格里，只能放置一个thead标签和一个tfoot标签，而tbody标签可以根据需要放置多个 利用纵列设置表格属性和样式表 <col span=”纵列数”> <col span=”纵列数” width=”宽度”> col标签不仅可以用来改变表格的纵列结构，还可以用来根据纵列，来综合指定宽和行对齐方式等属性以及样式表 该标签放置的位置要在caption标签的紧后面（如果没有caption标签，就放在table标签的开始标签的紧后面），以及thead标签和tr标签的前面 表格居中 <table align=”center”>~<\/table> 将表格嵌入到文本中 <table align=”对齐方式”>~<\/table> 位置：left,right 将table标签的align属性指定为left或者right后，就可以将表格以居左或居右的方式嵌入到文字中间 如果想要解除嵌入状态，可以使用<br>标签的clear属性 解除表格的嵌套 <br clear=”解除表格那一侧的嵌套”> left：解除左侧表格的嵌套 right：解除右侧表格的嵌套 all：解除两侧表格的嵌套 设置表格与嵌套文字之间的距离 <table vspace=”垂直距离” hspace=”水平距离”>~<\/table> 垂直距离：表格的上下框与文字间的距离 水平距离：表格的左右框与文字间的距离 插入图像 <img src=”URL” width=”宽度” hignt=”高度” alt=”替代文字”> 使用img标签，可以把图像插入到HTML文件中 图像的格式一般可以使用GIF格式、JPEG格式和PNG格式 不管图像实际的大小如何，都会按照在这里所指定的宽度和高度来显示 alt属性是在不能显示图像的情况下，指定替代图像所使用的文字 设置图像的边框 <img src=”URL” alt=”替代文字” border=”边框的粗度”> 设置图像与文字的垂直位置关系 <img src=”URL” alt=”替代文字” align=”对齐方式”> 在同一行中，如果有图像和文字，那么就可以用align属性来设置图像和文字的垂直位置关系 制作图像热区 <img src=”URL” alt=”替代文字” usemap=”#map名”> <map name=”map名”>~<\/map> <area shape=”形状” cords=”坐标” href=”URL” alt=”替代文字”> 在map标签中，用来设置实际单击的区域和链接地址的是area标签 在area标签中，一定要指定表示链接地址的替代文字，之后要用image标签的usemap属性指定定义后的image map的名称（名称前面要加#），这样图像就可以作为image map产生相应的效果 将图像嵌套在文本中 <img src=”URL” alt=”替代文字” align=”对齐方式”> 位置：left,right 解除图像的嵌套 <br clear=”解除哪一侧图像的嵌套”> 设置图像与周围文字之间的距离 <img src=”URL” alt=”替代文字” vspace=”垂直距离” hspace=”水平距离”> 放置Java小程序 <applet code=”类文件名” width=”宽度” height=”高度” >~<\/applet> <param name=”参数名” value=”参数值”> applet标签是嵌入Java小程序时要使用的标签 如果使用param标签，在执行java小程序时，需事先指定一些必要值。这时，param标签要位于<applet>~<\/applet>范围的最开始部分   制作填写表单 <form action=”URL” method=”发送形式” enctype=”MIME类型” target=”窗口名称”>~<\/form> URL：用来处理发送后表格的程序的URL 发送形式：get,post MIME类型：以post方式发送内容时的MIME类型 窗口名称：先是发送结果的窗口或框架名 form标签表示在表单中填写的内容是可以发送的 制作发送按钮 <input type=”submit” value=”标签” name=”名称”> 标签：在按钮上显示的文字 名称：按钮的名称 将input标签的type属性设置为submit，再根据form标签的设置，可以制作发送填写在表单中数据的按钮 制作重置按钮 <input type=”reset” value=”标签”> 制作通用按钮 <input type=”button” name=”名称” value=”标签”> 通用按钮通常与JavaScript等脚本语言组合使用 利用图像来制作发送按钮 <input type=”image” src=”URL” name=”名称” alt=”替代文字” align=”对齐方式”> 通常，发送按钮都使用input type=”submit”代码，不过图像也可以作为发送按钮，具有发送功能。这时，图像被单击的位置将和表单的内容一起被发送 制作不同功能的发送按钮 <button type=”类型” name=”名称” value=”发送值”>~<\/button> 类型：submit,reset,button button标签是用来制作按钮专用的 通过指定type属性值，就可以产生具有不同功能的按钮，包括发送按钮、重置按钮和通用按钮。另外，在<button>~<\/button>中放置相应的内容，可以作为按钮的标签显示出来。在需要进行其他处理并设置多个发送按钮的情况下，根据name属性和value属性所显示的值，接受方就可以分辨出单击的是哪一个发送按钮 制作单行文本框 <input type=”text” name=”名称” value=”默认文字” size=”宽度” maxlength=”字符的最大输入数量”> 制作多行文本框 <textarea name=”名称” rows=”行数” cols=”宽度”>~<\/textarea> 制作输入密码的文本框 <input type=”password” name=”名称” value=”默认文字” size=”宽度” maxlength=”字符的最大输入数量”> 插入隐藏域 <input type=”hidden” name=”名称” value=”发送值” > 制作单选按钮 <input type=”radio” name=”名称” value=”发送文字” > <input type=”radio” name=”名称” value=”发送文字” checked> 将input标签的type属性设置为radio，可以用来制作单选按钮。单选按钮是多个选项当中只能选择其一的按钮。作为公共项目的选项而使用的单选按钮，要把它们都指定为同一名称。另外，发送数据的时候，为了识别所选的是哪一项，要用value属性来指定相应的值 制作复选框 <input type=”checkbox” name=”名称” value=”发送文字” > <input type=” checkbox” name=”名称” value=”发送文字” checked> 将input标签的type属性设置为checkbox，可以用来制作复选框。复选框可以在多个选项当中进行多项选择。作为公共项目的选项而使用的复选框，要把它们都指定为同一名称。另外，发送数据的时候，为了识别所选的是哪一项，要用value属性来指定相应的值 制作菜单 <select name=”名称”>~<\/select>：菜单整体 <option value=”发送值”>~<\/option>：菜单项 <option selected>~<\/option>：菜单项 select标签用来制作菜单 菜单的整体要在<select>~<\/select>范围之内显示，然后按需要的数量在其中放置表示选项的<option>~<\/option>。<option>~<\/option>范围之内要写上实际菜单要显示的选项的名称。另外，如果省略了value属性，在这里记录的文字本身就会作为所选值发送 组合菜单选项 <optgroup lable=”组合名称”>~<\/optgroup>：制作组合菜单 <option lable=”次选项”>~<\/option>：组合内的选项 组合名称：第一级显示的组合标题 次选项：对应组合名称下面的在第二级显示出来的选项 制作的菜单选项可以利用<select>~<\/select>标签组合起来 制作下拉列表 <select size=”行数” name=”名称” multiple>~<\/select>：下拉列表框 <option value=”发送值”>~<\/option>：菜单项 <option selected>~<\/option>：菜单项 在用于制作菜单的select标签中指定了size属性后，就可以显示下拉列表框 添加选择文件的功能 <input type=”file” name=”名称”accept=”MIME”类型> 将input标签的type属性设置为file，可以自动做成能够选择发送表单数据的文件按钮和文本框 综合利用菜单选项 <fieldset>~<\/fieldset>：组合 <legend align=”对齐方式”>~<\/legend>：组合的标题 field标签用来把填写在表单中需要包含的输入内容和选项组合起来 在<fieldset>~<\/fieldset>的最开始部分放置legend标签，并且给该组合加上标题 将标签文字与项目一体化 <label for=”参照ID”>~<\/lable> 参照ID：添加了标签的对象的id属性值 lable标签的作用是在输入项和选项及其标签文字之间建立起明确的关联，并使其一体化 设置框架整体结构 <frameset rows=”高度”>~<\/frameset> <frameset cols=”宽度”>~<\/frameset> <frame src=”URL” name=”框架名称”> 高度：在垂直方向上分布的多个框架的高度，按从上到下的顺序依次用逗号隔开来指定 宽度：在水平方向上分布的多个框架的宽度，按从左到右的顺序依次用逗号隔开来指定 URL：作为框架内容显示的HTML文件的URL 框架名称：在指定链接等显示目标的时候使用的名称 使用框架功能可以把窗口横竖切割开，然后在不同的块区域中显示其他的HTML文件。在指定了框架的文件中，原来body标签所在的位置，要放置frameset标签，这主要是由于在框架页面中不能使用body标签 在<frameset>~<\/frameset>的范围中要按照顺序填入分割后框架内要填写的内容。如果不需要再分割，就用frame标签指定要导入的HTML文件，如果还要继续分割的话，就需要放置frameset标签（作为嵌套放置在里面，并且指定盖框架如何分割） 设置框架的显示方法 <frame scrolling=”滚动控制” noresize> <frame marginwidth=”左右缩进” marginheight=”上下缩进”> 设置是否显示边框 <frame frameborder=”显示指定框架的边框”> frameborder属性用来设置分割开相邻框架的边框是否显示 去除分割框架的边框 <frameset frameborder=”0” framespacing=”0” border=”0”> 在不支持框架的环境中显示所需内容 <noframes>~<\/noframes> 这个标签要在<frameset>~<\/frameset>范围的最开始或者最后处放置一个。在<noframes>~<\/noframes>范围内要首先放置body标签，并在其中填写所要显示的内容。 指定链接目标在哪一个框架内显示 <a href=”URL” target=”框架名”>~<\/a> 如果对框架内的文件中指定的链接不进行设置的话，就会在原来的相同框架中显示链接目标，如果想使这个链接目标在其他框架中显示的话，就需要指定target属性值，用想要显示（frame标签）的那个框架的name属性来指定框架名称 插入内嵌框架 <iframe src=”内容的URL” name=”框架名”>~<\/iframe> iframe标签不仅可以放置分割窗口形式的框架，还可以在窗口中放置独立显示的内嵌框架。在框架内还可以显示src属性所指定的内容 如果浏览器不支持这种框架，要在<iframe>~<\/iframe>之间指定要显示的内容 在HTML中插入脚本 <script type=”MME类型”>~<\/script> <script type=”MME类型” language=”语言名称” src=”URL”>~<\/script> 在HTML文件中编写脚本的时候要用到script标签，脚本语言要写在这个标签的范围内 这时，在不支持这个标签的浏览器上会在画面上显示出脚本的部分，为了避免这种现象，通常把脚本整体作为HTML的注释。这个标签可以放在<head>~<\/head>和<body>~<\/body>范围内的任意位置上 在不能执行脚本的环境中添加所需的内容 <noscript>~<\/noscript> 在脚本不能运行的时候，可以使用noscript标签来指定替代显示的内容 这个标签要放置在<body>~<\/body>的范围内","title":"HTML标签详细讲解说明[HTML语法]"},{"content":"下载地址：http://code.google.com/p/freecms/ 栏目管理 栏目是系统频道某一类内容的集合体。 您可以在频道中设置多个一级栏目，在一级栏目中添加多个二级栏目……。FreeCMS的栏目设置具有无级分类功能。 1.    添加一级栏目 从左侧管理菜单点击栏目管理进入。 点击“添加一级栏目”   输入相关属性点击“保存”即可。   2.    添加下级栏目 点击需要添加下级栏目的栏目，如“一级栏目”   点击“添加下级栏目”   填写相关属性后点击“保存”即可。   3.    改变所属栏目 为了方便用户使用，FreeCMS提供了改变栏目结构的简便方法，使您在想对栏目结构作出调整时不需要删除重建栏目。 选择需要改变所属栏目的栏目，如“一级栏目”   点击“改变所属栏目”   选择需要调整的位置，如“要点”，直接点击即可。   注意： 1） 如果选择站点名称，如“FreeCMS”，则此栏目会变为一级栏目。 2） 在改变所属栏目时，此栏目的子栏目不会改变。 4.    删除栏目 删除栏目功能将删除指定栏目及子栏目，此操作不可恢复，请慎重操作。 选择需要删除的栏目，如“一级栏目”   点击“删除”按钮   为会防止用户误操作，系统会提示用户确认，点击“确定”按钮即可。 5.    栏目属性说明   属性 说明 站点名称 栏目所属站点名称，不能修改 栏目id 此栏目数据id 栏目名称 栏目名称 页面标识 在制作模板时，用于获取此栏目的标识 有效 有效性 导航 在提取栏目列表时，可根据此参数只提取导航的栏目。 序号 显示顺序 链接地址 如果想让此栏目直接链接到其它页面可以在这里设置。 栏目模板 选择此栏目静态化时使用的模板文件，默认为“栏目页面.html” 信息模板 选择此栏目下信息静态化时使用的模板文件，默认为“信息页面.html” 栏目图片 此栏目的图片 栏目描述 此栏目的描述信息。","title":"开源 免费 java CMS - FreeCMS-功能说明-栏目管理"},{"content":"开发人员欢迎新版本的jQuery和jQuery移动过去几周,但他们也将逐步介绍到另一个值得他们的注意力jquip.项目   虽然很多开发人员值小尺寸的jQuery(略高于32 kb),jquip或jQuery部分地区,则更小。   jquip的核心。js只有4.28 kb(缩小和gzipped),只有13%的jQuery的大小。最好的部分是,jquip拥有90%的好的部分jQuery包括主要$(选择),DOM遍历(eq, first, last, slick, prev, next, etc)和DOM改性方法(append, prepend, remove),以及CSS类改性方法、事件方法和实用函数。jquip也有一个模块化的体系结构,以其他jQuery设施将可作为插件会包含的要求。   与推动更灵活,轻量级代码,jquip可能将开发人员感兴趣的热情欢迎,尤其是智能手机的时代。 jquip下载地址：http://www.software8.co/zzsoft/yunma/495.html","title":"jquip，更简洁的代码"},{"content":"继昨日的美化一轮以后，页面也是蛮好看的了。但是还缺乏些动态响应。今天带来的是CSS3的动态响应。由于CSS3对于动画和变形这一部分，某些浏览器支持不好（IE），所以这里仅仅是使用Chrome来写的，使用的前缀是-webkit-，效果还是蛮赞的。 话不多说，首先我们来改造按钮，让它在鼠标移动后加入动画效果。 当鼠标移入以后，会缓慢变化： 修改后的content a的样式为： #content a{\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tfont-size:1.65em;\ttext-transform:uppercase;\ttext-decoration:none;\tbackground-color:#B01C20;\tborder-radius:8px;\tcolor:white;\tpadding:3.8461538%;\tfloat:left;\tbackground: -webkit-linear-gradient(90deg, #B01C20 0%, #F15C60 100%);\tmargin-top:30px;\tbox-shadow:5px 5px 5px hsla(0, 0%, 26.6667%, 0.8);\ttext-shadow:0px 1px black;\tborder:1px solid #BFBFBF;\t-webkit-transition-property: border, color, text-shadow;\t-webkit-transition-duration: 2s, 3s, 8s;\t-webkit-transition-timing-function:ease;\t-webkit-transition-delay:0s;}#content a:hover{\tborder: 1px solid #000000;\tcolor:#000000;\ttext-shadow: 0px 1px white;} 这里还添加了hover样式，就是为了鼠标移入变换的。 其次，改造导航栏。让鼠标移入有更加绚烂的提示效果。 首先定义动画帧 @-webkit-keyframes warning {\t0%{\t\ttext-shadow: 0px 0px 4px #000000;\t}\t50%{\t\ttext-shadow: 0px 0px 20px #000000;\t}\t100%{\t\ttext-shadow: 0px 0px 4px #000000;\t}} 然后在导航栏的a标签的hover加入这个动画 nav ul li a:hover{\t-webkit-animation: warning 1.5s infinite ease-in;\t//-webkit-animation-name: warning;\t//-webkit-animation-duration: 1.5s;\t//-webkit-animation-timing-function: ease;\t//-webkit-animation-iteration-count: infinite;\t//-webkit-animation-play-state: running;\t//-webkit-animation-delay: 0s;\t//-webkit-animation-fill-mode: none;\tcolor:hsl(359, 99%, 40%);} 注释掉的是分开的写法。 最后，我们让侧边栏的海报在网页载入完成后，抖动几下。 也是先加入关键帧： @-webkit-keyframes swing {\t0%{\t\t-webkit-transform: rotate(3deg);\t}\t20%{\t\t-webkit-transform: rotate(7deg);\t}\t60%{\t\t-webkit-transform: rotate(10deg);\t}\t80%{\t\t-webkit-transform: rotate(7deg);\t}\t100%{\t\t-webkit-transform: rotate(3deg);\t}} 然后给a标签添加动画效果： aside section a:nth-child(odd) img{\t-webkit-transform: rotate(3deg);\t-webkit-animation: swing 0.1s 5 ease-in;}aside section a:nth-child(even) img{\t-webkit-transform: rotate(-3deg);\t-webkit-animation: swing 0.1s 5 0.3s ease-in;} ok，这里给出全部CSS代码，便于大家交流。style.css： @font-face {\tfont-family: 'BebasNeueRegular';\tsrc:url('../fonts/BebasNeue-webfont.eot');\tsrc:url('../fonts/BebasNeue-webfont.eot?#iefix') format('embedded-opentype'),\t\turl('../fonts/BebasNeue-webfont.woff') format('woff'),\t\turl('../fonts/BebasNeue-webfont.ttf') format('truetype'),\t\turl('../fonts/BebasNeue-webfont.svg#BebasNeueRegular') format('svg');\tfont-weight:400;}@-webkit-keyframes warning {\t0%{\t\ttext-shadow: 0px 0px 4px #000000;\t}\t50%{\t\ttext-shadow: 0px 0px 20px #000000;\t}\t100%{\t\ttext-shadow: 0px 0px 4px #000000;\t}}@-webkit-keyframes swing {\t0%{\t\t-webkit-transform: rotate(3deg);\t}\t20%{\t\t-webkit-transform: rotate(7deg);\t}\t60%{\t\t-webkit-transform: rotate(10deg);\t}\t80%{\t\t-webkit-transform: rotate(7deg);\t}\t100%{\t\t-webkit-transform: rotate(3deg);\t}}body{\t//background-image:url(image/bg4.png);\t//background-repeat:repeat;\tbackground-image:\t\t-webkit-radial-gradient(hsla(0, 0%, 87%, 0.37) 9px, transparent 10px),\t\t-webkit-repeating-radial-gradient(hsla(0, 0%, 87%, 0.31) 0,\t\t\t\t\t\t\t\thsla(0, 0%, 87%, 0.31) 4px, transparent 5px,\t\t\t\t\t\t\t\ttransparent 20px, hsla(0, 0%, 87%, 0.31) 21px,\t\t\t\t\t\t\t\thsla(0, 0%, 87%, 0.31) 25px,transparent 26px,\t\t\t\t\t\t\t\ttransparent 50px);\tbackground-size: 30px 30px, 90px 90px;\tbackground-position: 0 0;\tbox-shadow:inset 0 0 40px #000000,inset 0 0 70px hsla(0, 97%, 53%, 1);\t-webkit-box-shadow:inset 0 0 40px #000000,inset 0 0 70px hsla(0, 97%, 53%, 1);}img,object,video,embed{\tmax-width:100%;}#wrapper{\tmargin-right:auto;\tmargin-left:auto;\twidth:93.75%;}header{\tmargin-right:1.06382978%;\tmargin-left:1.06382978%;\tmargin-bottom:40px;\twidth:97.91%;\theight:200px;\tbackground-image:url(image/buntingFW.png);\tbackground-repeat:repeat-x;\tborder-bottom:dashed 1px red;}#headline{\theight:140px;\tfont-size:3em;\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tfont-weight:bold;}#headline span{\tposition:relative;\ttop:70px;\tleft:1.06382978%;}#special_hint{\tcolor:#aeaeae;}nav{\tbackground-image:url(image/atwiNavBg.png);\tbackground-repeat:repeat-x;\theight:30px;}nav ul{\tmargin:0px;\tpadding:0px;}nav ul li{\tdisplay:inline-block;\tmargin-left:1.06382978%;\tmargin-right:1.06382978%;}nav ul li:last-child{\ttext-align:right;}nav ul li:first-child{\ttext-align:left;}nav ul li:nth-child(even) a{\tcolor:#FE0208;}nav ul li a{\ttext-decoration:none;\tfont-size:1.5625em;\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tfont-weight:bold;\tcolor:black;\ttext-shadow:0 1px 0 hsla(0, 0%, 100%, 0.75);\tdisplay:block;}nav ul li a:hover{\t-webkit-animation: warning 1.5s infinite ease-in;\t//-webkit-animation-name: warning;\t//-webkit-animation-duration: 1.5s;\t//-webkit-animation-timing-function: ease;\t//-webkit-animation-iteration-count: infinite;\t//-webkit-animation-play-state: running;\t//-webkit-animation-delay: 0s;\t//-webkit-animation-fill-mode: none;\tcolor:hsl(359, 99%, 40%);}#main{\toverflow:auto;}aside{\tpadding-left:1.06382978%;\tpadding-right:1.06382978%;\tborder-right:solid 3px #880F30;\tborder-right:solid 3px rgba(136,15,48,0.97);\twidth:19.14%;\tfloat:left;\toverflow:auto;\t//background: url(image/sidebarBg2.png) 50% repeat-x;\t//background: -webkit-linear-gradient(90deg, #ffffff 0%, #e4e4e4 50%, #ffffff 100%);}aside h1{\tfont-size:1.15em;\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tfont-weight:bold;\tmargin-top:5.5555555556%;\tmargin-bottom:5.88888888%;\tcolor:black;\tclear:both;}aside img{\tfloat:left;\tmargin:5.5555555556% 2.777777778%;\tmax-width:43%;\tmargin-bottom:13.88888888%;\t-webkit-box-shadow:0px 3px 5px #444444;}aside section a:nth-child(odd) img{\t-webkit-transform: rotate(3deg);\t-webkit-animation: swing 0.1s 5 ease-in;}aside section a:nth-child(even) img{\t-webkit-transform: rotate(-3deg);\t-webkit-animation: swing 0.1s 5 0.3s ease-in;}#content{\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tmargin-right:1.06382978%;\tmargin-left:1.06382978%;\tfloat:right;\twidth:74.46%;\tfont-family:'BebasNeueRegular';\tfont-weight:bold;\t//background: -webkit-radial-gradient(center, ellipse cover, #ffffff 72%, #dddddd 100%);}#content img{\tfloat:left;\twidth:28.9389%;\tmax-width:202px;}#content a{\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tfont-size:1.65em;\ttext-transform:uppercase;\ttext-decoration:none;\tbackground-color:#B01C20;\tborder-radius:8px;\tcolor:white;\tpadding:3.8461538%;\tfloat:left;\tbackground: -webkit-linear-gradient(90deg, #B01C20 0%, #F15C60 100%);\tmargin-top:30px;\tbox-shadow:5px 5px 5px hsla(0, 0%, 26.6667%, 0.8);\ttext-shadow:0px 1px black;\tborder:1px solid #BFBFBF;\t-webkit-transition-property: border, color, text-shadow;\t-webkit-transition-duration: 2s, 3s, 8s;\t-webkit-transition-timing-function:ease;\t-webkit-transition-delay:0s;}#content a:hover{\tborder: 1px solid #000000;\tcolor:#000000;\ttext-shadow: 0px 1px white;}#content a span{\tfont-size:1.3em;}#text{\tfloat:right;\twidth:68.57%;}#text h1{\tfont-size:4.375em;\tmargin:0px;\tpadding:0px;\tfont-family:Arial, Helvetica, Verdana, sans-serif;\ttext-shadow:0.05215656em 0.05215656em 0em #dad7d7, 0 1px 0 hsla(0, 0%, 100%, 0.75);}#text h1 em{\tmargin:0px;\tdisplay:block;\tpadding:0px;\tfont-size:0.5em;\tcolor:#7F7F7F;\tline-height:1.052631579em;\ttext-shadow:none;}#text p{\tcolor:#7F7F7F;\tfont-size:1.125em;\tfont-weight:normal;}#text p b{\tfont-weight:bold;}footer{\tdisplay:block;\tmargin-right:1.06382978%;\tmargin-left:1.06382978%;\tmargin-top:40px;\tborder-top:dashed 1px red;\tclear:both;\twidth:97.91%px;\theight:150px;}#notation{\theight:80px;\ttext-align:center;\tpadding-top:20px;\tfont-size:0.9375em;\tcolor:brown;}#footimg{\tbackground-image:url(image/buntingFWinvert.png);\tbackground-repeat:repeat-x;\theight:40px;}@media screen and (min-width:975px){\tnav{display:table;width:100%;}\tnav ul{display:table-row;}\tnav ul li{display:table-cell;}\tnav ul li a {font-size:1.5625em}}@media screen and (min-width:789px) and (max-width:974px){\tnav{display:table;width:100%;}\tnav ul{display:table-row;}\tnav ul li{display:table-cell;}\tnav ul li a {font-size:1.2625em}}@media screen and (min-width:721px) and (max-width:788px){\tnav{display:table;width:100%;}\tnav ul{display:table-row;}\tnav ul li{display:table-cell;}\tnav ul li a {font-size:1.1em}\t#text h1{font-size:3.375em;}\t#text h2{font-size:1.9em;}}@media screen and (min-width:541px) and (max-width:720px){\tnav{display:table;width:100%;}\tnav ul{display:table-row;}\tnav ul li{display:table-cell;}\t#headline{font-size:1.8em}\tnav ul li a {font-size:0.8em}\taside span{font-size:0.9em;}\t#text h1{font-size:2.575em;}\t#text h1 em{font-size:0.4em;}\t#text p{font-size:0.9em;}\t#text a{font-size:0.8em;}\t#notation{font-size:0.5em;}}@media screen and (max-width:540px){\t#headline{font-size:1.8em}\tnav ul li a {font-size:0.8em}\taside{width:94%;}\taside span{font-size:1.8em;}\taside img{max-width:43%;}\t#text h1{font-size:2.575em;}\t#text h1 em{font-size:0.4em;}\t#text p{font-size:0.9em;}\t#text a{font-size:0.8em;}\t#notation{font-size:0.5em;}\taside{clear:both;float:none;border-right:none;}\t#content{clear:both;float:none;}}","title":"继续学习-CSS3页面美化之让页面动起来"},{"content":"实例一： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  $(function(){   /*   var p = $(\"p\");   var li = $(\"ul li:eq(1)\");   var title = p.attr(\"title\");   var title2 = li.attr(\"title\");   var text = li.text();   alert(title);//hello world   alert(title2);//1   alert(text);//好   */   /*   $(\"ul\").append(\"<li title='abc'>hello<\/li>\")     .append(\"<li title='xyz'>world<\/li>\");   */   $(\"<li title='abc'>hello<\/li>\").appendTo(\"ul\");  }); <\/script> <\/head> <body> <p title=\"hello world\">你觉得学校怎么样？<\/p> <ul>  <li title=\"o\">一般<\/li>  <li title=\"1\">好<\/li>  <li title=\"2\">很好<\/li>  <li title=\"3\">非常好<\/li>  <li title=\"4\">好得不得了<\/li>  <li title=\"5\">好的无法形容<\/li> <\/ul> <\/body> <\/html>     实例二： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  /*  var addItems = function()  {      document.getElementById(\"div1\").innerHTML=\"\";//避免重复点击   var value = parseInt(document.getElementById(\"itemsNumber\").value);   //alert(value);   for(var i = 0; i < value; i++)   {    var input = document.createElement(\"input\");    input.setAttribute(\"type\",\"text\");    var br = document.createElement(\"br\");        document.getElementById(\"div1\").appendChild(input);    document.getElementById(\"div1\").appendChild(br);   }  }  */  $(function(){   $(\"#btn\").click(function(){    document.getElementById(\"div1\").innerHTML=\"\";    var value = parseInt($(\"#itemsNumber\").val());        for(var i = 0; i < value; i++)    {     $(\"#div1\").append(\"<input type='text'><br>\");    }   });  }); <\/script> <\/head> <body> <input type=\"text\" id=\"itemsNumber\"> <input type=\"button\" id=\"btn\" value=\"click\"> <div id=\"div1\"><\/div> <\/body> <\/html>   实例三： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  $(function(){   var li1 = \"<li title='hello'>hello1<\/li>\";   var li2 = \"<li title='hello'>hello2<\/li>\";   var li3 = \"<li title='hello'>hello3<\/li>\";   $(\"ul\").append(li1);   $(\"ul\").prepend(li2);   $(\"ul li:eq(4)\").after(li3);  }); <\/script> <\/head> <body> <p title=\"hello world\">你觉得学校怎么样？<\/p> <ul>  <li title=\"o\">一般<\/li>  <li title=\"1\">好<\/li>  <li title=\"2\">很好<\/li>  <li title=\"3\">非常好<\/li>  <li title=\"4\">好得不得了<\/li>  <li title=\"5\">好的无法形容<\/li> <\/ul> <\/body> <\/html>   运行结果：   实例四： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  $(function(){   $(\"ul li:eq(2)\").insertAfter(\"ul li:eq(4)\");  }); <\/script> <\/head> <body> <p title=\"hello world\">你觉得学校怎么样？<\/p> <ul>  <li title=\"o\">一般<\/li>  <li title=\"1\">好<\/li>  <li title=\"2\">很好<\/li>  <li title=\"3\">非常好<\/li>  <li title=\"4\">好得不得了<\/li>  <li title=\"5\">好的无法形容<\/li> <\/ul> <\/body> <\/html>     实例五： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  $(function(){   //remove()方法返回被移除的节点的jQuery对象   var removedLi = $(\"ul li:eq(3)\").remove();   removedLi.appendTo($(\"ul\"));   $(\"ul li\").remove(\"li[title = 2]\");   $(\"ul li:eq(3)\").empty();  }); <\/script> <\/head> <body> <p title=\"hello world\">你觉得学校怎么样？<\/p> <ul>  <li title=\"o\">一般<\/li>  <li title=\"1\">好<\/li>  <li title=\"2\">很好<\/li>  <li title=\"3\">非常好<\/li>  <li title=\"4\">好得不得了<\/li>  <li title=\"5\">好的无法形容<\/li> <\/ul> <\/body> <\/html>   运行结果：     实例六：动态文件添加和删除 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  /*  function addFile()  {   var div = document.getElementById(\"file\");   var br = document.createElement(\"br\");   var input = document.createElement(\"input\");   var btn = document.createElement(\"input\");   input.setAttribute(\"type\",\"file\");   btn.setAttribute(\"type\",\"button\");   btn.setAttribute(\"value\",\"删除\");   btn.onclick = function(){    div.removeChild(br);    div.removeChild(input);    div.removeChild(btn);   }   div.appendChild(br);   div.appendChild(input);   div.appendChild(btn);  }  */  $(function(){   $(\"#addFile\").click(function(){    var br = $(\"<br/>\");    var input = $(\"<input type='file'>\");    var btn = $(\"<input type='button' value='删除'>\");    $(\"#file\").append(br).append(input).append(btn);    btn.click(function(){     br.remove();     input.remove();     btn.remove();    });   });  }); <\/script> <\/head> <body> <input type=\"button\" value=\"添加\" id=\"addFile\"> <div id=\"file\"><\/div> <\/body> <\/html>   结果如下：   实例七： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /> <title>无标题文档<\/title> <script type=\"text/javascript\"  src=\"jquery-1.8.1.js\"> <\/script> <script type=\"text/javascript\">  $(function(){   $(\"#username\").focus(function(){    var value = $(this).val();    if(value == this.defaultValue)    {     $(this).val(\"\");    }   });   $(\"#username\").blur(function(){    var value = $(this).val();    if(value == \"\")    {     $(this).val(this.defaultValue);    }   });  }); <\/script> <\/head> <body> <input type=\"text\" id=\"username\" value=\"用户名\"/><br> <input type=\"password\" id=\"password\"/><br> <input type=\"button\" value=\"确定\"> <\/body> <\/html>  ","title":"jQuery学习（三）---jquery 与 DOM操作"},{"content":"之前的学习都是页面的一些HTML5+CSS3。还没有涉及表单Form的处理。下面就为大家展示HTML5与CSS3配合下强大的表单表现和处理。 优点：使用HTML5来进行表单验证，可以尽可能的加快网页处理速度。 缺点：支持的浏览器有限。 话不多说，先上图，看看效果吧： 还是之前写的网站，今天下午加入了一个新的页面，这个页面在点击“QUOTES”后出现的quotes.html <!DOCTYPE html><html lang=\"en\"><head>\t<meta charset=\"UTF-8\">\t<title>And the winner isn't<\/title>\t<link href=\"reset.css\" rel=\"stylesheet\"/>\t<link href=\"style.css\" rel=\"stylesheet\"/>\t<link href=\"form.css\" rel=\"stylesheet\"/><\/head><body>\t<div id=\"wrapper\">\t\t<!-- the header and navigation -->\t\t<header role=\"banner\">\t\t\t<div id=\"headline\">\t\t\t\t<span>AND THE WINNER IS<\/span><span id=\"special_hint\">N'T...<\/span>\t\t\t<\/div>\t\t\t<nav role=\"navigation\">\t\t\t\t<ul>\t\t\t\t\t<li><a href=\"#\">WHY?<\/a><\/li>\t\t\t\t\t<li><a href=\"#\">SYNOPSIS<\/a><\/li>\t\t\t\t\t<li><a href=\"#\">STILLS/PHOTOS<\/a><\/li>\t\t\t\t\t<li><a href=\"#\">VIDEOS/CLIPS<\/a><\/li>\t\t\t\t\t<li><a href=\"quotes.html\">QUOTES<\/a><\/li>\t\t\t\t\t<li><a href=\"#\">QUIZ<\/a><\/li>\t\t\t\t<\/ul>\t\t\t<\/nav>\t\t<\/header>\t\t\t\t<div id=\"main\" role=\"main\">\t\t\t<!-- the siderbar -->\t\t\t<aside>\t\t\t\t<section role=\"complementary\">\t\t\t\t\t<h1>UNSUNG HEROES...<\/h1>\t\t\t\t\t<a href=\"#\"><img src=\"image/cableGuy.jpg\" alt=\"CableGuy\"/><\/a>\t\t\t\t\t<a href=\"#\"><img src=\"image/chicago.jpg\" alt=\"Chicago\"/><\/a>\t\t\t\t<\/section>\t\t\t\t<section role=\"complementary\">\t\t\t\t\t<h1>OVERHYPED<br>NONSENSE...<\/h1>\t\t\t\t\t<a href=\"#\"><img src=\"image/goonies.jpg\" alt=\"Goonies\"/><\/a>\t\t\t\t\t<a href=\"#\"><img src=\"image/kingKong.jpg\" alt=\"KingKong\"/><\/a>\t\t\t\t<\/section>\t\t\t<\/aside>\t\t\t<!-- the content -->\t\t\t<div id=\"content\">\t\t\t\t\t<hgroup>\t\t\t\t\t\t<h1>oscar redemption<\/h1>\t\t\t\t\t\t<h2>here's your chance to set the record straight:tell us what year the wrong film got nominated,and which film should have received a nod...<\/h2>\t\t\t\t\t<\/hgroup>\t\t\t\t\t<form action=\"test.html\" method=\"post\" id=\"redemption\">\t\t\t\t\t\t<fieldset>\t\t\t\t\t\t\t<legend>About the offending film(part 1 of 3)<\/legend>\t\t\t\t\t\t\t<div><label for=\"film\">The film in question?<\/label>\t\t\t\t\t\t\t\t<input type=\"text\" name=\"film\" id=\"film\" placeholder=\"e.g. King Kong\" required aria-required=\"true\"/><\/div>\t\t\t\t\t\t\t<div><label for=\"year\">Year Of Crime<\/label><input type=\"number\" name=\"year\" id=\"year\" min=\"1999\" max=\"2015\" required/><\/div>\t\t\t\t\t\t\t<div><label for=\"awardWon\">Award Won<\/label>\t\t\t\t\t\t\t\t<input type=\"text\" name=\"awardWon\" id=\"awardWon\" list=\"awards\">\t\t\t\t\t\t\t\t<datalist id=\"awards\">\t\t\t\t\t\t\t\t\t<select>\t\t\t\t\t\t\t\t\t\t<option value=\"Best Picture\"><\/option>\t\t\t\t\t\t\t\t\t\t<option value=\"Best Director\"><\/option>\t\t\t\t\t\t\t\t\t\t<option value=\"Best Adapted Screenplay\"><\/option>\t\t\t\t\t\t\t\t\t\t<option value=\"Best Original Screenplay\"><\/option>\t\t\t\t\t\t\t\t\t<\/select>\t\t\t\t\t\t\t\t<\/datalist>\t\t\t\t\t\t\t<\/div>\t\t\t\t\t\t\t<div><label for=\"lReason\">Tell us why that's wrong?<\/label><textarea name=\"lReason\" id=\"lReason\"><\/textarea><\/div>\t\t\t\t\t\t\t<div><label for=\"lRate\">How you rate it(1 is woeful, 10 is awesomesauce)<\/label>\t\t\t\t\t\t\t\t<input id=\"lRate\" name=\"lRate\" type=\"range\" min=\"1\" max=\"10\" value=\"5\"/>\t\t\t\t\t\t\t<\/div>\t\t\t\t\t\t<\/fieldset>\t\t\t\t\t\t<fieldset>\t\t\t\t\t\t\t<legend>What should have won?(part 2 of 3)<\/legend>\t\t\t\t\t\t\t<div><label for=\"win_film\">The film that should have won?<\/label>\t\t\t\t\t\t\t<input type=\"text\" name=\"win_film\" id=\"win_film\" placeholder=\"e.g. Cable Guy\" required aria-required=\"true\"/><\/div>\t\t\t\t\t\t\t<div><label for=\"wReason\">Tell us why it should have won?<\/label><textarea name=\"wReason\" id=\"wReason\"><\/textarea><\/div>\t\t\t\t\t\t\t<div><label for=\"wRate\">How you rate it(1 is woeful, 10 is awesomesauce)<\/label><\/div>\t\t\t\t\t\t<\/fieldset>\t\t\t\t\t\t<fieldset>\t\t\t\t\t\t\t<legend>About you?(part 3 of 3)<\/legend>\t\t\t\t\t\t\t<div><label for=\"name\">Your Name<\/label><input type=\"text\" placeholder=\"Dwight Schultz\" name=\"name\" id=\"name\"/><\/div>\t\t\t\t\t\t\t<div><label for=\"phone\">Telephone(so we can berate you if you're wrong)<\/label><input type=\"tel\" name=\"phone\" id=\"phone\" placeholder=\"1-234-567876\"/><\/div>\t\t\t\t\t\t\t<div><label for=\"email\">Your Email address<\/label><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"dwight@gmail.com\" required/><\/div>\t\t\t\t\t\t\t<div><label for=\"webADD\">Your Web address<\/label><input type=\"url\" name=\"webADD\" id=\"webADD\" placeholder=\"http://www.mysite.com\"/><\/div>\t\t\t\t\t\t<\/fieldset>\t\t\t\t\t\t<input type=\"submit\" value=\"submit redemption\"/>\t\t\t\t\t<\/form>\t\t\t\t\t\t\t\t<\/div>\t\t<\/div>\t\t\t\t<!-- the footer -->\t\t<footer role=\"contentinfo\">\t\t\t<div id=\"notation\">NOTE:OUR OPINION IS ABSOLTELY CORRECT.YOU ARE WRONG,EVEN IF YOU THINK YOU ARE RIGHT.THAT'S A FACT.DEAL WITH IT.<\/div>\t\t\t<div id=\"footimg\"><\/div>\t\t<\/footer>\t<\/div><\/body><\/html> 为了区分之前写的那个页面，我重新弄了一个css，form.css： @-webkit-keyframes notice {\t0%{\t\tborder: 2px solid hsla(0, 97%, 53%, 1);\t}\t50%{\t\tborder: 2px solid rgba(210, 254, 61, 1);\t}\t100%{\t\tborder: 2px solid hsla(0, 97%, 53%, 1);\t}}hgroup h1{\tfont-size:3.175em;\tmargin:0px;\tpadding:0px;\ttext-transform:uppercase;\tfont-family:Arial, Helvetica, Verdana, sans-serif;\ttext-shadow:0.05215656em 0.05215656em 0em #dad7d7, 0 1px 0 hsla(0, 0%, 100%, 0.75);}hgroup h2{\tmargin:1.06382978%;\tdisplay:block;\tpadding:0px;\tfont-size:1em;\tfont-family:Arial;\ttext-transform:uppercase;\tcolor:#000000;\tline-height:1.052631579em;}input, textarea, select{\tborder:2px solid #BFBFBF;\tpadding:0.2em;\tfont-size:1.1em;\tline-height:1.2em;\tbackground:#FFFFFF;\tbackground:-webkit-linear-gradient(top, #FFFFFF 0%,#EDEDED 8%, #FFFFFF 100%);\tborder-radius: 4px;\tbox-shadow: 2px 2px 5px hsla(0, 0%, 16.66666667, 0.1);}input:hover, textarea:hover, select:hover{\t-webkit-animation: notice 3s infinite ease-in;}input:required{\tborder: 2px solid rgba(253,8,8,0.39);}input:focus:invalid{\tbackground: url(\"image/cross.png\") no-repeat right;\tpadding-right:3px;}input:focus:valid{\tbackground: url(\"image/tick.png\") no-repeat right;\tpadding-right:3px;}fieldset{\tmargin: 3.18382978%;\tmargin-left:0px;\tmargin-right:0px;\tpadding: 1.06382978%;\tborder: dashed 1px red;\tborder-radius:8px;\toverflow: auto;\tbox-shadow: 2px 2px 5px hsla(0, 0%, 16.666667%, 0.3);}fieldset legend{\tfont-size:1em!important;\tcolor:#555555;\tfont-style:italic;}fieldset div{\toverflow:auto;\tmargin-top:2.6%;}fieldset div textarea{\tfloat:right;\twidth:23%;\theight:60px;\tfont-size:0.8em;}fieldset div input{\tfloat:right;\twidth:23%;}fieldset p label{\tfloat:left;\twidth:73%;\tcolor:black!important;\ttext-transform:none!important;}#content form input[type=\"submit\"]{\tfont-family:Arial, Helvetica, Verdana, sans-serif;\tfont-size:1.15em;\ttext-transform:uppercase;\tbackground-color:#B01C20;\tborder-radius:8px;\tcolor:white;\tpadding:0.8461538%;\tfloat:right;\tbackground: -webkit-linear-gradient(90deg, #B01C20 0%, #F15C60 100%);\tmargin-top:30px;\tbox-shadow:5px 5px 5px hsla(0, 0%, 26.6667%, 0.8);\ttext-shadow:0px 1px black;\tborder:1px solid #BFBFBF;\t-webkit-transition-property: border, color, text-shadow;\t-webkit-transition-duration: 2s, 3s, 3s;\t-webkit-transition-timing-function:ease;\t-webkit-transition-delay:0s;}#content form input[type=\"submit\"]:hover{\tborder: 1px solid #000000;\tcolor:#000000;\ttext-shadow: 0px 1px white;} HTML5添加的表单类型蛮多的，这个表单包括了一些常用类型的表单，大家可以有个参考。","title":"继续学习-HTML5+CSS3之表单搭建"},{"content":"十五个经典算法研究与总结PDF：http://download.csdn.net/detail/ysq5202121/4926192 MulinB按：经典的智能寻路算法，一个老外写的很透彻很清晰，很容易让人理解神秘的A*算法。以下是一个中文翻译版。 A*寻路初探 GameDev.net 作者： Patrick Lester 译者：Panic 2005年3月18日 译者序：很久以前就知道了A*算法，但是从未认真读过相关的文章，也没有看过代码，只是脑子里有个模糊的概念。这次决定从头开始，研究一下这个被人推崇备至的简单方法，作为学习人工智能的开始。 这篇文章非常知名，国内应该有不少人翻译过它，我没有查找，觉得翻译本身也是对自身英文水平的锻炼。经过努力，终于完成了文档，也明白的A*算法的原理。毫无疑问，作者用形象的描述，简洁诙谐的语言由浅入深的讲述了这一神奇的算法，相信每个读过的人都会对此有所认识（如果没有，那就是偶的翻译太差了--b）。 现在是2005年7月19日的版本，应原作者要求，对文中的某些算法细节做了修改。 原文链接：http://www.gamedev.net/reference/articles/article2003.asp  (原链接貌似不可访问，可访问以下链接：http://blog.vckbase.com/panic/archive/2005/03/20/3778.html) 原作者文章链接：http://www.policyalmanac.org/games/aStarTutorial.htm 以下是翻译的正文。 会者不难，A*(念作A星)算法对初学者来说的确有些难度。 这篇文章并不试图对这个话题作权威的陈述。取而代之的是，它只是描述算法的原理，使你可以在进一步的阅读中理解其他相关的资料。 最后，这篇文章没有程序细节。你尽可以用任意的计算机程序语言实现它。如你所愿，我在文章的末尾包含了一个指向例子程序的链接。 压缩包包括C++和Blitz Basic两个语言的版本，如果你只是想看看它的运行效果，里面还包含了可执行文件。 我们正在提高自己。让我们从头开始。。。 序：搜索区域 假设有人想从A点移动到一墙之隔的B点，如下图，绿色的是起点A，红色是终点B，蓝色方块是中间的墙。 [图1] 你首先注意到，搜索区域被我们划分成了方形网格。像这样，简化搜索区域，是寻路的第一步。这一方法把搜索区域简化成了一个二维数组。数组的每一个元素是网格的一个方块，方块被标记为可通过的和不可通过的。路径被描述为从A到B我们经过的方块的集合。一旦路径被找到，我们的人就从一个方格的中心走向另一个，直到到达目的地。 这些中点被称为“节点”。当你阅读其他的寻路资料时，你将经常会看到人们讨论节点。为什么不把他们描述为方格呢？因为有可能你的路径被分割成其他不是方格的结构。他们完全可以是矩形，六角形，或者其他任意形状。节点能够被放置在形状的任意位置－可以在中心，或者沿着边界，或其他什么地方。我们使用这种系统，无论如何，因为它是最简单的。 开始搜索 正如我们处理上图网格的方法，一旦搜索区域被转化为容易处理的节点，下一步就是去引导一次找到最短路径的搜索。在A*寻路算法中，我们通过从点A开始，检查相邻方格的方式，向外扩展直到找到目标。 我们做如下操作开始搜索：    1，从点A开始，并且把它作为待处理点存入一个“开启列表”。开启列表就像一张购物清单。尽管现在列表里只有一个元素，但以后就会多起来。你的路径可能会通过它包含的方格，也可能不会。基本上，这是一个待检查方格的列表。    2，寻找起点周围所有可到达或者可通过的方格，跳过有墙，水，或其他无法通过地形的方格。也把他们加入开启列表。为所有这些方格保存点A作为“父方格”。当我们想描述路径的时候，父方格的资料是十分重要的。后面会解释它的具体用途。    3，从开启列表中删除点A，把它加入到一个“关闭列表”，列表中保存所有不需要再次检查的方格。 在这一点，你应该形成如图的结构。在图中，暗绿色方格是你起始方格的中心。它被用浅蓝色描边，以表示它被加入到关闭列表中了。所有的相邻格现在都在开启列表中，它们被用浅绿色描边。每个方格都有一个灰色指针反指他们的父方格，也就是开始的方格。 [图2] 接着，我们选择开启列表中的临近方格，大致重复前面的过程，如下。但是，哪个方格是我们要选择的呢？是那个F值最低的。 路径评分 选择路径中经过哪个方格的关键是下面这个等式： F = G + H 这里：     * G = 从起点A，沿着产生的路径，移动到网格上指定方格的移动耗费。     * H = 从网格上那个方格移动到终点B的预估移动耗费。这经常被称为启发式的，可能会让你有点迷惑。这样叫的原因是因为它只是个猜测。我们没办法事先知道路径的长度，因为路上可能存在各种障碍(墙，水，等等)。虽然本文只提供了一种计算H的方法，但是你可以在网上找到很多其他的方法。 我们的路径是通过反复遍历开启列表并且选择具有最低F值的方格来生成的。文章将对这个过程做更详细的描述。首先，我们更深入的看看如何计算这个方程。 正如上面所说，G表示沿路径从起点到当前点的移动耗费。在这个例子里，我们令水平或者垂直移动的耗费为10，对角线方向耗费为14。我们取这些值是因为沿对角线的距离是沿水平或垂直移动耗费的的根号2（别怕），或者约1.414倍。为了简化，我们用10和14近似。比例基本正确，同时我们避免了求根运算和小数。这不是只因为我们怕麻烦或者不喜欢数学。使用这样的整数对计算机来说也更快捷。你不就就会发现，如果你不使用这些简化方法，寻路会变得很慢。 既然我们在计算沿特定路径通往某个方格的G值，求值的方法就是取它父节点的G值，然后依照它相对父节点是对角线方向或者直角方向(非对角线)，分别增加14和10。例子中这个方法的需求会变得更多，因为我们从起点方格以外获取了不止一个方格。 H值可以用不同的方法估算。我们这里使用的方法被称为曼哈顿方法，它计算从当前格到目的格之间水平和垂直的方格的数量总和，忽略对角线方向。然后把结果乘以10。这被成为曼哈顿方法是因为它看起来像计算城市中从一个地方到另外一个地方的街区数，在那里你不能沿对角线方向穿过街区。很重要的一点，我们忽略了一切障碍物。这是对剩余距离的一个估算，而非实际值，这也是这一方法被称为启发式的原因。想知道更多？你可以在这里找到方程和额外的注解。 F的值是G和H的和。第一步搜索的结果可以在下面的图表中看到。F,G和H的评分被写在每个方格里。正如在紧挨起始格右侧的方格所表示的，F被打印在左上角，G在左下角，H则在右下角。 [图3] 现在我们来看看这些方格。写字母的方格里，G = 10。这是因为它只在水平方向偏离起始格一个格距。紧邻起始格的上方，下方和左边的方格的G值都等于10。对角线方向的G值是14。 H值通过求解到红色目标格的曼哈顿距离得到，其中只在水平和垂直方向移动，并且忽略中间的墙。用这种方法，起点右侧紧邻的方格离红色方格有3格距离，H值就是30。这块方格上方的方格有4格距离(记住，只能在水平和垂直方向移动)，H值是40。你大致应该知道如何计算其他方格的H值了～。 每个格子的F值，还是简单的由G和H相加得到 继续搜索 为了继续搜索，我们简单的从开启列表中选择F值最低的方格。然后，对选中的方格做如下处理：    4，把它从开启列表中删除，然后添加到关闭列表中。    5，检查所有相邻格子。跳过那些已经在关闭列表中的或者不可通过的(有墙，水的地形，或者其他无法通过的地形)，把他们添加进开启列表，如果他们还不在里面的话。把选中的方格作为新的方格的父节点。    6，如果某个相邻格已经在开启列表里了，检查现在的这条路径是否更好。换句话说，检查如果我们用新的路径到达它的话，G值是否会更低一些。如果不是，那就什么都不做。       另一方面，如果新的G值更低，那就把相邻方格的父节点改为目前选中的方格（在上面的图表中，把箭头的方向改为指向这个方格）。最后，重新计算F和G的值。如果这看起来不够清晰，你可以看下面的图示。 好了，让我们看看它是怎么运作的。我们最初的9格方格中，在起点被切换到关闭列表中后，还剩8格留在开启列表中。这里面，F值最低的那个是起始格右侧紧邻的格子，它的F值是40。因此我们选择这一格作为下一个要处理的方格。在紧随的图中，它被用蓝色突出显示。 [图4] 首先，我们把它从开启列表中取出，放入关闭列表(这就是他被蓝色突出显示的原因)。然后我们检查相邻的格子。哦，右侧的格子是墙，所以我们略过。左侧的格子是起始格。它在关闭列表里，所以我们也跳过它。 其他4格已经在开启列表里了，于是我们检查G值来判定，如果通过这一格到达那里，路径是否更好。我们来看选中格子下面的方格。它的G值是14。如果我们从当前格移动到那里，G值就会等于20(到达当前格的G值是10，移动到上面的格子将使得G值增加10)。因为G值20大于14，所以这不是更好的路径。如果你看图，就能理解。与其通过先水平移动一格，再垂直移动一格，还不如直接沿对角线方向移动一格来得简单。 当我们对已经存在于开启列表中的4个临近格重复这一过程的时候，我们发现没有一条路径可以通过使用当前格子得到改善，所以我们不做任何改变。既然我们已经检查过了所有邻近格，那么就可以移动到下一格了。 于是我们检索开启列表，现在里面只有7格了，我们仍然选择其中F值最低的。有趣的是，这次，有两个格子的数值都是54。我们如何选择？这并不麻烦。从速度上考虑，选择最后添加进列表的格子会更快捷。这种导致了寻路过程中，在靠近目标的时候，优先使用新找到的格子的偏好。但这无关紧要。（对相同数值的不同对待，导致不同版本的A*算法找到等长的不同路径。） 那我们就选择起始格右下方的格子，如图。 [图5] 这次，当我们检查相邻格的时候，发现右侧是墙，于是略过。上面一格也被略过。我们也略过了墙下面的格子。为什么呢？因为你不能在不穿越墙角的情况下直接到达那个格子。你的确需要先往下走然后到达那一格，按部就班的走过那个拐角。(注解：穿越拐角的规则是可选的。它取决于你的节点是如何放置的。) 这样一来，就剩下了其他5格。当前格下面的另外两个格子目前不在开启列表中，于是我们添加他们，并且把当前格指定为他们的父节点。其余3格，两个已经在关闭列表中（起始格，和当前格上方的格子，在表格中蓝色高亮显示),于是我们略过它们。最后一格，在当前格的左侧，将被检查通过这条路径，G值是否更低。不必担心，我们已经准备好检查开启列表中的下一格了。 我们重复这个过程，直到目标格被添加进关闭列表(注解)，就如在下面的图中所看到的。 [图6] 注意，起始格下方格子的父节点已经和前面不同的。之前它的G值是28，并且指向右上方的格子。现在它的G值是20，指向它上方的格子。这在寻路过程中的某处发生，当应用新路径时，G值经过检查变得低了－于是父节点被重新指定，G和F值被重新计算。尽管这一变化在这个例子中并不重要，在很多场合，这种变化会导致寻路结果的巨大变化。 那么，我们怎么确定这条路径呢？很简单，从红色的目标格开始，按箭头的方向朝父节点移动。这最终会引导你回到起始格，这就是你的路径！看起来应该像图中那样。从起始格A移动到目标格B只是简单的从每个格子（节点）的中点沿路径移动到下一个，直到你到达目标点。就这么简单。 [图7] A*方法总结 好，现在你已经看完了整个说明，让我们把每一步的操作写在一起：    1，把起始格添加到开启列表。    2，重复如下的工作：       a) 寻找开启列表中F值最低的格子。我们称它为当前格。       b) 把它切换到关闭列表。       c) 对相邻的8格中的每一个？           * 如果它不可通过或者已经在关闭列表中，略过它。反之如下。           * 如果它不在开启列表中，把它添加进去。把当前格作为这一格的父节点。记录这一格的F,G,和H值。           * 如果它已经在开启列表中，用G值为参考检查新的路径是否更好。更低的G值意味着更好的路径。如果是这样，就把这一格的父节点改成当前格，并且重新计算这一格的G和F值。如果你保持你的开启列表按F值排序，改变之后你可能需要重新对开启列表排序。       d) 停止，当你           * 把目标格添加进了关闭列表(注解)，这时候路径被找到，或者           * 没有找到目标格，开启列表已经空了。这时候，路径不存在。    3.保存路径。从目标格开始，沿着每一格的父节点移动直到回到起始格。这就是你的路径。 (:在这篇文章的较早版本中，建议的做法是当目标格（或节点）被加入到开启列表，而不是关闭列表的时候停止寻路。这么做会更迅速，而且几乎总是能找到最短的路径，但不是绝对的。当从倒数第二个节点到最后一个（目标节点）之间的移动耗费悬殊很大时－例如刚好有一条河穿越两个节点中间，这时候旧的做法和新的做法就会有显著不同。) 题外话 离题一下，见谅，值得一提的是，当你在网上或者相关论坛看到关于A*的不同的探讨，你有时会看到一些被当作A*算法的代码而实际上他们不是。要使用A*，你必须包含上面讨论的所有元素－－特定的开启和关闭列表，用F,G和H作路径评价。有很多其他的寻路算法，但他们并不是A*，A*被认为是他们当中最好的。Bryan Stout在这篇文章后面的参考文档中论述了一部分，包括他们的一些优点和缺点。有时候特定的场合其他算法会更好，但你必须很明确你在作什么。好了，够多的了。回到文章。 实现的注解 现在你已经明白了基本原理，写你的程序的时候还得考虑一些额外的东西。下面这些材料中的一些引用了我用C++和Blitz Basic写的程序，但对其他语言写的代码同样有效。 1.其他单位(避免碰撞)：如果你恰好看了我的例子代码，你会发现它完全忽略了其他单位。我的寻路者事实上可以相互穿越。取决于具体的游戏，这也许可以，也许不行。如果你打算考虑其他单位，希望他们能互相绕过，我建议你只考虑静止或那些在计算路径时临近当前单位的单位，把它们当前的位置标志为可通过的。对于临近的运动着的单位，你可以通过惩罚它们各自路径上的节点，来鼓励这些寻路者找到不同的路径(更多的描述见#2). 如果你选择了把其他正在移动并且远离当前寻路单位的那些单位考虑在内，你将需要实现一种方法及时预测在何时何地碰撞可能会发生，以便恰当的避免。否则你极有可能得到一条怪异的路径，单位突然转弯试图避免和一个已经不存在的单位发生碰撞。 当然，你也需要写一些碰撞检测的代码，因为无论计算的时候路径有多完美，它也会因时间而改变。当碰撞发生时，一个单位必须寻找一条新路径，或者，如果另一个单位正在移动并且不是正面碰撞，在继续沿当前路径移动之前，等待那个单位离开。 这些提示大概可以让你开始了。如果你想了解更多，这里有些你可能会觉得有用的链接：     * 自治角色的指导行为：Craig Reynold在指导能力上的工作和寻路有些不同，但是它可以和寻路整合从而形成更完整的移动和碰撞检测系统。     * 电脑游戏中的长短距指导：指导和寻路方面著作的一个有趣的考察。这是一个pdf文件。     * 协同单位移动：一个两部分系列文章的第一篇，内容是关于编队和基于分组的移动，作者是帝国时代(Age of Empires)的设计者Dave Pottinger.     * 实现协同移动：Dave Pottinger文章系列的第二篇。 2. 不同的地形损耗：在这个教程和我附带的程序中，地形只能是二者之－可通过的和不可通过的。但是你可能会需要一些可通过的地形，但是移动耗费更高－沼泽，小山，地牢的楼梯，等等。这些都是可通过但是比平坦的开阔地移动耗费更高的地形。类似的，道路应该比自然地形移动耗费更低。 这个问题很容易解决，只要在计算任何地形的G值的时候增加地形损耗就可以了。简单的给它增加一些额外的损耗就可以了。由于A*算法已经按照寻找最低耗费的路径来设计，所以很容易处理这种情况。在我提供的这个简单的例子里，地形只有可通过和不可通过两种，A*会找到最短，最直接的路径。但是在地形耗费不同的场合，耗费最低的路径也许会包含很长的移动距离－就像沿着路绕过沼泽而不是直接穿过它。 一种需额外考虑的情况是被专家称之为“influence mapping”的东西（暂译为影响映射图）。就像上面描述的不同地形耗费一样，你可以创建一格额外的分数系统，并把它应用到寻路的AI中。假设你有一张有大批寻路者的地图，他们都要通过某个山区。每次电脑生成一条通过那个关口的路径，它就会变得更拥挤。如果你愿意，你可以创建一个影响映射图对有大量屠杀事件的格子施以不利影响。这会让计算机更倾向安全些的路径，并且帮助它避免总是仅仅因为路径短(但可能更危险)而持续把队伍和寻路者送到某一特定路径。 另一个可能得应用是惩罚周围移动单位路径上得节点。A*的一个底限是，当一群单位同时试图寻路到接近的地点，这通常会导致路径交叠。以为一个或者多个单位都试图走相同或者近似的路径到达目的地。对其他单位已经“认领”了的节点增加一些惩罚会有助于你在一定程度上分离路径，降低碰撞的可能性。然而，如果有必要，不要把那些节点看成不可通过的，因为你仍然希望多个单位能够一字纵队通过拥挤的出口。同时，你只能惩罚那些临近单位的路径，而不是所有路径，否则你就会得到奇怪的躲避行为例如单位躲避路径上其他已经不在那里的单位。 还有，你应该只惩罚路径当前节点和随后的节点，而不应处理已经走过并甩在身后的节点。 3. 处理未知区域：你是否玩过这样的PC游戏，电脑总是知道哪条路是正确的，即使它还没有侦察过地图？对于游戏，寻路太好会显得不真实。幸运的是，这是一格可以轻易解决的问题。 答案就是为每个不同的玩家和电脑（每个玩家，而不是每个单位－－那样的话会耗费大量的内存）创建一个独立的“knownWalkability”数组，每个数组包含玩家已经探索过的区域，以及被当作可通过区域的其他区域，直到被证实。用这种方法，单位会在路的死端徘徊并且导致错误的选择直到他们在周围找到路。一旦地图被探索了，寻路就像往常那样进行。 4. 平滑路径：尽管A*提供了最短，最低代价的路径，它无法自动提供看起来平滑的路径。看一下我们的例子最终形成的路径（在图7）。最初的一步是起始格的右下方，如果这一步是直接往下的话，路径不是会更平滑一些吗？ 有几种方法来解决这个问题。当计算路径的时候可以对改变方向的格子施加不利影响，对G值增加额外的数值。也可以换种方法，你可以在路径计算完之后沿着它跑一遍，找那些用相邻格替换会让路径看起来更平滑的地方。想知道完整的结果，查看Toward More Realistic Pathfinding，一篇(免费，但是需要注册)Marco Pinter发表在Gamasutra.com的文章 5. 非方形搜索区域：在我们的例子里，我们使用简单的2D方形图。你可以不使用这种方式。你可以使用不规则形状的区域。想想冒险棋的游戏，和游戏中那些国家。你可以设计一个像那样的寻路关卡。为此，你可能需要建立一个国家相邻关系的表格，和从一个国家移动到另一个的G值。你也需要估算H值的方法。其他的事情就和例子中完全一样了。当你需要向开启列表中添加新元素的时候，不需使用相邻的格子，取而代之的是从表格中寻找相邻的国家。 类似的，你可以为一张确定的地形图创建路径点系统，路径点一般是路上，或者地牢通道的转折点。作为游戏设计者，你可以预设这些路径点。两个路径点被认为是相邻的如果他们之间的直线上没有障碍的话。在冒险棋的例子里，你可以保存这些相邻信息在某个表格里，当需要在开启列表中添加元素的时候使用它。然后你就可以记录关联的G值（可能使用两点间的直线距离），H值（可以使用到目标点的直线距离），其他都按原先的做就可以了。 Amit Patel 写了其他方法的摘要。另一个在非方形区域搜索RPG地图的例子，查看我的文章Two-Tiered A* Pathfinding。(译者注：译文：  A*分层寻路) 6. 一些速度方面的提示：当你开发你自己的A*程序，或者改写我的，你会发现寻路占据了大量的CPU时间，尤其是在大地图上有大量对象在寻路的时候。如果你阅读过网上的其他材料，你会明白，即使是开发了星际争霸或帝国时代的专家，这也无可奈何。如果你觉得寻路太过缓慢，这里有一些建议也许有效：     * 使用更小的地图或者更少的寻路者。     * 不要同时给多个对象寻路。取而代之的是把他们加入一个队列，把寻路过程分散在几个游戏周期中。如果你的游戏以40周期每秒的速度运行，没人能察觉。但是当大量寻路者计算自己路径的时候,他们会发觉游戏速度突然变慢。     * 尽量使用更大的地图网格。这降低了寻路中搜索的总网格数。如果你有志气，你可以设计两个或者更多寻路系统以便使用在不同场合，取决于路径的长度。这也正是专业人士的做法，用大的区域计算长的路径，然后在接近目标的时候切换到使用小格子/区域的精细寻路。如果你对这个观点感兴趣，查阅我的文章Two-Tiered A* Pathfinding。(译者注：译文 :A*分层寻路)     * 使用路径点系统计算长路径，或者预先计算好路径并加入到游戏中。          * 预处理你的地图，表明地图中哪些区域是不可到达的。我把这些区域称作“孤岛”。事实上，他们可以是岛屿或其他被墙壁包围等无法到达的任意区域。A*的下限是，当你告诉它要寻找通往那些区域的路径时，它会搜索整个地图，直到所有可到达的方格/节点都被通过开启列表和关闭列表的计算。这会浪费大量的CPU时间。可以通过预先确定这些区域（比如通过flood-fill或类似的方法)来避免这种情况的发生,用某些种类的数组记录这些信息，在开始寻路前检查它。          * 在一个拥挤的类似迷宫的场合，把不能连通的节点看作死端。这些区域可以在地图编辑器中预先手动指定，或者如果你有雄心壮志，开发一个自动识别这些区域的算法。给定死端的所有节点可以被赋予一个唯一的标志数字。然后你就可以在寻路过程中安全的忽略所有死端，只有当起点或者终点恰好在死端的某个节点的时候才需要考虑它们。 7. 维护开启列表：这是A*寻路算法最重要的组成部分。每次你访问开启列表，你都需要寻找F值最低的方格。有几种不同的方法实现这一点。你可以把路径元素随意保存，当需要寻找F值最低的元素的时候，遍历开启列表。这很简单，但是太慢了，尤其是对长路径来说。这可以通过维护一格排好序的列表来改善，每次寻找F值最低的方格只需要选取列表的首元素。当我自己实现的时候，这种方法是我的首选。 在小地图。这种方法工作的很好，但它并不是最快的解决方案。更苛求速度的A*程序员使用叫做二叉堆的方法，这也是我在代码中使用的方法。凭我的经验，这种方法在大多数场合会快2～3倍，并且在长路经上速度呈几何级数提升(10倍以上速度)。如果你想了解更多关于二叉堆的内容，查阅我的文章，Using Binary Heaps in A* Pathfinding。(译者注：译文：在A*寻路中使用二叉堆) 另一个可能的瓶颈是你在多次寻路之间清除和保存你的数据结构的方法。我个人更倾向把所有东西都存储在数组里面。虽然节点可以以面向对象的风格被动态的产生，记录和保存，我发现创建和删除对象所增加的大量时间，以及多余的管理层次减慢的整个过程的速度。但是，如果你使用数组，你需要在调用之间清理数据。这中情形你想做的最后一件事就是在寻路调用之后花点时间把一切归零，尤其是你的地图很大的时候。 我通过使用一个叫做whichList(x,y)的二维数组避免这种开销，数组的每个元素表明了节点在开启列表还是在关闭列表中。尝试寻路之后，我没有清零这个数组。取而代之的是，我在新的寻路中重置onClosedList和onOpenList的数值，每次寻路两个都+5或者类似其他数值。这种方法，算法可以安全的跳过前面寻路留下的脏数据。我还在数组中储存了诸如F,G和H的值。这样一来，我只需简单的重写任何已经存在的值而无需被清除数组的操作干扰。将数据存储在多维数组中需要更多内存，所以这里需要权衡利弊。最后，你应该使用你最得心应手的方法。 8. Dijkstra的算法：尽管A*被认为是通常最好的寻路算法(看前面的“题外话”),还是有一种另外的算法有它的可取之处-Dijkstra算法。Dijkstra算法和A*本质是相同的，只有一点不同，就是Dijkstra算法没有启发式(H值总是0)。由于没有启发式，它在各个方向上平均搜索。正如你所预料，由于Dijkstra算法在找到目标前通常会探索更大的区域，所以一般会比A*更慢一些。 那么为什么要使用这种算法呢？因为有时候我们并不知道目标的位置。比如说你有一个资源采集单位，需要获取某种类型的资源若干。它可能知道几个资源区域，但是它想去最近的那个。这种情况，Dijkstra算法就比A*更适合，因为我们不知道哪个更近。用A*，我们唯一的选择是依次对每个目标许路并计算距离，然后选择最近的路径。我们寻找的目标可能会有不计其数的位置，我们只想找其中最近的，而我们并不知道它在哪里，或者不知道哪个是最近的。 进一步的阅读 好，现在你对一些进一步的观点有了初步认识。这时，我建议你研究我的源代码。包里面包含两个版本，一个是用C++写的，另一个用Blitz Basic。顺便说一句，两个版本都注释详尽，容易阅读，这里是链接。     * 例子代码： A* Pathfinder (2D) Version 1.9 如果你既不用C++也不用Blitz Basic,在C++版本里有两个小的可执行文件。Blitz Basic可以在从Blitz Basic网站免费下载的Blitz Basic 3D(不是Blitz Plus)演示版上运行。Ben O'Neill提供一个联机演示可以在这里找到。 你也该看看以下的网页。读了这篇教程后，他们应该变得容易理解多了。     * Amit的 A* 页面:这是由Amit Patel制作，被广泛引用的页面，如果你没有事先读这篇文章，可能会有点难以理解。值得一看。尤其要看Amit关于这个问题的自己的看法。     * Smart Moves:智能寻路：Bryan Stout发表在Gamasutra.com的这篇文章需要注册才能阅读。注册是免费的而且比起这篇文章和网站的其他资源，是非常物有所值的。Bryan用Delphi写的程序帮助我学习A*，也是我的A*代码的灵感之源。它还描述了A*的几种变化。     * 地形分析：这是一格高阶，但是有趣的话题，Dave Pottinge撰写，Ensemble Studios的专家。这家伙参与了帝国时代和君王时代的开发。别指望看懂这里所有的东西，但是这是篇有趣的文章也许会让你产生自己的想法。它包含一些对mip-mapping，influence mapping以及其他一些高级AI/寻路观点。对\"flood filling\"的讨论使我有了我自己的“死端”和“孤岛”的代码的灵感，这些包含在我Blitz版本的代码中。 其他一些值得一看的网站：     * aiGuru: Pathfinding     * Game AI Resource: Pathfinding     * GameDev.net: Pathfinding 我同样高度推荐下面这几本书, 里面有很多关于寻路和其他AI话题的文章。 它们也附带了实例代码的CD。这些书我都买了。另外，如果你通过下面的链接购买了它们，我会从Amazon得到几个美分。:)   好了，这就是全部。如果你刚好写一个运用这些观点的程序，我想拜读一下。你可以这样联系我： 现在，好运！ 译者参考文献：  在A*寻路中使用二叉堆 A*分层寻路","title":"[置顶] A星(A*, A Star)算法详解"},{"content":"前言 A标签是html中常用的标签，它与button按钮是实现页面跳转的两种最常用的方式，经常在开发中我们更喜欢使用A标签，它们两者可以相互替换，但他们在执行js脚本时有着细微的区别。 使用A标签执行JS脚本的几种方式 1、href=\"javascript:js_method();\" 这是我们最常用的方法，但是这种方法在传递this等参数的时候很容易出问题，而且javascript:协议作为a的href属性的时候不仅会导致不必要的触发window.onbeforeunload事件，在IE里面更会使gif动画图片停止播放。W3C标准不推荐在href里面执行javascript语句。 2、href=\"javascript:void(0);\" onclick=\"js_method()\" 这种方法是很多网站最常用的方法，也是最周全的方法，onclick方法负责执行js函数，而void是一个操作符，void(0)返回undefined，地址不发生跳转。而且这种方法不会像第一种方法一样直接将js方法暴露在浏览器的状态栏，推荐使用此方法。 3、href=\"javascript:;\" onclick=\"js_method()\" 这种方法跟跟第2种类似，区别只是执行了一条空的js代码。Href与onclick区别是每个href里的javascript方法都用try、catch包围。 4、href=\"#\" onclick=\"js_method()\" 这种方法也是网上很常见的代码，#是标签内置的一个方法，代表top的作用。所以用这种方法点击后网页后返回到页面的最顶端。 5、href=\"#\" onclick=\"js_method();return false;\" 这种方法点击执行了js函数后return false，页面不发生跳转，执行后还是在页面的当前位置。 综合上述，在a中调用js函数最适当的方法推荐使用后几种，注意第四种会返回页面最顶端，当有这种需求时可以使用。","title":"A标签执行JS脚本"},{"content":"context root确定了Tomcat将那些URL请求转发到Web应用. 如果应用的context root 设置为 myapp，除非存在更为明确context root的 Web应用，那么所有 /myapp or /myapp/* 的请求将被转发到你的应用进行处理，. 如果第二个应用context root设置为 myapp/help, 那么 /myapp/help/help.jsp 的请求将转发到第二个应用进行处理，而不是第一个应用。 这个关系同样适用于被称为root context / 的context root . 当应用被指定为root context, 它将会响应没有被明确context root处理的所有请求. 应用的context root 取决于应用的部署方式. 如果Web应用作为 EAR 包的一部分进行部署, 那么context root 将通过 EAR包里的application.xml 文件中web模块 context-root元素设置. 在下面的例子里, crimeportal.war应用的context root 设置为 crimeportal. <?xml version=”1.0″ encoding=”UTF-8″?> <application> <display-name>Crime Portal<\/display-name> <module> <web> <web-uri>crimeportal.war<\/web-uri> <context-root>/crimeportal<\/context-root> <\/web> <\/module> <module> <ejb>CrimePortalBeans.jar<\/ejb> <\/module> <\/application> 对于部署在 EAR 文件以外的Web应用, 可以通过两种方式指定 context root. 比如我们要把context root从crimeportal 改为launder 。第一种方法就是修改application.xml ，把<context-root>/crimeportal<\/context-root> 改为<context-root>/launder<\/context-root> 第二种方式是注释上面的那段<context-root>/crimeportal<\/context-root>，在 WEB-INF/jboss-web.xml 文件中指定. <jboss-web> <context-root>launder<\/context-root> <\/jboss-web> 如果两个文件中都进行的指定，会以application.xml的为准。如果没有指定 context root , 将使用 WAR 文件的文件名作为context root. 对于 crimeportal.war, context root 将被缺省设置为 crimeportal. 唯一的例外是特殊的名称 ROOT. 为了部署 root context的Web应用, 只需要将其命名为 ROOT.war，但是JBoss 已经在 jbossweb-tomcat55.sar 目录中包含了ROOT.war. 因此你需要将JBoss自带的ROOT.war 删除或者改名. 采用context root 作为WAR文件的名称是一个非常好的实践，这不仅减少了管理的配置设置数量，而且将会使Web应用的用途更加明确，从而提高了可维护性。.","title":"jboss设置web应用的context root"},{"content":"    我在用struts-json时，感觉最关键是理解这两个的区别，其实从字面上就能区别开来，关键你要去注意到： 废话不多说，区别在于JSONObject是一个{}包裹起来的一个对象(Object)，而JSONArray则是[]包裹起来的一个数组(Array)，知道这点区别，相信在您以后应用Struts-json的时候，一定不会出现前台得到的数据不能显示这样的问题了，因为通常这样的问题都是因为json数据格式不正确引起的，所以只要你知道前台要什么样的数据，然后再知道JSONObject与JSONArray的区别，一定会顺利解决你的问题。     希望对你有帮助!谢谢！","title":"JSONObject与JSONArray区别"},{"content":"通过JS得到当前焦点的坐标 如下是得到当前焦点的坐标： <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\"/><meta name=\"auther\" content=\"fq\" /><title>获取鼠标坐标<\/title><\/head><body><script type=\"text/javascript\">function mousePosition(ev){     if(ev.pageX || ev.pageY){      return {x:ev.pageX, y:ev.pageY};      }      return {       x:ev.clientX + document.body.scrollLeft - document.body.clientLeft,       y:ev.clientY + document.body.scrollTop  - document.body.clientTop       }; }function mouseMove(ev){    ev = ev || window.event;    var mousePos = mousePosition(ev);    document.getElementById('xxx').value = mousePos.x;  document.getElementById('yyy').value = mousePos.y;}document.onmousemove = mouseMove;<\/script>X:<input id=\"xxx\" type=\"text\" />  Y:<input id=\"yyy\" type=\"text\" /><\/body><\/html>","title":"JS得到当前鼠标的坐标"},{"content":"组件映射 l       组件映射   组件类是值类型的，它没有对象标识符属性，在数据库中没有对应的表，它只隶属于另一个持久化类的实例。     把组件类作为持久化类的单个属性来使用   把组件类作为持久化类的集合属性来使用   l       把组件类作为持久化类的单个属性来使用 public class  Address{ … }   public class Customer{   private Long id;   …..   private Address homeAddress;   private Address deliverAddress;  ….} <componet name=“homeAddress ”               class=“com.qiujy.domain.Address”>  <property name=“province”  column=“home_province”/>   ……  <\/componet>  <componet name=“deliverAddress ”               class=“com.qiujy.domain.Address”>  <property name=“province”  column=“deliver_province”/>   ……  <\/componet> l       把组件类作为持久化类的集合属性来使用 public class Photo{….}   public class Album{   private Long id;   private String title;   ….   private List<Photo> photos;   …}   <bag name=“photos” table=“photo”>   <key column=“album_id” not-null=“true”/>   <composite-element class=“com.qiujy.domain.Photo”>     <property name=“name”/>     ….    <\/composite-element> <\/bag> 组件映射(User-Name) 关联的属性是个复杂类型的持久化类，但不是实体即：数据库中没有表与该属性对应，但该类的属性要之久保存的。 <component name=”name” class=”com.test.hibernate.domain.Name”>               <property name=”initial”/>               <property name=”first”/>               <property name=”last”/> <\/component> 当组件的属性不能和表中的字段简单对应的时候可以选择实现： org.hibernate.usertype. UserType或 org.hibernate.usertype. CompositeUserType  ","title":"Java乔晓松-Hibernate组件映射"},{"content":"集合映射：set    list  bag  map <set>元素：可以映射java.util.Set接口的属性，元素没有顺序且不允许重复。   <list>元素：可以映射java.util.List接口的属性，有顺序，需要在集合属性对应的表中用一个额外的索引保存每个元素的位置。   <bag> <idbag>元素：可以映射java.util.Collection接口的属性，元素可重复，但不保存顺序。   <map>元素：可以映射java.util.Map接口的属性，元素以键/值对的形式保存，也是无序的。   <primitive-array> <array>:可以映射数组元素。 <set>元素 private Set<String> hobbies;   <set name=“hobbies” table=“student_hobby”>   <key column=“student_id”/>  <element type=“string” column=“hobby_name” not-null=“true”/> <\/set> <list>元素 private List<String> hobbies;   <list name=“hobbies” table=“student_hobby”>   <key column=“student_id”/>  <list-index column=“posistion”/>  <element type=“string” column=“hobby_name” not-null=“true”/> <\/list> <bag>元素 private Collection<String> hobbies;   <bag name=“hobbies” table=“student_hobby”>   <key column=“student_id”/>   <element type=“string” column=“hobby_name” not-null=“true”/> <\/bag>   <map>元素 private Map<Long String> hobbies;   <map name=“hobbies” table=“student_hobby”>    <key column=“student_id”>    <map-key column=“hobby_id” type=“long”/>    <element type=“string” column=“hobby_name” not-null=“true”/> <\/map> 集合映射 集合映射(set,list, array,bag, map) <set name=”employees” >               <keycolumn=”depart_id”/>               <one-to-manyclass=”Employee”/>               <!--<element type=\"string\" column=\"name\"/> -->               <!--                      <composite-elementclass=”YourClass”>                             <propertyname=”prop1”/>                             <propertyname=”prop2”/>                      <\/composite>               --> <\/set> 集合映射(set,list, array,bag, map) <list name=”employees” >               <keycolumn=”depart_id”/>               <!—表中有单独的整型列表示list-index à               <list-indexcolumn=”order_column”/>               <one-to-manyclass=”Employee”/> <\/list> <array name=”employees” >               <keycolumn=”depart_id”/>               <!—表中有单独的整型列表示list-index                <list-indexcolumn=”order_column”/>               <one-to-manyclass=”Employee”/> <\/array>   集合映射(set,list, array,bag, map) <bag name=\"employees \"order-by=\"id desc\">               <keycolumn=”depart_id”/>                                  <one-to-manyclass=”Employee”/> <\/bag> <map name=\"employees \">               <keycolumn=”depart_id”/>               <map-keytype=\"string\" column=\"name\"/>               <one-to-manyclass=”Employee”/> <\/map> 集合映射(set,list, array,bag, map) 这些集合类都是Hibernate实现的类和JAVA中的集合类不完全一样，set,list,map分别和JAVA中的Set,List,Map接口对应，bag映射成JAVA的List；这些集合的使用和JAVA集合中对应的接口基本一致；在JAVA的实体类中集合只能定义成接口不能定义成具体类， 因为集合会在运行时被替换成Hibernate的实现。 集合的简单使用原则：大部分情况下用set，需要保证集合中的顺序用list，想用java.util.List又不需要保证顺序用bag。 cascade和inverse (Employee – Department) Casade用来说明当对主对象进行某种操作时是否对其关联的从对象也作类似的操作，常用的cascade:        none,all,save-update,delete, lock,refresh,evict,replicate,persist,        merge,delete-orphan(one-to-many)。一般对many-to-one,many-to-many不设置级联，在<one-to-one>和<one-to-many>中设置级联。 inverse表“是否放弃维护关联关系”(在Java里两个对象产生关联时，对数据库表的影响)，在one-to-many和many-to-many的集合定义中使用，inverse=”true”表示该对象不维护关联关系；该属性的值一般在使用有序集合时设置成false（注意hibernate的缺省值是false）。        one-to-many维护关联关系就是更新外键。many-to-many维护关联关系就是在中间表增减记录。        注: 配置成one-to-one的对象不维护关联关系    ","title":"Java乔晓松-Hibernate集合映射"},{"content":"<html> <head> <title>测试<\/title> <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"> <script type=\"text/javascript\" src=\"jquery-1.4.2.min.js\"  charset=\"utf-8\"><\/script> <script> function shijingtan(){ alert('使劲弹'); } jQuery(document, '#ifshijin').ready(function(){ jQuery(\"#ifshijin\").contents().find(\"body\").attr(\"onclick\", \"parent.shijingtan()\"); }); <\/script> <\/head> <body> <span> <iframe id=\"ifshijin\" src=\"1.html\" height=\"200px\" width=\"300px\"><\/iframe> <\/span> <\/body> <\/html>","title":"iframe加事件"},{"content":"l       继承映射 对象模型(Java类结构)   一个类继承体系一张表(subclass)(映射文件) <class name=\"Employee\" table=\"employee\" discriminator-value=\"0\">               <id name=\"id\">                      <generator class=\"native\"/>               <\/id>               <discriminator column=\"type\" type=\"int\"/>               <property name=\"name\"/>               <many-to-one name=”depart” column=”depart_id”/>               <subclass name=\"Skiller\" discriminator-value=\"1\">                      <property name=”skill”/>               <\/subclass>               <subclass name=\"Sales\" discriminator-value=\"2\">                      <property name=\"sell\"/>               <\/subclass> <\/class> 每个子类一张表(joined-subclass) (映射文件) <class name=\"Employee\" table=\"employee\">               <id name=\"id\">                      <generator class=\"native\"/>               <\/id>               <property name=\"name\"/>               <joined-subclass name=\"Skiller\" table=\"skiller\">                      <key column=\"employee_id\"/>                      <property name=\"skill\"/> <\/joined-subclass> <joined-subclass name=\"Sales\" table=\"sales\">        <key column=\"employee_id\"/>        <property name=\"sell\"/> <\/joined-subclass> <\/class> 混合使用“一个类继承体系一张表”和“每个子类一张表” (映射文件) <class name=\"Employee\" table=\"employee\">               <id name=\"id\">                      <generator class=\"native\"/>               <\/id>               <discriminator column=\"type\"/>               <property name=\"name\"/>               <subclass name=\"Skiller\">                      <property name=\"net\"/>               <\/subclass>               <subclass name=”Sales”\">                      <join table=\"sales\">                             <key column=\"employee_id\"/>                             <property name=\"sell\"/>                      <\/join>               <\/subclass> <\/class> 每个具体类一张表(union-subclass) (映射文件) <class name=\"Employee\" abstract=\"true\">               <id name=\"id\">                      <generator class=\"hilo\"/>               <\/id>               <property name=\"name\"/>               <union-subclass name=\"Skiller\" table=\"skiller\">                      <property name=\"skill\"/>               <\/union-subclass>               <union-subclass name=\"Sales\" table=\"sales\">                      <property name=\"sell\"/>               <\/union-subclass>                 <\/class> 主健不能是identity类型，如果父类是abstract=”true”就不会有表与之对应。 隐式多态，映射文件没有联系，限制比较多很少使用。  ","title":"Java乔晓松-Hibernate继承映射"},{"content":"文章来自LearnShare，转载请注明。 本文是【HUI】Tooltip(提示组件) 系列文章之一，请关注本系列的 更新。 上一篇文章中讲到了Tooltip的HTML 结构优化版本，本文中，我们添加几行样式，让Tooltip响应鼠标的hover效果。 引用 W3school CSS:hover： :hover 伪类在鼠标移到元素上时向此元素添加特殊的样式。 W3school 的示例是对 a 元素应用的 :hover 伪类，用于指定 鼠标指向的超链接 的样式。其实所有HTML元素都可以应用该伪类，用来指定鼠标指向时的样式。 Tooltip的基本形式是： 默认状态下，Tooltip是不显示的； 当鼠标指向父元素，Tooltip显示出来； 当鼠标离开父元素，Tooltip隐藏起来。 下面，基于上一篇文章中优化过的Tooltip结构，我们来修改样式： 首先，Tooltip默认不显示： .hui-tooltip span{\tdisplay:none;}然后，当鼠标指向父元素，将Tooltip显示出来： .hui-tooltip:hover span{\tdisplay:inline;}OK，就这么简单，查看效果。 这样，Tooltip组件的基本效果就完整了。下一篇文章中，我们将丰富一下Tooltip气泡，给他添加尾巴、边框、圆角和阴影等效果。 文章来自LearnShare，转载请注明。","title":"【HUI】Tooltip(提示组件)——3.Tooltip in CSS2(demo完整效果)"},{"content":"文章来自LearnShare，转载请注明。 本文是【HUI】Tooltip(提示组件) 系列文章之一，请关注本系列的 更新。 末日前的 【HUI】Tooltip(提示组件)[demo0] 这篇文章讲到了使用css2制作Tooltip的提示气泡，气泡使用了如下的HTML结构： <div class=\"tooltip\">\t<div class=\"tt-c\">content<\/div>\t<div class=\"tt-a\"><\/div><\/div>这段代码对于Tooltip组件来说是过于复杂的，所以我们在本文中研究另一种优化的结构。 在实际的应用中，我们希望Tooltip组件足够简洁，可以很方便的插入到HTML中，不改变或尽量少地改变原内容。基于这种需求，可以给出以下两个解决步骤： Step1. 简化Tooltip组件的HTML结构； Step2. 将Tooltip组件的消息记录到原HTML Tag中，通过JavaScript解析并插入Tooltip组件中。 （本文和下一篇文章将从 步骤1 展开，步骤2 将在系列文章的第x篇中展现。） 本篇文章的目的是：找到一种简化Tooltip组件HTML结构的方法。 我们首先来分析一下Tooltip组件的各个要素： 1.提示气泡 用来展现Tooltip消息（气泡的尾巴——三角形，是可选的结构）； 2.提示消息 Tooltip组件需要呈现出来的内容（文本为主，可以是任何内容）； 3.父元素 需要呈现Tooltip的HTML元素； 由此可简化出如下的HTML结构： <p class=\"hui-tooltip\">\tparent tag's content\t<span>tip text<\/span><\/p>其中， <p class=\"hui-tooltip\">...<\/p> 是需要呈现Tooltip的父元素，class 属性是给CSS解析使用的； parent tag's content 是父元素的内容。通常的情况是：当鼠标指向该文字的时候，Tooltip就会呈现出来； <span>...<\/span> 是Tooltip组件的气泡； tip text 是Tooltip的提示文本。 应用了样式之后，效果如下（限于文章长度，代码省略）： Tooltip气泡显示在了父元素文本之后，我们需要对它进行重新定位。 首先，设置父元素为相对定位，使其子元素（包括Tooltip）相对于父元素的位置定位： .hui-tooltip{\tposition:relative;}然后，设置Tooltip为绝对定位，使其脱离父元素而浮动： .hui-tooltip span{\tposition:absolute;}设置Tooltip的位置，使其位于父元素文字之上并居中（尺寸通过开发工具测出）： .hui-tooltip span{\tleft:20px;\ttop:-50px;}实现的效果如下： 点击图片查看示例 下一篇文章中，我们将添加几行样式，实现Tooltip的鼠标hover响应效果。 文章来自LearnShare，转载请注明。","title":"【HUI】Tooltip(提示组件)——2.Tooltip in CSS2(优化方案)"},{"content":"一下是Struts2学习过程中的一些例子和技巧的记录，有需要的哥们可以看看，希望给点学习的意见和建议。废话不多说了直接开始写例子。 编写Struts2所需要的资料下载 下载地址：Struts 2.3.8下载 打开网址后的网页下载信息详细解释查看一下截图： 下载后在myeclipse里新建一个web工程然后解压struts-2.3.8-all.zip.将核心库和Struts配置文件拷贝到工程目录下面。 然后修改Struts.xml的配置。修改如下：         =====文件名：struts.xml=====<?xml version=\"1.0\" encoding=\"UTF-8\" ?><!DOCTYPE struts PUBLIC    \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"    \"http://struts.apache.org/dtds/struts-2.3.dtd\"><struts>    <!-- Add packages here --><package name=\"default\" namespace=\"/\" extends=\"struts-default\">        <action name=\"hello\">            <result >                /hello.jsp            <\/result>        <\/action>    <\/package><\/struts> 然后配置web.xml配置的代码如下：         =====文件名：web.xml=====<?xml version=\"1.0\" encoding=\"UTF-8\"?><web-app version=\"2.5\" xmlns=\"http://java.sun.com/xml/ns/javaee\"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee     http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">    <filter>        <filter-name>struts2<\/filter-name>        <filter-class>            org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter        <\/filter-class>    <\/filter>    <filter-mapping>        <filter-name>struts2<\/filter-name>        <url-pattern>/*<\/url-pattern>    <\/filter-mapping>    <welcome-file-list>        <welcome-file>index.jsp<\/welcome-file>    <\/welcome-file-list><\/web-app> 然后修改要运行的jsp文件         =====文件名：hello.jsp=====<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"GBK\"%>color=#800000><%String path = request.getContextPath();String basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";%><!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"><html>  <head>    <base href=\"<%=basePath%>\">    <title>Hello Struts2<\/title>    <meta http-equiv=\"pragma\" content=\"no-cache\">    <meta http-equiv=\"cache-control\" content=\"no-cache\">    <meta http-equiv=\"expires\" content=\"0\">        <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">    <meta http-equiv=\"description\" content=\"This is my page\">    <!--    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">    -->  <\/head>  <body>    Hello Jsp  <\/body><\/html> 然后将项目部署到服务器上运行自己的工程。在浏览器运行http://localhost:9999/struts2Hello/hello后的效果在页面显示Hello jsp 源码下载地址:","title":"Struts2的学习笔记1配置运行环境运行第一个例子Hello word!"},{"content":"这篇文章是关于使用一些CSS3属性创建一个表单。您可以轻松地自定义样式。 HTML代码： 下面的HTML代码的形式给出。我们使用的每一个输入字段的标签，包裹在一个div。 <form id=\"contactform\" class=\"rounded\" method=\"post\" action=\"\"> <h3>Contact Form<\/h3>   <div class=\"field\">     <label for=\"name\">Name:<\/label>     <input type=\"text\" class=\"input\" name=\"name\" id=\"name\" />     <p class=\"hint\">Enter your name.<\/p> <\/div>   <div class=\"field\">     <label for=\"email\">Email:<\/label>     <input type=\"text\" class=\"input\" name=\"email\" id=\"email\" />     <p class=\"hint\">Enter your email.<\/p> <\/div>   <div class=\"field\">     <label for=\"message\">Message:<\/label>     <textarea class=\"input textarea\" name=\"message\" id=\"message\">     <\/textarea>     <p class=\"hint\">Write your message.<\/p> <\/div>   <input type=\"submit\" name=\"Submit\"  class=\"button\" value=\"Submit\" /> <\/form> 加入风格的形成 布局形式： 我们可以添加一些风格，形成布局，例如，我们可以设置的形式，宽度，背景颜色，边框样式，例如框阴影等： #contactform {       width: 500px;     padding: 20px;     background: #f0f0f0;     overflow:auto;       /* Border style */     border: 1px solid #cccccc;     -moz-border-radius: 7px;     -webkit-border-radius: 7px;     border-radius: 7px;       /* Border Shadow */     -moz-box-shadow: 2px 2px 2px #cccccc;     -webkit-box-shadow: 2px 2px 2px #cccccc;     box-shadow: 2px 2px 2px #cccccc;       } 标签： 用于关联标签输入元素的HTML <label>的标签。每个<label>的标签相关联的一个元素。 属性的<label>标签相关的输入元素的id应该是平等的。   我们可以标签样式如下： label {     font-family: Arial, Verdana;     text-shadow: 2px 2px 2px #ccc;     display: block;     float: left;     font-weight: bold;     margin-right:10px;     text-align: right;     width: 120px;     line-height: 25px;     font-size: 15px;     } 由于我们没有指定任何标签类名，因此，上面的样式将被应用到表单中的所有标签。   输入字段： 以下是为输入字段输入类。在我们的表格中，我们指定为300像素宽的输入字段。 .input{     font-family: Arial, Verdana;     font-size: 15px;     padding: 5px;     border: 1px solid #b9bdc1;     width: 300px;     color: #797979;     } 在演示中，你可以看到，当鼠标在任何场区，显示提示。这是一个简单的方法。我们可以在一个类中添加提示文本，每一个输入字段旁边。最初的类是隐藏的，如： .hint{     display:none;     } 悬停时，我们可以显示的提示类 .field:hover .hint {     position: absolute;     display: block;     margin: -30px 0 0 455px;     color: #FFFFFF;     padding: 7px 10px;     background: rgba(0, 0, 0, 0.6);       -moz-border-radius: 7px;     -webkit-border-radius: 7px;     border-radius: 7px;     } 由于利润率和绝对位置，显示输入字段旁边的提示类。   提交按钮 我们添加背景渐变样式，边界半径和阴影等，使我们的提交按钮。以下是按钮的代码： .button{     float: right;     margin:10px 55px 10px 0;     font-weight: bold;     line-height: 1;     padding: 6px 10px;     cursor:pointer;     color: #fff;       text-align: center;     text-shadow: 0 -1px 1px #64799e;       /* Background gradient */     background: #a5b8da;     background: -moz-linear-gradient        (top, #a5b8da 0%, #7089b3 100%);     background: -webkit-gradient        (linear, 0% 0%, 0% 100%,        from(#a5b8da), to(#7089b3));       /* Border style */     border: 1px solid #5c6f91;     -moz-border-radius: 10px;     -webkit-border-radius: 10px;     border-radius: 10px;       /* Box shadow */     -moz-box-shadow: inset 0 1px 0 0 #aec3e5;     -webkit-box-shadow: inset 0 1px 0 0 #aec3e5;     box-shadow: inset 0 1px 0 0 #aec3e5;       } 如果你想使用其他样式的按钮，请阅读这篇文章解释了如何创建CSS3的按钮：创建简单的方法在CSS3的按钮。  ","title":"清洁和时尚的CSS3的表格"},{"content":"今年有幸参加“2012年度IT博客大赛”，并且进入了前十强，大赛组委会让前十强选手写一下获奖感言。自开博以来，已经有一年半的时间，刚好籍此机会回顾一下写博历程。首先要感谢《老罗的Android之旅》的读者、2012年度IT博客大赛组委会，以及各位专家评委的支持和肯定。        自2011年6月21日开博至今天2012年12月16日，一共发表了68篇原创博客，访问量993296次，评论3010条。期间还对博客文章进行了系统的整理，出版了《Android系统源代码情景分析》一书，一共3大篇16章830页，合计1570千字。 出书是写博客的意外产物，是计划之外的，不过也算是了却心愿，以后可以专心地写博客了。下面就简单说一下写博客以来的一些感受，关键字是＂梦想＂、＂学习＂、＂坚持＂、＂自信＂和＂淡定＂。 1. 梦想。APP刚刚火起来的那阵子，还没接触过移动开发。有一天听说我们的产品经理自己做了个APP，用来订阅自己感兴趣的视频。顿时倍受打击：连产品经理都会做APP了，作为一个码农，怎么还能对移动开发无动于衷呢？！于是就准备学习移动开发，做个APP来玩玩。但是后来想了一下，其实我更感兴趣的是移动操作系统，很想知道它和PC操作系统有什么区别。就这样带着＂了解移动操作系统长什么样子＂这个梦想踏上了研究Android的旅程。再啰嗦说一下梦想这个话题。再年轻一些的时候，会觉得谈梦想是一件很扯很遥远很虚无缥缈的事情。随着年纪的增大，年轻时的棱角随着生活中的各种遭遇和压力都慢慢地磨平了，只剩下每天重复的上下班。这时候才发现年轻时的梦想是多么的弥足珍贵，梦想原来是可以让人这么年轻而富有激情的。现在看达人秀的时候，更多的感动是那些选手对梦想的执着追求，而不是他们的表演。 2. 学习。决定了要学习移动操作系统开发以后，接下来就是选平台了。当时iOS和Android都是红透半边天，WP还未成型。由于Android是开放源码的，因此，它就是学习移动操作系统的不二选择了。了解到Android是基于Linux内核来开发之后，就开始看Linux内核的书：《Linux Kernel Development》、《Understanding the Linux Kernel》、《Linux Device Drivers》和《Linux内核源代码情景分析》，每一本书都至少看过两遍。对Linux内核有大概的了解之后，就开始学习Android应用开发，因为我觉这是学习Android系统的最好切入点：知道怎么用一个东西之后，才能更好地知道它是怎么实现的。于是就看了两本讲Android应用的书：《Professional Android Application Development》和《Google Android SDK开发范例大全》。看完之后，就写了个小游戏——单机版五子棋。说来和五子棋有缘，高中时经常和同学在几何簿上玩五子棋，上课时也偷偷地玩；上大学学习C和Java时，也是拿五子棋练手。在Android上开发的五子棋虽小，但却五脏俱全：Activity、Service、Broadcast Receiver和Content Provider四大组件全用上了，异步任务和Binder进程间通信机制等也用上了。这为日后研究Android系统打下了坚实的基础。其实学习这个东西就是这样，没有捷径，得老老实实地一步一步地打基础。          3. 坚持。要坚持去做一件事情，真的很难，不过，当你下定决心持续地去做一件事情的时候，你的坚持就会变成一种习惯。习惯一旦养成，你不坚持去做那件事情，反而会觉得不舒服，好像少了什么似的。因为平时要上班，所以一天下来，其实也没多少时间去研究Android系统。这时候我就告诉自己，更加要坚持：工作日每天看20页书，周末每天看50页书，大概两周就可以看一本400～500页的书；一天看300行左右代码，一周就能看2000～3000行代码；一天写1个段落的博客，一周也能捣鼓出一篇来。其实最关键的是，坚持做一件事情的时候，会有加速度效果，这时候你就会发现事情越做越快。          4. 自信。自信是很重要的，尤其是在你做一件很有挑战性的事情的时候。如果没有自信，在碰到难以解决的困难时，或许就会放弃了。其实在很多时候，机遇都是偏爱那些有自信并且一直坚持着梦想的人。记得在研究Android系统的UI渲染服务SurfaceFlinger的时候，被一个20多行代码的函数难住了，百思不得其解。后来盯了两三天，联系了各种上下文，最后总算是把它弄明白了。我一直相信潜意识这种东西：只要你相信你能解决一个问题，并且坚持住不放弃，潜意识就会帮助你去加工和组织各种信息。因此，自信很重要，它是一种软实力：有自信不一定能成功，但是没有自信就很难成功。         5. 淡定。淡定是一种人生态度，它能使人不功利，不浮躁，从容地面对得与失，找到一条更合适自己长远发展的路。往往梦想都是一个比较长期的东西，不是短期内就能看到效益的。在坚持梦想的过程中，又可能要付出很多代价，例如，你没有时间找（陪）老婆或者女朋友，你赚的钱没有一起毕业的同学多，诸如此类的等等事情。这时候，你就更需要淡定。只要你判断你正在做的事情是值得的，你就淡定地面对别人的眼光和周围的环境。我发现写博客以来，自己变得越来越宅了，下班后和周末都更愿意呆在房间里。当渐渐地发现同学都在忙着晒结婚照或者小孩照的时候，自己还在单身着:(。这可能就是宅的代价吧，不过现在对这件事情还是比较淡定:)。         总的来说，写博客以来的感受就是：心怀梦想，带着自信和淡定，持之以恒，学习、学习，再学习！         很讽刺的是，如果是五六年以前的自己看到上面的这些字，我会觉得很扯，很空洞，没意义。人可能就是要非得亲自去经历一些事情，才能深刻地领会一些道理。","title":"“2012年度IT博客大赛”获奖感言--梦想、学习、坚持、自信、淡定"},{"content":"--在母版页上有一个注册按钮，在about.apsx内容页中有对应按钮“变”，控制该按钮的显示与否。 ----------------母版页前台：------------------------- <head runat=\"server\">     <title><\/title>     <link href=\"StyleSheet1.css\" rel=\"stylesheet\" type=\"text/css\" />     <asp:ContentPlaceHolder ID=\"head\" runat=\"server\">     <\/asp:ContentPlaceHolder> <\/head> <body>     <form id=\"form1\" runat=\"server\">     <asp:Image ID=\"Image1\" runat=\"server\" ImageUrl=\"images/logo.bmp\" />     <asp:Button ID=\"btnRegister\" runat=\"server\" Text=\"注册\" />   <div id=\"container\">     <div id=\"header\">         <h1>保钓网<\/h1><p>钓鱼岛是中国的！绝不允许列强侵犯！<\/p>         <div id=\"navi\">             <a href='<%=ResolveClientUrl(\"~/Index.aspx\") %>'>首页<\/a>｜<a href='< %=ResolveClientUrl(\"~/About.aspx\") %>'>关于我们<\/a>｜<a href=\"#\">新闻旧事<\/a>｜<a href=\"#\">联 系我们<\/a>｜<a href='<%=ResolveClientUrl(\"~/Login.aspx\") %>'>登录<\/a>         <\/div>     <\/div>     <div id=\"content\">      <hr />         <div id=\"leftSideBar\">         <ul>主要内容         <li>首页<\/li>         <li>关于我们<\/li>         <li>新闻旧事<\/li>         <li>联系我们<\/li>         <\/ul>           <ul>友情链接         <li>宝岛军事<\/li>         <li>军事天地<\/li>         <li>铁血军事<\/li>         <li>百姓军事<\/li>         <\/ul>         <\/div>         <div id=\"mainContent\">         <asp:ContentPlaceHolder ID=\"ContentPlaceHolder1\" runat=\"server\">                 <\/asp:ContentPlaceHolder>         <\/div>     <\/div>     <div id=\"footer\">     <hr />     版权所有@copyright:中华保钓联合会Email:Baodiao.com.cn         <asp:Label ID=\"labMaster\" runat=\"server\"><\/asp:Label>     <\/div> <\/div>     <\/form> <\/body> ---------------------about.aspx前台：------------------------------ <%@ Page Title=\"关于保钓\" Xlanguage=\"C#\" MasterPageFile=\"~/BaodiaoMaster.Master\" AutoEventWireup=\"true\" CodeBehind=\"About.aspx.cs\" Inherits=\"MasterPageDemo.About\" %> <asp:Content ID=\"Content1\" ContentPlaceHolderID=\"head\" runat=\"server\"> <\/asp:Content> <asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"server\">     <asp:Button ID=\"btnBian\" runat=\"server\" Text=\"变\" Xonclick=\"btnBian_Click\" /> <p>保钓简介<\/p>         <asp:Label ID=\"labContent\" runat=\"server\" Text=\"Label\"><\/asp:Label>                                    <p> 人民网11月21日讯 据日本共同社报道，日本外相玄叶光一郎在21日出版的国际英文报纸 《国际先驱论坛报》发表了一篇题为《站在十字路口的日中关系》的文章，就海洋活动趋于活跃的中国表示 ，钓鱼岛及南海发生的事态令人关切。 <\/p>              <p>文章强调中国公务船在钓鱼岛周边等海域航行已成为常态，似乎试图以实力来改变现状， 同时希望中国遵守国际法并与周边国家保持和谐。 <\/p>              <p>文章还指出，经确认，钓鱼岛“国有化”后中国各地发生的反日游行已造成日企损失总额 超过1亿美元。玄叶说，“日本有意使日中关系趋于稳定。期待(中国)新领导层积极应对。”<\/p>      <\/asp:Content> ----------------------about.aspx.cs后台：------------------------------  protected void btnBian_Click(object sender, EventArgs e)         {             Button btn = this.Master.FindControl(\"btnRegister\") as Button;             btn.Visible = !btn.Visible;         }","title":"控制母版页中的按钮是否显示"},{"content":"----------母版页前台：---------------------- <head runat=\"server\">     <title><\/title>     <link href=\"StyleSheet1.css\" rel=\"stylesheet\" type=\"text/css\" />     <asp:ContentPlaceHolder ID=\"head\" runat=\"server\">     <\/asp:ContentPlaceHolder> <\/head> <body>     <form id=\"form1\" runat=\"server\">     <asp:Image ID=\"Image1\" runat=\"server\" ImageUrl=\"images/logo.bmp\" />   <div id=\"container\">     <div id=\"header\">         <h1>保钓网<\/h1><p>钓鱼岛是中国的！绝不允许列强侵犯！<\/p>         <div id=\"navi\">             <a href='<%=ResolveClientUrl(\"~/Index.aspx\") %>'>首页<\/a>｜<a href='< %=ResolveClientUrl(\"~/About.aspx\") %>'>关于我们<\/a>｜<a href=\"#\">新闻旧事<\/a>｜<a href=\"#\">联 系我们<\/a>｜<a href='<%=ResolveClientUrl(\"~/Login.aspx\") %>'>登录<\/a>         <\/div>     <\/div>     <div id=\"content\">      <hr />         <div id=\"leftSideBar\">         <ul>主要内容         <li>首页<\/li>         <li>关于我们<\/li>         <li>新闻旧事<\/li>         <li>联系我们<\/li>         <\/ul>           <ul>友情链接         <li>宝岛军事<\/li>         <li>军事天地<\/li>         <li>铁血军事<\/li>         <li>百姓军事<\/li>         <\/ul>         <\/div>         <div id=\"mainContent\">         <asp:ContentPlaceHolder ID=\"ContentPlaceHolder1\" runat=\"server\">                 <\/asp:ContentPlaceHolder>         <\/div>     <\/div>     <div id=\"footer\">     <hr />     版权所有@copyright:中华保钓联合会Email:Baodiao.com.cn     <\/div> <\/div>     <\/form> <\/body> -----------------StyleSheet1.css---------------------------- #container,#header,#content,#footer {     width:950px;     margin:0 auto;     } #header p {     text-align:right;     margin:0 10px 0 0;     }    #navi {     margin-left:5px;     margin-bottom:5px;     }    #content {     position:relative;     height:500px;     }    #leftSideBar {    float:left;    width:200px;    height:450px;     }    #mainContent {     margin-right:300px;     }    #mainContentWrap {     margin-right:-300px;     }    #footer {     text-align:center;     }    对于服务端控件中涉及地址的地方均会解析为相对于母版也的地址，推荐使用服务端控件。另外可以使用 ResolveClientUrl来解析虚拟路径。     <div id=\"navi\">             <a href='<%=ResolveClientUrl(\"~/Index.aspx\") %>'>首页<\/a>｜<a href='< %=ResolveClientUrl(\"~/About.aspx\") %>'>关于我们<\/a>｜<a href=\"#\">新闻旧事<\/a>｜<a href=\"#\">联 系我们<\/a>｜<a href='<%=ResolveClientUrl(\"~/Login.aspx\") %>'>登录<\/a>         <\/div> 母版页A>结构设置----html---css B〉注意母版页中还有路径的问题处理。","title":"母版页A>结构设置----html---css B〉注意母版页中还有路径的问题处理。"},{"content":"jQuery如何工作 首先，你需要下载jQuery的一个副本，并在你的HTML页面（最好在插入<HEAD>标签）。然后，你需要写函数来告诉jQuery的做什么。下面的图表说明了jQuery如何工作的细节： 如何获得元素？ 编写jQuery函数是比较容易的（感谢精彩的​​文档）。关键的一点，你必须要学会的是如何得到确切的元素，你要申请的影响。         $(\"#header\") = get the element with id=\"header\"     $(\"h3\") = get all <h3> element     $(\"div#content .photo\") = get all element with class=\"photo\" nested in the <div       id=\"content\">     $(\"ul li\") = get all <li> element nested in all <ul>     $(\"ul li:first\") = get only the first <li> element of the <ul>","title":"详解jQuery是如何工作的"},{"content":"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd\"><HTML xmlns=\"http://www.w3.org/1999/xhtml\"><HEAD><TITLE>弹出窗口<\/TITLE><META http-equiv=Content-Type content=\"text/html; charset=utf-8\"><style>#popupcontent{   position: absolute;  visibility: hidden;     overflow: hidden;     border:1px solid #CCC;     background-color:#F9F9F9;     border:1px solid #333;     padding:5px;}<\/style><script>var baseText = null; function showPopup(w,h){       var popUp = document.getElementById(\"popupcontent\");       popUp.style.top = \"200px\";       popUp.style.left = \"200px\";       popUp.style.width = w + \"px\";       popUp.style.height = h + \"px\";        if (baseText == null) baseText = popUp.innerHTML;      popUp.innerHTML = baseText + \"<div id=\\\"statusbar\\\"><input type=\\\"button\\\" value=\\\"Close window\\\" onClick=\\\"hidePopup();\\\"><\/div>\";       var sbar = document.getElementById(\"statusbar\");       sbar.style.marginTop = (parseInt(h)-60) + \"px\";      popUp.style.visibility = \"visible\";}function hidePopup(){       var popUp = document.getElementById(\"popupcontent\");       popUp.style.visibility = \"hidden\";}<\/script><META content=\"MSHTML 6.00.2900.2838\" name=GENERATOR><\/HEAD><BODY><div id=\"popupcontent\">content<\/div><p><a href=\"#\" onClick=\"showPopup(300,200);\" >onclick<\/a><\/p><\/BODY><\/HTML>","title":"js弹出窗口之弹出层"},{"content":"Window--Preferences--\"General\"--\"Content Types\"，右边有个树形的text，展开找到\"JSP\",最底下有个\"Default encoding\"，里面默认的是\"ISO-8859-1\"，删掉\"ISO-8859-1\"填上\"UTF-8\"，在点一下\"update\"， 保存 OK 如果打开java文件，中文注释是乱码，也可以采用同样方法进行处理","title":"MyEclipse保存文件时提示\"save could not to completed ISO-8859-1\""},{"content":"<head><style type=\"text/css\">\ttable\t\t{border-collapse:collapse;}\ttable,td,th\t\t{border:1px solid red;}<\/style><\/head><TABLE width=100%><CAPTION vAlign=top>“自由”后的自学<\/CAPTION><CAPTION vAlign=bottom>知识重点：请注意表格内部的单元格合并<\/CAPTION><TBODY><TR height=20><TH bgColor=green><FONT color=white>First<\/FONT><\/TH><TH bgColor=yellow>second<\/TH><TH bgColor=blue>Third<\/TH><TH bgColor=red>fourth<\/TH><TH bgColor=maroon>Fifth<\/TH><TH bgColor=navy><FONT color=white>Sixth<\/FONT><\/TH><\/TR><TR height=30 bgColor=teal><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD>4<\/TD><TD>5<\/TD><TD>6<\/TD><\/TR><TR height=40 bgColor=#0a00e0><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD>4<\/TD><TD>5<\/TD><TD>6<\/TD><\/TR><TR height=50 bgColor=aqua><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD vAlign=center rowSpan=2 align=middle>4<\/TD><TD bgColor=white vAlign=center background=images/logo4.gif rowSpan=4 width=120 align=middle>5<\/TD><TD>6<\/TD><\/TR><TR height=60 bgColor=lime><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD>6<\/TD><\/TR><TR height=70 bgColor=olive><TD>1<\/TD><TD colSpan=2 align=middle>2<\/TD><TD>4<\/TD><TD>6<\/TD><\/TR><TR height=80 bgColor=gray><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD>4<\/TD><TD>6<\/TD><\/TR><TR height=90 bgColor=silver><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD>4<\/TD><TD>5<\/TD><TD>6<\/TD><\/TR><TR height=100 bgColor=fuchsia><TD>1<\/TD><TD>2<\/TD><TD>3<\/TD><TD>4<\/TD><TD>5<\/TD><TD>6<\/TD><\/TR><\/TBODY><\/TABLE>","title":"TABLE的CSS应用（细线表格）"},{"content":"方法一： function hidePopup(){       var popUp = document.getElementById(\"popupcontent\");\t\tpopUp.innerHTML='';\t    popUp.style.visibility = \"hidden\";} 方法二 flashObject.stop(); document.getElementById(popupcontent).stop();","title":"js弹出层包含flash 不能关闭隐藏解决方法"},{"content":"下载地址：http://code.google.com/p/freecms/    静态化管理     FreeCMS采用的站点模板概念，所以经过静态化后站点先能显示。 1.  首页静态化 从左侧管理菜单点击首页静态化进入。 系统会直接提示您是否对当前站点进行首页静态化处理，点击“确定”按钮。 系统会在此站点目录下生成index.html文件作为站点首页。 2.  栏目页静态化 从左侧管理菜单点击栏目页静态化进入。   您可以选择需要生成的栏目，然后点击“生成所选栏目页”进行栏目页静态化。 如果您是此站点的总管理员，您也可以点击“生成此站点所有栏目页”完成对此站点所有栏目的静态化。 系统会在此站点目录下创建一个以栏目id为名字的文件夹用于存放此栏目的静态化页面。 3.  信息页静态化 从左侧管理菜单点击信息页静态化进入。   您可以选择需要生成的栏目，然后点击“生成信息页面”进行信息页静态化。 如果您是此站点的总管理员，您也可以把“是否所有栏目”属性选择为是，点击“生成信息页面”完成对此站点所有栏目的信息页静态化。 系统会在此站点目录/栏目id/info/YYYY/目录下生成以信息id为名字的.html静态页面。","title":"开源 免费 java CMS - FreeCMS-功能说明-静态化管理"},{"content":"下载地址：http://code.google.com/p/freecms/      链接管理 链接主要分为下拉、图片、文字。每种链接都包括链接分类和链接项目管理。 由于操作方法类似，此处以下拉链接为例进行说明，其它链接种类参考下拉链接即可。 1.  下拉链接分类管理 从左侧管理菜单点击下拉链接分类进入。 a.添加 点击“添加”按钮 输入相关属性后点击“确定”即可。 b.编辑   选择分类，点击“编辑”按钮   输入相关属性后点击“确定”即可。 c.删除   选择分类，点击“删除”按钮   为防止用户误操作，系统会提示用户确认，点击“确定”按钮即可。 注意：删除分类时会同时此分类下的链接数据。 2.  下拉链接管理 从左侧管理菜单点击下拉链接管理进入。   a.添加 点击“添加”按钮   输入相关属性后点击“确定”即可。 b.编辑   选择分类，点击“编辑”按钮   输入相关属性后点击“确定”即可。 c.删除   选择分类，点击“删除”按钮   为防止用户误操作，系统会提示用户确认，点击“确定”按钮即可。","title":"开源 免费 java CMS - FreeCMS-功能说明-链接管理"},{"content":"原文：JavaScript values: not everything is an object 译文：JavaScript 并非所有的东西都是对象 译者：justjavac 2012-08-14 更新：重写了大部分内容。 添加了第四节，解释了和类型密切相关的两个运算：typeof 和instanceof。 虽然很多语言宣称：“一切皆是对象”，但是 javascript 中，并不是所有的值都是对象。 这篇博文解释了 javascript 中的两种值类型：原始值（primitive）和对象（object），以及混合使用两种类型时的注意事项。 原始值 vs 对象 javascript 中的值可以被划分为两大类：原始值（primitive）和对象（object）。 定义 javascript 的两种值的定义： 下面的值是原始值。 字符串 数字：在 JavaScript 中所有的数字都是浮点数 布尔值 null undefined 所有其它的值都是对象（object）。对象可以进一步划分： 原始值的包装器：Boolean, Number, String。很少直接使用。 用字面量创建的对象。 下面的字面量产生对象，也可以通过构造函数创建对象。您可以使用字面量创建对象。 [] 就是 new Array() {} 就是 new Object() function() {} 就是 new Function() /\\s*/ 就是 new RegExp(\"\\\\s*\") 日期：new Date(\"2011-12-24\") 区别 您可以通过枚举的原语和定义对象非原语定义原语和对象。 但你也可以描述的原语和对象是什么。 让我们开始与对象。 对象是可变的：  > var obj = {}; > obj.foo = 123;  // 添加属性和值 123 > obj.foo  // 读属性，返回属性的值 123 每个对象都有自己唯一的标识符，因此通过字面量或构造函数创建的对象和任何其他对象都不相等，我们可以通过 === 进行比较。  > {} === {} false 对象是通过引用来比较的，只有两个对象有相同的标识，才认为这个对象是相等的。  > var obj = {}; > obj === obj true 变量保存了对象的引用，因此，如果两个变量应用了相同的对象——我们改变其中一个变量时，两一个也会随之改变。  > var var1 = {}; > var var2 = var1; > var1.foo = 123;   // 修改变量 val1 的属性 123 > var2.foo  // val2 也改变了 123 正如预期的那样，原始值和对象不一样： 原始值是不可变的;你不能给它们添加属性:  > var str = \"abc\"; > str.foo = 123;  // 添加属性（此操作将被忽略） 123 > str.foo  // 读属性的值，返回 undefined undefined 原始值没有内部标识，原始值是按值比较的： 比较两个原始值的依据是他们的内容，如果两个原始值的内容相同，这认为这两个原始值相同。   > \"abc\" === \"abc\"  true 这意味着，一个原始值的标识就是它的值，javascript 引擎没有为原始值分配唯一标识。 最后两个事实结合起来的意思是：我们无法区分一个变量到底是对象的引用，还是原始值的副本。 陷阱：原始值和它们的包装类型 规则：忽略尽可能多的包装类型。 在其他编程语言如Java，你很少会注意到他们。 原始值类型 boolean, number 以及 string 都有自己对应的包装类型 Boolean, Number 和 String。 包装类型的实例都是对象值，两种类型之间的转换也很简单： 转换为包装类型：new String(\"abc\") 转换为原始类型：new String(\"abc\").valueOf() 原始值类型以及它们相应的包装器类型有很多不同点，例如： > typeof \"abc\"'string'> typeof new String(\"abc\")'object'> \"abc\" instanceof Stringfalse> new String(\"abc\") instanceof Stringtrue> \"abc\" === new String(\"abc\")false 包装类型的实例是一个对象，因此和 JavaScript 和对象一样，包装类型也无法进行值的比较（只能比较引用）。 > var a = new String(\"abc\");> var b = new String(\"abc\");> a == bfalse   // 虽然 a 和 b 有相同的内容，但是依然返回 false> a == atrue 原始值没有自己的方法 包装对象类型很少被直接使用，但它们的原型对象定义了许多其对应的原始值也可以调用的方法。 例如，String.prototype 是包装类型 String 的原型对象。 它的所有方法都可以使用在字符串原始值上。 包装类型的方法 String.prototype.indexOf 在 字符串原始值上也有，它们并不是两个拥有相同名称的方法，而的的确确就是同一个方法： > \"abc\".charAt === String.prototype.charAttrue 在数字的包装类型 Number 的原型对象有 toFixed 方法，即 Number.prototype.toFixed，但是当我们写如下代码时却发生错误： > 5.toFixed(3)SyntaxError: Unexpected token ILLEGAL 此错误是解析错误（SyntaxError），5 后面跟着一个点号（.），这个点被当作了小数点，而小数点后面应该是一个数，以下代码可以正常运行： > (5).toFixed(3)\"5.000\"> 5..toFixed(3)\"5.000\" 值的分类：typeof 和 instanceof 如果你想要对值进行分类，你需要注意原始值和对象之间的区别。 typeof 运算可以用来区分原始值和对象。instanceof 可以用来区分对象，而且，instanceof 对于所有的原始值都返回 false。 typeof typeof 可以用来判断原始值的类型，以及区分对象值和原始值： > typeof \"abc\"'string'> typeof 123'number'> typeof {}'object'> typeof []'object' typeof 返回以下字符串： 参数 结果 undefined \"undefined\" null \"object\" 布尔值 \"boolean\" 数字 \"number\" 字符串 \"string\" 函数 \"function\" 其他 \"object\" 注释： typeof 在操作 null 时会返回 \"object\"，这是 JavaScript 语言本身的 bug。不幸的是，这个 bug 永远不可能被修复了，因为太多已有的代码已经依赖了这样的表现。这并不意味着，null 实际上就是一个对象[4] 。 typeof 还可以让检查一个变量是否已声明，而不会抛出异常。 没有任何一个函数可以实现此功能，因为你不能把一个未声明的变量传递给函数的参数。   > typeof undeclaredVariable  'undefined'  > undeclaredVariable  ReferenceError: undeclaredVariable is not defined 函数也是对象类型；这可能是很多人无法理解的，但有时候却是非常有用的。 数组是一个对象。 更多关于 typeof 的信息 [5] 和 [6]。 instanceof instanceof 可以检测一个值是否是某个构造函数的实例： value instanceof Constructor 如果上面的表达式返回 true，则表示 value 是 Constructor 的一个实例。它等价于： Constructor.prototype.isPrototypeOf(value) 大多数对象是 Object 的实例，因为原型链的末端（prototype chain）是 Object.prototype。 原始值不是任何对象的实例: > \"abc\" instanceof Objectfalse> \"abc\" instanceof Stringfalse 相关内容 JavaScript’s strict mode: a summary An easy way to understand JavaScript’s prototypal inheritance JavaScript：将所有值都转换成对象 “null is not an object” - comment on Stack Overflow。 JavaScript 的 typeof 的用途 Improving the JavaScript typeof operator","title":"JavaScript 并非所有的东西都是对象"},{"content":"       Web端开发避免不了要写html文件，有时候引用一些文件图片怎么检查相对目录是否正确，我们只需安装一个插件即可快速定位文件的位置，智能提示的功能带来了开发效率的提高，如下图： 插件安装： 1、安装GEF-ALL-3.1        下载地址：http://download.csdn.net/detail/smszhuang168/4914530         将GEF-ALL-3.1.zip解压缩，然后直接把解压后的文件夹（features、plugins）里的文件全部放到eclipse安装目录的对应的文件夹中即可。 2、安装Eclipse HTML Editor 1.6.7        下载地址：http://download.csdn.net/detail/smszhuang168/4914674        将tk.eclipse.plugin.htmleditor_2.1.0.jar放进eclipse安装目录的plugins文件夹中即可。        到此Eclipse HTML Editor插件安装完成，重启eclipse，file → new → other → Amateras 可看见其功能，如下图：        这个插件的功能虽然好用，但是要分时候用，功能开发的时候它可以帮助我们加快开发速度，减少由于不细心而产生的错误，学习的时候还是建议不要直接使用它的智能提示功能，当然查错的时候可以用它的提示功能来排查错误。","title":"Html文件编辑出现智能提示eclipse插件"},{"content":"-----------index.aspx:-------------------- <%@ Page Title=\"保钓网首页\" Xlanguage=\"C#\" MasterPageFile=\"~/BaodiaoMaster.Master\" AutoEventWireup=\"true\" CodeBehind=\"Index.aspx.cs\" Inherits=\"MasterPageDemo.Index\" %> <asp:Content ID=\"Content1\" ContentPlaceHolderID=\"head\" runat=\"server\"> <\/asp:Content> <asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"server\"> <p>新闻<\/p>              <p> 人民网11月21日讯 据日本共同社报道，日本外相玄叶光一郎在21日出版的国际英文报纸 《国际先驱论坛报》发表了一篇题为《站在十字路口的日中关系》的文章，就海洋活动趋于活跃的中国表示 ，钓鱼岛及南海发生的事态令人关切。 <\/p>              <p>文章强调中国公务船在钓鱼岛周边等海域航行已成为常态，似乎试图以实力来改变现状， 同时希望中国遵守国际法并与周边国家保持和谐。 <\/p>              <p>文章还指出，经确认，钓鱼岛“国有化”后中国各地发生的反日游行已造成日企损失总额 超过1亿美元。玄叶说，“日本有意使日中关系趋于稳定。期待(中国)新领导层积极应对。”<\/p>      <\/asp:Content> ----------------------about.aspx--------------------------------- <%@ Page Title=\"关于保钓\" Xlanguage=\"C#\" MasterPageFile=\"~/BaodiaoMaster.Master\" AutoEventWireup=\"true\" CodeBehind=\"About.aspx.cs\" Inherits=\"MasterPageDemo.About\" %> <asp:Content ID=\"Content1\" ContentPlaceHolderID=\"head\" runat=\"server\"> <\/asp:Content> <asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"server\"> <p>保钓简介<\/p>              <p> 人民网11月21日讯 据日本共同社报道，日本外相玄叶光一郎在21日出版的国际英文报纸 《国际先驱论坛报》发表了一篇题为《站在十字路口的日中关系》的文章，就海洋活动趋于活跃的中国表示 ，钓鱼岛及南海发生的事态令人关切。 <\/p>              <p>文章强调中国公务船在钓鱼岛周边等海域航行已成为常态，似乎试图以实力来改变现状， 同时希望中国遵守国际法并与周边国家保持和谐。 <\/p>              <p>文章还指出，经确认，钓鱼岛“国有化”后中国各地发生的反日游行已造成日企损失总额 超过1亿美元。玄叶说，“日本有意使日中关系趋于稳定。期待(中国)新领导层积极应对。”<\/p>      <\/asp:Content> ----------------------Login.aspx:------------------------------------ <%@ Page Title=\"\" Xlanguage=\"C#\" MasterPageFile=\"~/BaodiaoMaster.Master\" AutoEventWireup=\"true\" CodeBehind=\"Login.aspx.cs\" Inherits=\"MasterPageDemo.Login\" %> <asp:Content ID=\"Content1\" ContentPlaceHolderID=\"head\" runat=\"server\">     <style type=\"text/css\"> table {widht:600px;  height:200px;  border-width:thin;  border-color:Aqua;  border-style:dashed;} <\/style> <\/asp:Content> <asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"server\">     <table>         <tr>             <td>                 &nbsp;                 用户名：<\/td>             <td>                 &nbsp;                 <asp:TextBox ID=\"TextBox1\" runat=\"server\" Height=\"19px\"><\/asp:TextBox>             <\/td>         <\/tr>         <tr>             <td>                 &nbsp;                 密码：<\/td>             <td>                 &nbsp;                 <asp:TextBox ID=\"TextBox2\" runat=\"server\"><\/asp:TextBox>             <\/td>         <\/tr>         <tr>             <td>                 &nbsp;                 <asp:Button ID=\"btnLogin\" runat=\"server\" Text=\"登陆\" />             <\/td>             <td>                 &nbsp;                 <asp:Button ID=\"btnRegister\" runat=\"server\" Text=\"注册\" />             <\/td>         <\/tr>     <\/table> <\/asp:Content>   新建应用母版页的网页index.aspx,about.aspx,login.aspx。","title":"新建应用母版页的网页index.aspx,about.aspx,login.aspx。"},{"content":"本教程演示了如何创建简单的可扩展的按钮，使用CSS3的属性，如一些边界半径和线性梯度。 基本按钮类： 首先，我们可以创建一个基本的按钮类，没有任何色彩，使我们可以使用不同的颜色。 .button {     font-family: sans-serif;     font-weight:bold;     color: #fff;     padding:5px 10px 6px 10px;     -moz-border-radius: 5px;     -webkit-border-radius: 5px;     border-radius:5px;     cursor: pointer;     } 在上面的代码，我们创建与圆形边界边界半径为MOZILLA，WebKit和Internet Explorer的浏览器。如果您想了解更多有关边界半径财产。   添加不同的颜色： 现在，我们已经为圆角按钮的基本结构，我们可以使用不同的颜色，因为我们可能需要使用不同的颜色相同的按钮。 加入简单的背景颜色，而是我们可以利用CSS3的财产线性梯度创建按钮的梯度效应。 例如： .blue {     background:#0085cc;     background-image: -moz-linear-gradient(top,#0085cc,#00717f);     background-image: -webkit-gradient(linear,left top, left bottom,from(#0085cc),to(#00717f)   );     } 在上面的代码，我们创建一个简单的梯度Mozilla和Webkit的浏览器。我们还可以添加浏览器不支持渐变属性简单的背景颜色。如果你不熟悉的线性渐变的财产。 对于悬停，我们可以指定一个简单的背景颜色，或如果你愿意，你可以创建类似的梯度悬停。 .blue:hover{background:#00717f; } 同样，我们可以通过使用我们的选择的颜色，其他颜色类。请参阅演示页，我用不同的颜色。   按钮大小： 我们可以定义按钮的大小不同的类别。所有我们需要做的是指定的字体大小。 .small {font-size:12px;} .medium{font-size:18px;} .large{font-size:24px;} 完成了！如何使用这些按钮？ 按钮可用作 <a class=\"button large blue\">Click me!<\/a> <a class=\"button medium blue\">Click me!<\/a> <a class=\"button small blue\">Click me!<\/a>","title":"简单的方式创建的CSS3按钮"},{"content":"                                                                                  一、hibernate与 db中数据类型对照（xml方式） 1.与ORACLE 常用数据类型对照          背景为灰色的表示常用，熟记。                    Hibernate 类型 Java类型 Oracle类型 type=\"java.lang.Long\" Java.lang.Long NUMBER java.lang.String String Varchar2 java.lang.Double Double NUMBER java.sql.Timestamp Java.util.Date TIMESTAMP(6) type=\"java.lang.String\" String CHAR(1) java.sql.Timestamp Java.util.Date TIMESTAMP(6)                   <hibernate-mapping>  <class  name=\"com.besttone.domain.OrderHead\"  table=\"ORDER_HEAD\">    <id name=\"orderHeadId\"  type=\"java.lang.Long\">     <!--     <generator  class=\"sequence\">                             <param  name=\"sequence\">ORDER_HEAD_SEQ<\/param>                    <\/generator>   -->          <column  name=\"ORDER_HEAD_ID\" precision=\"22\"  scale=\"0\"/>      <generator class=\"sequence\" />    <\/id>    <property name=\"userId\"  type=\"java.lang.String\">     <column length=\"60\" name=\"USER_ID\"/>    <\/property>    <property name=\"productId\"  type=\"java.lang.Long\">     <column name=\"PRODUCT_ID\" precision=\"22\"  scale=\"0\"/>    <\/property>    <property name=\"payTotal\"  type=\"java.lang.Double\">     <column name=\"PAY_TOTAL\" precision=\"22\"  scale=\"0\" />    <\/property>    <property name=\"createdDate\"  type=\"java.sql.Timestamp\">     <column length=\"11\" name=\"CREATED_DATE\"/>    <\/property> <\/class> <\/hibernate-mapping>   2.与MySql 数据类型对照 背景为灰色的表示常用，熟记。 2.1 hibernate mysql 基本类型映射 Hibernate 映射类型 Java 类型 标准 SQL 类型 大小和范围 integer 或者 int int 或者 java.lang.Integer INTEGER 4 字节 long long  Long BIGINT 8 字节 short short  Short SMALLINT 2 字节 byte byte  Byte TINYINT 1 字节 float float  Float FLOAT 4 字节 double double  Double DOUBLE 8 字节 big_decimal java.math.BigDecimal NUMERIC NUMERIC(8,2)8 位 string char  Character  String CHAR(1) 定长字符 string String VARCHAR 变长字符串 boolean boolean  Boolean BIT 布尔类型 2.2 Java 时间和日期类型的 Hibernate 映射 映射类型 Java 类型 标准 SQL 类型 描述 date util.Date 或者 sql.Date DATE YYYY-MM-DD time Date    Time TIME HH:MM:SS timestamp Date   Timestamp TIMESTAMP YYYYMMDDHHMMSS calendar calendar TIMESTAMP YYYYMMDDHHMMSS 二、Hibernate 关系配置 1.annotation基本类型配置          配置、Jar 包等： a)      hibernateannotaion jar b)      ejb3persistence jar c)      hibernatecommon-annotations.jar FAQ: @不给提示，配置eclipse属性信息contentassist-activation--加上@   通过 @Basic 可以声明属性的存取策略： @Basic(fetch=FetchType.EAGER)   即时获取（默认的存取策略） @Basic(fetch=FetchType.LAZY)    延迟获取   通过 @Temporal 定义映射到数据库的时间精度： @Temporal(TemporalType=DATE)       日期 @Temporal(TemporalType=TIME)       时间 @Temporal(TemporalType=TIMESTAMP)  两者兼具 2. annotation 列属性映射 使用 @Column 映射到列 @Column( name=\"columnName\";   // 可选，列名（默认是属性名） boolean unique() default false; // 可选，是否在该列上设置唯一约束（默认 false） boolean nullable() default true; // 可选，是否可以为空 boolean insertable() default true; // 可选，该列是否作为生成insert语句中的一列 boolean updatable() default true; // 可选，该列是否作为生成update语句中的一列 String columnDefinition() default \"\"; // 可选，为这个特定列覆盖SQL DDL 片段（可能导致无法在不同数据库间移植） String table() default \"\"; // 可选，定义对应的表，默认为主表 int length() default 255;   //可选，列长度 int precision() default 0; // 可选，列十进制精度（decimalprecision） int scale() default 0; // 可选，列十进制数范围（decimal scale）   public class Person {     @Column(name =\"PERSONNAME\", unique = true, nullable = false, updatable = true)     private String name;       @Column(name =\"PHOTO\", columnDefinition = \"BLOB NOT NULL\",secondaryTable=\"PER_PHOTO\")     private byte[] picture; } 3.联合主键：          必须实现 po层Serializable接口          <classname=\"Student\" table=\"t_student\">                    <composite-idname=\"studentId\" class=\"StudentId\">                             <key-propertyname=\"firstName\" length=\"20\"><\/key-property>                             <key-propertyname=\"lastName\"         length=\"20\"><\/key-property>                    <\/composite-id>                    <propertyname=\"pwd\" length=\"20\"><\/property>          <\/class> 4. 组合关系          <class  name=\"User\"  table=\"t_user\"  >                    <id  name=\"id\">                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"name\"><\/property>                   <property name=\"phone\"column=\"dianhua\" length=\"30\"><\/property>                                       <componentname=\"address\" class=\"Address\"     >                             <propertyname=\"city\"><\/property>                             <propertyname=\"street\"><\/property>                             <propertyname=\"zipcode\"><\/property>                    <\/component>          <\/class> 5. 一对多，多对一 5.1  xml格式的：          一方：          <classname=\"Department\" table=\"t_dept\">                    <idname=\"id\" >                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"dname\" length=\"20\"><\/property>                    <setname=\"employees\" >                             <key>                                      <columnname=\"department_id\"><\/column>                             <\/key>                             <one-to-many  class=\"Employee\"/>                    <\/set>          <\/class>          多方：          <classname=\"Employee\" table=\"t_emp\">                    <idname=\"id\">                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"ename\"><\/property>                    <many-to-onename=\"department\" class=\"Department\"column=\"department_id\">                    <\/many-to-one>          <\/class>          5.2  annotation方式的：          多方：          @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString mname;          @ManyToOne          privateStudent student;          一方：          @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString sname;          privateString pwd;          @OneToMany(mappedBy=\"student\")          privateSet<Money> moneys; 6. 一对一  外键关联 6.1  xml格式的：          <classname=\"Address\" table=\"t_address\" >                    <idname=\"id\">                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"aname\" length=\"20\"><\/property>                    <one-to-one name=\"company\"class=\"Company\"property-ref=\"address\"><\/one-to-one>          <\/class>                   <classname=\"Company\" table=\"t_com\" >外键生成                    <idname=\"id\">                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"cname\" length=\"20\"><\/property>                    <many-to-one name=\"address\"class=\"Address\" cascade=\"save-update\">                             <column name=\"address_id\"unique=\"true\"><\/column>                    <\/many-to-one>          <\/class>          6.2  annotation格式的：                   @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString cname;          @OneToOne(cascade=CascadeType.ALL)          @JoinColumn(name=\"student_id\",unique=true)          privateStudent student;                   @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString sname;          @OneToOne(mappedBy=\"student\")          privateCourse course;          6.3  一对一主键关联          annotation格式的：          @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString cname;          privateInteger age;          privateString des;          @OneToOne(cascade=CascadeType.ALL)          @PrimaryKeyJoinColumn          privateStudent student;                   @Id          @GenericGenerator(name=\"cc\",strategy=\"foreign\",parameters={@Parameter(name=\"property\",value=\"course\")})          @GeneratedValue(generator=\"cc\")          privateInteger id;          privateString sname;          privateInteger age;          privateString des;          @OneToOne(mappedBy=\"student\",cascade=CascadeType.ALL)          privateCourse course; 7. 多对多 7.1  xml格式的： xml格式的：          <classname=\"Course\" table=\"t_course\">                    <idname=\"id\" >                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"cname\" length=\"20\"><\/property>                    <setname=\"students\" table=\"student_course\">                             <key>                                      <columnname=\"course_id\"><\/column>                             <\/key>                    <many-to-manyclass=\"Student\" column=\"student_id\"><\/many-to-many>                    <\/set>          <\/class>                   <classname=\"Student\" table=\"t_student\">                    <idname=\"id\" >                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"sname\" length=\"20\"><\/property>                    <setname=\"courses\" table=\"student_course\">                             <key>                                      <columnname=\"student_id\"><\/column>                             <\/key>                             <many-to-manyclass=\"Course\" column=\"course_id\"><\/many-to-many>                                       <\/set>          <\/class>          7.2  annotation格式的：                   @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString mname;          @ManyToMany(mappedBy=\"moneys\")          privateSet<Student> students;                   @Id          @GeneratedValue(strategy=GenerationType.AUTO)          privateInteger id;          privateString sname;          privateString pwd;          @ManyToMany          privateSet<Course> moneys; 8. 其他 8.1不需要psersistence的字段 a)      Annotation：@Transient b)      xml不写 8.2映射日期与时间类型，指定时间精度 a)      Annotation：@Temporal(参数) 参数有3种只显示时间,只显示日期,时间日期都显示               //@Temporal(TemporalType.DATE)  只显示日期               //@Temporal(TemporalType.TIME)  只显示时间               //@Temporal(TemporalType.TIMESTAMP)  显示日期与时间 b)      xml:指定 type <class name=\"Teacher\"table=\"Teacher\" > <id name=\"id\"column=\"id\"><\/id>                    propertyname=\"name\" type=\"time\" />               <\/class> 三、hibernate序列Sequence     <id name=\"id\" >              <generatorclass=\"native\"><\/generator>     <\/id>     其他常用的序列生成方式 1.      <generator class=\"sequence\"/> 这是一个非常简单的接口；某些应用程序可以选择提供他们自己特定的实现。当然，Hibernate提供了很多内置的实现。下面是一些内置生成器的快捷名字： 2.      increment（递增） 用于为long, short或者int类型生成唯一标识。只有在没有其他进程往同一张表中插入数据时才能使用。 在集群下不要使用。（补充：主键按数值顺序递增，此方式的实现机制为在当前实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的时候在此值上加1作为主键，可能产生的问题：如果当前有多个实例访问同一个数据库，那么由于各个实例都维持主键状态，不同实例可呢生成同样主键，从而造成主键重复异常，因此，如果同一个数据库有多个实例访问，此方式必须避免使用。） 3.      sequence （序列） 在DB2,PostgreSQL,Oracle, SAP DB, McKoi中使用序列（sequence)，而在Interbase中使用生成器(generator)。返回的标识符是long, short或者 int类型的。 4.      uuid.hex 用一个128-bit的UUID算法生成字符串类型的标识符。在一个网络中唯一（使用了IP地址）。UUID被编码为一个32位16进制数字的字符串。 5.      native（本地） 根据底层数据库的能力选择identity, sequence 或者hilo中的一个。（详解：由hibernate根据数据库适配器中的定义，自动采用identify、hilo、sequence的其中一种作为主键生成方式） 6.      id的annotation 方式 @GeneratedValue a)      自定义ID b)      AUTO(直接写 @GeneratedValue 相当如native) i.       默认：对 MySQL,使用auto_increment ii.      对 Oracle使用hibernate_sequence(名称固定） c)      IDENTITY(@GeneratedValue(strategy=GenerationType.IDENTITY)) d)      SEQUENCE(@GeneratedValue(strategy=GenerationType.SEQUENCE)) i.       @SequenceGenerator(可自定义在数据库生成指定的sequence名)                 @Id //在@GeneratedValue中增加 generator=\"teacherSEQ\" @GeneratedValue(strategy=GenerationType.SEQUENCE,generator=\"teacherSEQ\") //\"teacherSEQ\"为@SequenceGenerator的标识名 //\"teacherSEQ_DB\"为指定到数据库生成的Sequence名 @SequenceGenerator(name=\"teacherSEQ\",sequenceName=\"teacherSEQ_DB\") public intgetId() {                                      returnid; } 四、hibernate 配置 1．日志配置 a)        slf4j与log4j的关系：slf4j像是一个大管家，可以管理许多的日志框架，log4j是其中之一 b)       加入slf4j-log4j.jar,加入 log4j 的 jar 包,去掉 slf4-nop.jar c)        从hibernate/project/etc目录 copy log4j.properties 2. hibernate.cfg.xml配置文件 <!--显示输出sql--> show_sql      <!--格式化显示输出sql -->        <propertyname=\"format_sql\">true<\/property>     五、hibernate 联合主键 1.   xml方式: composite-id         i.   将联合主键的属性提取出来,重新编写一个pojo类（原pojo类中的id，name要删除并新加入属性“StudentPK”）        public class StudentPKimplements Serializable {                    privateString id;                    privateString name;                    … …        ii.   新建pojo类必须实现 java.io.Serializable序列化接口       iii.   新pojo类要重写equals和hashCode方法 @Override public boolean equals(Object o) {        if(o instanceofStudentPk) {               StudentPk pk =(StudentPk)o;               if(this.id ==pk.getId() && this.name.equals(pk.getName())) {                 return true;               }        }        return false; }   @Override public int hashCode() {        returnthis.name.hashCode(); }        iv.   联合主键生成策略XML配置方法       <hibernate-mapping>                    <classname=\"com.bjsxt.pojo.Student\" >                             <composite-idname=\"studentPK\" class=\"com.bjsxt.pojo.StudentPK\">                                       <key-propertyname=\"id\"><\/key-property>                                      <key-propertyname=\"name\"><\/key-property>                             <\/composite-id>                             <propertyname=\"age\" />                             <propertyname=\"sex\" />                             <propertyname=\"good\" type=\"yes_no\"><\/property>                    <\/class> <\/hibernate-mapping> 2.   Annotation方式         i.   前三步与Xml方式前三步一样 都要建立新pojo类 都要实现Serializable接口 重写equals和hashCode方法.        ii.   方法1在新类前写@Embeddable，在原pojo类的新属性“TercherPK”的get方法前写@ld，如下       @ Embeddable public class TeacherPK implements Serializable {                    privateString id;                    privateString name;                    … …                @Entity publicclass Teacher { private TeacherPK teacherPK ; @Id public TeacherPK getTeacherPK(){                             return teacherPK; } … …       iii.   方法2：@EmbeddedlD(*) 新pojo类无需加注解，只需在原pojo类新属性“TercherPK”的get方法前写@EmbeddedlD即可                     iv.       方法3：@ld  @IdClass(*)  新pojo类无需加注解，原pojo类的id，name属性保留不变，也无需新增“TercherPK”属性。 只在id，name的get方法前都加@Id，并在原pojo类前加“@IdClass(TeacherPK).class)”，如下 @Entity @IdClass(TeacherPK.class) public class Teacher { private String id; private String name; @Id public String getId() {               return id; } @Id public String getName() {               return name; }   六、hibernate 核心开发 1.   Configuration a)  AnnotationConfiguration b)  进行配置信息的管理 c)  用来产生SessionFactory d)  可以在configure方法中指定hibernate配置文件 e)  只气关注一个方法即：buildSessionFactory 2.    SessoinFactor 1)  用来产生和管理Session 2)  通常情况下每个应用只需要一个SessionFactory 3)  除非要访间多个数据库的情况 4)  关注两个方法即：openSession getCurrentsession          i.   open session每次都是新的，需要close        ii.   getCurrentsession从上下文找，如果有，用旧的，如果没有，建新的 1.  用途，界定事务边界 2.  事务提交自动close 3.  上下文配置可参见xml文件中         <property name=\"current_session_context_classs\">thread<\/property> 4.  current_session_context_class (jta、thread常用 managed、custom.Class少用)           a) thread 使用connection 但数据库连接管理事务           b）jta （全称java transaction api）-java分布式事务管理（多数据库访问）             jta由中间件提供（jboss WebLogic等，tomcat不支持） 3.Session a)   管理一个数据库的任务单元（简单说就是增 删 改 查） b)   方法(CRUD)           i.   get与load的区别 1.            不存在对应记录时表现不一样 2.            load返回的是代理对象，等到真正用到对象的内容时才发出sql语句 3.            get直接从数据库加载，不会延迟         ii.   updates 1.            用来更新detached对象，更新完成后转为persistent状态 2.            更新transient对象会报错 3.            更新自己设定id的transient对象可以（数据库有对应记录） 4.            persistent状态的对象只要设定（如:t.setName…）不同字段就会发生更新 5.            更新部分更改的字段 a)xml 设定property 标签的 update 属性，annotation 设定@Column 的 updatable    属性，不过这种方式很少用，因为不灵活 b)使用xml中的dynamic-update，JPA1.0 Annotation 没有对应的属性，hibernate 扩    展？ i. 同一个session可以，跨session不行，不过可以用merge()(不重要） c)使用 HQL(EjBQL)(建议）        iii.   clear方法 1.无论是load还是get,都会首先査找缓存（一级缓存)，如果没有，才会去数据库査找 clear()方法可以强制清除session缓存         iv.   flush()方法 1.            当session的事务提交后,会强制将内存(session缓存)与数据库同步.默认情况下是session的事务提交(commit)时才同步! 2.            session的FlushMode设置,可以设定在什么时候同步缓存与数据库(很少用) 例如: session.setFlushMode(FlushMode.AUTO) 七、hibernate 对象的三种状态 1.    三种状态的区分关键在于 i.       有没有ID ii.      ID在数据库中有没有 iii.     在内存中有没有（session缓存）          2．       三种状态： a)      transient：内存中一个对象，没ID,缓存中也没有 b)      persistent：内存中有，缓存中有，数据库有（ID) c)      detached：内存有，缓存没有，数据库有，ID 八、hibernate id特殊配置        1. 组合关系          <class  name=\"User\"  table=\"t_user\"  >                    <id  name=\"id\">                             <generatorclass=\"native\"><\/generator>                    <\/id>                    <propertyname=\"name\"><\/property>                    <propertyname=\"phone\" column=\"dianhua\"  length=\"30\"><\/property>                                       <componentname=\"address\" class=\"Address\"     >                             <propertyname=\"city\"><\/property>                             <propertyname=\"street\"><\/property>                             <propertyname=\"zipcode\"><\/property>                    <\/component>          <\/class>        2. 九、hibernate 注意事项 1.    在Hibernate中，POJO类要重写hashcode()方法和equals()方法。 1)     重点是equals，重写hashCode只是技术要求（为了提高效率） 2)     为什么要重写equals呢，因为在java的集合框架中，是通过equals来判断两个对象是否相等的.如果没有用到比较这些的,也可以不重写equals. 3)     在hibernate中，经常使用set集合来保存相关对象，而set集合是不允许重复的，但是下面的程序，判断一下运行结果：Set user = newHashSet(); user.add(newAddress(\"http://hi.baidu.com/yangwen_yw\")); user.add(newAddress(\"http://hi.baidu.com/yangwen_yw\")); System.out.println(user.size()); 上面程序的运行结果取决于Address类是否重写了equals方法。 如果没有重写，默认equals是比较地址，那么这两个address对象不一样，输出2，意味着hibernate会认为这是两个对象，再接下来的持久化过程中可能会出错。 如果重写了equals，比如按照主键（address空间地址）比较，那么这两个对象是一样的，输出1 。                                    ","title":"Hibernate Note"},{"content":"先上jQuery Selectors Lab 的地址： http://codylindley.com/jqueryselectors/ 这个Lab ，不仅能在线使用，也能下载到本地离线使用。它包含复杂的HTML组合字段，对 提升jQuery选择器水平有很好的帮助。直接上图： 点击toggle的效果： 点击documentation的效果，可以查看相关的语法。","title":"jQuery Selectors Lab 提升jQuery选择器水平"},{"content":"<script>标签： <script type=\"text/javascript\" src=\"ljy.js\" />   这样写很多浏览器不识别了，某些浏览器会将<script />标签后面的内容都当作脚本内容来处理，直到遇见下一个<\/script>关闭标签。 <script type=\"text/javascript\" src=\"ljy.js\" ><\/script>   这样写问题就不会存在了 <iframe>标签：  同上 以后我发现了再整理上来，备忘。","title":"哪些HTML标签必须写独立的关闭标签"},{"content":"正如我以前说过，jQuery是一个非常强大的工具。jQuery的最下发现（但非常有用）的功能之一是可以延长，事件绑定。有备份到jQuery框架的几个事件，但你可以创建，绑定，很容易触发自己的jQuery事件。   自定义事件触发 下面的代码是所有它自己的自定义事件触发。你可以绑定到这个自定义事件，并提高它时，你要执行的代码里面绑定。     $ event.trigger（“myEventName”）;   自定义事件绑定 下面的代码创建了一个绑定到自定义事件和自定义事件触发时将被执行。     $(this).bind(\"myEventName\",function(){ alert(\"myEventName triggered\"); });   这是所有有它！JQuery的自定义事件是非常有用的。你打算如何在代码中使用自定义事件？","title":"JQuery的自定义事件"},{"content":"/**\t\t * 为指定的el，添加父元素newP\t\t */\t\taddParent : function(el, newP) {\t\t\tvar nodeTmp = $(el),\t\t\t\tindex = nodeTmp.index(),\t\t\t\tparent = nodeTmp.parent(),\t\t\t\tnode = nodeTmp.detach();\t\t\t$(newP).append(node);\t\t\t// 位置定位\t\t\tif(0 === index) {\t\t\t\tparent.prepend(newP);\t\t\t} else {\t\t\t\t$(parent.children().get(index-1)).after(newP);\t\t\t}\t\t}","title":"为指定元素添加一级父元素"},{"content":"下载地址：http://code.google.com/p/freecms/  模板管理 模板是指设计师已经做好的页面文件，经过处理成为模板，它可以改变网页所有的内容布局、颜色、风格等。 从左侧管理菜单点击模板管理进入。 1.  添加模板 点击“添加” 输入相关属性点击“确定”即可。 提示： 1） 可使用的站点可以限制使用此模板的站点，如果不选择是表示所有站点都可以使用。 2） 添加成功后会在/templet目录下生成以一个以此模板id为名字的文件夹。 此文件夹下会自动生成三个文件 首页指使用此模板的站点首页，在首页静态化时系统会根据站点模板下的“首页.html”文件来生成站点首页。 栏目页面指使用此模板的站点栏目页面，在栏目页静态化时系统会默认根据站点模板下的“栏目页面.html”文件来生成栏目页面，如果您指定此目录下其它文件作为栏目页面的模板文件，则系统使用您指定的页面进行静态化。 信息页面指使用此模板的站点信息页面，在信息页静态化时系统会默认根据站点模板下的“信息页面.html”文件来生成信息页面，如果您指定此目录下其它文件作为信息页面的模板文件，则系统使用您指定的页面进行静态化。 2.  编辑模板 选择需要编辑的模板，如“测试模板”，点击“编辑”按钮 注意:同时只能选择一个模板进行编辑操作。   输入相关属性点击“确定”即可。 3.  删除模板   选择需要删除的模板，如“测试模板”，点击“删除”按钮。 提示:同时可以选择多个模板进行删除操作。   为了防止误操作，系统会确认是否操作，点击“确定“按钮即可。 4.  文件管理 FreeCMS提供了在线管理模板文件的功能。   选择需要管理文件的模板，如“测试模板”，点击“文件管理”按钮。 注意:同时只能选择一个模板进行文件管理操作。   文件管理主要有以下功能。 a.  上传文件 您可以通过左侧的目录树进入到指定目录，然后点击“上传文件“按钮。   选择要上传的文件，点击“确定“按钮   b.  添加 您可以直接在线添加新的文件，进入指定目录然后点击“添加“按钮。   输入文件名和文件内容后点击“保存“按钮即可。 提示：只能添加后缀为html、js、css、txt的文件。   c.  编辑 您可以直接在线编辑模板文件内容，进入指定目录然后选择文件点击“编辑“按钮。   输入文件名和文件内容后点击“保存“按钮即可。 提示： 1)    只能编辑后缀为html、js、css、txt的文件。 2)    同时只能编辑一个文件。 d.  删除 您可以直接在线删除模板文件，进入指定目录然后选择文件点击“删除“按钮。   为防止用户误操作，系统会提示确认操作，点击“确定“按钮即可。 e.  创建文件夹 您可以直接在线创建文件夹，进入指定目录然后点击“创建文件夹“按钮。   输入文件夹名称点击“确定“即可   f.  重命名文件夹 您可以直接在线重命名非根目录的文件夹，进入指定目录然后点击“重命名此文件夹“按钮。   输入新的文件夹名称点击“确定“按钮即可。   g.  删除文件夹 您可以直接在线删除非根目录的文件夹，进入指定目录然后点击“删除此文件夹“按钮。 为防止用户误操作，系统会提示确认操作，点击“确定“按钮即可。   注意：删除文件夹会同时删除此文件夹下的所有文件。 h.  刷新文件列表   刷新当前文件夹，获取最新文件列表。","title":"开源 免费 java CMS - FreeCMS-功能说明-模板管理"},{"content":"1、用于清空数组 Array.prototype.clear = function() {    this.length = 0;} 2、判断数据项在数组中的位置 varoldArrayIndexOf = Array.indexOf;//判断是否原始浏览器是否存在indexOf方法Array.prototype.indexOf = function(obj) {    if(!oldArrayIndexOf) {        for(vari = 0, imax = this.length; i < imax; i++) {            if(this[i] === obj) {                returni;            }        }        return-1;    } else{        returnoldArrayIndexOf(obj);    }} 3、判断数据项是否在该数组中 Array.prototype.contain = function(obj) {    returnthis.indexOf(obj) !== -1;} 4、把数据项添加到指定的位置 Array.prototype.insertAt = function(index, obj) {    if(index < 0) index = 0;     if(index > this.length) index = this.length;    this.length++;    for(vari = this.length - 1; i > index; i--) {        this[i] = this[i - 1];    }    this[index] = obj;} 5、返回最有一项数据 Array.prototype.last = function() {    returnthis[this.length - 1];} 6、移除数组指定索引的值 Array.prototype.removeAt = function(index) {    if(index < 0 || index >= this.length) return;    varitem = this[index];    for(vari = index, imax = this.length - 2; i < imax; i++) {         this[i] = this[i + 1];     }     this.length--;     returnitem; } 7、移除数据项的数据 Array.prototype.removeAt = function(obj) {     varindex = this.indexOf(obj);     if(index >= 0)        this.removeAt(index);} 8、用于数组的查询 用于查询对象数组中对象的某些值，同时支持对已查询属性进行重命名，若查询的属性不在改数组中，则该属性返回为undefined Array.prototype.select = function(args) {    varnewItems = [];    if(typeof(args) === \"object\"&& arguments.length === 1) {//传入查询的参数为对象时的处理方式        for(vari = 0, imax = this.length; i < imax; i++) {            varitem = {};            for(varkey inargs) {                if(args[key] !== undefined) {                    item[key] = this[i][key] === undefined ? \"undefined\": this[i][key];                }            }            newItems.push(item);        }    } elseif(typeof(args) === \"string\"&& arguments.length === 1) {//传入参数为字符串，且只有一个参数的处理方式        for(vari = 0, imax = this.length; i < imax; i++) {            varitem = {};            varkeys = args.split(',');            for(vark = 0, kmax = keys.length; k < kmax; k++) {                variKey = keys[k].split(\"as\");                if(iKey.length === 1) {                    item[iKey[0].trim()] = this[i][iKey[0].trim()] === undefined ? \"undefined\": this[i][iKey[0].trim()];                } else{                    item[iKey[1].trim()] = this[i][iKey[0].trim()] === undefined ? \"undefined\": this[i][iKey[0].trim()];                }            }            newItems.push(item);        }    } else{//传入的参数是多个字符串的处理方式        for(vari = 0, imax = this.length; i < imax; i++) {            varitem = {};            for(varj = 0, jmax = arguments.length; j < jmax; j++) {                if(arguments[j] !== undefined) {                    variKey = arguments[j].split(\"as\");                    if(iKey.length === 1) {                        item[iKey[0].trim()] = this[i][iKey[0].trim()] === undefined ? \"undefined\": this[i][iKey[0].trim()];                    } else{                        item[iKey[1].trim()] = this[i][iKey[0].trim()] === undefined ? \"undefined\": this[i][iKey[0].trim()];                    }                }            }            newItems.push(item);        }    }    returnnewItems;} 假设数据对象数组为：var obj = [{ name: \"张三\", second.age: \"24\", sex: \"男\" } , { name: \"张二\", age: \"21\", sex: \"女\" } , { name: \"张一\", age: \"23\", sex: \"男\" } , { name: \"张四\", age: \"25\", sex: \"女\" } , { name: \"张五\", age: \"22\", sex: \"男\"}]; 例一：obj.select(“name,second.age as age,sex”); 例二：obj.select(“name”,”second.age as age”,”sex”); 例三：查询属性对象var arg={name:”\",second.age:”\",sex:”\"}; obj.select(arg);","title":"javascript扩展Array类"},{"content":"让我们创建一个简单的手风琴菜单使用jQuery。手风琴菜单是一些动画效果的菜单。它有几顶行菜单点击它时，切换到打开子菜单选项的项目。另一个顶层菜单被选中时，其他打开的菜单将自动折叠和保存有用的屏幕面积。我们将使用jQuery效果动画手风琴菜单。jQuery提供淡入/淡出效果，但手风琴菜单看起来更逼真，如果我们用出来的效果/幻灯片的幻灯片。 第1步：为您的菜单创建HTML 首先，我们将创建的HTML显示出菜单。我们将使用HTML中渲染菜单，然后我们将使用CSS来应用一些样式的列表。下面将我们的菜单代码： ul id=\"accordion\">\t<li><div>Sports<\/div>\t\t<ul>\t\t\t<li><a href=\"#\">Golf<\/a><\/li>\t\t\t<li><a href=\"#\">Cricket<\/a><\/li>\t\t\t<li><a href=\"#\">Football<\/a><\/li>\t\t<\/ul>\t<\/li>\t<li><div>Technology<\/div>\t\t<ul>\t\t\t<li><a href=\"#\">iPhone<\/a><\/li>\t\t\t<li><a href=\"#\">Facebook<\/a><\/li>\t\t\t<li><a href=\"#\">Twitter<\/a><\/li>\t\t<\/ul>\t<\/li>\t<li><div>Latest<\/div>\t\t<ul>\t\t\t<li><a href=\"#\">Obama<\/a><\/li>\t\t\t<li><a href=\"#\">Iran Election<\/a><\/li>\t\t\t<li><a href=\"#\">Health Care<\/a><\/li>\t\t<\/ul>\t<\/li><\/ul> 如果您的HTML页面，现在看起来应该是这样： 第2步：使用CSS应用到你的菜单一些风格 让适用于一些我们的菜单样式。复制后，在你的HTML文件中的CSS代码： #accordion {\tlist-style: none;\tpadding: 0 0 0 0;\twidth: 170px;}#accordion div {\tdisplay: block;\tbackground-color: #FF9927;\tfont-weight: bold;\tmargin: 1px;\tcursor: pointer;\tpadding: 5 5 5 7px;\tlist-style: circle;\t-moz-border-radius: 10px;\t-webkit-border-radius: 10px;\tborder-radius: 10px;}#accordion ul {\tlist-style: none;\tpadding: 0 0 0 0;}#accordion ul{\tdisplay: none;}#accordion ul li {\tfont-weight: normal;\tcursor: auto;\tbackground-color: #fff;\tpadding: 0 0 0 7px;}#accordion a {\ttext-decoration: none;}#accordion a:hover {\ttext-decoration: underline;} 请注意，在上面的CSS代码，我们应用圆角的CSS我们的菜单，以改善外观。虽然这项技术适用于所有现代的Web浏览器，但它不会使用Internet Explorer。如果我们想改变一下列印Internet Explorer的感觉，我们可能要包括IE特定的样式。我们的HTML页面， 一旦我们套用的样式，我们的菜单看起来像这样： 步骤3：给生活菜单使用jQuery 因此，我们的基本骨架是完整的。我们已经使用了HTML代码的手风琴菜单内容显示，然后应用CSS样式表，以提高可用性。让我们的生活增添使用jQuery的手风琴菜单。复制下面的jQuery代码的HTML页面： $(\"#accordion > li > div\").click(function(){\tif(false == $(this).next().is(':visible')) {\t\t$('#accordion ul').slideUp(300);\t}\t$(this).next().slideToggle(300);});$('#accordion ul:eq(0)').show(); 如果您发现上面的代码中，我们取得了第一个菜单项，在手风琴菜单可见。 $('#accordion ul:eq(0)').show();","title":"使用jQuery创建简单的手风琴菜单"},{"content":"下载地址：http://code.google.com/p/freecms/   选择管理站点 因为FreeCMS支持网站群模式，所以使用网站内容管理功能时需要您先选择要管理的站点。 点击站点名称，进入站点选择页面。 直接选择站点(如FreeCMS)即可。","title":"开源 免费 java CMS - FreeCMS-功能说明-选择管理站点"},{"content":"下载地址：http://code.google.com/p/freecms/ 站点设置 设置当前站点的属性。 从左侧管理菜单点击站点设置进入。 属性 说明 名称 站点名称 源文件目录名 英文，用于存放站点文件，如FreeCMS的源文件目录名为”FreeCMS”,则会在根目录/site/FreeCMS/目录下存放FreeCMS站点使用的文件。 域名 网站域名，在网站群模式下可以给各站点设置不同的域名，输入域名可直接进入到指定站点。 排序号 显示顺序 有效 有效性 外部链接 如果想让此站点直接链接到其它页面可以在这里设置。 LOGO 站点LOGO 版权 版权信息 备案号 备案信息 页面模板 FreeCMS的站点显示需要使用模板文件，模板文件是以freemarker为基础的，FreeCMS同时根据系统的需要提供了FreeCMS的标签库。 同步资源文件 此操作将会把页面模板里面的resources文件夹的内容复制并覆盖到此站点，主要用于模板里面的resources文件夹内容改变时使用。","title":"开源 免费 java CMS - FreeCMS-功能说明-站点设置"},{"content":"最近，我碰到由罗老师{ 清除的文本框上}的精彩文章 。这是一个简单的实现一个明确的按钮（X）添加一个文本框，让用户清除文本框的内容。我已经看到了这个简单的功能在许多网站，觉得非常有用。增加形式的可用性。   我想实现相同的功能，使用jQuery。下面是我写的一个简单的插件清除的功能添加到任何HTML表单的文本框。所有你需要的是文本框清零（）方法调用。例如。 ......<script type=\"text/javascript\" src=\"jquery.clearable.js\"><\/script><link rel=\"stylesheet\" href=\"jquery.clearable.css\" type=\"text/css\" media=\"screen\" /> ...... <input type=\"text\"  class=\"foo\"><\/input> <script>$(document).ready(function() {\t$('.foo').clearable();});<\/scrip> 在上面的例子中，我们包括jquery.clearable的插件JavaScript和样式表文件。然后叫我们要添加的文本框可清除功能可清除（）方法。就是这样   让我们通过代码，看看究竟背后的jQuery中清除的插件现场。 CSS代码 我们用下面的样式表类内部显示 .divclearable {\tborder: 1px solid #888;\tdisplay: -moz-inline-stack;\tdisplay: inline-block;\tzoom:1;\t*display:inline;\tpadding-right:5px;\tvertical-align:middle;} a.clearlink {\tbackground: url(\"close-button.png\") no-repeat scroll 0 0 transparent;\tbackground-position: center center;\tcursor: pointer;\tdisplay: -moz-inline-stack;\tdisplay: inline-block;\tzoom:1;\t*display:inline;\theight: 12px;\twidth: 12px;\tz-index: 2000;\tborder: 0px solid;} 有两个CSS类，我们在清除的插件使用。第一个是一个包装DIV周围的文本框和清晰的按钮（X）包装。和风格类是明确的按钮（X）。   在JavaScript 插件的重要一点是JavaScript代码创建清除的效果。everytextbox，环绕一个DIV容器，并添加一个明确的按钮（X），在这个容器中的DIV。   这里是jQuery代码： $(this).css({'border-width': '0px', 'outline': 'none'})\t\t.wrap('<div id=\"sq\" class=\"divclearable\"><\/div>')\t\t.parent()\t\t.attr('class', $(this).attr('class') + ' divclearable')\t\t.append('<a class=\"clearlink\" href=\"javascript:\"><\/a>'); \t$('.clearlink')\t\t.attr('title', 'Click to clear this textbox')\t\t.click(function() { \t\t\t$(this).prev().val('').focus(); \t}); 在上面的javascript代码，我们做到：   我们要清除的功能添加，删除文本框的边界和轮廓 创建一个div包装和包装，DIV的文本框 添加文本框样式类DIV，所以添加到文本框中指定的边框/背景等DIV 创建一个明文（X）的链接，并追加在DIV 也为每一个清晰的文本链接（X）我们添加一个onclick处理程序，我们清除了相应的文本框和设置焦点。","title":"使用jQuery创建一个清零的文本框"},{"content":"一个功能名称你想看看在CSS。那些希望变量的举起手来…(我肯定你们中有些人急需父类选择器但你在少数!)   这个问题源自我们需要使用和多次重用相同的颜色和其他值在一个样式表。例如: section { border-color: #334; }h1      { color: #334; }p       { background-color: #334; } 维护变得比它需要。我们需要记住一个范围的六角/ RGB值和,不可避免的,挑剔的客户端或设计师将决定# 335是“有价值”。搜索和替换可能会奏效,但如果你已经使用# 333344在一些地方或rgb(21、21、2 c)在其他人。   CSS变量解决这个问题。您定义# 334作为一个单独的命名变量和使用它在你的代码。这通常是第一个特性实现CSS预编译器。例如,在更少的:   @mycolor: #334; section { border-color: @mycolor; }h1      { color: @mycolor; }p       { background-color: @mycolor; } 或Sass     $mycolor: #334;section { border-color: $mycolor; }h1      { color: $mycolor; }p       { background-color: $mycolor; } 幸运的是,本地的CSS变量将很快到来。有一个W3C规范草案在http://www.w3.org/TR/css-variables/,它揭示了我们可以编写CSS代码当供应商开始实现支持。   :root {  var-mycolor: #334;}section { border-color: var(mycolor); }h1      { color: var(mycolor); }p       { background-color: var(mycolor); } 也许这不是来得简洁/ Sass少,但这是一个很大的进步,将缓解我们都遇到了的维护问题。   这是一个令人兴奋的发展但不要松懈。没有保证它将采取所有的供应商和,即使他们做的,这个功能似乎没有对旧浏览器的向后兼容。","title":"本机CSS变量"},{"content":"-9999 px的形象替代技术已经流行了一个十年最好的部分。替换一个文本元素和一个图像,您可以使用下面的代码:   <h1>This Text is Replaced<\/h1><style>h1{\tbackground: url(\"myimage\") 0 0 no-repeat;\ttext-indent: -9999px;}<\/style> 元素的背景显示和它的文本移离屏,这样它就不会妨碍。简单的和有效的。它常常被采用来显示图形标题——这是很少有必要现在我们有webfonts,但你还是会觉得它使用web。   直到现在。   一项新技术已被发现: {       text-indent: 100%;       white-space: nowrap;       overflow: hidden;   }   代码缩进文本超越其容器的宽度,但它不会包装和溢出是隐藏的。   虽然这是一个小更长和更难以记住,可以提高性能,因为浏览器的不再画一个9999 px箱在幕后。它还将防止怪异的左扩展概述了你会看到链接周围的使用隐藏文本。 本文出自站长：转载请注明","title":"一个新的CSS图片替换的技巧"},{"content":"上个星期闫海静老师给我们讲如何使用PEAR把特定的批注转换成为说明文件，在闫海静老师给我们演示完安装和使用以后，我亲自操作了一下，感觉这东西对于我来说有点不适应，在安装过程中还需重启这让人有点无法接受……还有就是我们现在绝大多数的时间都是在使用windows可视化的操作，然而这个东西需要在DOS来操作完成，总之安装的繁琐与使用时的不适应让我不得不去寻找另一个同样的工具，然后就找到了我发的这个东西，Doxygen但是由于上传限制，没法上传软件，只能写上地址自行下载和安装（15.3M），使用说明下载附件即,喜欢的可以下载来试试。 下面是软件的简介（来自百度）： Doxygen 是一个程序的文件产生工具，可将程序中的特定批注转换成为说明文件。通常我们在写程序时，或多或少都会写上批注，但是对于其它人而言，要直接探索程序里的批注，与打捞泰坦尼克号同样的辛苦。大部分有用的批注都是属于针对函式，类别等等的说明。所以，如果能依据程序本身的结构，将批注经过处理重新整理成为一个纯粹的参考手册，对于后面利用您的程序代码的人而言将会减少许多的负担。不过，反过来说，整理文件的工作对于您来说，就是沉重的负担。 　　对于未归档的源文件，也可以通过配置Doxygen来提取代码结构。或者借助自动生成的包含依赖图（includedependency graphs）、继承图（inheritance diagram）以及协作图（collaborationdiagram）来可视化文档之间的关系。Doxygen生成的帮助文档的格式可以是CHM、 RTF、PostScript、PDF、HTML和Unixman page等。 　　一个好的程序设计师，在写程序时，都会在适当的地方加上合适的批注。如果，能够在撰写批注时，稍微符合某种格式，接着就可以透过一个工具程序依据程序结构及您的批注产生出漂亮的文件。这将令许多工作繁重的程序设计师有时间多喝几杯咖啡。 　　Doxygen 就是这样的一个工具。在您写批注时，稍微按照一些它所制订的规则。接着，他就可以帮您产生出漂亮的文件了。因此，Doxygen 的使用可分为两大部分。首先是特定格式的批注撰写，第二便是利用Doxygen的工具来产生文件。 可处理的程序语言 　　* C/C++ 　　* Java 　　* Objective-C 　　* Python 　　* IDL (Corba, Microsoft及KDE-DCOP类型) 　　* Fortran 　　* VHDL 　　* PHP 　　* C# 可产生的文件格式 　　* HTML 　　* XML 　　* LaTeX 　　* RTF (MS-Word) 　　* PostScript 　　* Unix Man Page 　　而其中还可衍生出不少其它格式。如有了LaTeX 文件后，就可以透过一些工具产生出PS或是PDF档案。 　　在多国语言的支持方面，Doxygen 目前可支持的约有2,30种。自Doxygen 1.2.16开始支持繁体中文(这正是小弟做的好事)。所以在目前一些Open Source 的程序文档管理器中，Doxygen 算是相当完整的一套。在程序语言处理上面，Doxygen也算是少数在Borland C++Builder 的语法下还能够正常运作的工具之一（若非如此，小弟也不会推荐它）。 　　本文的目的是希望在经过仔细阅读本文之后能够给大家一个概略性的了解。以便可以很容易的上手使用Doxygen。至于Doxygen本身的详细使用，各位可以参考随着Doxygen 所附的文件。实际上，Doxygen 自己的使用手册就是使用Doxygen 产生的。您可以看到他实际上能够产生远比Reference Book更复杂的文件。 －－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ Doxygen官网：http://www.doxygen.nl/ Doxygen官网下载地址:http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.2-setup.exe","title":"代码注释生成文档之Doxygen 附说明+下载连接"}]