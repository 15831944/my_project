[{"content":"安装HADOOP先决条件 SHH安装，并且有公用ssh无密码跳转账号：admin（机器默认会安装SSH） 在namenode和各个slave上用机器名互相ping，ping不通的话，无法进行 JAVA环境安装（JDK1.6即可兼容HADOOP0.20.2版本） 安装路径：/home/admin/deploy/java6 安装HADOOP 安装HADOOP版本为0.20.2 安装路径：/home/admin/deploy/hadoop-0.20.2 首先格式化hdfs：执行hadoop namenode -format命令，如果不执行此命令在每次重启hadoop会进入安全模式           核心配置文件 hadoop-env.sh：该文件用来配置hadoop所需的特殊环境变量： JAVA与HADOOP环境变量的设置（如果在~/.bash_profile中设置了环境变量，这里可以不进行配置） export JAVA_HOME=/home/admin/deploy/java6 export HADOOP_HOME=/home/admin/deploy/hadoop-0.20.2 JAVA虚拟机性能调优（省略不用修改的内容） HADOOP_NAMENODE_OPTS=\"-Xmx2048m–Xms1024m -Xmn1024m HADOOP_DATANODE_OPTS=\"-Xmx2048m–Xms1024m -Xmn1024m HADOOP_JOBTRACKER_OPTS=\"-Xmx2048m–Xms1024m -Xmn1024m 补充解释：  这里的XMS与XMX指的是JAVA虚拟机内存分配策略中的最大可用内存和最小内存设置。 不建议将XMS与XMX设置成一样。因为java的垃圾回收器在内存使用达到XMS值的时候才会开始回收，如果2个值一样，那么JAVA会在使用完所有内存时才会回收垃圾，导致内存LOAD一直很高。 关于XMN这个参数是JAVA内存机制中的年轻代。 整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。 持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。这里为了便于计算，取整个堆的一半。 另外：如果JAVA内存设置过大，HADOOP启动会报错 Error occurred during initialization of VM，Could not reserve enough space for object heap     core-site.xml：核心代码配置文件，需要修改的参数如下，其余可以先采用默认配置 <property>    <name>fs.default.name<\/name>    <value>hdfs://xxxxxxxxxx:9000<\/value>  <\/property>  <property>    <name>hadoop.tmp.dir<\/name>    <value>/home/admin/deploy/hdfs<\/value>  <\/property> 内容说明： hadoop.tmp.dir： 这是hdfs存放namenode名空间和datanode数据块的地方，可以设置为任意存在的目录，默认在/tmp/Hadoop-username目录下，建议重定向目录 如果遇到namenode启动失败，很可能是这个配置文件的问题。 如果遇到datanode启动失败，一般是没有成功格式化hdfs，实在无法解决的话，可以尝试将{Hadoop.tmp.dir}清空，重新格式化hdfs。 fs.default.name 顾名思义，这个配置是HDFS的NAMENODE的地址与端口号             hdfs-site.xml：节点的hdfs配置文件，需要修改的参数如下： <property>     <name>dfs.replication<\/name>    <value>1<\/value>  <\/property> 内容说明： dfs.replication： HDFS的文件块备份。测试环境一般不用备份块，设置为1。   mapred-site.xml：mapreduce配置文件，重要参数如下： <property>   <name>io.sort.mb<\/name>   <value>200<\/value>   <description>The total amount of buffer memory to use whilesorting    files, inmegabytes.  By default, gives each mergestream 1MB, which    shouldminimize seeks.<\/description>  <\/property> 在map排序时buffer的内存大小，如果过小，map会将一部分结果写到磁盘上。 以MB为单位，默认100M 这个选项定义了map输出结果在内存占用buffer的大小，当buffer达到一定阈值，会启动一个后台线程来对buffer的内容进行排序，然后写入本地磁盘(一个spill文件) 根据map输出数据量的大小，可以适当的调整buffer的大小，但不是越大越好。 假设内存无限大，io.sort.mb=1024(1G), 和io.sort.mb=300 (300M)，前者未必比后者快，因为1G的数据排序一次和排序3次，每次300MB。（分治算法） 扩展：分治算法： 分治法解题的一般步骤： 　　（1）分解，将要解决的问题划分成若干规模较小的同类问题； 　　（2）求解，当子问题划分得足够小时，用较简单的方法解决； （3）合并，按原问题的要求，将子问题的解逐层合并构成原问题的解。   <property>    <name>mapred.job.tracker<\/name>    <value> xxxxxxxxxx:9001<\/value>  <\/property> jobtracker的地址 ，指定端口号  <property>    <name>mapred.tasktracker.map.tasks.maximum<\/name>    <value>5<\/value>  <\/property>  <property>    <name>mapred.tasktracker.reduce.tasks.maximum<\/name>    <value>5<\/value>  <\/property>  每个tasktracker上最大map和reduce的数量，如果已经跑满，JobTracker（JT）就不会再分配task到这台TT上。  <property>    <name>mapred.system.dir<\/name>    <value>/mapred/system<\/value>    <description>The shared directory where MapReduce stores controlfiles.    <\/description>  <\/property>  <property>    <name>mapred.temp.dir<\/name>    <value>/mapred/temp<\/value>    <description>A shared directory for temporary files.    <\/description>  <\/property> MAP与reduce处理过程中产生的临时文件，2个文件路径需要完全独立，且不能与data存放的路径重合。   启动与停止 启动脚本：start-all.sh（返回内容如下）： starting namenode, logging to /home/hadoop/hadoop-0.20.2-cdh3u1/logs/hadoop-admin-namenode-xxxxxxxxxx.out xxxxxxxxxx: starting datanode, logging to /home/admin/deploy/hadoop-0.20.2-cdh3u1/bin/../logs/hadoop-admin-datanode-xxxxxxxxxx.out xxxxxxxxxx: starting secondarynamenode, logging to /home/admin/deploy/hadoop-0.20.2-cdh3u1/bin/../logs/hadoop-admin-secondarynamenode- xxxxxxxxxx.out starting jobtracker, logging to /home/hadoop/hadoop-0.20.2-cdh3u1/logs/hadoop-admin-jobtracker-xxxxxxxxxx.out xxxxxxxxxx: starting tasktracker, logging to /home/admin/deploy/hadoop-0.20.2-cdh3u1/bin/../logs/hadoop-admin-tasktracker-xxxxxxxxxx.out 停止脚本：stop-all.sh（返回内容如下）： stopping jobtracker xxxxxxxxxx: stopping tasktracker stopping namenode xxxxxxxxxx: stopping datanode xxxxxxxxxx: stopping secondarynamenode   一些潜规则（权限切换） 在admin账号下使用hadoop，需要更改hadoop上的目录的权限，此时需要在hadoop账号下执行以下两条命令： hadoopfs -chown -R admin:admin / hadoop fs -chown -R hadoop:hadoop /user/hadoop/mapred/system","title":"Hadoop安装部署过程"},{"content":"摘要：随着数据体积的越来越大，实时处理成为了许多机构需要面对的首要挑战。Shruthi Kumar和Siddharth Patankar在Dr.Dobb’s上结合了汽车超速监视，为我们演示了使用Storm进行实时大数据分析。CSDN在此编译、整理。 简单和明了，Storm让大数据分析变得轻松加愉快。 当今世界，公司的日常运营经常会生成TB级别的数据。数据来源囊括了互联网装置可以捕获的任何类型数据，网站、社交媒体、交易型商业数据以及其它商业环境中创建的数据。考虑到数据的生成量，实时处理成为了许多机构需要面对的首要挑战。我们经常用的一个非常有效的开源实时计算工具就是Storm —— Twitter开发，通常被比作“实时的Hadoop”。然而Storm远比Hadoop来的简单，因为用它处理大数据不会带来新老技术的交替。 Shruthi Kumar、Siddharth Patankar共同效力于Infosys，分别从事技术分析和研发工作。本文详述了Storm的使用方法，例子中的项目名称为“超速报警系统（Speeding Alert System）”。我们想实现的功能是：实时分析过往车辆的数据，一旦车辆数据超过预设的临界值 —— 便触发一个trigger并把相关的数据存入数据库。 Storm 对比Hadoop的批处理，Storm是个实时的、分布式以及具备高容错的计算系统。同Hadoop一样Storm也可以处理大批量的数据，然而Storm在保证高可靠性的前提下还可以让处理进行的更加实时；也就是说，所有的信息都会被处理。Storm同样还具备容错和分布计算这些特性，这就让Storm可以扩展到不同的机器上进行大批量的数据处理。他同样还有以下的这些特性： 易于扩展。对于扩展，你只需要添加机器和改变对应的topology（拓扑）设置。Storm使用Hadoop Zookeeper进行集群协调，这样可以充分的保证大型集群的良好运行。 每条信息的处理都可以得到保证。 Storm集群管理简易。 Storm的容错机能：一旦topology递交，Storm会一直运行它直到topology被废除或者被关闭。而在执行中出现错误时，也会由Storm重新分配任务。 尽管通常使用Java，Storm中的topology可以用任何语言设计。 当然为了更好的理解文章，你首先需要安装和设置Storm。需要通过以下几个简单的步骤： 从Storm官方下载Storm安装文件 将bin/directory解压到你的PATH上，并保证bin/storm脚本是可执行的。 Storm组件 Storm集群主要由一个主节点和一群工作节点（worker node）组成，通过 Zookeeper进行协调。 主节点： 主节点通常运行一个后台程序 —— Nimbus，用于响应分布在集群中的节点，分配任务和监测故障。这个很类似于Hadoop中的Job Tracker。 工作节点： 工作节点同样会运行一个后台程序 —— Supervisor，用于收听工作指派并基于要求运行工作进程。每个工作节点都是topology中一个子集的实现。而Nimbus和Supervisor之间的协调则通过Zookeeper系统或者集群。 Zookeeper Zookeeper是完成Supervisor和Nimbus之间协调的服务。而应用程序实现实时的逻辑则被封装进Storm中的“topology”。topology则是一组由Spouts（数据源）和Bolts（数据操作）通过Stream Groupings进行连接的图。下面对出现的术语进行更深刻的解析。 Spout： 简而言之，Spout从来源处读取数据并放入topology。Spout分成可靠和不可靠两种；当Storm接收失败时，可靠的Spout会对tuple（元组，数据项组成的列表）进行重发；而不可靠的Spout不会考虑接收成功与否只发射一次。而Spout中最主要的方法就是nextTuple（），该方法会发射一个新的tuple到topology，如果没有新tuple发射则会简单的返回。 Bolt： Topology中所有的处理都由Bolt完成。Bolt可以完成任何事，比如：连接的过滤、聚合、访问文件/数据库、等等。Bolt从Spout中接收数据并进行处理，如果遇到复杂流的处理也可能将tuple发送给另一个Bolt进行处理。而Bolt中最重要的方法是execute（），以新的tuple作为参数接收。不管是Spout还是Bolt，如果将tuple发射成多个流，这些流都可以通过declareStream（）来声明。 Stream Groupings： Stream Grouping定义了一个流在Bolt任务间该如何被切分。这里有Storm提供的6个Stream Grouping类型： 1. 随机分组（Shuffle grouping）：随机分发tuple到Bolt的任务，保证每个任务获得相等数量的tuple。 2. 字段分组（Fields grouping）：根据指定字段分割数据流，并分组。例如，根据“user-id”字段，相同“user-id”的元组总是分发到同一个任务，不同“user-id”的元组可能分发到不同的任务。 3. 全部分组（All grouping）：tuple被复制到bolt的所有任务。这种类型需要谨慎使用。 4. 全局分组（Global grouping）：全部流都分配到bolt的同一个任务。明确地说，是分配给ID最小的那个task。 5. 无分组（None grouping）：你不需要关心流是如何分组。目前，无分组等效于随机分组。但最终，Storm将把无分组的Bolts放到Bolts或Spouts订阅它们的同一线程去执行（如果可能）。 6. 直接分组（Direct grouping）：这是一个特别的分组类型。元组生产者决定tuple由哪个元组处理者任务接收。 当然还可以实现CustomStreamGroupimg接口来定制自己需要的分组。 项目实施 当下情况我们需要给Spout和Bolt设计一种能够处理大量数据（日志文件）的topology，当一个特定数据值超过预设的临界值时促发警报。使用Storm的topology，逐行读入日志文件并且监视输入数据。在Storm组件方面，Spout负责读入输入数据。它不仅从现有的文件中读入数据，同时还监视着新文件。文件一旦被修改Spout会读入新的版本并且覆盖之前的tuple（可以被Bolt读入的格式），将tuple发射给Bolt进行临界分析，这样就可以发现所有可能超临界的记录。 下一节将对用例进行详细介绍。 临界分析 这一节，将主要聚焦于临界值的两种分析类型：瞬间临界（instant thershold）和时间序列临界（time series threshold）。 瞬间临界值监测：一个字段的值在那个瞬间超过了预设的临界值，如果条件符合的话则触发一个trigger。举个例子当车辆超越80公里每小时，则触发trigger。 时间序列临界监测：字段的值在一个给定的时间段内超过了预设的临界值，如果条件符合则触发一个触发器。比如：在5分钟类，时速超过80KM两次及以上的车辆。 Listing One显示了我们将使用的一个类型日志，其中包含的车辆数据信息有：车牌号、车辆行驶的速度以及数据获取的位置。 AB 123 60 North city BC 123 70 South city CD 234 40 South city DE 123 40 East  city EF 123 90 South city GH 123 50 West  city 这里将创建一个对应的XML文件，这将包含引入数据的模式。这个XML将用于日志文件的解析。XML的设计模式和对应的说明请见下表。 XML文件和日志文件都存放在Spout可以随时监测的目录下，用以关注文件的实时更新。而这个用例中的topology请见下图。 Figure 1：Storm中建立的topology，用以实现数据实时处理 如图所示：FilelistenerSpout接收输入日志并进行逐行的读入，接着将数据发射给ThresoldCalculatorBolt进行更深一步的临界值处理。一旦处理完成，被计算行的数据将发送给DBWriterBolt，然后由DBWriterBolt存入给数据库。下面将对这个过程的实现进行详细的解析。 Spout的实现 Spout以日志文件和XML描述文件作为接收对象。XML文件包含了与日志一致的设计模式。不妨设想一下一个示例日志文件，包含了车辆的车牌号、行驶速度、以及数据的捕获位置。（看下图） Figure2：数据从日志文件到Spout的流程图 Listing Two显示了tuple对应的XML，其中指定了字段、将日志文件切割成字段的定界符以及字段的类型。XML文件以及数据都被保存到Spout指定的路径。 Listing Two：用以描述日志文件的XML文件。 <TUPLEINFO> <FIELDLIST> <FIELD> <COLUMNNAME>vehicle_number<\/COLUMNNAME> <COLUMNTYPE>string<\/COLUMNTYPE> <\/FIELD>  <FIELD><COLUMNNAME>speed<\/COLUMNNAME> <COLUMNTYPE>int<\/COLUMNTYPE> <\/FIELD>  <FIELD> <COLUMNNAME>location<\/COLUMNNAME> <COLUMNTYPE>string<\/COLUMNTYPE> <\/FIELD> <\/FIELDLIST> <DELIMITER>,<\/DELIMITER> <\/TUPLEINFO>   通过构造函数及它的参数Directory、PathSpout和TupleInfo对象创建Spout对象。TupleInfo储存了日志文件的字段、定界符、字段的类型这些很必要的信息。这个对象通过XSTream序列化XML时建立。 Spout的实现步骤： 对文件的改变进行分开的监听，并监视目录下有无新日志文件添加。 在数据得到了字段的说明后，将其转换成tuple。 声明Spout和Bolt之间的分组，并决定tuple发送给Bolt的途径。 Spout的具体编码在Listing Three中显示。 Listing Three：Spout中open、nextTuple和delcareOutputFields方法的逻辑。 public void open( Map conf, TopologyContext context,SpoutOutputCollector collector )   {              _collector = collector;            try            {            fileReader  =  new BufferedReader(new FileReader(new File(file)));           }           catch (FileNotFoundException e)           {           System.exit(1);            }  }                                                           public void nextTuple()  {           protected void ListenFile(File file)           {           Utils.sleep(2000);           RandomAccessFile access = null;           String line = null;               try               {                  while ((line = access.readLine()) != null)                  {                      if (line !=null)                      {                            String[] fields=null;                            if (tupleInfo.getDelimiter().equals(\"|\"))  fields = line.split(\"\\\\\"+tupleInfo.getDelimiter());                             else                             fields = line.split  (tupleInfo.getDelimiter());                             if (tupleInfo.getFieldList().size() == fields.length)  _collector.emit(new Values(fields));                      }                 }              }              catch (IOException ex){ }              }  }   public void declareOutputFields(OutputFieldsDeclarer declarer)  {        String[] fieldsArr = new String [tupleInfo.getFieldList().size()];        for(int i=0; i<tupleInfo.getFieldList().size(); i++)        {                fieldsArr[i] = tupleInfo.getFieldList().get(i).getColumnName();        }  declarer.declare(new Fields(fieldsArr));  }      declareOutputFileds（）决定了tuple发射的格式，这样的话Bolt就可以用类似的方法将tuple译码。Spout持续对日志文件的数据的变更进行监听，一旦有添加Spout就会进行读入并且发送给Bolt进行处理。 Bolt的实现 Spout的输出结果将给予Bolt进行更深一步的处理。经过对用例的思考，我们的topology中需要如Figure 3中的两个Bolt。 Figure 3：Spout到Bolt的数据流程。 ThresholdCalculatorBolt Spout将tuple发出，由ThresholdCalculatorBolt接收并进行临界值处理。在这里，它将接收好几项输入进行检查；分别是： 临界值检查 临界值栏数检查（拆分成字段的数目） 临界值数据类型（拆分后字段的类型） 临界值出现的频数 临界值时间段检查 Listing Four中的类，定义用来保存这些值。 Listing Four:ThresholdInfo类 public class ThresholdInfo implementsSerializable   {            private String action;           private String rule;           private Object thresholdValue;          private int thresholdColNumber;           private Integer timeWindow;           private int frequencyOfOccurence;   }   基于字段中提供的值，临界值检查将被Listing Five中的execute（）方法执行。代码大部分的功能是解析和接收值的检测。 Listing Five：临界值检测代码段 public void execute(Tuple tuple, BasicOutputCollector collector)   {      if(tuple!=null)       {          List<Object> inputTupleList = (List<Object>) tuple.getValues();          int thresholdColNum = thresholdInfo.getThresholdColNumber();           Object thresholdValue = thresholdInfo.getThresholdValue();           String thresholdDataType = tupleInfo.getFieldList().get(thresholdColNum-1).getColumnType();           Integer timeWindow = thresholdInfo.getTimeWindow();           int frequency = thresholdInfo.getFrequencyOfOccurence();           if(thresholdDataType.equalsIgnoreCase(\"string\"))           {               String valueToCheck = inputTupleList.get(thresholdColNum-1).toString();               String frequencyChkOp = thresholdInfo.getAction();               if(timeWindow!=null)               {                   long curTime = System.currentTimeMillis();                   long diffInMinutes = (curTime-startTime)/(1000);                   if(diffInMinutes>=timeWindow)                   {                       if(frequencyChkOp.equals(\"==\"))                       {                            if(valueToCheck.equalsIgnoreCase(thresholdValue.toString()))                            {                                count.incrementAndGet();                                if(count.get() > frequency)                                    splitAndEmit(inputTupleList,collector);                            }                       }                       else if(frequencyChkOp.equals(\"!=\"))                       {                           if(!valueToCheck.equalsIgnoreCase(thresholdValue.toString()))                           {                                count.incrementAndGet();                                if(count.get() > frequency)                                    splitAndEmit(inputTupleList,collector);                            }                        }                        else                         System.out.println(\"Operator not supported\");                     }                }                else               {                    if(frequencyChkOp.equals(\"==\"))                    {                        if(valueToCheck.equalsIgnoreCase(thresholdValue.toString()))                        {                            count.incrementAndGet();                            if(count.get() > frequency)                                splitAndEmit(inputTupleList,collector);                            }                    }                    else if(frequencyChkOp.equals(\"!=\"))                    {                         if(!valueToCheck.equalsIgnoreCase(thresholdValue.toString()))                         {                             count.incrementAndGet();                             if(count.get() > frequency)                                 splitAndEmit(inputTupleList,collector);                            }                     }                 }              }              else if(thresholdDataType.equalsIgnoreCase(\"int\") ||                     thresholdDataType.equalsIgnoreCase(\"double\") ||                     thresholdDataType.equalsIgnoreCase(\"float\") ||                     thresholdDataType.equalsIgnoreCase(\"long\") ||                     thresholdDataType.equalsIgnoreCase(\"short\"))              {                  String frequencyChkOp = thresholdInfo.getAction();                  if(timeWindow!=null)                  {                       long valueToCheck =                          Long.parseLong(inputTupleList.get(thresholdColNum-1).toString());                       long curTime = System.currentTimeMillis();                       long diffInMinutes = (curTime-startTime)/(1000);                       System.out.println(\"Difference in minutes=\"+diffInMinutes);                       if(diffInMinutes>=timeWindow)                       {                            if(frequencyChkOp.equals(\"<\"))                            {                                if(valueToCheck < Double.parseDouble(thresholdValue.toString()))                                {                                     count.incrementAndGet();                                     if(count.get() > frequency)                                         splitAndEmit(inputTupleList,collector);                                }                            }                            else if(frequencyChkOp.equals(\">\"))                            {                                 if(valueToCheck > Double.parseDouble(thresholdValue.toString()))                                  {                                     count.incrementAndGet();                                     if(count.get() > frequency)                                         splitAndEmit(inputTupleList,collector);                                 }                             }                             else if(frequencyChkOp.equals(\"==\"))                             {                                if(valueToCheck == Double.parseDouble(thresholdValue.toString()))                                {                                    count.incrementAndGet();                                    if(count.get() > frequency)                                        splitAndEmit(inputTupleList,collector);                                 }                             }                             else if(frequencyChkOp.equals(\"!=\"))                             {      . . .                              }                         }               }        else           splitAndEmit(null,collector);        }        else      {             System.err.println(\"Emitting null in bolt\");             splitAndEmit(null,collector);      }  } 经由Bolt发送的的tuple将会传递到下一个对应的Bolt，在我们的用例中是DBWriterBolt。 DBWriterBolt 经过处理的tuple必须被持久化以便于触发tigger或者更深层次的使用。DBWiterBolt做了这个持久化的工作并把tuple存入了数据库。表的建立由prepare（）函数完成，这也将是topology调用的第一个方法。方法的编码如Listing Six所示。 Listing Six：建表编码。 public void prepare( Map StormConf, TopologyContext context )   {             try       {          Class.forName(dbClass);      }       catch (ClassNotFoundException e)       {          System.out.println(\"Driver not found\");          e.printStackTrace();      }         try       {         connection driverManager.getConnection(              \"jdbc:mysql://\"+databaseIP+\":\"+databasePort+\"/\"+databaseName, userName, pwd);         connection.prepareStatement(\"DROP TABLE IF EXISTS \"+tableName).execute();            StringBuilder createQuery = new StringBuilder(             \"CREATE TABLE IF NOT EXISTS \"+tableName+\"(\");         for(Field fields : tupleInfo.getFieldList())         {             if(fields.getColumnType().equalsIgnoreCase(\"String\"))                 createQuery.append(fields.getColumnName()+\" VARCHAR(500),\");             else                createQuery.append(fields.getColumnName()+\" \"+fields.getColumnType()+\",\");         }         createQuery.append(\"thresholdTimeStamp timestamp)\");         connection.prepareStatement(createQuery.toString()).execute();            // Insert Query         StringBuilder insertQuery = new StringBuilder(\"INSERT INTO \"+tableName+\"(\");         String tempCreateQuery = new String();         for(Field fields : tupleInfo.getFieldList())         {              insertQuery.append(fields.getColumnName()+\",\");         }         insertQuery.append(\"thresholdTimeStamp\").append(\") values (\");         for(Field fields : tupleInfo.getFieldList())         {             insertQuery.append(\"?,\");         }            insertQuery.append(\"?)\");         prepStatement = connection.prepareStatement(insertQuery.toString());      }      catch (SQLException e)       {                 e.printStackTrace();      }         }  数据分批次的插入数据库。插入的逻辑由Listting Seven中的execute（）方法提供。大部分的编码都是用来实现可能存在不同类型输入的解析。 Listing Seven：数据插入的代码部分。 public void execute(Tuple tuple, BasicOutputCollector collector)   {      batchExecuted=false;      if(tuple!=null)      {         List<Object> inputTupleList = (List<Object>) tuple.getValues();         int dbIndex=0;         for(int i=0;i<tupleInfo.getFieldList().size();i++)         {             Field field = tupleInfo.getFieldList().get(i);             try {                 dbIndex = i+1;                 if(field.getColumnType().equalsIgnoreCase(\"String\"))                                  prepStatement.setString(dbIndex, inputTupleList.get(i).toString());                 else if(field.getColumnType().equalsIgnoreCase(\"int\"))                     prepStatement.setInt(dbIndex,                         Integer.parseInt(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"long\"))                     prepStatement.setLong(dbIndex,                          Long.parseLong(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"float\"))                     prepStatement.setFloat(dbIndex,                          Float.parseFloat(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"double\"))                     prepStatement.setDouble(dbIndex,                          Double.parseDouble(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"short\"))                     prepStatement.setShort(dbIndex,                          Short.parseShort(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"boolean\"))                     prepStatement.setBoolean(dbIndex,                          Boolean.parseBoolean(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"byte\"))                     prepStatement.setByte(dbIndex,                          Byte.parseByte(inputTupleList.get(i).toString()));                 else if(field.getColumnType().equalsIgnoreCase(\"Date\"))                 {                    Date dateToAdd=null;                    if (!(inputTupleList.get(i) instanceof Date))                      {                           DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");                         try                          {                             dateToAdd = df.parse(inputTupleList.get(i).toString());                         }                         catch (ParseException e)                          {                             System.err.println(\"Data type not valid\");                         }                     }                       else                    {              dateToAdd = (Date)inputTupleList.get(i);              java.sql.Date sqlDate = new java.sql.Date(dateToAdd.getTime());              prepStatement.setDate(dbIndex, sqlDate);              }                 }           catch (SQLException e)           {               e.printStackTrace();          }      }      Date now = new Date();                try     {          prepStatement.setTimestamp(dbIndex+1, new java.sql.Timestamp(now.getTime()));          prepStatement.addBatch();          counter.incrementAndGet();          if (counter.get()== batchSize)           executeBatch();      }       catch (SQLException e1)       {          e1.printStackTrace();      }                }     else    {          long curTime = System.currentTimeMillis();         long diffInSeconds = (curTime-startTime)/(60*1000);         if(counter.get()<batchSize && diffInSeconds>batchTimeWindowInSeconds)         {              try {                  executeBatch();                  startTime = System.currentTimeMillis();              }              catch (SQLException e) {                   e.printStackTrace();              }         }     }  }     public void executeBatch() throws SQLException  {      batchExecuted=true;      prepStatement.executeBatch();      counter = new AtomicInteger(0);  } 一旦Spout和Bolt准备就绪（等待被执行），topology生成器将会建立topology并准备执行。下面就来看一下执行步骤。 在本地集群上运行和测试topology 通过TopologyBuilder建立topology。 使用Storm Submitter，将topology递交给集群。以topology的名字、配置和topology的对象作为参数。 提交topology。 Listing Eight：建立和执行topology。 public class StormMain  {       public static void main(String[] args) throws AlreadyAliveException,                                                      InvalidTopologyException,                                                      InterruptedException        {            ParallelFileSpout parallelFileSpout = new ParallelFileSpout();            ThresholdBolt thresholdBolt = new ThresholdBolt();            DBWriterBolt dbWriterBolt = new DBWriterBolt();            TopologyBuilder builder = new TopologyBuilder();            builder.setSpout(\"spout\", parallelFileSpout, 1);            builder.setBolt(\"thresholdBolt\", thresholdBolt,1).shuffleGrouping(\"spout\");            builder.setBolt(\"dbWriterBolt\",dbWriterBolt,1).shuffleGrouping(\"thresholdBolt\");            if(this.argsMain!=null && this.argsMain.length > 0)             {                conf.setNumWorkers(1);                StormSubmitter.submitTopology(                      this.argsMain[0], conf, builder.createTopology());            }            else           {                    Config conf = new Config();                conf.setDebug(true);                conf.setMaxTaskParallelism(3);                LocalCluster cluster = new LocalCluster();                cluster.submitTopology(                \"Threshold_Test\", conf, builder.createTopology());            }       }  } topology被建立后将被提交到本地集群。一旦topology被提交，除非被取缔或者集群关闭，它将一直保持运行不需要做任何的修改。这也是Storm的另一大特色之一。 这个简单的例子体现了当你掌握了topology、spout和bolt的概念，将可以轻松的使用Storm进行实时处理。如果你既想处理大数据又不想遍历Hadoop的话，不难发现使用Storm将是个很好的选择。 csdn（编译/仲浩 王旭东/审校）：http://www.csdn.net/article/2012-12-24/2813117-storm-realtime-big-data-analysis 原文链接：Easy, Real-Time Big Data Analysis Using Storm ","title":"使用Storm实现实时大数据分析！"},{"content":"本例假定你已经安装了libvirt、kvm，且在操作系统中配置好了桥接网络。 将以下内容保存到vminstall.sh，然后sh vminstall.sh 开始安装，当返回命令提示行后，使用VNCViewer连接进行安装操作。 读者请根据自己的实际情况进行修改。 #!/bin/sh . /etc/profile KVM_NAME=\"kvm_135_154_10\"             /usr/sbin/virt-install \\         --name $KVM_NAME \\          --vcpus 2 \\                                                                                                                    --ram 2024 \\         --disk path=/data/kvm/img/$KVM_NAME.img,size=15 \\         --network bridge:br0,model=virtio \\         --accelerate \\         --virt-type=kvm \\         --noreboot \\         --vnc \\         --vnclisten=0.0.0.0 \\         -c /data/kvm/ubuntu-12.04.1-server-amd64.iso   解释说明： --name  libvirt中的domain名称 --vcpus 核心数 --ram 内存大小(MB) --disk path 生成的虚拟机镜像存放位置，后面的size是镜像的大小(GB) --network 网络，本例使用的桥接到br0，模式是virtio --virt-type 虚拟机类型 --noreboot  安装后完成后不重启，直接退出 --vnc 开启vnc连接以便使用vncviewer连接进行安装操作 -c 安装的光盘镜像   该脚本执行成功后，会在/etc/libvirt/qemu/路径下生成一个kvm_135_154_10.xml的配置文件，如果你要对其进行修改，只能使用virsh工具，然后editkvm_135_154_10来进行编辑，直接使用vi编辑则无效。","title":"libvirt创建虚拟机脚本"},{"content":"对于TinyOS的I/O分析最好的一个分析例子就是apps/Blink。控制Led闪烁的接口Leds来自于模块LedsC。该模块（LedsC）位于Tos/System/LedsC.nc文件中定义。实际上Leds接口的实现是在同目录下的LedsP.nc文件中完成的。而从开始到这个阶段都还完全没有涉及到底层I/O的指定。其实从LedsC.nc和LedsP.nc文件所在的目录（System）看，也很容易理解：这里的接口实现也只是单纯的通过系统调用完成的，和底层的硬件I/O是完全隔离的。那么下面我们来看看，底层的I/O是在哪儿指定的呢？ 在文件Leds.nc中可以看到模块PlatformLedsC的引入，该模块提供了接口les0、led1、led2（实际上均为GeneralIO接口的别名）。该模块（PlatformLedsC）位于Tos/Platforms/Telosa/PlatformLedsC.nc中（笔者的应用平台是tmote，至于为什么该文件在telosa平台目录下，这个要看makefile才能讲的清楚了）。而在模块PlatformLedsC中提供的接口les0、led1、led2（实际上均为GeneralIO接口的别名）来自于 模块Led0Impl、 Led1Impl、 Led2Impl（模块Msp430GpioC()的别名）。模块Msp430GpioC()在tos/chips/msp430/pins/Msp430GpioC.nc中定义实现。本来以为这里应该是定义了最底层的I/O指定，实际上这里也只是中间的一步而已。在该文件中很容易发现，Msp430GpioC()模块提供的接口是通过接口HplMsp430GeneralIO来实现的。那现在的问题是接口HplMsp430GeneralIO又是由谁具体来实现的呢？ 要解决这个问题我们还要回到文件Tos/Platforms/Telosa/PlatformLedsC.nc中，在这里引入了模块HplMsp430GeneralIOC，同时指定接口来自这个模块。模块HplMsp430GeneralIOC实际位于tos/chips/msp430/pins/HplMsp430GeneralIOC.nc，但实际的接口提供者是同目录下的HplMsp430GeneralIOP模块。这个模块可以算是底层I/O指定的终极模块文件了。到这里我们的底层I/O挖掘之旅就算是完整的结束啦。 总结下，I/O的调用层次：apps/Blink -> Tos/System/LedsC.nc -> Tos/Platforms/Telosa/PlatformLedsC.nc -> tos/chips/msp430/pins/Msp430GpioC.nc -> tos/chips/msp430/pins/HplMsp430GeneralIOC.nc ps:在本范例中分析的tinyOS源码版本为2.1.1","title":"TinyOS之Blink（一） - 底层I/O指定分析"},{"content":"分布式系统几种典型一致性算法简述       在分布式系统中，我们经常遇到多数据副本保持一致的问题，在我们所能找到的资料中该问题讲的很笼统，模模糊糊的，把多个问题或分类糅合在一起，难以理解。在思考和翻阅资料后，通俗地把一致性的问题可分解为2个问题：1是任何一次修改保证数据一致性， 2是多次数据修改的一致性。在弱一致性的算法，不要求每次修改的内容在修改后多副本的内容是一致的，对问题1的解决比较宽松，更多解决问题2，该类算法追求每次修改的高度并发性，减少多副本之间修改的关联性，以获得更好的并发性能。例如最终一致性，无所谓每次用户修改后的多副本的一致性及格过，只要求在单调的时间方向上，数据最终保持一致，如此获得了修改极大的并发性能。强一致性的算法中，强调单次修改后结果的一致，需要保证了对问题1和问题2要求的实现，牺牲了并发性能。本文是讨论对解决问题1实现算法，这些算法往往在强一致性要求的应用中使用。      解决问题1的方法，通常有两阶段提交算法、采用分布式锁服务和采用乐观锁原理实现的同步方式,下面分别介绍这几种算法的实现原理。    两阶段提交算法      在两阶段提交协议中，系统一般包含两类机器（或节点）：一类为协调者（coordinator），通常一个系统中只有一个；另一类为事务参与者（participants，cohorts或workers），一般包含多个，在数据存储系统中可以理解为数据副本的个数。两阶段提交协议由两个阶段组成，在正常的执行下，这两个阶段的执行过程如下所述：  阶段1：请求阶段（commit-request phase，或称表决阶段，voting phase）。在请求阶段，协调者将通知事务参与者准备提交或取消事务，然后进入表决过程。在表决过程中，参与者将告知协调者自己的决策：同意（事务参与者本地作业执行成功）或取消（本地作业执行故障）。  阶段2：提交阶段（commit phase）。 在该阶段，协调者将基于第一个阶段的投票结果进行决策：提交或取消。当且仅当所有的参与者同意提交事务协调者才通知所有的参与者提交事务，否则协调者将通知所有的参与者取消事务。参与者在接收到协调者发来的消息后将执行响应的操作。          举个例子：A组织B、C和D三个人去爬长城：如果所有人都同意去爬长城，那么活动将举行；如果有一人不同意去爬长城，那么活动将取消。用2PC算法解决该问题的过程如下： 首先A将成为该活动的协调者，B、C和D将成为该活动的参与者。 阶段1：A发邮件给B、C和D，提出下周三去爬山，问是否同意。那么此时A需要等待B、C和D的邮件。B、C和D分别查看自己的日程安排表。B、C发现自己在当日没有活动安排，则发邮件告诉A它们同意下周三去爬长城。由于某种原因，D白天没有查看邮件。那么此时A、B和C均需要等待。到晚上的时候，D发现了A的邮件，然后查看日程安排，发现周三当天已经有别的安排，那么D回复A说活动取消吧。 阶段2：此时A收到了所有活动参与者的邮件，并且A发现D下周三不能去爬山。那么A将发邮件通知B、C和D，下周三爬长城活动取消。此时B、C回复A“太可惜了”，D回复A“不好意思”。至此该事务终止。        两阶段提交算法在分布式系统结合，可实现单用户对文件（对象）多个副本的修改，多副本数据的同步。其结合的原理如下： 1、    客户端（协调者）向所有的数据副本的存储主机（参与者）发送：修改具体的文件名、偏移量、数据和长度信息，请求修改数据，该消息是1阶段的请求消息。 2、    存储主机接收到请求后，备份修改前的数据以备回滚，修改文件数据后，向客户端回应修改成功的消息。 如果存储主机由于某些原因（磁盘损坏、空间不足等）不能修改数据，回应修改失败的消息。 3、      客户端接收发送出去的每一个消息回应，如果存储主机全部回应都修改成功，向每存储主机发送确认修改的提交消息；如果存在存储主机回应修改失败，或者超时未回应，客户端向所有存储主机发送取消修改的提交消息。该消息是2阶段的提交消息。 4、      存储主机接收到客户端的提交消息，如果是确认修改，则直接回应该提交OK消息；如果是取消修改，则将修改数据还原为修改前，然后回应取消修改OK的消息。 5、      客户端接收全部存储主机的回应，整个操作成功。        在该过程中可能存在通信失败，例如网络中断、主机宕机等诸多的原因，对于未在算法中定义的其它异常，都认为是提交失败，都需要回滚，这是该算法基于确定的通信回复实现的，在参与者的确定回复（无论是回复失败还是回复成功）之上执行逻辑处理，符合确定性的条件当然能够获得确定性的结果哲学原理。 分布式锁服务     分布式锁是对数据被外界修改持保守态度，在整个数据处理过程中将数据处于锁定状态，在用户修改数据的同时，其它用户不允许修改。采用分布式锁服务实现数据一致性，是在操作目标之前先获取操作许可，然后再执行操作，如果其他用户同时尝试操作该目标将被阻止，直到前一个用户释放许可后，其他用户才能够操作目标。分析这个过程，如果只有一个用户操作目标，没有多个用户并发冲突，也申请了操作许可，造成了由于申请操作许可所带来的资源使用消耗，浪费网络通信和增加了延时。      采用分布式锁实现多副本内容修改的一致性问题， 选择控制内容颗粒度实现申请锁服务。例如我们要保证一个文件的多个副本修改一致， 可以对整个文件修改设置一把锁，修改时申请锁，修改这个文件的多个副本，确保多个副本修改的一致，修改完成后释放锁；也可以对文件分段，或者是文件中的单个字节设置锁， 实现更细颗粒度的锁操作，减少冲突。       常用的锁实现算法有Lamport bakery algorithm （俗称面包店算法）， 还有Paxos算法。下面对其原理做简单概述。 Lamport面包店算法               是解决多个线程并发访问一个共享的单用户资源的互斥问题的算法。 由Leslie Lamport（英语：Leslie Lamport）发明。      Lamport把这个并发控制算法可以非常直观地类比为顾客去面包店采购。面包店只能接待一位顾客的采购。已知有n位顾客要进入面包店采购，安排他们按照次序在前台登记一个签到号码。该签到号码逐次加1。根据签到号码的由小到大的顺序依次入店购货。完成购买的顾客在前台把其签到号码归0. 如果完成购买的顾客要再次进店购买，就必须重新排队。 这个类比中的顾客就相当于线程，而入店购货就是进入临界区独占访问该共享资源。由于计算机实现的特点，存在两个线程获得相同的签到号码的情况，这是因为两个线程几乎同时申请排队的签到号码，读取已经发出去的签到号码情况，这两个线程读到的数据是完全一样的，然后各自在读到的数据上找到最大值，再加1作为自己的排队签到号码。为此，该算法规定如果两个线程的排队签到号码相等，则线程id号较小的具有优先权。 把该算法原理与分布式系统相结合，即可实现分步锁。 Paxos算法        该算法比较热门，参见WIKI， http://zh.wikipedia.org/wiki/Paxos%E7%AE%97%E6%B3%95  Paxos算法解决的问题是一个分布式系统如何就某个值(决议)达成一致。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个“一致性算法”以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。节点通信存在两种模型：共享内存(Shared memory)和消息传递(Messages passing)。Paxos算法就是一种基于消息传递模型的一致性算法。BigTable使用一个分布式数据锁服务Chubby，而Chubby使用Paxos算法来保证备份的一致性。  采用乐观锁原理实现的同步       我们举个例子说明该算法的实现原理。如一个金融系统，当某个操作员读取用户的数据，并在读出的用户数据的基础上进行修改时（如更改用户帐户余额），如果采用前面的分布式锁服务机制，也就意味着整个操作过程中（从操作员读出数据、开始修改直至提交修改结果的全过程，甚至还包括操作员中途去煮咖啡的时间），数据库记录始终处于加锁状态，可以想见，如果面对几百上千个并发，这样的情况将导致怎样的后果。 　　乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。 　　对于上面修改用户帐户信息的例子而言，假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。 操作员 A 此时将其读出（version=1 ），并从其帐户余额中扣除 $50（$100-$50 ）。 在操作员 A 操作的过程中，操作员B也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。 操作员 A 完成了修改工作，将数据版本号加一（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。 操作员 B 完成了操作，也将版本号加一（ version=2 ）试图向数据库提交数据（ balance=$80 ），但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，数据库记录当前版本也为 2 ，不满足 “ 提交版本必须大于记录当前版本才能执行更新 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。  乐观锁机制与分布式系统相结合上， 我整理了伪代码如下： obj  操作的目标 vlaue 修改的值 atom_update_ver 每个目标上的版本，每次修改该值递增 set( obj, value) {      //从每个节点上取出修改前的对象版本     get original_ver = obj.atom_update_ver from each node;      //将值赋到每个节点的obj目标     set obj = value from each node;      //条件修改每个节点的obj版本，目标版本加一      //比较和修改操作是原子操作     result = (set obj.atom_update_ver = original_ver + 1                   where  original_ver + 1 >  obj.atom_update_ver                    for each node);     if(result == ok)         return set_ok;     else         return set(obj, value);//不成功递归修改        该算法未考虑节点下线、失效等问题，在后续我将分析采用乐观锁原理实现一致性算法，解决问题2、节点失效、通信失败等问题。      上文引用了互联网多篇好文，向先辈作者表示敬意，同时本文也可能存在不少错误，望不吝指正。                                                                                                                                                                                                           2012年12月","title":"分布式系统几种典型一致性算法简述"},{"content":"业内人士分析指出，云计算试水阶段已经结束，在2013年，公司们需要开始认真落实云战略，以及将恰当的工作负载转移到公有云上了。以下是关于2013年我们拭目以待的10项预测。 1、混合云崛起 随着企业开始着手考虑分析哪些应用要放到公有云上，哪些应用要放到私有云上，IT主管们将会很快发现，混合云将是最合理的选择。 2、亚马逊的竞争对手将开始衰退 专家指出，跳入公有云IaaS市场的很多企业在2013年将可能无法存活下去，因为亚马逊的竞争力太强了。利润空间很低，如果提供商无法提供具有差异化的有价值的服务，那很可能要衰退下去。 3、混合云管理成为关键问题 一旦企业迁移到混合云中，那么一个关键问题将会是：IT主管们必须能掌握管理公有云和私有云基础设施的能力。不过值得庆幸的是，已经有第三方的云集成管理公司可以帮忙。 4、云经纪商和集成中心将暴增 IDC预测，2015年，通过SaaS模式，每6美元的套装软件需要花费1美元，每5美元的应用程序要花费1美元。所以这些应用程序将由谁来掌握呢?云服务经纪公司!谁来负责这些应用程序的安全和审计开发呢?谁使用同类应用软件来与合作伙伴建立B2B联系呢?云集成中心! 5、大数据变得更大 大数据——海量非结构化数据分析和云计算的无限计算能力，简直天作之合。诸多大型供应商都已进入这一领域，明显的例子就是HP收购Vertica和Autonomy，IBM收购Netezza以及EMC收购Greenplum.大数据分析方面的初创企业也在大量产生。 6、软件定义网络(SDN)成为主流 7月份的时候VMware为SDN初创公司Nicera斥资10亿美元，上个月，Cisco为Meraki投入12亿美元，使网络系统可以通过云来管理。这些都意味着什么呢?所有的这些动作都表明了,2013年，SDN将会被重新定义。 7、混合云安全选项将 随着企业迁移到混合云，提供商们都会在云安全上做出两项努力以跟上节奏：为本地接入提供基于传统硬件的安全产品;为移动设备提供安全即服务(security-as-a-service )产品来支撑安全。IDC预测在接下来的3年里，混合云的部署量将占到所有云计算部署总量的60%。IDC同时还预测这一市场也将在2016年增长至33亿美元。 8、基于IaaS的服务将增长 IaaS领域的行业标准将扩展至包括例如WAN最优化即服务(optimization-as-a-service)、加载平衡即服务(load balancing-as-a-service)。“在本地完成这些事情不是什么问题，关键是要实现如何能让它们在云上更便宜和更有效。” 9、停机问题将出现 不管企业的云服务提供商是多么优秀，企业都应该做好备份准备。云服务中断问题肯定是有可能发生的，如果企业能多做好这方面的准备，肯定是大有好处的。服务中断这种偶然事件很难预测，所以企业务必要有良好的备份计划。 10、游戏化将推动销售和客户服务 Gartner预测，到2014年，所有的“财富”2000强企业里，70%将至少有一个基于云计算的应用程序来根据商业原理来影响员工和客户的行为。游戏化的概念是将游戏设计原理应用到非游戏性质的应用程序里以使它们变得更加有趣、更强参与性以及更吸引人。商业世界里的应用程序包括促进销售、鼓励员工以及员工相互间和合作伙伴相互间的信息分享、更高的客户服务满意度。","title":"关于2013年云计算应用的10种预测"},{"content":"搞了很久为毛出不来结果啊，那里错了？？不明白啊 scan的操作： hbase(main):002:0> scan 'scores' ROW                              COLUMN+CELL                                                                                    zkb                             column=course:, timestamp=1356629086396, value=90                                              zkb                             column=course:art, timestamp=1356629086401, value=87                                           zkb                             column=course:math, timestamp=1356629086398, value=97                                          zkb                             column=grade:, timestamp=1356629086385, value=5                                               1 row(s) in 0.2260 seconds  public static void scanBySingleColumnValueFilter(String tableName,String row,String family,String qual,int value) throws IOException{              HTable table = new HTable(conf, tableName);                Scan scan = new Scan();              byte[] b_family = Bytes.toBytes(family);              byte[] b_qual = Bytes.toBytes(qual);              byte[] b_value = Bytes.toBytes(value);              FilterList filterList = new FilterList();                  SingleColumnValueFilter singleColumnValueFilter = new SingleColumnValueFilter(b_family, b_qual, CompareOp.EQUAL, b_value);              singleColumnValueFilter.setFilterIfMissing(true);              filterList.addFilter(singleColumnValueFilter);              scan.setFilter(filterList);              scan.addColumn(b_family, b_qual);              ResultScanner rs = table.getScanner(scan);                showResultScanner(rs);                             } show结果  public static void showResultScanner(ResultScanner rs){                 for(Result r:rs){                         for(KeyValue kv : r.raw()){                            System.out.print(new String(kv.getRow()) + \" \");                            System.out.print(new String(kv.getFamily()) + \":\");                            System.out.print(new String(kv.getQualifier()) + \" \");                            System.out.print(kv.getTimestamp() + \" \");                            System.out.println(new String(kv.getValue()));                         }                     }            } 在主函数里调用的时候  HBaseClient.scanBySingleColumnValueFilter(tablename, null, \"course\", \"art\", 87); 当设置为CompareOp.EQUAL时匹配不出来，   SingleColumnValueFilter singleColumnValueFilter = new SingleColumnValueFilter(b_family, b_qual,CompareOp.EQUAL, b_value); 当设置为CompareOp.NOT_EQUAL时便有数据了：              SingleColumnValueFilter singleColumnValueFilter = new SingleColumnValueFilter(b_family, b_qual, CompareOp.NOT_EQUAL, b_value); =========== scanBySingleColumnValueFilter ======= zkb course:art 1356629381243 87","title":"hbase的过滤 Filter 之SingleColumnValueFilter"},{"content":"首先来can下表： hbase(main):004:0> scan 'scores' ROW                              COLUMN+CELL                                                                                    zkb                             column=course:, timestamp=1356625587787, value=90                                              zkb                             column=course:art, timestamp=1356625587791, value=87                                           zkb                             column=course:math, timestamp=1356625587789, value=97                                          zkb                             column=grade:, timestamp=1356625587776, value=5                                               1 row(s) in 0.2280 seconds 然后是写的一个scan filter 函数:  public static void scanValueByFilter(String tableName,String row) throws IOException{              HTable table = new HTable(conf, tableName);                Scan scan = new Scan();              scan.setFilter(new PrefixFilter(row.getBytes()));              ResultScanner resultScanner = table.getScanner(scan);              for(Result rs:resultScanner){                           for(KeyValue kv:rs.raw()){                      StringBuilder sb = new StringBuilder();                      System.out.println(sb.append(\"Row/Family:qual:  \").append(new String(kv.getRow())).append(\"/\").append(new String(kv.getFamily())).append(\":\").append(new String(kv.getQualifier())));                      System.out.println(\"kv.getFamily(): \"+new String(kv.getFamily()));                      System.out.println(\"kv.getRow(): \"+new String(kv.getRow()));                      System.out.println(\"kv.getQualifier(): \"+new String(kv.getQualifier()));                      System.out.println(\"kv.getTimestamp(): \"+new String(String.valueOf(kv.getTimestamp())));                      System.out.println(new String(kv.getValue()));                      System.out.println(\"---------------------------------\");                                       }              }                       } 直接调用：      HBaseClient.scanValueByFilter(tablename,\"zkb\"); 结果： Row/Family:qual:  zkb/course: kv.getFamily(): course kv.getRow(): zkb kv.getQualifier(): kv.getTimestamp(): 1356626264657 90 --------------------------------- Row/Family:qual:  zkb/course:art kv.getFamily(): course kv.getRow(): zkb kv.getQualifier(): art kv.getTimestamp(): 1356626264680 87 --------------------------------- Row/Family:qual:  zkb/course:math kv.getFamily(): course kv.getRow(): zkb kv.getQualifier(): math kv.getTimestamp(): 1356626264674 97 --------------------------------- Row/Family:qual:  zkb/grade: kv.getFamily(): grade kv.getRow(): zkb kv.getQualifier(): kv.getTimestamp(): 1356626264637 5","title":"hbase的过滤 Filter 之PrefixFilter"},{"content":"“exposed die attach pad”的中文意思是“裸露的芯片连接焊盘”，一般在芯片的底端。大家常常思考的一个问题是，这个焊盘要不要接地？真实的情况是：接不接地要视情况而定。比方说对于CC2420在datasheet上的管脚描述上是”Must be connected to solid ground plane“，那么这个管脚就必须接地，否则不会正常工作（前一版就是因为这个焊盘没接地，结果基准电压不工作，晶振两端没偏压）。但对于nRF系列的射频芯片有的就真的不用接地，我的一个同学就用过一款，是不用接地的，但照样会正常工作。后来，我还专门找了下相关资料验证了下： Should we connect the die attach pad on the QFN package? The exposed die attach pad is a pad connected to the IC substrate die ground and is intentionally not used in our layouts. It should be unconnected to avoid crosstalk from the GND pins carrying a multitude of frequencies back into the chip substrate. In our layouts we have not covered the GND vias with solder mask, but feel free to do this in your design. All other signal lines (e.g. VDD) must be covered. Note: This information does not apply to the nRF24LE1 QFN32, nRF24LE1 QFN48 and nRF24AP2 QFN32 package. (On these three packages there is internal down bonding to the die pad and hence the die attach pad must be connected.) 从上面的描述很明显就验证了，“exposed die attach pad”要不要接地，要视情况而定这一说法。 参考资料： http://www.nordicsemi.com/kor/layout/set/print/Nordic-FAQ/All/Should-we-connect-the-die-attach-pad-on-the-QFN-package","title":"exposed die attach pad"},{"content":"以前没有做过射频电路，但确实听说电路的射频部分是很专业的，也听说过周围很多的同学在射频部分栽了跟头，传输距离只有几个厘米。所以自己设计射频电路的时候专门请教了一个专门做射频电路的同学，他的建议是射频电路设计一般需要注意一下几点： 1、双层板的话，上面走信号线，下面是整面的地。射频信号和低频信号不同，低频信号时沿传输线传输，但射频信号是在信号线和底层地之间的板材中传输的。（在本设计中，下面是正面的地，上面走射频信号线，而且射频部分专门分割开，不敷铜；但同学说上面走信号线的部分也是可以和其他部分一样敷铜的，但底层尽量敷整面的） 2、信号线线宽、板材、板子厚度是相关的，可以用专门的软件计算。在我的设计中射频线宽选择了30mil，板材为FR4，板子厚度为1mm。（一般市面上的默认板材都是FR4，默认厚度是1.6mm。上面的参数选择并不是根据软件计算的，而是尽量考虑画板的需求。观察一般的射频板，一个基本特征就是射频的信号线相对别的数字信号线要宽些，同时板子也要薄些） 3、相同功能的原件尽量靠近，这样可以有效减少传输过程中造成的阻抗不匹配和信号反射。 4、射频信号线在工艺上貌似可以专门指定，但在本设计中并没有。 上面的几点只是自己做板子的参照，没有特别的依据，但这样做的板子效果还可以，在教研室10米的空间做测试效果还是不错的。当然这里用的天线是外置天线而不是自己画的板上天线。 在本设计之外，还有一点建议，那就是设计中注意CSMA/CD(载波监听多点接入/碰撞检测)，很多同学在设计完射频电路后遇到的一个问题是，无线传输时好时坏，很不稳定。这时候，大多同学会认为是自己的射频电路设计有问题。其实，真正的原因在于自己的实验环境中同样有该频段的无线设备在使用，比方说wifi。（在09年全国大学生电子设计的时候就遇到过这个问题，系统很不稳定，到比赛结束都不晓得问题出在哪里，都是到了研究生阶段才发现） PS：自己对射频电路设计基本没有任何专业的基础，所以上面的观点也仅供参考。","title":"tmote设计（四） - CC2420(射频电路设计注意事项)"},{"content":"Windows Azure上增加了8个新功能，包括新的移动服务，网页缩放，以及数据同步。   副总裁斯科特·格思里在他的博客中详细介绍了新的功能。下面是一些更值得一提的改进：   移动服务：更好的能力来安排后台作业，让用户体验不会被打乱。工作可以安排在预先设定的时间间隔，使开发人员可以创建或管理一个单独的虚拟机的情况下执行的情况。此外，现已在北欧开通Azure的移动服务。在此之前，WindowsAzure中移动的服务仅在美国东部和美国西部地区的WindowsAzure支持。   网站缩放：现在，开发人员可以扩展网站共享实例和多达10个保留的情况下。这些可以是小型，中型还是大型的。在此之前，开发人员可以扩展到三个共享实例和三个预留的。格思里还写道，Azure现在有​​一个新的自定义创建的工作流程，允许配置的一部分创建的网站的源代码管理设置。   数据同步：在新的WindowsAzure管理门户，现在可以从SQL数据同步服务。Guthrie解释了SQL数据同步，让你多个SQL数据库之间的数据同步。这些SQL数据库可以在您的本地环境和云，或在多个云托管的数据库，其中可能包含多个WindowsAzure地区，世界各地跨越。   这里有所有可用的完整列表：   移动服务（作业调度程序的支持，欧洲地区的支持，支持命令行） 网站（大规模改进，集成的源代码控制） SQL数据同步（支持新的HTML门户） ACS管理（支持新的HTML门户网站） 媒体服务（工作和任务管理，支持Blob存储，保留计算） 虚拟网络增强功能 认购过滤支持 Windows Azure的存储（现在可以在更多的国家） 已经有一些最近的更新到WindowsAzure，这表明，它试图用AmazonWeb Services（AWS）更具有竞争力。Azure是一个方式，成为一个真正的挑战者，但它不断增加新的功能表明，它是缩小差距的意图。   本月早些时候，该小组报道，iOS移动应用程序开发人员可以做自动推送更新。会议还宣布了存储价格下降。本周早些时候ForresterResearch的报告，Azure是第二位受开发者欢迎的。它仍然远远落后于亚马逊网络服务，但Azure是有信誉的开发团队。这是一个大问题，显示出一个在云上新兴的社区。 源：http://techcrunch.com/2012/12/21/windows-azure-gets-more-competitive-with-aws-launches-new-mobile-features-website-scaling-data-sync-and-more/","title":"Windows Azure上取得更具有竞争力AWS，推出新的移动功能，网页缩放，数据同步等"},{"content":"微软的一位研究项目卸载数据和计算以节省电池寿命。   凯特·格林2012年12月24日   如果你的手机常时间使用手机服务。他们可以迅速地耗尽的电池。微软的一位研究项目表明，有一种方法，位置芯片内的智能手机使用少得多的功率。   降低功耗的GPS芯片，不仅可以延长电池寿命的智能手机和平板电脑，它也可能使实际的GPS功能添加更多的设备，包括低功耗的远程传感器。   消耗最大功率的是内智能手机的GPS芯片。该组件可能需要30秒去和卫星建立通信，以获得所需的信息，精确地计算出它的位置。   微软的研究人员为了减少功耗，把一些工作搬到到云上。刘婕，在微软研究院的首席研究员和他的团队开发了一个GPS系统，从卫星的最重要的信息收集只有几毫秒。然后，这些数据结合其他重要信息公开，在线数据库，如卫星的轨迹和地球的高程值，计算设备的过去的位置。但是，数据的融合和位置计算发生在远程服务器上。   研究人员称云装载GPS的方法，和他们所说的系统，他们建立了CLEO（Cultivatingthe Long tail in Environmental Observations）。上个月在在多伦多根据研究提出了的SENSYS 2012会议，CLEO可以进行连续的GPS感应的一年半只需两节AA电池。   在典型的移动电话，在大约六个小时内连续通过GPS感应燃烧设备的电池。 （在实践中，从Wi-Fi基站和移动基站的数据有助于GPS手机的位置信息，所以并不总是做所有繁重的任务。）   CLEO的被设计用于动物跟踪获得运动数据的系统，可以随着时间的推移，它不会立即发送它的数据到云。这种方法可以集成到一个可上网的设备，节省电力，在使用GPS时的时间。   微软是不是一个人在努力使全球定位系统（GPS）更节能。这家瑞士公司U-blox的GPS芯片，基于类似的原则。克里斯·马歇尔，U-blox公司和前首席技术官的Geotate，低功耗的GPSU-blox公司在2009年收购的公司的产品经理说，该公司的商业GPS系统可以连接网络的实时。 “处理可以在服务器上或连接到互联网的PC或平板电脑，根据所需的产品概念，”马歇尔说。   此外，在麻省理工学院，杜克大学，美国南加州大学的研究人员开发的信号处理和其他工程技巧，使用GPS的位置服务，速度更快，并最终更高效节能。   微软的柳刘婕认为，低功耗的GPS系统在手机上可以进行连续的位置记录是可行的，它可以使设备更聪明。例如，你可以选择加入的服务，有助于在你的城市噪音污染水平的数据库。或者，如果您的智能手机保持的记录，你的驾驶习惯，你可能会收到定制的指示或根据你平时的走路或驾车路线搜索结果。   “这些连续的位置感测应用中具有很大的价值，今天我们不这样做，” 刘婕说。 源：http://www.technologyreview.com/news/509176/cloud-powered-gps-chip-slashes-smartphone-power-consumption/","title":"云供电的GPS芯片，大大降低智能手机功耗"},{"content":"1、安装之前必须确认自己电脑的GPU支持CUDA。在设备管理器中找到显示适配器（Display adapters)，找到自己电脑的显卡型号，如果包含在http://www.nvidia.com/object/cuda_gpus.html的列表中，说明支持CUDA。 2、下载NVIDIA CUDA Toolkit （ http://www.nvidia.com/content/cuda/cudadownloads.html），本人下载的是desktop版本win32 CUDA5.0已经将ToolKit和SDK等整合在了一起，因此只需下载一个安装文件即可。 3、首先确认自己已经安装Visual Studio 2010 后再安装助手Visual Assist X。这里Visual Assist X 对于使用CUDA 不是必须的，但为了使程序编写更为方便，这里推荐安装。 4、CUDA的默认安装目录为：C:\\Program Files\\NVIDIA GPU Computing Toolkit\\ 这里推荐使用默认的安装路径，不需更改。 5、安装完成后，在系统环境里面会发现新添加了两个环境变量：CUDA_PATH_V5_0和CUDA_PATH。但是这些还不够。保险起见，手动配置环境变量。在系统环境变量中新建如下项： CUDA_SDK_PATH = C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v5.0\\common CUDA_LIB_PATH = %CUDA_PATH%\\lib\\Win32 CUDA_BIN_PATH = %CUDA_PATH%\\bin CUDA_SDK_LIB_PATH = %CUDA_SDK_PATH%\\common\\lib\\Win32 CUDA_SDK_BIN_PATH = %CUDA_SDK_PATH%\\bin\\Win32 然后在系统环境变量Path 后添加如下内容： ;%CUDA_LIB_PATH%;%CUDA_BIN_PATH%;%CUDA_SDK_LIB_PATH%;%CUDA_SDK_BIN_PATH%; 6、此时CUDA已经安装成功。可以测试运行。 （1）、启动命令行，Start > All Programs > Accessories > Command Prompt，输入nvcc -V查看版本信息。 （2）、运行例子程序deviceQuery。路径在如下位置： Windows XP: C:\\Documents and Settings\\All Users\\Application Data\\NVIDIA Corporation\\CUDASamples\\v5.0\\C\\bin\\win32\\Release Windows Vista, Windows 7, Windows 8, Windows Server 2003, and Windows Server2008: C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v5.0\\C\\bin\\win32\\Release （详见http://download.csdn.net/detail/diyoosjtu/4945848） 运行结果如下： （3）、运行bandwidthTest示例程序，结果如下： （4）、运行Particles示例程序，观看效果。 若以上都运行正常，说明CUDA安装成功。 7、CUDA C/C++关键字及函数高亮显示 这个设置是让Visual Studio2010 在编辑.cu 文件时，把.cu 文件里的C/C++语法高亮。设置方法： 在Visual Studio 2010 的菜单依次选“ Tools|Options|Text Editor|File Extension（工具|选项|文本编辑器|文件扩展名）”，在该窗口中将“Editor（编辑器）”下拉框选择“Microsoft Visual C++”，在“Extension（扩展名）”文本框中输入cu 点击“Add（添加）”按钮，重复工作把cuh 添加为Visual C++类型，添加完成后点击“OK（确定）”按钮，如下图所示： 为了让CUDA 的关键字，如__device__、dim3 等的文字高亮，需按如下步骤设置： 将C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v5.0\\doc\\syntax_highlighting\\visual_studio_8 目录下的usertype.dat 文件复制到C:\\Program Files\\Microsoft Visual Studio10.0\\Common7\\IDE\\ 目录下（ 对x64 位Win7 系统为X:\\Program Files(X86)\\Microsoft Visual Studio 10.0\\Common7\\IDE\\）。重启Visual Studio 2010 后打开.cu 文件，CUDA 的关键字应该变成蓝色了。 8、CUDA 函数高亮，及CUDA 函数输入代码提示 实现这个功能需要使用Visual Assist X，如果没有安装支持Visual Studio 2010的Visual Assist X，这部分功能无法实现。这里只是为使编写代码更加方便，对CUDA 程序的开发无实质性障碍。 如果已经安装Visual Assist X，可以通过以下两步实现需要的功能。 1）使Visual Assist X 支持CUDA 函数高亮和代码完成 在Visual Studio 2010 的菜单里依次选择：“ VAssistX|Visual assist X Options|Projects|C/C++Directories”，在该界面的“Platform”下拉框中选择Custom，在“Show Directories for”下拉框中选择Other include files， 然后在下面的输入框里，新建、添加如下路径，如图： C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v5.0\\include C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v5.0\\common\\inc 使Visual Assist X 实现.cu 文件高亮和代码完成功能，需要编辑注册表。在修改注册表时，为避免带来不必要的错误请先关闭Visual Studio 2010。使用Win+R组合键打开“运行”窗口，键入入regedit 命令（register edit 的缩写）打开注册表，找到如下位置：HKEY_CURRENT_USER\\Software\\Whole Tomato\\Visual Assist X\\VANet10。在右边找到ExtSource 项目，鼠标右键选修改，在原有文字后添加如下文字：.cu;.cuh; 确定后关闭注册表。重新打开Visual Studio 2010，Visual Assist X 便开始支持.cu 及.cuh 文件的语法高亮及代码完成。此时.cu 文件的CUDA 函数是高亮的，使用函数名符号就会自动提示函数全称，参数类型等信息。 9、其余的重要配置： 在“Additional Libraries Directories”下添加“$(CUDA_PATH_V4_0)\\lib\\$(Platform);” 在“Additional Dependencies”中添加“cudart.lib;” 10、经过上面的安装，开发程序应该没问题了，但会发现有如下的问题： （1）. VS2010显示.cu文件时，有很多CUDA函数下有波浪线 （2）. 在.cu文件里使用VS2010的“Go to definition”功能查无法找到CUDA函数的定义。 这两个问题的原因是VS2010不认识这些函数，没有指定它们在那个头文件里包含的。解决方法其实是一样的，把CUDA tookit 和CUDA SDK的头文件路径加到VS2010的VC++目录里面。 解决方法如下： 在VC++目录的include directories中，添加C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v5.0\\include 如下图所示： 到此，所有的配置都已经完成了。 O(∩_∩)O~ 11、创建工程 在Visual Studio 2010 菜单选择“file|new|project（文件|新建|工程）”，在打开的新建项目窗口的“已安装的模板”一栏中选择“NVIDIA|CUDA”，类型选择为“CUDA 5.0 Runtime”，见下图。 在“名称”中输入工程名后，点击确定。可对系统提供的kernel.cu 示例进行编译运行，运行结果如下图。 将kernel.cu中的main函数重命名后，添加新的.cu文件，写入如下代码： #include< stdio.h>#include \"cuda_runtime.h\"#include \"device_launch_parameters.h\"bool InitCUDA(){\tint count;\tcudaGetDeviceCount(&count);\tif(count == 0)\t{\t\tfprintf(stderr, \"There is no device.\\n\");\t\treturn false;\t}\tint i;\tfor(i = 0; i < count; i++)\t{\t\tcudaDeviceProp prop;\t\tif(cudaGetDeviceProperties(&prop, i) == cudaSuccess)\t\t{\t\t\tif(prop.major >= 1)\t\t\t{\t\t\t\tbreak;\t\t\t}\t\t}\t}\tif(i == count)\t{\t\tfprintf(stderr, \"There is no device supporting CUDA 1.x.\\n\");\t\treturn false;\t}\tcudaSetDevice(i);\treturn true;}int main(){\tif(!InitCUDA())\t{\t\treturn 0;\t}\tprintf(\"HelloWorld, CUDA has been initialized.\\n\");\treturn 0;} 用 Ctrl+F5 运行，通过nvcc编译成功，输出结果： 成功！！","title":"VS2010中配置CUDA5.0"},{"content":"这里结合对HBase Thrift接口(HBase版本为0.92.1)的使用经验，总结其中遇到的一些问题及其相关注意事项。 字节的存放顺序    HBase中，由于row(row key和column family、column qualifier、time stamp)是按照字典序进行排序的，因此，对于short、int、long等类型的数据，通过Bytes.toBytes(…)转换成byte数组后，必须按照大端模式(高字节在低地址，低字节在高地址)存放。对于value，也是同样的道理。因此，在使用Thrift API(C++、Php、Python等)方式时，最好对于row和value都统一按照大端进行pack和unpack处理。    举个例子，C++中，对于int型变量，经过以下方式转换为字典序： string key;int32_t timestamp = 1352563200;    const char* pTs =(const char*) &timestamp;    size_t n = sizeof(int32_t);    key.append(pTs, n);    通过以下方式将字典序转换为int： const char * ts = key.c_str();int32_t timestamp = *((int32_t*)(ts));    Php中则提供了pack和unpack方法进行转换： $key = pack(“N”, $num);$num = unpack(“N”, $key); TScan的使用陷阱    HBase的PHP Thrift接口中，TScan可以直接通过设置startRow、stopRow、columns、filter等属性，默认这些属性均为null，设置后变为非null(通过TScan的构造函数或直接对TScan的成员变量进行赋值)。通过write()方法和Thrift Server进行RPC操作时，直接判断的依据是这些属性不为null，则通过Thrift协议传输到Thrift Server端。    但是在C++的Thrift接口中，TScan中有一个_TScan__isset __isset类型的变量，其内部结构如下： typedef struct _TScan__isset {_TScan__isset() : startRow(false), stopRow(false), timestamp(false), columns(false), caching(false), filterString(false) {}    bool startRow;    bool stopRow;    bool timestamp;    bool columns;    bool caching;    bool filterString;    } _TScan__isset;    TScan的write()方法则是通过判断_TScan__isset下的各个bool变量标记是否设置了startRow、stopRow、columns、filter等属性，决定是否将这些属性通过Thrift协议传输到Thrift Server端，而这些属性必须通过__set_xxx()方法进行设置才能生效！在TScan的默认构造函数中，并不会对这些属性对应的__isset标记设置为true！    因此，如果直接通过TScan的构造函数初始化startRow、stopRow、columns、filter等属性会导致从头遍历该表，只有调用了__set_xxx()方法才会将对应的bool标识设置为true，这样服务端才会从Thrift Server获取startRow、stopRow、columns、filter等属性进行扫描。 并发访问线程数    首先，为了尽可能减少由于网络传输带来的时间开销，HBase的Thrift Server最好和应用客户端部署在同一台机器上。Thrift Server启动时可以通过参数配置并发线程数，否则很容易导致Thrift Server线程满了不响应客户端的读写请求，具体命令：bin/hbase-daemon.sh start thrift -threadpool -m 200 -w 500(更多参数参考这里：bin/hbase-daemon.sh start thrift -h)。 最大堆内存配置    如果客户端与Thrift Server进行scan操作顺序读取数据，而且设置了一定的cache记录条数(通过TScan的int32_t caching变量设置)，那么这些被caching的记录数可能会占用Thrift Server相当部分的堆内存，尤其在多客户端并发访问时更明显。    因此，在Thrift Server启动前，可以调大最大堆内存，否则可能由于java.lang.OutOfMemoryError异常而导致进程被杀掉，尤其是当Scan时设置了较大的caching记录条数的情况(默认为export HBASE_HEAPSIZE=1000MB，可以在conf/hbase-env.sh中设置)。","title":"HBase Thrift 的使用经验分享"},{"content":"作者：刘旭晖 Raymond 转载请注明出处 Email：colorant at 163.com BLOG：http://blog.csdn.net/colorant/ 更多云计算相关项目快速理解文档  http://blog.csdn.net/colorant/article/details/8255910 == 是什么 ==   目标Scope（解决什么问题）   为分布式系统提供高可靠性的协同工作机制   官方定义   ZooKeeper is acentralized service for maintaining configuration information, naming,providing distributed synchronization, and providing group services.   个人理解   基本上ZooKeeper提供了一个简化并支持特定功能的分布式文件系统接口，加上数据同步，变更通知，客户端Cache等辅助机制。基于这样的接口，用户可以自己在此之上构建逻辑，来实现各种分布式系统系统工作所需的各种功能，如配置管理，名称服务，Master选举，同步，锁等，类似于google的Chubby，但是没有内建锁的支持。   == 如何实现 ==   核心思路，架构   zookeeper的核心思想是提供一个非锁机制的Wait Free的用于分布式系统同步的核心服务，提供简单的文件创建读写操作接口，其系统核心本身对文件读写并不提供加锁互斥的服务，但是提供基于版本比对的更新操作，客户端可以基于此自己实现加锁逻辑。客户端可以连接任意zookeeper服务节点来读写数据，zookeeper内部会分为Leader和Follower角色。     Zookeeper使用简单的同步策略，通过以下两条基本保证来实现数据的一致性： 全局串行化所有的写操作 保证同一客户端的指令被FIFO执行（以及消息通知的FIFO）   客户端尽可能通过Cache和消息通知机制来减少与服务器之间不必要的信息沟通，来减轻服务器负担     数据更新操作需要服务器Leader节点协同Slave节点通过ZAB协议（基本就是两阶段提交）进行全局广播来实现，因此随着Slave节点增加，性能是下降的。   数据读操作可以由任意服务器节点提供，如果不是Lead节点，读操作本身不保证数据是最新的，但是可以通过一个Sync（大概就是一个空的写操作）+read的模式来实现对最新数据的读取（由前述两条基本保证可推得）   Zookeeper自身文件系统维护在内存中，通过定期Snapshot和Log记录来实现灾难恢复   zookeeper对用户暴露简单的API接口，读写创建Znode数据节点，Znode节点分为普通节点和临时节点，零时节点当创建它的客户端连接结束/丢失以后会自动删除。API主要包括   Create : 创建node Delete : 删除node Exists : 判断node是否存在 get data : 读取node内存储的数据 set data : 向node写数据 get children : 获取一个node的子node列表 Sync : 等待数据更新的同步完成     适用领域   需要一个中心服务提供协同工作原语支持的分布式系统。能够将协同工作部分简单的剥离（或者添加）使用外部服务的场合。   细节   Snapshot创建时不Block数据更新操作，因此不保证精确再现zookepper某一个特定时间点的状态，不过由于串行化更新操作和数据更新的幂等特性，只要完整数量的LOG被顺序更新（可以重复），由非精确状态再现的Snapshot是可以恢复得到精确的最新状态的。   == 相关项目 ==   上下游项目 Hbase : 使用Zookeeper做Master选举等 Hadoop2.0 (YARN) BookKeeper: Zookeeper内置项目，基于Zookeeper实现的一个Log记录系统   类似项目 chubby   == 相关文献 ==   项目主页 http://zookeeper.apache.org   Paper 论文   ZooKeeper: Wait-freecoordination for Internet-scale systems A simple totallyordered broadcast protocol","title":"Zookeeper 快速理解"},{"content":"这是一个IT大变革的时代，今天，我们使用互联网而不是使用电脑，个人消费者而不是企业需求推动着IT行业的前行。在这个时间点上，作为桌面操作系统和开发平台的霸主，微软通过TechEd2012大会向我们展示了微软公司对这个时代的理解和对未来的展望。 移动互联的崛起 对于个人消费市场而言，如果说前一个时代是桌面软件的天下，今天则是互联网的王国。专注于各个领域的桌面软件曾经占据了我们的电脑，比如下载文件的“网际快车”，播放影音的“金山解霸”等等。但是随着互联网基础设施的发展和内容的丰富，单纯的桌面软件一个个淡出我们的视线。而依托于互联网的优势，以迅雷、微博、微信等为代表的更加专注于内容的新一代应用开始在包括电脑在内和各种终端设备上攻城略地，在路上，在书房，在卧室，这些应用在不同的平台上提供者类似的用户体验，尽可能在最长的时间段内吸引着越来越多用户的眼球同时获得了空前的成功。 Application到App 为了和之前传统的桌面应用程序（Application）相区分，贡献了最大移动网络流量的iPhone手机厂家，苹果公司将这种新一代应用程序命名为App。与Application相比，App不仅删减了8个英文字母，更重要的是它具备以下特征：          * 专注于内容          * 跨平台提供类似的用户体验 我认为，在包括微软在内的主流平台厂商看来，对于个人消费者来说，App是未来的大趋势。为了让更多的开发者在微软平台上开发App，微软提供了一系列的技术和服务。其中集大成者莫过于TechEd 2012中的主角：三屏一云。 三屏一云       “三屏一云”是由微软公司提出的新概念，指的是PC、平板电脑、手机和云计算的高度整合。这四个元素构成了个人消费者的主要IT环境，在PC、平板电脑和手机的三块屏幕上实现类似的用户体验，并以此消费云计算平台提供的内容和服务。而“三屏一云”从概念变为现实的重要标志便是Windows 8的发布。       Windows 8是微软首代实现了PC、平板电脑和手机融合的操作系统，而且在Windows 8中集成了Skydrive（Skydrive是微软云计算平台中面向个人消费者的存储服务。Skydrive是Office 2013的首选文件路径，也是微软推荐的应用程序文件存放位置）和Windows Live ID认证。这就意味着用户可以使用同一Live ID登陆Windows Phone 8的手机、Windows 8 RT的平板电脑和Windows 8的PC，然后操作保存在Skydrive上的同一文件。简单的说，对于Windows 8的用户而言，三屏上用户看到的运行环境（认证用户、文件和部分系统设置）和用户看不到的运行环境（系统内核和主要API）已经高度统一，这使得开发者在三屏上实现无缝用户体验成为了可能。 在解决了技术上的可能性后，微软在开发平台方面的努力也降低了开发者实现统一用户体验的难度，提升了工程上的可行性。Windows和Windows RT可以实现编译文件级别的通用，基于WinRT SDK开发的同一个执行文件同时可以在Windows 8和Windows 8 RT上运行；Windows Phone和WinRT可以实现UI层外大部分代码的复用，使用MVP或MVVM模式设计的WinRT应用程序只需要对视图部分代码和设计进行修改（这个修改在一定程度上是必须的，因为手机用户的体验需求和平板电脑有一定的差异）并使用Windows Phone 8 SDK重新编译即可运行在Windows Phone 8手机上。而在三个终端平台上，Skydrive提供了一致的访问接口。在TechEd 2012中，大量的课程和动手实验都围绕着这部分内容展开。我认为，在微软看来三屏一云战略是桌面平台的重中之重，如果你是一名Windows平台的开发人员，这部分需要格外关注。 大一统的捷径 虽然微软在2012年一口气推出了Windows 8，Windows 8 RT和Windows Phone，甚至数十年第一次推出微软品牌的计算机Surface RT。但目前受限于上市时间较短，Windows 8系列的设备在市场的总占有率并不是很高。为了满足其他平台（如iOS和Android）用户的需求，一部分开发者依然在使用HTML进行开发。诚然，多数情况下Web是目前跨平台应用开发中成本最低的解决方案。但受限制于浏览器的用户体验和收费渠道的匮乏，用户体验提升空间更大、有丰富收费渠道支持（这点Android平台可能有所例外，来自业余Android平台开发者的吐槽）的App依然有着更大的吸引力。 如果你现在已经拥有一个可以跨平台运行的基于HTML开发的Web站点，而且你的站点设计符合HTML5标准，没有使用类似于ASP MVC的后台内容生成技术。那么微软为你提供了一条将HTML网站转换为两屏统一App（暂时不支持Windows Phone 8）的捷径。 你可以在极短的时间内完成HTML向Windows 8 App的迁移。Visual Studio支持使用HTML 5开发Windows Store应用（Windows 8和Windows RT的App），只需要以下几个步骤就可以完成迁移。          1. 创建语言为Javascript的Blank App工程          2. 拷贝网站内容到Windows Store工程下          3. 修改HTML文件，增加对WinJS的引用          4. 在package.appxmanifest中设置启动页面为网站启动页的相对路径          5. 完成Logo、显示名和描述等信息，然后执行编译即可          6. 当然测试是少不了的 提示：经过转换的程序是以原生App的方式运行而不是运行在嵌入浏览器内，这意味着测试工作需要重点测试页面跳转等浏览器相关的内容。 当然，为了充分利用平台特性，提供更好的用户体验，仔细阅读并合理使用WinJS的手册、Windows设计指南和Swiss Design（Windows 8的设计风格）相关文档才能让你的程序拥有真正的Windows 8 Style！ 结语       TechEd 2012已经闭幕，而App时代的大门才刚刚打开。做为一个拥抱变化的开发者，关注业界的发展合理规划自己的知识技能才是王道，这也许才是我们参加TechEd的核心目的吧。","title":"我看TechEd 2012之App时代降临"},{"content":"昨天决策树Partial Implementation实战演示了三个部分：1、Describe ；2、BuildForest；3、TestForest； 今天主要分析下Describe的源码，看下这个类做了什么事情。 打开Describe的源码可以看到这个类主要可以分为三个部分，如下： (1)生成描述： String descriptor = DescriptorUtils.generateDescriptor(description);(2)生成dataset： Dataset dataset = generateDataset(descriptor, dataPath, regression);(3)存储dataset： DFUtils.storeWritable(new Configuration(), fPath, dataset);下面分别介绍： 第(1)步是把-d参数转换的，比如输入为：3 N I N N 2 C L 5 I，转换为N N N I N N C C L I I I I I； 第(2)步，生成dataset，首先先介绍下dataset： Dataset有五个参数：atrribute，values, nbInstance,ignored,labelId; (a) attribute主要存储的是把-d参数转换后的值，比如-d N 3 C 2 N C 4 N C 8 N 2 C 19 N L N，转换后为： NUMERICAL,CATEGORICAL,CATEGORICAL,CATEGORICAL,NUMERICAL,NUMERICAL,CATEGORICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,CATEGORICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,CATEGORICAL,CATEGORICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,NUMERICAL,CATEGORICAL,NUMERICAL； (b) values主要存储的是Categorical的值，比如kdd的数据其中的values如下： icmp,udp,tcp, vmnet,shell,smtp,ntp_u,kshell,aol,imap4,urh_i,netbios_ssn,tftp_u,uucp,mtp,nnsp,echo,tim_i,ssh,iso_tsap,time,netbios_ns,systat,login,hostnames,efs,supdup,http_8001,courier,ctf,finger,nntp,ftp_data,red_i,ldap,http,pm_dump,ftp,exec,klogin,auth,netbios_dgm,other,link,X11,discard,private,remote_job,IRC,pop_3,daytime,pop_2,gopher,sunrpc,rje,name,domain,uucp_path,http_2784,Z39_50,domain_u,csnet_ns,eco_i,whois,bgp,sql_net,printer,telnet,ecr_i,urp_i,netstat,http_443,harvest, S3,RSTR,SF,RSTO,SH,OTH,S2,RSTOS0,S1,REJ,S0, 1,0, 1,0, 1,0, 1,0, phf,buffer_overflow,teardrop,guess_passwd,loadmodule,multihop,smurf,spy,normal,land,portsweep,back,warezclient,ftp_write,nmap,satan,rootkit,perl,imap,neptune,warezmaster,ipsweep,pod, 可以看出最后一行为Label的取值范围； (c) nbInstance表示的是原始数据的样本数； (d) ignored存储的是被忽略的属性，比如glass.data 被忽略的属性的id为0，（一般如果第一列属性是样本的id，则一般都被忽略） (e) labeld存储的是Label所在的列，比如kdd的数据labelId为41； 第(3)步是把上面生成的dataset存入文件中，可以在类Dataset中查看write方法，如下：     out.writeInt(attributes.length); // nb attributes    for (Attribute attr : attributes) {      WritableUtils.writeString(out, attr.name());    }\tfor(int ig:ignored){\t\tSystem.out.print(ig+\",\");\t}    DFUtils.writeArray(out, ignored);    // only CATEGORICAL attributes have values    System.out.println(\"values:\");    for (String[] vals : values) {      if (vals != null) {        WritableUtils.writeStringArray(out, vals);      }    }    out.writeInt(labelId);    out.writeInt(nbInstances);上面的代码中的每个out.writeXxx()，就是把相关信息保存在文件中； 分享，成长，快乐","title":"mahout决策树之Partial Implementation源码分析 part1"},{"content":"customHBase.put(table, row, fam, qual, val); Result result = customHBase.get(table, row); System.out.println(\"-------------------\"+result); customHBase.put(table, row, fam, null, 12); Result result1 = customHBase.get(table, row); System.out.println(\"-------------------\"+result1);-------------------keyvalues={testrow_1/c:testqual_1/1356586011766/Put/vlen=8/ts=0} -------------------keyvalues={testrow_1/c:/1356586011781/Put/vlen=8/ts=0, testrow_1/c:testqual_1/1356586011766/Put/vlen=8/ts=0} 故意写了个不存在的fam然后put:customHBase.put(table, lprow, lpfam, null, 12);  看着过程很明显了，好看源码 at org.apache.hadoop.hbase.regionserver.HRegionServer.multi(HRegionServer.java:3089) at sun.reflect.GeneratedMethodAccessor24.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.hadoop.hbase.ipc.WritableRpcEngine$Server.call(WritableRpcEngine.java:364) at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1326) : 1 time, servers with issues: 75-25-171-yf-core.jpool.sinaimg.cn:60020,  at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.processBatchCallback(HConnectionManager.java:1591) at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.processBatch(HConnectionManager.java:1367) at org.apache.hadoop.hbase.client.HTable.flushCommits(HTable.java:945) at org.apache.hadoop.hbase.client.HTable.doPut(HTable.java:801) at org.apache.hadoop.hbase.client.HTable.put(HTable.java:776) at org.apache.hadoop.hbase.client.HTablePool$PooledHTable.put(HTablePool.java:397) hbase-0.90.5 一,首先来看下put的构造函数：ts为时间戳   ①，public Put(byte [] row) {     this(row, null);   } ②， public Put(byte [] row, RowLock rowLock) {       this(row, HConstants.LATEST_TIMESTAMP, rowLock);   } ③， public Put(byte [] row, RowLock rowLock) {       this(row, HConstants.LATEST_TIMESTAMP, rowLock);   } ④，public Put(byte[] row, long ts) {     this(row, ts, null);   } ⑤，   public Put(byte [] row, long ts, RowLock rowLock) {     if(row == null || row.length > HConstants.MAX_ROW_LENGTH) {       throw new IllegalArgumentException(\"Row key is invalid\");     }     this.row = Arrays.copyOf(row, row.length);     this.timestamp = ts;     if(rowLock != null) {       this.lockId = rowLock.getLockId();     }   } 看到⑤的时候很明显了， ①，有传入的参数key ②，如果时间戳为空，则为null ③，如果传入的rowlock不为空，那么就通过rowLock.getLockId()拿到lockId,赋值给当前lockid.  另外还有个 public Put(Put putToCopy)  Copy constructor.  Creates a Put operation cloned from the specified Put. this.writeToWAL = putToCopy.writeToWAL; HBase中WAL（Write Ahead Log） 的存储格式      二，add操作：   public Put add(byte [] family, byte [] qualifier, long ts, byte [] value) {     List<KeyValue> list = getKeyValueList(family);     KeyValue kv = createPutKeyValue(family, qualifier, ts, value);     list.add(kv);     familyMap.put(kv.getFamily(), list);     return this;List<KeyValue> list   } 先取出依据family从familyMap拿到List<KeyValue> list，如果list为空，则创建一个list,然后依据参数family, qualifier, ts, value生成一个KeyValue 然后将KeyValue放入familyMap中   private List<KeyValue> getKeyValueList(byte[] family) {     List<KeyValue> list = familyMap.get(family);     if(list == null) {       list = new ArrayList<KeyValue>(0);     }     return list;   } 早来看下htable的put方法：   private void doPut(final List<Put> puts) throws IOException {     int n = 0;     for (Put put : puts) {       validatePut(put);       writeBuffer.add(put);       currentWriteBufferSize += put.heapSize();             // we need to periodically see if the writebuffer is full instead of waiting until the end of the List       n++;       if (n % DOPUT_WB_CHECK == 0 && currentWriteBufferSize > writeBufferSize) {         flushCommits();       }     if (autoFlush || currentWriteBufferSize > writeBufferSize) {       flushCommits();     }   } 如果currentWriteBufferSize > writeBufferSize，此时就会调用  flushCommits()方法  @Override   public void flushCommits() throws IOException {     try {       connection.processBatchOfPuts(writeBuffer, tableName, pool);     } finally {       if (clearBufferOnFail) {         writeBuffer.clear();         currentWriteBufferSize = 0;       } else {         // the write buffer was adjusted by processBatchOfPuts         currentWriteBufferSize = 0;         for (Put aPut : writeBuffer) {           currentWriteBufferSize += aPut.heapSize();         }       }     }   } HConnectionManager.class  connection.processBatchOfPuts(writeBuffer, tableName, pool); 最终调用的是 processBatch((List) list, tableName, pool, results);方法 processBatch内部有retry机制，// sleep first, if this is a retry   sleep时间： long sleepTime = getPauseTime(tries); 此后回依据参数调用locateRegion的去定位Region HRegionLocation loc = locateRegion(tableName, row.getRow(), true); private HRegionLocation locateRegion(final byte [] tableName,       final byte [] row, boolean useCache) 在这个函数中：   if (Bytes.equals(tableName, HConstants.ROOT_TABLE_NAME)) {         try {           HServerAddress hsa =             this.rootRegionTracker.waitRootRegionLocation(this.rpcTimeout);           LOG.debug(\"Lookedup root region location, connection=\" + this +             \"; hsa=\" + hsa);           if (hsa == null) return null;           return new HRegionLocation(HRegionInfo.ROOT_REGIONINFO, hsa);         } catch (InterruptedException e) {           Thread.currentThread().interrupt();           return null;         }       } else if (Bytes.equals(tableName, HConstants.META_TABLE_NAME)) {         return locateRegionInMeta(HConstants.ROOT_TABLE_NAME, tableName, row,             useCache, metaRegionLock);       } else {         // Region not in the cache - have to go to the meta RS         return locateRegionInMeta(HConstants.META_TABLE_NAME, tableName, row,             useCache, userRegionLock);       } ①， 如果tableName == -ROOT- 就会调用waitRootRegionLocation方法，通过zookeeper得到rootregion的地址。返回一个new HRegionLocation(HRegionInfo.ROOT_REGIONINFO, hsa);  通过zookeeper得到rootregion的地址: RootRegionTracker.class---  public HServerAddress waitRootRegionLocation(long timeout)   throws InterruptedException {     return dataToHServerAddress(super.blockUntilAvailable(timeout)); ZooKeeperNodeTracker.class中：  public synchronized byte [] blockUntilAvailable(long timeout)   throws InterruptedException {     if (timeout < 0) throw new IllegalArgumentException();     boolean notimeout = timeout == 0;     long startTime = System.currentTimeMillis();     long remaining = timeout;     while (!this.stopped && (notimeout || remaining > 0) && this.data == null) {       if (notimeout) {         wait();         continue;       }       wait(remaining);       remaining = timeout - (System.currentTimeMillis() - startTime);     }     return data;   } 在start方法中可以看到data: byte [] data = ZKUtil.getDataAndWatch(watcher, node); ②， 如果tableName == .META.，就会调用locateRegionInMeta方法， locateRegionInMeta(HConstants.ROOT_TABLE_NAME, tableName, row,useCache, metaRegionLock); locateRegionInMeta中：  if (useCache) {         location = getCachedLocation(tableName, row); } 先去从缓存中拿，如果缓存中没有，得到metakey，依据这个key首先定位root和meta region,然后    HRegionInterface server =             getHRegionConnection(metaLocation.getServerAddress()); 通过去定位serveraddress,首先是通过regionInfoRow = server.getClosestRowBefore得到一个regionInfoRow，在得到一个value,regionInfoRow.getValue,最终得到serveraddress：serverAddress = Bytes.toString(value); ③， 如果不是.META.表也不是-ROOT-表，那么也会调用locateRegionInMeta方法，   // Region not in the cache - have to go to the meta RS return locateRegionInMeta(HConstants.META_TABLE_NAME, tableName, row,             useCache, userRegionLock); 传入meta表，定位获得serveraddress 之后组装actions，即put，get,delete,等操作 之后交给线程池一步来处理：   public MultiResponse call() throws IOException {                   return server.multi(multi);                 } HRegionServer.java  public MultiResponse multi(MultiAction multi)方法,到这里终于看到HRegionInterface了。。。 for (Action a : actionsForRegion) {         action = a.getAction();         int originalIndex = a.getOriginalIndex();         try {           if (action instanceof Delete) {             delete(regionName, (Delete) action);             response.add(regionName, originalIndex, new Result());           } else if (action instanceof Get) {             response.add(regionName, originalIndex, get(regionName, (Get) action));           } else if (action instanceof Put) {             puts.add(a);  // wont throw.           } else {             LOG.debug(\"Error: invalid Action, row must be a Get, Delete or Put.\");             throw new DoNotRetryIOException(\"Invalid Action, row must be a Get, Delete or Put.\");           }         } 这个太明显了。。主要是想睡觉了。。。明天再来看看MultiResponse,add()干了啥","title":"hbase源码学习之put"},{"content":"原博客文章地址： http://blog.cloudera.com/blog/2012/10/cloudera-impala-real-time-queries-in-apache-hadoop-for-real/   ·        SONAL / OCTOBER 25, 2012 / 11:44 AM Very excited tosee Impala. The Dremel paper outlines efficient columnar storage for nesteddata. How does Impala achieve its speeds if data is not to be loaded in to thesystem? Thanks Sonal Dremel论文描述了使用列储存来有效地储存嵌套数据。如果数据没有被加载到系统中，Impala的实现是如何保证其速度的？ ·        MARCEL KORNACKER / OCTOBER 31, 2012 / 9:06 PM To addressSonal’s question: The performanceadvantage you will see with Impala will always depend on the storage format ofthe data, among other things. Impala tries hard to be fast on ascii-encodeddata (text files and sequencefile), but of course the parsing overhead will alwaysshow up as a performance penalty compared to something like ColumnIO or Trevni.Impala will also support Trevni in the GA release, as mentioned in the blogpost. Regarding dataloading: we are working on background conversion into Trevni, in a way thatenables a logical table to be backed by a mix of data formats. New data wouldshow up in, say, sequencefile format and eventually get converted into the moreefficient Trevni columnar format, but all of the data would be queryable at alltimes, regardless of format. Marcel Impala的性能优势始终依赖于数据的储存格式。Impala致力于能够对ASCII编码的数据进行快速处理，但是同ColumnIO或Trevni相比，解析开销肯定会对性能造成影响。Impala在正式版本中将支持Trevni。 考虑数据加载：我们在后台将数据转换到Trevni，这种方式可以允许一张逻辑表以混合格式进行备份。新数据是顺序文件格式，最终被转换为更有效的Trevni列格式，但是所有数据在任何时刻都是可查询的，和格式无关。 ·        ALEX B /NOVEMBER 22, 2012 / 8:25 AM Can you pleasecomment how Impala compares to Hadapt in terms of architecture ? As far as Iunderstand in case of Hadapt ( and I could be wrong of course ) sometransformation of the data to Postgre SQL is needed . That does not seems to bethe case with Impala( at least in the current implementation) ? Thanks, Alex Impala和Hadapt在结构上进行比较？Hadapt中，需要进行某些数据到PG的转换。Impala看起来不需要这样做。 ·        MARCEL KORNACKER / DECEMBER 20, 2012 / 6:02 PM Regarding Alex’squestion: That’s correct,Impala does read data directly from HDFS and HBase. Impala also relies onApache Hive’s metastore for the mapping of files into tables, which means youcan re-use your schema definitions if you’re already querying Hadoop throughHive. Hadapt runs aPostgreSql instance on each data node, and appears to require some form of datamovement (and duplication of data storage) between Postgres and HDFS, but forthe specifics of that architecture I would recommend consulting the Hadaptwebsite. Marcel Impala直接从HDFS和HBase上读取数据，同时Impala依赖Hive的元存储来将文件映射到表，这意味着你如果已经通过Hive对Hadoop上的数据进行查询，那么你可以重用你的模式定义。 Hadapt在每个数据节点上运行一个PG实例，而且似乎需要在PG和HDFS直接进行某些形式的数据移动（和数据复制），但对于相关架构的细节建议到Hadapt网站上进行咨询。 ·        KANG XIAO /DECEMBER 03, 2012 / 6:59 AM Great stuff! Wehave tried it and impala shows about 2x speedup vs. hive on our simple query ontest dataset. Could Marcelexplain more about the main reasons that make impala faster? 1. about columnar storage: it seems that hive can also benifit from columnarstorage compared with text file. 2. about distributed scalable aggregation algorithms: is there some details andexamples about the algorithms? 3. about join: if dataset can not fit into memory, how impala keep faster ifimpala use disk. 4. about main memory as a cache for table data: is it a cache in impala forrecently accessed data? Thanks! Kang 我们已经试用过Impala，在测试的数据集中，使用简单查询，Impala的速度比Hive提升了2倍。 请Marcel解释Impala速度快的主要原因： 1.    关于列储存：相对于文本文件，Hive也可以通过使用列储存获益。 2.    关于分布式可扩展聚集算法：有算法的细节和例子吗？ 3.    关于join：如果数据集无法全部读入内存，Impala如何在使用磁盘的时候保持速度。 4.    关于用作表数据缓存的主内存：缓存Impala最近访问的数据？ ·        MARCEL KORNACKER / DECEMBER 20, 2012 / 6:32 PM Regarding Kang’squestions: 1. Yes, theTrevni columnar storage format will be an open and general purpose storageformat that will be available for any of the Hadoop processing frameworks,including Hive, MapReduce, and Pig. However, weexpect to see greater performance gains from Trevni in Impala compared to whatyou’d see in Hive. The reason is that in a disk-based system, Impala is oftenI/O-bound, and a columnar format will reduce the total I/O volume, often by asubstantial amount. Hive is often cpu-bound and will therefore benefit muchless from a reduction in I/O volume. 2. At themoment, Impala does a simple 2-stage aggregation: pre-aggregation is done byall executing backends, followed by a single, central merge aggregation step inthe coordinator. In an upcoming release Impala will also support repartitioningaggregation, where the result of the pre-aggregation step is hash-partitionedacross all executing backends, so that the total merge aggregation work is alsodistributed. 3. Impala currentlyhas the limitation that the right-hand side table of a join needs to fit intothe memory of every executing backend. In the GA release, this will be relaxed,so that the right-hand side table will only have to fit into the *aggregate*memory of all executing backends. Disk-based join algorithms won’t be availableuntil after the GA release. 4. Impala doesnot maintain its own cache; instead, it relies on the OS buffer cache in orderto keep frequently-accessed data in memory. Marcel 1.      Trevni列储存格式将是一个开放和通用的储存格式，对所有Hadoop处理框架都可用，包括Hive、MapReduce和Pig。 但是，相对Hive，我们希望通过Trevni在Impala上获得更多的性能提升。原因是在一个基于磁盘的系统中，Impala经常受到I/O的限制，而列格式可以减少总I/O量，而且经常可以减少很多。Hive经常受到CPU的限制因此在I/O量减少方面获益较少。 2.    目前，Impala进行一个简单的2阶段聚集算法：预聚集在所有执行后端完成，之后在协调器进行一个单一的、中心合并聚集步骤。在即将发布的版本中，Impala还将支持再分配聚集，预聚集步骤的结果将通过hash分区到所有执行后端，所以合并聚集工作也是分布式的。 3.    Impala目前限制右连接表需要加载到每个执行后端的内存中处理。在正式版本中，限制将放宽，右连接表只需要能加载到所有执行后端的总内存中即可。基于磁盘的join算法在正式版本之前都不可用。 4.    Impala没有维持其自有的缓存，取而代之的是使用OS buffer进行缓存以保证频繁访问的数据保留在内存中。","title":"Impala介绍博客相关问答"},{"content":"8.3.3 RoutedEventArgs的Source和OriginalSource RoutedEventArgs有两个属性Source和OriginalSource，这两个属性都表示路由事件传递的起点(即事件消息的源头)，只不过Source表示的是LogicalTree上的消息源头，而OriginalSource则表示VirtualTree上的源头。 <UserControl x:Class=\"FirstWpfApplication.Controls.UserControl1\"             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"              xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"              mc:Ignorable=\"d\"              d:DesignHeight=\"300\" d:DesignWidth=\"300\">    <Grid>        <Button x:Name=\"innerButton\" Width=\"80\" Height=\"80\" Content=\"OK\"/>    <\/Grid><\/UserControl> <Window x:Class=\"FirstWpfApplication.MainWindow\"        x:ClassModifier=\"public\"        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"        xmlns:data=\"clr-namespace:System.Windows.Data;assembly=PresentationFramework\"        xmlns:local=\"clr-namespace:FirstWpfApplication\"        xmlns:controls=\"clr-namespace:FirstWpfApplication.Controls\"        Title=\"登录\" Height=\"300\" Width=\"300\" >    <Window.Resources>    <\/Window.Resources>    <Grid x:Name=\"grid\">        <controls:UserControl1 x:Name=\"myUserControl\" Margin=\"10\" />    <\/Grid><\/Window>     /// <summary>    /// Interaction logic for MainWindow.xaml    /// <\/summary>    public partial class MainWindow : Window    {        public MainWindow()        {            InitializeComponent();            this.AddHandler(Button.ClickEvent, new RoutedEventHandler(this.Button_Click));        }        private void Button_Click(object sender, RoutedEventArgs e)        {            string strOriginalSource = string.Format(\"VirtualTree start point:{0}, type is {1}\",                 (e.OriginalSource as FrameworkElement).Name,                 e.OriginalSource.GetType().ToString());            string strSource = string.Format(\"LogicalTree start point:{0}, type is {1}\",                (e.Source as FrameworkElement).Name,                e.Source.GetType().ToString());            MessageBox.Show(strOriginalSource + Environment.NewLine + strSource);        }    } 8.3.4 事件也附加——深入浅出附加附件 路由事件的宿主都是些拥有可视化实体的界面元素，而附加事件则不具备显示在用户界面上的能力。也就是说，附加事件的宿主没有界面渲染功能这双“飞翼”，但一样可以使用附加事件这个灵犀与其他对象进行沟通。     class Student    {        public static readonly RoutedEvent NameChangedEvent = EventManager.RegisterRoutedEvent            (\"NameChanged\", RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(Student));        public int Id { get; set; }        public string Name { get; set; }    }     <Grid x:Name=\"grid\">        <Button x:Name=\"button1\" Content=\"OK\" Width=\"80\" Height=\"80\" Click=\"Button_Click\"/>    <\/Grid>         public MainWindow()        {            InitializeComponent();            this.AddHandler(Student.NameChangedEvent, new RoutedEventHandler(this.StudentNameChangedHandler));        }        private void Button_Click(object sender, RoutedEventArgs e)        {            Student stu = new Student() { Id = 10, Name = \"Tim\" };            RoutedEventArgs arg = new RoutedEventArgs(Student.NameChangedEvent, stu);            this.button1.RaiseEvent(arg);        }        private void StudentNameChangedHandler(object sender, RoutedEventArgs e)        {            MessageBox.Show((e.OriginalSource as Student).Id.ToString());        } 确切地说，UIElement类是路由事件宿主与附加事件宿主的分水岭，不单是因为从UIElement类开始才具备了在界面上显示的能力，还因为RaiseEvent、AddHandler和RomveHandler这些方法也定义在UIElement类中。如果在一个非UIElement派生类中注册了路由事件，则这个类的实例即不能自己激发此路由事件也无法自己侦听此路由事件，只能把这个事件的激发“附着”在某个RaiseEvent方法的对象上，借助这个对象的RaiseEvent方法把事件发送出去；事件的侦听任务也只能交给别的对象去做。","title":"深入浅出WPF 第二部分(17)"},{"content":"此篇博客主要参考https://cwiki.apache.org/confluence/display/MAHOUT/Partial+Implementation，不过个人按照上面的提示，出现了一些错误，下面就结合出现的问题和解决方案简要分析下： （mahout版本：0.7）  一、数据： 数据从下面的网址下载：http://archive.ics.uci.edu/ml/datasets/KDD+Cup+1999+Data，训练数据：19.1M，测试数据：3.4M，训练数据的前三行如下：  0,tcp,ftp_data,SF,491,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0.00,0.00,0.00,0.00,1.00,0.00,0.00,150,25,0.17,0.03,0.17,0.00,0.00,0.00,0.05,0.00,normal,200,udp,other,SF,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,1,0.00,0.00,0.00,0.00,0.08,0.15,0.00,255,1,0.00,0.60,0.88,0.00,0.00,0.00,0.00,0.00,normal,150,tcp,private,S0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,6,1.00,1.00,0.00,0.00,0.05,0.07,0.00,255,26,0.10,0.05,0.00,0.00,1.00,1.00,0.00,0.00,neptune,19二、运行实例：  (1)上传数据：$hadoop_home/bin/hadoop fs -put kddTrain.txt input/kddTrain.txt ;$hadoop_home/bin/hadoop fs -put kddTest.txt input/kddTest.txt ; (2)生成原始数据的描述文件： fansy@fansyPC:~/hadoop-1.0.2$ bin/hadoop jar ../mahout-0.7-pure/core/target/mahout-core-0.7-job.jar org.apache.mahout.classifier.df.tools.Describe -p input/kddTrain.txt -f out/forest/info/kdd1.info -d N 3 C 2 N C 4 N C 8 N 2 C 19 N L N上面的命令和原文的不一样，上面的红色的部分是不同 的；数据的描述文件可以在http://archive.ics.uci.edu/ml/machine-learning-databases/kddcup99-mld/kddcup.names上面看到，不过下载的数据中多出最后一列，暂时在描述文件中也没有找到，所以在Label后面多了一个Number（N）。 提示信息如下：   12/12/26 20:02:27 INFO tools.Describe: Generating the descriptor...12/12/26 20:02:28 INFO tools.Describe: generating the dataset...12/12/26 20:02:31 INFO tools.Describe: storing the dataset description(3)建树：   fansy@fansyPC:~/hadoop-1.0.2$ bin/hadoop jar ../mahout-0.7-pure/examples/target/mahout-examples-0.7-job.jar org.apache.mahout.classifier.df.mapreduce.BuildForest -Dmapred.max.split.size=1874231 -ood -d input/kddTrain.txt -ds out/forest/info/kdd1.info -sl 5 -p -t 100 --output out/forest1如果按照原文的话，会出现下面的错误提示： 12/12/26 20:04:34 ERROR mapreduce.BuildForest: Exceptionorg.apache.commons.cli2.OptionException: Unexpected out/forest1 while processing Options\tat org.apache.commons.cli2.commandline.Parser.parse(Parser.java:99)\tat org.apache.mahout.classifier.df.mapreduce.BuildForest.run(BuildForest.java:139)\tat org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:65)\tat org.apache.mahout.classifier.df.mapreduce.BuildForest.main(BuildForest.java:253)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\tat java.lang.reflect.Method.invoke(Method.java:597)\tat org.apache.hadoop.util.RunJar.main(RunJar.java:156)根据上面的错误提示，我把-o（--output）选项去掉了，然后就可以了，生成的目录文件为od/forest.seq ;  下面是BuildForest的使用参数： Usage:                                                                           [--data <path> --dataset <dataset> --selection <m> --no-complete --minsplit    <minsplit> --minprop <minprop> --seed <seed> --partial --nbtrees <nbtrees>      --output <path> --help]                                                         Options                                                                           --data (-d) path             Data path                                          --dataset (-ds) dataset      Dataset path                                       --selection (-sl) m          Optional, Number of variables to select randomly                                at each tree-node.                                                              For classification problem, the default is                                      square root of the number of explanatory                                        variables.                                                                      For regression problem, the default is 1/3 of                                   the number of explanatory variables.               --no-complete (-nc)          Optional, The tree is not complemented             --minsplit (-ms) minsplit    Optional, The tree-node is not divided, if the                                  branching data size is smaller than this value.                                 The default is 2.                                  --minprop (-mp) minprop      Optional, The tree-node is not divided, if the                                  proportion of the variance of branching data is                                 smaller than this value.                                                        In the case of a regression problem, this value                                 is used. The default is 1/1000(0.001).             --seed (-sd) seed            Optional, seed value used to initialise the                                     Random number generator                            --partial (-p)               Optional, use the Partial Data implementation      --nbtrees (-t) nbtrees       Number of trees to grow                            --output (-o) path           Output path, will contain the Decision Forest      --help (-h)                  Print out help      下面是建好树的提示信息：  12/12/26 20:06:21 INFO mapreduce.BuildForest: Build Time: 0h 1m 32s 61812/12/26 20:06:21 INFO mapreduce.BuildForest: Forest num Nodes: 4735312/12/26 20:06:21 INFO mapreduce.BuildForest: Forest mean num Nodes: 47312/12/26 20:06:21 INFO mapreduce.BuildForest: Forest mean max Depth: 1212/12/26 20:06:21 INFO mapreduce.BuildForest: Storing the forest in: od/forest.seq(3)测试数据：  命令： fansy@fansyPC:~/hadoop-1.0.2$ bin/hadoop jar ../mahout-0.7-pure/examples/target/mahout-examples-0.7-job.jar org.apache.mahout.classifier.df.mapreduce.TestForest -i input/kddTest.txt -ds out/forest/info/kdd1.info -m od/forest.seq -a -mr -o predictions测试信息如下：  Summary-------------------------------------------------------Correctly Classified Instances          :      16285\t   72.2365%Incorrectly Classified Instances        :       6259\t   27.7635%Total Classified Instances              :      22544TestForest的用法：  Usage:                                                                           [--input <input> --dataset <dataset> --model <path> --output <output>          --analyze --mapreduce --help]                                                   Options                                                                           --input (-i) input         Path to job input directory.                         --dataset (-ds) dataset    Dataset path                                         --model (-m) path          Path to the Decision Forest                          --output (-o) output       The directory pathname for output.                   --analyze (-a)                                                                  --mapreduce (-mr)                                                               --help (-h)                Print out help      分享，成长，快乐","title":"mahout决策树之Partial Implementation 实战"},{"content":"                     Big Data Counting: How To Count A Billion Distinct Objects Using Only 1.5K This is a guest post by Matt Abrams (@abramsm), from Clearspring, discussing how they are able to accurately estimate the cardinality of sets with billions of distinct elements using surprisingly small data structures. Their servers receive well over 100 billion events per month. 在Clearspring，我们从事统计数据。统计一组不同元素且数量很大的数据集时，是一个挑战。 为了更好地理解已经明确基数的大数据集的挑战，我们假设你的日志文件包含16个字符的ID,并且你想统计不同ID的数量.例如: 4f67bfc603106cb2 这16个字符需要用128位来表示。6万5千个ID将需要1MB的空间。我们每天收到30多亿条事件记录，每条记录都有一个ID。这些ID需要3840亿位或45GB的存储。而这仅仅是ID字段需要的空间。我们采取一种简单的方法获取日常事件记录中以ID为基数的数据。最简单的办法就是使用哈希集合且存放到内存中，其中哈希集包含唯一ID的列表（即输入文件中可能会有多条记录的id是相同，但在哈希集中只存放一条）。即使我们假设只有1/3的条记录ID是唯一的（即2/3的记录ID是重复的），哈希集仍需要119GB的RAM，这其中不包括Java需要在内存中存储对象的开销。你需要一台配备几百GB内存的机器来计算不同的元素，并且这只是计算一天内日志事件记录的唯一ID的内存消耗。如果我们想要统计数周或数月的数据，这问题只会变得更加困难。我们身边当然不会有一台配备几百GB内存的空闲机器，所以我们需要一个更好的解决方案。 解决这一问题的常见办法是使用位图（博客：海量数据处理算法—Bit-Map）。位图可以快速、准确地获取一个给定输入的基数。位图的基本思想是使用哈希函数把数据集映射到一个bit位，每个输入元素与bit位是一一对应。这样Hash将没有产生碰撞冲突，并减少需要计算每个元素映射到1个bit的空间。虽然Bit-map大大节省了存储空间，但当统计很高的基数或非常大的不同的数据集，它们仍然有问题。例如，如果我们想要使用Bit-map计数十亿，你将需要Bit-map位，或需要每个约120 MB的计数器。稀疏的位图可以被压缩，以获得更多的空间效率，但也并不总是有帮助的。 幸运的是，基数估计是一个热门的研究领域。我们已经利用这项研究提供了一个开源实现的基数估计、集合元素检测和top-k算法。 基数估计算法就是使用准确性换取空间。为了说明这一点，我们用三种不同的计算方法统计所有莎士比亚作品中不同单词的数量。请注意，我们的输入数据集增加了额外的数据以致比问题的参考基数更高。这三种技术是：Java HashSet、Linear Probabilistic Counter以及一个Hyper LogLog Counter。结果如下：                              该表显示，我们统计这些单词只用了512 bytes，而误差在3%以内。相比之下，HashMap的计数准确度最高，但需要近10MB的空间，你可以很容易地看到为什么基数估计是有用的。在实际应用中准确性并不是很重要的，这是事实，在大多数网络规模和网络计算的情况下，用概率计数器会节省巨大的空间。 线性概率计数器 线性概率计数器是高效的使用空间，并且允许实现者指定所需的精度水平。该算法在注重空间效率时是很有用的，但你需要能够控制结果的误差。该算法分两步运行：第一步，首先在内存中分配一个初始化为都为0的Bit-map，然后使用哈希函数对输入数据中的每个条目进行hash计算，哈希函数运算的结果是将每条记录（或者是元素）映射到Bit-map的一个Bit位上，该Bit位被置为1；第二步，算法计算空的bit位数量，并使用这个数输入到下面的公式来进行估算： n=-m ln Vn 注意:ln Vn=Loge(Vn) 自然对数 在公式中，m是 Bit-map的大小，Vn是空bit位和map的大小的比率。需要重点注意的是原始Bit-map的大小，可以远小于预期的最大基数。到底小多少取决于你可以承受误差的大小。因为Bit-map的大小m小于不同元素的总数将会产生碰撞。虽然碰撞可以节省空间，但同时也造成了估算结果出现误差。所以通过控制原始map的大小，我们可以估算碰撞的次数，以致我们将在最终结果中看到误差有多大。 Hyper LogLog 顾名思义，Hyper LogLog计数器就是估算Nmax为基数的数据集仅需使用loglog(Nmax)+O(1) bits就可以。如线性计数器的Hyper LogLog计数器允许设计人员指定所需的精度值，在Hyper LogLog的情况下，这是通过定义所需的相对标准差和预期要计数的最大基数。大部分计数器通过一个输入数据流M，并应用一个哈希函数设置h(M)来工作。这将产生一个S = h(M) of {0,1}^∞字符串的可观测结果。通过分割哈希输入流成m个子字符串，并对每个子输入流保持m的值可观测 ，这就是相当一个新Hyper LogLog（一个子m就是一个新的Hyper LogLog）。利用额外的观测值的平均值，产生一个计数器，其精度随着m的增长而提高，这只需要对输入集合中的每个元素执行几步操作就可以完成。其结果是，这个计数器可以仅使用1.5 kb的空间计算精度为2%的十亿个不同的数据元素。与执行 HashSet所需的120 兆字节进行比较，这种算法的效率很明显。 合并分布式计数器 我们已经证明了使用上面描述的计数器我们可以估算大集合的基数。但是，如果你的原始输入数据集不适合于单台机器，将怎么做呢？这正是我们在Clearspring所面临的问题。我们的数据分散在数百台服务器上，并且每个服务器只包含整个数据集子集的一部分。这事实上我们能合并一组分布式计数器的内容是至关重要的。这个想法有点令人费解，但如果你花费一些时间去思考这个问题，就会发现其与基本的基数估计值相比并没有太大的不同。因为这个计数器表示映射中的位作为基数，我们可以采取两个兼容计数器并将他们bit位合并到单一的map上。这个算法已经处理碰撞，所以我们可以得到一个基数估计所需的精密，即使我们从来没有把所有的输入数据到一台机器。这是非常有用的，节省了我们在网络中移动数据的大量时间和精力。 Next Steps 希望这篇文章能帮助你更好地理解这个概念和概率计数器的应用。如果估算大集合的基数是一个问题，而你又碰巧使用一个基于JVM的语言，那么你应该使用stream-lib项目——它提供了其他几个流处理工具以及上文所述的算法的实现。 本文来自：High Scalability 本人结束语：自认英语不好，翻译可能会有出入。但我看了csdn的翻译，我怀疑那是技术员人翻译的吗？ 一些翻译直接是工具翻译过来。 若深入了解Hyper LogLog：请看http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf和http://www.ic.unicamp.br/~celio/peer2peer/math/bitmap-algorithms/durand03loglog.pdf At Clearspring we like to count things. Counting the number of distinct elements (the cardinality) of a set is challenge when the cardinality of the set is large. To better understand the challenge of determining the cardinality of large sets let's imagine that you have a 16 character ID and you'd like to count the number of distinct IDs that you've seen in your logs. Here is an example: 4f67bfc603106cb2 These 16 characters represent 128 bits. 65K IDs would require 1 megabyte of space. We receive over 3 billion events per day, and each event has an ID. Those IDs require 384,000,000,000 bits or 45 gigabytes of storage. And that is just the space that the ID field requires! To get the cardinality of IDs in our daily events we could take a simplistic approach. The most straightforward idea is to use an in memory hash set that contains the unique list of IDs seen in the input files. Even if we assume that only 1 in 3 records are unique the hash set would still take 119 gigs of RAM, not including the overhead Java requires to store objects in memory. You would need a machine with several hundred gigs of memory to count distinct elements this way and that is only to count a single day's worth of unique IDs. The problem only gets more difficult if we want to count weeks or months of data. We certainly don't have a single machine with several hundred gigs of free memory sitting around so we needed a better solution. One common approach to this problem is the use of bitmaps. Bitmaps can be used to quickly and accurately get the cardinality of a given input. The basic idea with a bitmap is mapping the input dataset to a bit field using a hash function where each input element uniquely maps to one of the bits in the field. This produces zero collisions, and reduces the space required to count each unique element to 1 bit. While bitmaps drastically reduce the space requirements from the naive set implementation described above they are still problematic when the cardinality is very high and/or you have a very large number of different sets to count. For example, if we want to count to one billion using a bitmap you will need one billion bits, or roughly 120 megabytes for each counter. Sparse bitmaps can be compressed in order to gain space efficiency, but that is not always helpful. Luckily, cardinality estimation is a popular area of research. We've leveraged this research to provide a open source implementation of cardinality estimators, set membership detection, and top-k algorithms. Cardinality estimation algorithms trade space for accuracy. To illustrate this point we counted the number of distinct words in all of Shakespeare's works using three different counting techniques. Note that our input dataset has extra data in it so the cardinality is higher than the standard reference answer to this question. The three techniques we used were Java HashSet, Linear Probabilistic Counter, and a Hyper LogLog Counter. Here are the results: Counter Bytes Used Count Error HashSet 10447016 67801 0% Linear 3384 67080 1% HyperLogLog 512 70002 3%   The table shows that we can count the words with a 3% error rate using only 512 bytes of space. Compare that to a perfect count using a HashMap that requires nearly 10 megabytes of space and you can easily see why cardinality estimators are useful. In applications where accuracy is not paramount, which is true for most web scale and network counting scenarios, using a probabilistic counter can result in tremendous space savings. Linear Probabilistic Counter The Linear Probabilistic Counter is space efficient and allows the implementer to specify the desired level of accuracy. This algorithm is useful when space efficiency is important but you need to be able to control the error in your results. This algorithm works in a two-step process. The first step assigns a bitmap in memory initialized to all zeros. A hash function is then applied to the each entry in the input data. The result of the hash function maps the entry to a bit in the bitmap, and that bit is set to 1. The second step the algorithm counts the number of empty bits and uses that number as input to the following equation to get the estimate. n=-m ln Vn In the equation m is the size of the bitmap and Vn is the ratio of empty bits over the size of the map. The important thing to note is that the size of the original bitmap can be much smaller than the expected max cardinality. How much smaller depends on how much error you can tolerate in the result. Because the size of the bitmap, m, is smaller than the total number of distinct elements, there will be collisions. These collisions are required to be space-efficient but also result in the error found in the estimation. So by controlling the size of the original map we can estimate the number of collisions and therefore the amount of error we will see in the end result. Hyper LogLog The Hyper LogLog Counter's name is self-descriptive. The name comes from the fact that you can estimate the cardinality of a set with cardinality Nmax using just loglog(Nmax) + O(1) bits. Like the Linear Counter the Hyper LogLog counter allows the designer to specify the desired accuracy tolerances. In Hyper LogLog's case this is done by defining the desired relative standard deviation and the max cardinality you expect to count. Most counters work by taking an input data stream, M, and applying a hash function to that set, h(M). This yields an observable result of S = h(M) of {0,1}^∞ strings. Hyper LogLog extends this concept by splitting the hashed input stream into m substrings and then maintains m observables for each of the substreams. Taking the average of the additional observables yields a counter whose accuracy improves as m grows in size but only requires a constant number of operations to be performed on each element of the input set. The result is that, according to the authors of thispaper, this counter can count one billion distinct items with an accuracy of 2% using only 1.5 kilobytes of space. Compare that to the 120 megabytes required by the HashSet implementation and the efficiency of this algorithm becomes obvious. Merging Distributed Counters We've shown that using the counters described above we can estimate the cardinality of large sets. However, what can you do if your raw input dataset does not fit on single machine? This is exactly the problem we face at Clearspring. Our data is spread out over hundreds of servers and each server contains only a partial subset of the the total dataset. This is where the fact that we can merge the contents of a set of distributed counters is crucial. The idea is a little mind-bending but if you take a moment to think about it the concept is not that much different than basic cardinality estimation. Because the counters represent the cardinality as set of bits in a map we can take two compatible counters and merge their bits into a single map. The algorithms already handle collisions so we can still get a cardinality estimation with the desired precision even though we never brought all of the input data to a single machine. This is terribly useful and saves us a lot of time and effort moving data around our network. Next Steps Hopefully this post has helped you better understand the concept and application of probabilistic counters. If estimating the cardinality of large sets is a problem and you happen to use a JVM based language then you should check out the stream-lib project — it provides implementations of the algorithms described above as well as several other stream-processing utilities.","title":"大数据计算：如何仅用1.5KB内存为十亿对象计数"},{"content":"原创内容，如有转载必须注明出处，否则追究。           首先提一个概念\"桥接\"，网上各种说法，但自己的理解是：以一个物理网卡为基本硬件，创建一个虚拟的路由器(路由器的概念不用说了吧)。当虚拟机需分配IP地址时，我们创建一个临时的虚拟网卡，并将这个网卡连接到虚拟路由器上，虚拟网卡通过虚拟路由器从真实的DHCP端得到IP地址。   宿主主机系统： centos5.6-64bit，文本模式，有openssh-server ip:192.168.135.125 1.安装KVM # yum install -y kvm kmod-kvm kvm-qemu-img libvirt python-virtinst virt-manager virt-viewer bridge-utils   安装完成后重启主机： # reboot   重启完成后，检查kvm模块是否加载： # lsmod |grep kvm kvm_intel              50380  6 kvm                   305081  1 kvm_inte 2.配置桥接 安装tunctl： # yum install -y tunctl   添加一个桥设备br0，并添加下面的内容 # vim /etc/sysconfig/network-scripts/ifcfg-br0 DEVICE=br0 TYPE=Bridge ONBOOT=yes BOOTPROTO=dhcp   //可根据实际情况设置静态IP也可 修改物理网卡em1的设置，本例中的br0是桥接在em1上 # vim /etc/sysconfig/network-scripts/ifcfg-em1 DEVICE=\"em1\" BOOTPROTO=\"dhcp\" HWADDR=\"00:22:19:63:A7:F6\" IPV6INIT=\"no\" NM_CONTROLLED=\"yes\" ONBOOT=\"yes\" BRIDGE=br0   做完以上内容，重启一下网络服务 # service network restart   以下这段内容非常重要，桥接成功与否均是源于这一步！ 在/etc目录下创建qemu-ifup文件： # vim /etc/qemu-ifup   添加如下内容： #!/bin/sh set -x switch=br0 if [ -n \"$1\" ];then         /usr/bin/sudo /usr/sbin/tunctl -u `whoami` -t $1         /usr/bin/sudo /sbin/ip link set $1 up         sleep 0.5s         /usr/bin/sudo /usr/sbin/brctl addif $switch $1         exit 0 else         echo \"Error: no interface specified\"         exit 1 fi   为了简单直接给予任何人对该文件的所有权限，否则虚拟机将还是无法分配到ip地址 #chmod 777 /etc/qemu-ifup           解释下该文件的作用，该文件的主要作用就是在启动虚拟机时，使用tunctl创建一个虚拟网络设备(tapN，N=0、1、2...可理解为一个网卡或者是路由器上的一个插口)，并将该设备使用桥接控制工具brctl添加到switch(桥br0)上。可理解为在一个路由器上开了一个新的网线插口。这一步的操作是桥接成功的关键，网上的很多教程均没有提到，本人多次尝试失败后来只好去看官网的文档，最终才得以知道问题的真相。   3.配置转发 执行以下命令： #echo 1 > /proc/sys/net/ipv4/ip_forward 4.创建虚拟机镜像 为了使用方便本人先做一些链接，这样就可以直接使用命令kvm、kvm-img： # ln -s /usr/libexec/qemu-kvm /usr/bin/kvm # ln -s /usr/bin/qemu-img /usr/bin/kvm-img            在创建虚拟机镜像之前，我们假设你已经将操作系统ios文件拷贝到相应的位置(随意)，本例的CentOS-5.6-x86_64-bin-DVD-1of2.iso是放在了/data/kvmtest路径下。 创建文件： # kvm-img create centos.img -f raw 6GB   创建虚拟机镜像： # kvm -m 512 -cdrom CentOS-5.6-x86_64-bin-DVD-1of2.iso -drive file=centos.img -boot d -net nic -net user -nographic -vnc :0           以上操作均是在宿主主机192.168.135.125进行的，执行以上操作之后，我是在windows端通过图形界面工具VNCViewer连接到测试服务器192.168.135.125:0，如果使用的是-vnc :1，那么就应该是连接到192.168.135.125:1，以此类推。linux下也有vncviewer工具。安装配置过程就是通过vncviewer进行操作的。 5.启动虚拟机 # kvm -m 1024 -drive file=centos.img -net nic,macaddr=55-54-53-52-66-01 -net tap -vnc :0           此处本人随便填了一个mac地址。执行以上操作后，可以通过VNCViewer连接192.168.135.125:0可以看到该虚拟机实例的启动过程。           此文为本人实践的笔记，如有任何问题，欢迎交流！  ","title":"centos5.6下kvm的安装/桥接设置/虚拟机创建及运行"},{"content":"硬件的初始化对于系统运行起着极为重要的角色（比如系统时钟初始化、平台相关硬件初始化等），本文通过tinyos2.1/apps/Blink来分析下Platform的初始化过程。 Platform初始化的调用位于tinyos2.1tos/system/RealMainP.nc，由“call PlatformInit.init()”语句触发，语句的调用是系统启动时自发完成的，所以对于Platform初始化的设置，只需关注“call PlatformInit.init()”的具体实现即可，至于TinyOS的启动过程，在后续的文章中可能会提到。 “call PlatformInit.init()”语句其实是接口PlatformInit.（Init接口的别名）的调用，该接口（Init）来自于tinyos2.1/tos/platform/telosa/PlatformC模块（端口绑定可参看tinyos2.1/tos/system/MainC.nc），而具体实现在和PlatformC.nc同目录下的PlatformP.nc文件中。在PlatformP.nc文件中我们很容易找到Platform初始化的具体过程： command error_t Init.init() {     call MoteClockInit.init();     call MoteInit.init();     call LedsInit.init();     return SUCCESS;   } 它通过调用另外的三个接口来完成： MoteClockInit、 MoteInit、 LedsInit。那现在的问题是，这三个接口又是在哪里被绑定，在哪里被定义实现的呢？ 在PlatformC.nc文件中很容易找到MoteClockInit（系统时钟初始化，位于tinyos2.1/tos/platforms/telosb/MoteClockC.nc）和 MoteInit（平台相关硬件初始化，位于tinyos2.1/tos/platforms/telosb/MotePlatformC.nc）接口的绑定实现。对于一般的系统平台初始化，关注这两个接口部分就完全足够了，当需要特别的设置时（比方说本应用中的Led初始化），就可以通过添加绑定附加接口实现了（比方说本应用中的LedsInit接口）。那么LedsInit接口是在什么地方绑定实现的呢？ LedsInit接口的绑定实现位于tinyos2.1/tos/platforms/telosa/PlatformLedsC.nc文件中，而最终的绑定位于tinyos2.1/tos/system/LedC.nc文件中。 总结下： 平台的硬件初始化分为两个部分：1、通用的硬件初始化（MoteClockInit、 MoteInit）；2、与应用相关的硬件初始化（LedsInit）。对于硬件平台的初始化配置，需要根据设计的需求适当调整。","title":"TinyOS之Blink（二） - Platform初始化分析"},{"content":"应用场景：需要实时收集多台服务器的nginx日志到一台机器。收集完成结果存放需要按天生成文件夹，按每5分钟生成文件，比如2012年12月29日12点26分的日志，需要放到/data/log/20121229/log-1225-对应的文件中。自己实现了类似flume-og和flume-ng的hdfs-sink的文件sink。 使用的时候配置如下： agent.sources = source agent.channels = channel agent.sinks = sink agent.sources.source.type = avro agent.sources.source.bind = 192.168.0.100 agent.sources.source.port = 44444 agent.sources.source.channels = channel agent.sinks.sink.type = org.apache.flume.sink.FileSink agent.sinks.sink.file.path = /data/log/%{dayStr} agent.sinks.sink.file.filePrefix = log-%{hourStr}%{minStr}- agent.sinks.sink.file.txnEventMax = 10000 agent.sinks.sink.file.maxOpenFiles = 5 agent.sinks.sink.channel = channel agent.channels.channel.type = memory agent.channels.channel.capacity = 100000 agent.channels.channel.transactionCapacity = 100000 agent.channels.channel.keep-alive = 60 依赖的jar如下： jakarta-oro-2.0.1.jar flume-ng-core-1.3.0-SNAPSHOT.jar flume-ng-sdk-1.3.0-SNAPSHOT.jar flume-ng-configuration-1.3.0-SNAPSHOT.jar slf4j-log4j12-1.6.1.jar slf4j-api-1.6.1.jar guava-10.0.1.jar 代码如下： FileSink.java package org.apache.flume.sink; import java.io.IOException; import java.util.Calendar; import java.util.List; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import org.apache.flume.Channel; import org.apache.flume.Context; import org.apache.flume.Event; import org.apache.flume.EventDeliveryException; import org.apache.flume.Transaction; import org.apache.flume.conf.Configurable; import org.apache.flume.formatter.output.BucketPath; import org.apache.flume.instrumentation.SinkCounter; import org.apache.flume.serialization.EventSerializer; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.common.util.concurrent.ThreadFactoryBuilder; public class FileSink extends AbstractSink implements Configurable {         private static final Logger logger = LoggerFactory                      . getLogger(FileSink .class );         private String path ;         private static final String defaultFileName = \"FlumeData\";         private static final int defaultMaxOpenFiles = 50;         /**         * Default length of time we wait for blocking BucketWriter calls before         * timing out the operation. Intended to prevent server hangs.         */         private long txnEventMax ;         private FileWriterLinkedHashMap sfWriters ;         private String serializerType ;         private Context serializerContext ;         private boolean needRounding = false;         private int roundUnit = Calendar.SECOND;         private int roundValue = 1;         private SinkCounter sinkCounter ;         private int maxOpenFiles ;         private ScheduledExecutorService timedRollerPool ;         private long rollInterval ;         @Override         public void configure(Context context) {               String directory = Preconditions. checkNotNull(                            context.getString( \"file.path\"), \"file.path is required\");               String fileName = context.getString( \"file.filePrefix\", defaultFileName);                this.path = directory + \"/\" + fileName;                maxOpenFiles = context.getInteger(\"file.maxOpenFiles\" ,                             defaultMaxOpenFiles);                serializerType = context.getString(\"sink.serializer\" , \"TEXT\" );                serializerContext = new Context(                            context.getSubProperties(EventSerializer. CTX_PREFIX));                txnEventMax = context.getLong(\"file.txnEventMax\" , 1l);                if (sinkCounter == null) {                       sinkCounter = new SinkCounter(getName());               }                rollInterval = context.getLong(\"file.rollInterval\" , 30l);               String rollerName = \"hdfs-\" + getName() + \"-roll-timer-%d\" ;                timedRollerPool = Executors.newScheduledThreadPool( maxOpenFiles,                             new ThreadFactoryBuilder().setNameFormat(rollerName).build());        }         @Override         public Status process() throws EventDeliveryException {               Channel channel = getChannel();               Transaction transaction = channel.getTransaction();               List<BucketFileWriter> writers = Lists. newArrayList();               transaction.begin();                try {                      Event event = null;                       int txnEventCount = 0;                       for (txnEventCount = 0; txnEventCount < txnEventMax; txnEventCount++) {                            event = channel.take();                             if (event == null) {                                    break;                            }                             // reconstruct the path name by substituting place holders                            String realPath = BucketPath                                          . escapeString(path, event.getHeaders(), needRounding,                                                         roundUnit, roundValue );                            BucketFileWriter bucketFileWriter = sfWriters.get(realPath);                             // we haven't seen this file yet, so open it and cache the                             // handle                             if (bucketFileWriter == null) {                                   bucketFileWriter = new BucketFileWriter();                                   bucketFileWriter.open(realPath, serializerType,                                                  serializerContext, rollInterval , timedRollerPool,                                                  sfWriters);                                    sfWriters.put(realPath, bucketFileWriter);                            }                             // track the buckets getting written in this transaction                             if (!writers.contains(bucketFileWriter)) {                                   writers.add(bucketFileWriter);                            }                             // Write the data to File                            bucketFileWriter.append(event);                      }                       if (txnEventCount == 0) {                             sinkCounter.incrementBatchEmptyCount();                      } else if (txnEventCount == txnEventMax) {                             sinkCounter.incrementBatchCompleteCount();                      } else {                             sinkCounter.incrementBatchUnderflowCount();                      }                       // flush all pending buckets before committing the transaction                       for (BucketFileWriter bucketFileWriter : writers) {                             if (!bucketFileWriter.isBatchComplete()) {                                   flush(bucketFileWriter);                            }                      }                      transaction.commit();                       if (txnEventCount > 0) {                              sinkCounter.addToEventDrainSuccessCount(txnEventCount);                      }                       if (event == null) {                             return Status.BACKOFF ;                      }                       return Status.READY ;               } catch (IOException eIO) {                      transaction.rollback();                       logger.warn(\"File IO error\" , eIO);                       return Status.BACKOFF ;               } catch (Throwable th) {                      transaction.rollback();                       logger.error(\"process failed\" , th);                       if (th instanceof Error) {                             throw (Error) th;                      } else {                             throw new EventDeliveryException(th);                      }               } finally {                      transaction.close();               }        }         private void flush(BucketFileWriter bucketFileWriter) throws IOException {               bucketFileWriter.flush();        }         @Override         public synchronized void start() {                super.start();                this.sfWriters = new FileWriterLinkedHashMap(maxOpenFiles);                sinkCounter.start();        } } BucketFileWriter.java package org.apache.flume.sink; import java.io.BufferedOutputStream; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; import java.util.concurrent.Callable; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; import org.apache.flume.Context; import org.apache.flume.Event; import org.apache.flume.serialization.EventSerializer; import org.apache.flume.serialization.EventSerializerFactory; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class BucketFileWriter {      private static final Logger logger = LoggerFactory                .getLogger(BucketFileWriter.class);      private static final String IN_USE_EXT = \".tmp\";      /**      * This lock ensures that only one thread can open a file at a time.      */      private final AtomicLong fileExtensionCounter;      private OutputStream outputStream;      private EventSerializer serializer;      private String filePath;      /**      * Close the file handle and rename the temp file to the permanent filename.      * Safe to call multiple times. Logs HDFSWriter.close() exceptions.      *      * @throws IOException      *             On failure to rename if temp file exists.      */      public BucketFileWriter() {           fileExtensionCounter = new AtomicLong(System.currentTimeMillis());      }      public void open(final String filePath, String serializerType,                Context serializerContext, final long rollInterval,                final ScheduledExecutorService timedRollerPool,                final FileWriterLinkedHashMap sfWriters) throws IOException {           this.filePath = filePath;           File file = new File(filePath + fileExtensionCounter + IN_USE_EXT);           file.getParentFile().mkdirs();           outputStream = new BufferedOutputStream(new FileOutputStream(file));           logger.info(\"filename = \" + file.getAbsolutePath());           serializer = EventSerializerFactory.getInstance(serializerType,                     serializerContext, outputStream);           serializer.afterCreate();           if (rollInterval > 0) {                Callable<Void> action = new Callable<Void>() {                     @Override                     public Void call() throws Exception {                          logger.debug(                                    \"Rolling file ({}): Roll scheduled after {} sec elapsed.\",                                    filePath + fileExtensionCounter + IN_USE_EXT,                                    rollInterval);                          if (sfWriters.containsKey(filePath)) {                               sfWriters.remove(filePath);                          }                          close();                          return null;                     }                };                timedRollerPool.schedule(action, rollInterval, TimeUnit.SECONDS);           }      }      public void append(Event event) throws IOException {           serializer.write(event);      }      public boolean isBatchComplete() {           return true;      }      public void flush() throws IOException {           serializer.flush();           outputStream.flush();      }      /**      * Rename bucketPath file from .tmp to permanent location.      */      private void renameBucket() {           File srcPath = new File(filePath + fileExtensionCounter + IN_USE_EXT);           File dstPath = new File(filePath + fileExtensionCounter);           if (srcPath.exists()) {                srcPath.renameTo(dstPath);                logger.info(\"Renaming \" + srcPath + \" to \" + dstPath);           }      }      public synchronized void close() throws IOException, InterruptedException {           if (outputStream != null) {                outputStream.flush();                outputStream.close();           }           renameBucket();      } } FileWriterLinkedHashMap.java package org.apache.flume.sink; import java.io.IOException; import java.util.LinkedHashMap; import java.util.Map.Entry; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class FileWriterLinkedHashMap extends           LinkedHashMap<String, BucketFileWriter> {      private static final Logger logger = LoggerFactory                .getLogger(FileWriterLinkedHashMap.class);      private static final long serialVersionUID = -7860596835613215998L;      private final int maxOpenFiles;      public FileWriterLinkedHashMap(int maxOpenFiles) {           super(16, 0.75f, true); // stock initial capacity/load, access           this.maxOpenFiles = maxOpenFiles;      }      @Override      protected boolean removeEldestEntry(Entry<String, BucketFileWriter> eldest) {           if (size() > maxOpenFiles) {                // If we have more that max open files, then close the last one                // and                // return true                try {                     eldest.getValue().close();                } catch (IOException e) {                     logger.warn(eldest.getKey().toString(), e);                } catch (InterruptedException e) {                     logger.warn(eldest.getKey().toString(), e);                     Thread.currentThread().interrupt();                }                return true;           } else {                return false;           }      } }","title":"Flume-ng生产环境实践（三）实现文件sink，按照固定格式目录输出"},{"content":"续上篇，由于filesink中需要使用/data/log/%{dayStr}/log-%{hourStr}%{minStr}-这样文件格式的，为了使file-sink能使用%{dayStr}这样的标签，需要在数据传输过程中，给event的header中添加对应的键值对。在flume-ng中提供了很方便的方式：Interceptor 以下为实现的interceptor，首先使用正则表达式匹配nginx日志，如何匹配成功，则获取匹配到的数据，并且对url中的参数进行处理，最后所有日志信息都被存储在Map中。根据配置文件中需要输出的键找到对应的值，按照顺序输出为csv格式的行。 原始日志格式： 112.245.239.72 - - [29/Dec/2012:15:00:00 +0800] \"GET /hdpb.gif?a=1&b=2 HTTP/1.1\" 200 0 \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4 .0; 4399Box.1357; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; AskTbPTV2/5.9.1.14019; 4399Box.1357)\" 最终结果： 1,2 配置信息为： agent.sources = source agent.channels = channel agent.sinks = sink agent.sources.source.type = exec #agent.sources.source.command = tail -n +0 -F /data/tmp/accesspvpb_2012-11-18.log agent.sources.source.command = cat /opt/nginx/logs/vvaccess_log_pipe agent.sources.source.interceptors = logformat agent.sources.source.interceptors.logformat.type = org.apache.flume.interceptor.LogFormatInterceptor$Builder agent.sources.source.interceptors.logformat.confpath = /usr/programs/flume/conf/logformat_vv.properties agent.sources.source.interceptors.logformat.dynamicprop = true agent.sources.source.interceptors.logformat.hostname = vv111 agent.sources.source.interceptors.logformat.prop.monitor.rollInterval = 100000 # The channel can be defined as follows. agent.sources.source.channels = channel agent.sinks.sink.type = avro agent.sinks.sink.hostname = 192.168.0.100 agent.sinks.sink.port = 44444 agent.sinks.sink.channel = channel # Each channel's type is defined. agent.channels.channel.type = file agent.channels.channel.checkpointDir = /data/tmpc/checkpoint agent.channels.channel.dataDirs = /data/tmpc/data agent.channels.channel.transactionCapacity = 15000 /usr/programs/flume/conf/logformat_vv.properties文件内容为： keys=a,b regexp=([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\\\\s-\\\\s-\\\\s\\\\[([^]]+)\\\\]\\\\s\\\"GET\\\\s/pvpb.gif\\\\?(.+)\\\\s.*\\\"\\\\s[0-9]+\\\\s[0-9]+\\\\s\\\"(.+)\\\" interceptor的代码： package org.apache.flume.interceptor; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.CONF_PATH; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.DYNAMICPROP; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.DYNAMICPROP_DFLT; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.HOSTNAME; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.HOSTNAME_DFLT; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.PROPMONITORINTERVAL; import static org.apache.flume.interceptor.LogFormatInterceptor.Constants.PROPMONITORINTERVAL_DFLT; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.HashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Properties; import org.apache.flume.Context; import org.apache.flume.Event; import org.apache.flume.event.EventBuilder; import org.apache.oro.text.regex.MalformedPatternException; import org.apache.oro.text.regex.MatchResult; import org.apache.oro.text.regex.Pattern; import org.apache.oro.text.regex.PatternCompiler; import org.apache.oro.text.regex.PatternMatcher; import org.apache.oro.text.regex.Perl5Compiler; import org.apache.oro.text.regex.Perl5Matcher; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class LogFormatInterceptor implements Interceptor {         private static final Logger logger = LoggerFactory                      . getLogger(LogFormatInterceptor.class);         private String conf_path = null;         private boolean dynamicProp = false;         private String hostname = null;         private long propLastModify = 0;         private long propMonitorInterval ;         private String regexp = null;         private List<String> keys = null;         private Pattern pattern = null;         private PatternCompiler compiler = null;         private PatternMatcher matcher = null;         private SimpleDateFormat sdf = null;         private SimpleDateFormat sd = null;         private SimpleDateFormat sh = null;         private SimpleDateFormat sm = null;         private SimpleDateFormat sdfAll = null;         private long eventCount = 0l;         public LogFormatInterceptor(String conf_path, boolean dynamicProp,                      String hostname, long propMonitorInterval) {                this.conf_path = conf_path;                this.dynamicProp = dynamicProp;                this.hostname = hostname;                this.propMonitorInterval = propMonitorInterval;        }         @Override         public void close () {        }         @Override         public void initialize () {                try {                       // 读取配置文件，初始化正在表达式和输出的key列表                      File file = new File(conf_path );                       propLastModify = file.lastModified();                      Properties props = new Properties();                      FileInputStream fis;                      fis = new FileInputStream(file);                      props.load(fis);                       regexp = props.getProperty( \"regexp\");                      String strKey = props.getProperty( \"keys\");                       if (strKey != null) {                            String[] strkeys = strKey.split( \",\");                             keys = new LinkedList<String>();                             for (String key : strkeys) {                                    keys.add(key);                            }                      }                       if (keys == null) {                             logger.error(\"====================keys is null====================\");                      } else {                             logger.info(\"keys=\" + keys );                      }                       if (regexp == null) {                             logger.error(\"====================regexp is null====================\");                      } else {                             logger.info(\"regexp=\" + regexp );                      }                       // 初始化正在表达式以及时间格式化类                       compiler = new Perl5Compiler();                       pattern = compiler.compile( regexp);                       matcher = new Perl5Matcher();                       sdf = new SimpleDateFormat(\"dd/MMM/yyyy:HH:mm:ss Z\" ,                                   java.util.Locale. US);                       sd = new SimpleDateFormat(\"yyyyMMdd\" );                       sh = new SimpleDateFormat(\"HH\" );                       sm = new SimpleDateFormat(\"mm\" );                       sdfAll = new SimpleDateFormat(\"yyyyMMddHHmmss\" );               } catch (MalformedPatternException e) {                       logger.error(\"Could not complile pattern!\" , e);               } catch (FileNotFoundException e) {                       logger.error(\"conf file is not found!\" , e);               } catch (IOException e) {                       logger.error(\"conf file can not be read!\" , e);               }        }         @Override         public Event intercept(Event event) {               ++ eventCount;                try {                       if (dynamicProp && eventCount > propMonitorInterval) {                            File file = new File(conf_path );                             if (file.lastModified() > propLastModify ) {                                    propLastModify = file.lastModified();                                   Properties props = new Properties();                                   FileInputStream fis;                                   fis = new FileInputStream(file);                                   props.load(fis);                                   String strKey = props.getProperty( \"keys\");                                    if (strKey != null) {                                          String[] strkeys = strKey.split(\",\" );                                          List<String> keystmp = new LinkedList<String>();                                           for (String key : strkeys) {                                                 keystmp.add(key);                                          }                                           if (keystmp.size() > keys .size()) {                                                  keys = keystmp;                                                  logger.info(\"dynamicProp status updated = \" + keys);                                          } else {                                                  logger.error(\"dynamicProp status new keys size less than old,so status update fail = \"                                                               + keys);                                          }                                   } else {                                           logger.error(\"dynamicProp status get keys fail ,so status update fail = \"                                                        + keys);                                   }                            }                      }                      Map<String, String> headers = event.getHeaders();                      headers.put( \"host\", hostname );                      String body = new String(event.getBody());                       if (pattern != null) {                            StringBuffer stringBuffer = new StringBuffer();                            Date date = null;                            Map<String, String> index = new HashMap<String, String>();                             if (matcher .contains(body, pattern)) {                                   index.put( \"host\", hostname );                                   MatchResult result = matcher.getMatch();                                   index.put( \"ip\", result.group(1));                                    try {                                          date = sdf.parse(result.group(2));                                          index.put( \"loc_time\", sdfAll.format(date));                                   } catch (ParseException e1) {                                   }                                   String url = result.group(3).replaceAll( \",\", \"|\");                                   String[] params = url.split( \"&\");                                    for (String param : params) {                                          String[] p = param.split(\"=\" );                                           if (p.length == 2) {                                                 index.put(p[0], p[1]);                                          }                                   }                                   index.put( \"browser\", result.group(4).replaceAll(\",\" , \"|\" ));                                    for (String key : keys ) {                                           if (index.containsKey(key)) {                                                 stringBuffer.append(index.get(key) + \",\");                                          } else {                                                 stringBuffer.append( \"~,\");                                          }                                   }                                    if (stringBuffer.length() > 0) {                                          stringBuffer.deleteCharAt(stringBuffer.length() - 1);                                   } else {                                          stringBuffer.append( \"error=\" + body);                                   }                                    if (date != null) {                                          headers.put( \"dayStr\", sd .format(date));                                          headers.put( \"hourStr\", sh .format(date));                                          Integer m = Integer.parseInt(sm.format(date));                                          String min = \"\";                                           if (m >= 0 && m < 10) {                                                 min = \"0\" + (m / 5) * 5;                                          } else {                                                 min = (m / 5) * 5 + \"\" ;                                          }                                          headers.put( \"minStr\", min);                                   } else {                                          headers.put( \"dayStr\", \"errorLog\" );                                   }                                   Event e = EventBuilder.withBody(stringBuffer.toString()                                                 .getBytes(), headers);                                    return e;                            }                      }               } catch (Exception e) {                       logger.error(\"LogFormat error!\" , e);               }                return null ;        }         @Override         public List<Event> intercept(List<Event> events) {               List<Event> list = new LinkedList<Event>();                for (Event event : events) {                      Event e = intercept(event);                       if (e != null ) {                            list.add(e);                      }               }                return list;        }         /**         * Builder which builds new instances of the HostInterceptor.         */         public static class Builder implements Interceptor.Builder {                private String confPath ;                private boolean dynamicProp ;                private String hostname ;                private long propMonitorInterval ;                @Override                public Interceptor build() {                       return new LogFormatInterceptor(confPath, dynamicProp, hostname,                                    propMonitorInterval);               }                @Override                public void configure(Context context) {                       confPath = context.getString( CONF_PATH);                       dynamicProp = context.getBoolean(DYNAMICPROP, DYNAMICPROP_DFLT);                       hostname = context.getString( HOSTNAME, HOSTNAME_DFLT );                       propMonitorInterval = context.getLong(PROPMONITORINTERVAL,                                    PROPMONITORINTERVAL_DFLT);               }        }         public static class Constants {                public static String CONF_PATH = \"confpath\";                public static String DYNAMICPROP = \"dynamicprop\";                public static boolean DYNAMICPROP_DFLT = false;                public static String HOSTNAME = \"hostname\";                public static String HOSTNAME_DFLT = \"hostname\";                public static String PROPMONITORINTERVAL = \"prop.monitor.rollInterval\" ;                public static long PROPMONITORINTERVAL_DFLT = 500000l;        } } 至此，获取nginx日志，进行格式化清洗，传输到collector机器，按照格式化的目录和文件名进行输出全部完成。","title":"Flume-ng生产环境实践（四）实现log格式化interceptor"},{"content":"声明：本测试纯技术研究与分析，不附加任何其它目的，仅为本人笔记。            原创内容，任何转载请务必注明出处，否则必追究。   主机名： svr01 备注： - 机型： 小型主机（ 4ECU / 2048内存 / 30GB 硬盘） 镜像： linux centos54 64 v111110 安全策略： 22 物理地址： 00:16:3e:01:05:b1 内网IP： 172.17.12.xx 内网掩码： 255.255.192.0 外网IP： 118.244.225.45 外网域名： vm-172-17-12-xx.hb01.sdcloud.cn 主机名： svr02 备注： - 机型： 小型主机（ 4ECU / 2048内存 / 30GB 硬盘） 镜像： linux ubuntu1204 32 20121017 安全策略： 22 物理地址： 00:16:3e:01:06:6e 内网IP： 172.17.12.xx 内网掩码： 255.255.192.0 外网IP： 211.101.12.222 外网域名： vm-172-17-12-xx.hb01.sdcloud.cn 主机名： svr03 备注： - 机型： 小型主机（ 4ECU / 2048内存 / 30GB 硬盘） 镜像： linux centos62 64 安全策略： 22 物理地址： 00:16:3e:01:01:e9 内网IP： 172.17.10.xx 内网掩码： 255.255.192.0 外网IP： 211.101.1.228 外网域名： vm-172-17-10-xx.hb01.sdcloud.cn 问题： svr01、svr03在进行两项CPU测试时，cpu均无法打满，总是在低值波动。但在大素数测试中结果表现差异较大，考虑系统或生产环境的原因。 测试情况统计： 主机svr01 CPU性能测试(寻找大素数)  find prime during 2 - 20000000 ： 时间过长放弃 主机svr01 CPU测试(UnixBench 5.1.3) ======================================================================== Benchmark Run: Fri Dec 28 2012 15:58:46 - 16:28:45 1 CPU in system; running 1 parallel copy of tests Dhrystone 2 using register variables        7179260.5 lps   (10.0 s, 7 samples) Double-Precision Whetstone                     3058.7 MWIPS (7.1 s, 7 samples) Execl Throughput                                760.5 lps   (30.0 s, 2 samples) File Copy 1024 bufsize 2000 maxblocks        107427.5 KBps  (30.0 s, 2 samples) File Copy 256 bufsize 500 maxblocks           28072.4 KBps  (30.0 s, 2 samples) File Copy 4096 bufsize 8000 maxblocks        322849.7 KBps  (30.0 s, 2 samples) Pipe Throughput                              147751.9 lps   (10.0 s, 7 samples) Pipe-based Context Switching                  43900.1 lps   (10.0 s, 7 samples) Process Creation                               1522.7 lps   (30.0 s, 2 samples) Shell Scripts (1 concurrent)                   1468.5 lpm   (60.0 s, 2 samples) Shell Scripts (8 concurrent)                    203.1 lpm   (60.1 s, 2 samples) System Call Overhead                         123872.5 lps   (10.0 s, 7 samples) System Benchmarks Index Values               BASELINE       RESULT    INDEX Dhrystone 2 using register variables         116700.0    7179260.5    615.2 Double-Precision Whetstone                       55.0       3058.7    556.1 Execl Throughput                                 43.0        760.5    176.9 File Copy 1024 bufsize 2000 maxblocks          3960.0     107427.5    271.3 File Copy 256 bufsize 500 maxblocks            1655.0      28072.4    169.6 File Copy 4096 bufsize 8000 maxblocks          5800.0     322849.7    556.6 Pipe Throughput                               12440.0     147751.9    118.8 Pipe-based Context Switching                   4000.0      43900.1    109.8 Process Creation                                126.0       1522.7    120.8 Shell Scripts (1 concurrent)                     42.4       1468.5    346.4 Shell Scripts (8 concurrent)                      6.0        203.1    338.5 System Call Overhead                          15000.0     123872.5     82.6                                                                    ======== System Benchmarks Index Score                                         231.5 主机svr01  IO测试(dd) root@SNDA-172-17-12-58:/home# time dd if=/dev/zero of=/data/test.img bs=1k count=8192000 8388608000 bytes (8.4 GB) copied, 54.468 s, 154 MB/s  [root@SNDA-172-17-12-28 home]# time dd if=/dev/zero of=/data/test.img bs=8k count=1024000 8388608000 bytes (8.4 GB) copied, 46.1496 seconds, 182 MB/s [root@SNDA-172-17-12-28 home]# time dd if=/dev/zero of=/data/test.img bs=256k count=32768 8589934592 bytes (8.6 GB) copied, 33.017 seconds, 260 MB/s [root@SNDA-172-17-12-28 home]# time dd if=/dev/zero of=/data/test.img bs=1MB count=8192 8192000000 bytes (8.2 GB) copied, 29.4471 seconds, 278 MB/s 主机svr01 IO测试（iozone） Command line used: ./iozone -r16k -P0 -s512m -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread           524288      16  341030  719114  1747114  1591669 1120228  688255                  1286915                                   Command line used: ./iozone -r16k -P0 -s1G -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread          1048576      16  209891  652653  1679314  1471155 1073943  583257                  1132575                                   Command line used: ./iozone -I -r16k -P0 -s512m -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread           524288      16  106975  160305   122218   121797    7986   15207                     9642                                   Command line used: ./iozone -I -r16k -P0 -s1G -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread          1048576      16  113686  165463    87785    65743    3901    8404                    19313   主机svr02 CPU性能测试(寻找大素数)  find prime during 2 - 20000000  using: 343684 ms 主机svr02 CPU性能测试(UnixBench 5.1.3) ======================================================================== Benchmark Run: Fri Dec 28 2012 15:01:07 - 15:29:42 1 CPU in system; running 1 parallel copy of tests Dhrystone 2 using register variables        8291582.4 lps   (10.0 s, 7 samples) Double-Precision Whetstone                     1395.8 MWIPS (10.4 s, 7 samples) Execl Throughput                               1544.5 lps   (29.9 s, 2 samples) File Copy 1024 bufsize 2000 maxblocks        313859.6 KBps  (30.1 s, 2 samples) File Copy 256 bufsize 500 maxblocks           86153.0 KBps  (30.1 s, 2 samples) File Copy 4096 bufsize 8000 maxblocks        707569.5 KBps  (30.0 s, 2 samples) Pipe Throughput                              428021.1 lps   (10.5 s, 7 samples) Pipe-based Context Switching                 101968.1 lps   (10.0 s, 7 samples) Process Creation                               6207.3 lps   (30.0 s, 2 samples) Shell Scripts (1 concurrent)                   3128.2 lpm   (60.0 s, 2 samples) Shell Scripts (8 concurrent)                    409.3 lpm   (60.1 s, 2 samples) System Call Overhead                        1541982.7 lps   (10.0 s, 7 samples) System Benchmarks Index Values               BASELINE       RESULT    INDEX Dhrystone 2 using register variables         116700.0    8291582.4    710.5 Double-Precision Whetstone                       55.0       1395.8    253.8 Execl Throughput                                 43.0       1544.5    359.2 File Copy 1024 bufsize 2000 maxblocks          3960.0     313859.6    792.6 File Copy 256 bufsize 500 maxblocks            1655.0      86153.0    520.6 File Copy 4096 bufsize 8000 maxblocks          5800.0     707569.5   1219.9 Pipe Throughput                               12440.0     428021.1    344.1 Pipe-based Context Switching                   4000.0     101968.1    254.9 Process Creation                                126.0       6207.3    492.6 Shell Scripts (1 concurrent)                     42.4       3128.2    737.8 Shell Scripts (8 concurrent)                      6.0        409.3    682.1 System Call Overhead                          15000.0    1541982.7   1028.0                                                                    ======== System Benchmarks Index Score                                         547.7 主机svr02 IO测试(dd) root@SNDA-172-17-12-58:/home# time dd if=/dev/zero of=/data/test.img bs=1KB count=8192000 8192000000 bytes (8.2 GB) copied, 54.2757 s, 151 MB/s root@SNDA-172-17-12-58:/home# time dd if=/dev/zero of=/data/test.img bs=8k count=1024000 8388608000 bytes (8.4 GB) copied, 40.9344 s, 205 MB/s root@SNDA-172-17-12-58:/home# time dd if=/dev/zero of=/data/test.img bs=256k count=32768 8589934592 bytes (8.6 GB) copied, 39.4094 s, 218 MB/s root@SNDA-172-17-12-58:/home# time dd if=/dev/zero of=/data/test.img bs=1MB count=8192 8192000000 bytes (8.2 GB) copied, 34.8569 s, 235 MB/s 主机svr02 IO测试(iozone ) Command line used: ./iozone -r16k -P0 -s512m -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread           524288      16  234612  108695  2331495  2037993 1607081   32405                  1952335 Command line used: ./iozone -r16k -P0 -s1G -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread          1048576      16  185217  189748  2370621  2076812 1678763   11132                  1878198 Command line used: ./iozone -I -r16k -P0 -s512m -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread           524288      16  128107   91400   138879   143835    9291   12474                    17084                                   Command line used: ./iozone -I -r16k -P0 -s1G -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread          1048576      16  114410  119887   143978    85175    3638    7588                    14241       主机svr03 CPU性能测试(寻找大素数)  find prime during 2 - 20000000  using: 167219 ms 主机svr03 CPU性能测试(UnixBench 5.1.3)  ======================================================================== Benchmark Run: Fri Dec 28 2012 18:16:22 - 18:47:13 1 CPU in system; running 1 parallel copy of tests Dhrystone 2 using register variables       12107222.2 lps   (10.0 s, 7 samples) Double-Precision Whetstone                     2948.6 MWIPS (9.9 s, 7 samples) Execl Throughput                                588.5 lps   (29.9 s, 2 samples) File Copy 1024 bufsize 2000 maxblocks         94116.4 KBps  (30.0 s, 2 samples) File Copy 256 bufsize 500 maxblocks           24749.4 KBps  (30.0 s, 2 samples) File Copy 4096 bufsize 8000 maxblocks        305443.5 KBps  (30.1 s, 2 samples) Pipe Throughput                              148183.3 lps   (10.0 s, 7 samples) Pipe-based Context Switching                  30945.4 lps   (10.0 s, 7 samples) Process Creation                               1241.2 lps   (30.0 s, 2 samples) Shell Scripts (1 concurrent)                   1112.7 lpm   (60.0 s, 2 samples) Shell Scripts (8 concurrent)                    150.1 lpm   (60.4 s, 2 samples) System Call Overhead                         145249.5 lps   (10.0 s, 7 samples) System Benchmarks Index Values               BASELINE       RESULT    INDEX Dhrystone 2 using register variables         116700.0   12107222.2   1037.5 Double-Precision Whetstone                       55.0       2948.6    536.1 Execl Throughput                                 43.0        588.5    136.9 File Copy 1024 bufsize 2000 maxblocks          3960.0      94116.4    237.7 File Copy 256 bufsize 500 maxblocks            1655.0      24749.4    149.5 File Copy 4096 bufsize 8000 maxblocks          5800.0     305443.5    526.6 Pipe Throughput                               12440.0     148183.3    119.1 Pipe-based Context Switching                   4000.0      30945.4     77.4 Process Creation                                126.0       1241.2     98.5 Shell Scripts (1 concurrent)                     42.4       1112.7    262.4 Shell Scripts (8 concurrent)                      6.0        150.1    250.1 System Call Overhead                          15000.0     145249.5     96.8                                                                    ======== System Benchmarks Index Score                                         212.0 主机svr03 IO测试(dd) [root@SNDA-172-17-10-248 home]# time dd if=/dev/zero of=/data/test.img bs=1k count=8192000 8388608000 bytes (8.4 GB) copied, 127.819 s, 65.6 MB/s [root@SNDA-172-17-10-248 home]# time dd if=/dev/zero of=/data/test.img bs=8k count=1024000 8388608000 bytes (8.4 GB) copied, 51.1438 s, 164 MB/s [root@SNDA-172-17-10-248 home]# time dd if=/dev/zero of=/data/test.img bs=256k count=32768 8589934592 bytes (8.6 GB) copied, 42.0778 s, 204 MB/s [root@SNDA-172-17-10-248 home]# time dd if=/dev/zero of=/data/test.img bs=1MB count=8192 8192000000 bytes (8.2 GB) copied, 37.5368 s, 218 MB/s 主机svr03 IO测试 Command line used: ./iozone -r16k -P0 -s512m -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread           524288      16  191420  346583  1909348  1912503 1384704  213525                  1379393                                    Command line used: ./iozone -r16k -P0 -s1G -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread          1048576      16  127795  300081  1900796  1708446 1176290   15589                  1454434          Command line used: ./iozone -I -r16k -P0 -s512m -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread           524288      16   76516  136381   142755   126256   12236   13244                    15596          Command line used: ./iozone -I -r16k -P0 -s1G -i0 -i1 -i2 -i5 -i8                                                             random  random    bkwd   record   stride                                                  KB  reclen   write rewrite    read    reread    read   write    read  rewrite     read   fwrite frewrite   fread  freread          1048576      16   96240  138632   134615   143562    4683    8133                    16112 ","title":"盛大云小型主机测试"},{"content":"elasticsearch的索引逻辑简单分析，这里只是理清主要的脉络，一些细节方面以后的文章或会阐述。 假如通过java api来调用es的索引接口，先是构造成一个json串（es里表示为XContent，是对要处理的内容进行抽象），在IndexRequest里面指定要索引文档到那个索引库（index）、其类型（type）还有文档的id，如果没有指定文档的id，es会通过UUID工具自动生成一个uuid，代码在IndexRequest的process方法内。        if (allowIdGeneration) {            if (id == null) {                id(UUID.randomBase64UUID());                opType(IndexRequest.OpType.CREATE);            }        } 然后使用封装过netty的TransportService通过tcp协议发送请求到es服务器（rest的话就是通过http协议）。 服务器获得TransportAction后解析索引请求（TransportShardReplicationOperationAction）。到AsyncShardOperationAction.start()方法开始进行分片操作，先读取集群状态，把目标索引及其分片信息提取出来，根据索引数据的id、类型以及索引分片信息进行哈希取模，确定把该条数据分配到那个分片。    private int shardId(ClusterState clusterState, String index, String type, @Nullable String id, @Nullable String routing) {        if (routing == null) {            if (!useType) {                return Math.abs(hash(id) % indexMetaData(clusterState, index).numberOfShards());            } else {                return Math.abs(hash(type, id) % indexMetaData(clusterState, index).numberOfShards());            }        }        return Math.abs(hash(routing) % indexMetaData(clusterState, index).numberOfShards());    } 并找到数据要分配到的分片的主分片，先把索引请求提交到主分片处理（TransportIndexAction.shardOperationOnPrimary）。 判断是否必须要指定routing值       MappingMetaData mappingMd = clusterState.metaData().index(request.index()).mappingOrDefault(request.type());        if (mappingMd != null && mappingMd.routing().required()) {            if (request.routing() == null) {                throw new RoutingMissingException(request.index(), request.type(), request.id());            }        } 判断索引操作的类型，索引操作有两种，一种是INDEX，当要索引的文档id已经存在时，不会覆盖原来的文档，只是更新原来文档。一种是CREATE，当索引文档id存在时，会抛出该文档已存在的错误。 if (request.opType() == IndexRequest.OpType.INDEX) 调用InternalIndexShard进行索引操作             Engine.Index index = indexShard.prepareIndex(sourceToParse)                    .version(request.version())                    .versionType(request.versionType())                    .origin(Engine.Operation.Origin.PRIMARY);            indexShard.index(index); 通过（InternalIndexShard）查找与请求索引数据类型（type）相符的mapping。对要索引的json字符串进行解析，根据mapping转换为对应的解析结果ParsedDocument 。     public Engine.Index prepareIndex(SourceToParse source) throws ElasticSearchException {        long startTime = System.nanoTime();        DocumentMapper docMapper = mapperService.documentMapperWithAutoCreate(source.type());        ParsedDocument doc = docMapper.parse(source);        return new Engine.Index(docMapper, docMapper.uidMapper().term(doc.uid()), doc).startTime(startTime);    } 最后调用RobinEngine中的相关方法(添加或修改)对底层lucene进行操作，这里是写入到lucene的内存索引中（RobinEngine.innerIndex）。          if (currentVersion == -1) {                // document does not exists, we can optimize for create                if (index.docs().size() > 1) {                    writer.addDocuments(index.docs(), index.analyzer());                } else {                    writer.addDocument(index.docs().get(0), index.analyzer());                }            } else {                if (index.docs().size() > 1) {                    writer.updateDocuments(index.uid(), index.docs(), index.analyzer());                } else {                    writer.updateDocument(index.uid(), index.docs().get(0), index.analyzer());                }            } 写入内存索引后还会写入到Translog（Translog是对索引的操作日志，会记录没有持久化的操作）中，防止flush前断电导致索引数据丢失。 Translog.Location translogLocation = translog.add(new Translog.Create(create)); 主分片索引请求完就把请求发给副本进行索引操作。最后把成功信息返回给客户端。 本文地址：http://blog.csdn.net/laigood12345/article/details/8450331","title":"分布式搜索Elasticsearch源码分析之二------索引过程源码概要分析"},{"content":"注明：原创内容，转载务必注明出处，否则追究。   CPU测试使用的UnixBench、IO测试使用的iozone、网络测试使用iperf，系统需要perl环境。   安装UnixBench、iozone wget http://www.iozone.org/src/current/iozone3_414.tar wget http://byte-unixbench.googlecode.com/files/UnixBench5.1.3.tgz tar xvf iozone3_414.tar tar zxvf UnixBench5.1.3.tgz cd ./iozone3_414/src/current make linux cd ./UnixBench make   安装iperf wget http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el5.rf.x86_64.rpm rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt rpm -K rpmforge-release-0.5.2-2.el5.rf.*.rpm rpm -i rpmforge-release-0.5.2-2.el5.rf.*.rpm yum install iperf   遇到的问题： Centos5.6 运行UnixBench5.1.3 报如下错误 Can't locate Time/HiRes.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at ./Run line 6. 解决方法： yum install perl-ExtUtils-MakeMaker.x86_64 yum install perl-Time-HiRes.x86_64                 物理主机信息 CentOS release 6.3 (Final) Linux localhost.localdomain 2.6.32-220.el6.x86_64 #1 SMP Tue Dec 6 19:48:22 GMT 2011 x86_64 x86_64 x86_64 GNU/Linux QEMU PC emulator version 0.12.1 (qemu-kvm-0.12.1.2), Copyright (c) 2003-2008 Fabrice Bellard Intel(R) Xeon(R) CPU E5504 @ 2.00GHz MemTotal: 16319484 kB Disk /dev/sda: 146.2 GB, 146163105792 bytes Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Device Boot Start End Blocks Id System /dev/sda1 * 1 26 204800 83 Linux Partition 1 does not end on cylinder boundary. /dev/sda2 26 3682 29364224 8e Linux LVM /dev/sda3 3682 17770 113167360 8e Linux LVM   一.磁盘IO测试 1.物理机IO [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=1K count=8192000 8388608000 bytes (8.4 GB) copied, 56.9204 s, 147 MB/s [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=1K count=8192000 8388608000 bytes (8.4 GB) copied, 53.0728 s, 158 MB/s [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=8K count=1024000 8388608000 bytes (8.4 GB) copied, 49.6586 s, 169 MB/s [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=8K count=1024000 8388608000 bytes (8.4 GB) copied, 52.2602 s, 161 MB/s [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=8K count=1024000 8388608000 bytes (8.4 GB) copied, 54.7777 s, 153 MB/s [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=256K count=32768 8589934592 bytes (8.6 GB) copied, 52.1963 s, 165 MB/s [root@localhost ~]# time dd if=/dev/zero of=/data/test.img bs=1MB count=8192 8192000000 bytes (8.2 GB) copied, 46.0236 s, 178 MB/s 2.虚拟机IO缓存使用writeback模式时，写入速度不固定，其写入速度由物理主机的内存缓存决定。 mac=`printf 'DE:AD:BE:EF:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))` kvm -m 512 -drive file=centos5-15.img,cache=writeback,if=virtio,boot=on -net nic,macaddr=$mac -net tap -nographic -vnc :1 [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1K count=8192000 8388608000 bytes (8.4 GB) copied, 141.515 seconds, 59.3 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1K count=8192000 8388608000 bytes (8.4 GB) copied, 74.3178 seconds, 113 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1K count=8192000 8388608000 bytes (8.4 GB) copied, 133.908 seconds, 62.6 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=8K count=1024000 8388608000 bytes (8.4 GB) copied, 104.59 seconds, 80.2 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=8K count=1024000 8388608000 bytes (8.4 GB) copied, 47.156 seconds, 178 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=8K count=1024000 8388608000 bytes (8.4 GB) copied, 46.4772 seconds, 180 MB/ss [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=256K count=32768 8589934592 bytes (8.6 GB) copied, 93.3618 seconds, 92.0 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=256K count=32768 8589934592 bytes (8.6 GB) copied, 152.476 seconds, 56.3 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1MB count=8192 8192000000 bytes (8.2 GB) copied, 84.2115 seconds, 97.3 MB/s 3.虚拟机在缓存模式为none模式下，实际的磁盘写入速度约为物理机速度的50%，写入速度稳定。 uid= `printf ' %08x-%04x-%04x-%04x-%012x\\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) ` mac=`printf 'DE:AD:BE:EF:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))` kvm -m 512 -drive file=centos5-15.img,cache=none,if=virtio,boot=on -net nic,macaddr=$mac -net tap -nographic -vnc :1 [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1MB count=2000e 1965891584 bytes (2.0 GB) copied, 22.5994 seconds, 87.0 MB/s [root@localhost ~]# sync [root@localhost ~]# rm -f /home/test.img  [root@localhost ~]# sync \\[root@localhost ~]#echo 3 > /proc/sys/vm/drop_caches  [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1MB count=2000 1965838336 bytes (2.0 GB) copied, 23.0265 seconds, 85.4 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1MB count=2000 1969516544 bytes (2.0 GB) copied, 23.0854 seconds, 85.3 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=1K count=2040000 1966112768 bytes (2.0 GB) copied, 23.8183 seconds, 82.5 MB/s [root@localhost ~]# time dd if=/dev/zero of=/home/test.img bs=256K count=8000 1969266688 bytes (2.0 GB) copied, 23.2247 seconds, 84.8 MB/s 二.网络测试 本测试交换机网速100Mb，因此未能反映实际情况，需进一步测试。 1.虚拟机到本地物理机 [root@localhost ~]# time scp /home/test.img root@192.168.135.124:/home test.img                                                          100% 1878MB  10.0MB/s   03:07     real    3m24.464s user    0m50.679s sys     2m14.275s 2.虚拟机到本地虚拟机 [root@localhost ~]# time scp /home/test.img root@192.168.135.84:/home test.img                                                         100% 1878MB  12.7MB/s   02:28     3.虚拟机到远程虚拟机 [root@localhost ~]# time scp /home/test.img root@192.168.135.108:/opt test.img                                                          100% 1878MB  11.1MB/s   02:50     三.CPU性能测试 该测试是使用程序在给定范围内寻找素数，物理主机与虚拟主机的CPU性能相差小于1% 1.物理机CPU测试 [root@localhost test_function]# ./finder  find prime during 2 - 10000000  using: 42479 ms 2.虚拟机CPU测试 [root@localhost home]# ./finder  find prime during 2 - 10000000  using: 42246 ms [root@localhost kvmtest]# cd /data/kvmtest [root@localhost kvmtest]# uid=`printf ' %08x-%04x-%04x-%04x-%012x\\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# mac=`printf 'DE:AD:BE:EF:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# nohup kvm -m 2048 -drive file=centos15_1.img,cache=none,if=virtio,boot=on -net nic,macaddr=$mac -net tap -uuid $uid -nographic -vnc :0 & [root@localhost kvmtest]# uid=`printf ' %08x-%04x-%04x-%04x-%012x\\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# mac=`printf 'DE:AD:BE:EF:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# nohup kvm -m 2048 -drive file=centos15_2.img,cache=none,if=virtio,boot=on -net nic,macaddr=$mac -net tap -uuid $uid -nographic -vnc :1 & [root@localhost kvmtest]# uid=`printf ' %08x-%04x-%04x-%04x-%012x\\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# mac=`printf 'DE:AD:BE:EF:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# nohup kvm -cpu core2duo -smp 2 -m 2048 -drive file=centos15_3.img,cache=none,if=virtio,boot=on -net nic,macaddr=$mac -net tap -uuid $uid -nographic -vnc :2 & [root@localhost kvmtest]# uid=`printf ' %08x-%04x-%04x-%04x-%012x\\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# mac=`printf 'DE:AD:BE:EF:%02X:%02X\\n' $((RANDOM%256)) $((RANDOM%256))` [root@localhost kvmtest]# nohup kvm -cpu core2duo -smp 4 -m 2048 -drive file=centos15_4.img,cache=none,if=virtio,boot=on -net nic,macaddr=$mac -net tap -uuid $uid -nographic -vnc :3 & 192.168.135.141  -m 2048 -vnc 0 192.168.135.142  -m 2048 -vnc 1 192.168.135.146  -cpu core2duo -smp 2 -m 2048 -vnc 2 192.168.135.147  -cpu core2duo -smp 4 -m 2048 -vnc 3 一.CPU性能测试 cd ./UnixBench ./Run 测试结果 ======================================================================== Benchmark Run: Thu Dec 27 2012 13:58:21 - 14:26:12 8 CPUs in system; running 1 parallel copy of tests Dhrystone 2 using register variables       19278152.8 lps   (10.0 s, 7 samples) Double-Precision Whetstone                     2389.7 MWIPS (9.9 s, 7 samples) Execl Throughput                               2237.1 lps   (30.0 s, 2 samples) File Copy 1024 bufsize 2000 maxblocks        506905.5 KBps  (30.0 s, 2 samples) File Copy 256 bufsize 500 maxblocks          167039.1 KBps  (30.0 s, 2 samples) File Copy 4096 bufsize 8000 maxblocks       1169919.4 KBps  (30.0 s, 2 samples) Pipe Throughput                             1054701.6 lps   (10.0 s, 7 samples) Pipe-based Context Switching                 162959.8 lps   (10.0 s, 7 samples) Process Creation                               4724.6 lps   (30.0 s, 2 samples) Shell Scripts (1 concurrent)                   3211.2 lpm   (60.0 s, 2 samples) Shell Scripts (8 concurrent)                   1167.8 lpm   (60.0 s, 2 samples) System Call Overhead                        1351904.9 lps   (10.0 s, 7 samples) System Benchmarks Index Values               BASELINE       RESULT    INDEX Dhrystone 2 using register variables         116700.0   19278152.8   1651.9 Double-Precision Whetstone                       55.0       2389.7    434.5 Execl Throughput                                 43.0       2237.1    520.3 File Copy 1024 bufsize 2000 maxblocks          3960.0     506905.5   1280.1 File Copy 256 bufsize 500 maxblocks            1655.0     167039.1   1009.3 File Copy 4096 bufsize 8000 maxblocks          5800.0    1169919.4   2017.1 Pipe Throughput                               12440.0    1054701.6    847.8 Pipe-based Context Switching                   4000.0     162959.8    407.4 Process Creation                                126.0       4724.6    375.0 Shell Scripts (1 concurrent)                     42.4       3211.2    757.4 Shell Scripts (8 concurrent)                      6.0       1167.8   1946.4 System Call Overhead                          15000.0    1351904.9    901.3                                                                    ======== System Benchmarks Index Score                                         861.6 ------------------------------------------------------------------------ Benchmark Run: Thu Dec 27 2012 14:26:12 - 14:55:58 8 CPUs in system; running 8 parallel copies of tests Dhrystone 2 using register variables      102175485.5 lps   (10.0 s, 7 samples) Double-Precision Whetstone                    19042.8 MWIPS (9.9 s, 7 samples) Execl Throughput                              10702.7 lps   (30.0 s, 2 samples) File Copy 1024 bufsize 2000 maxblocks        501088.8 KBps  (30.0 s, 2 samples) File Copy 256 bufsize 500 maxblocks          144154.1 KBps  (30.0 s, 2 samples) File Copy 4096 bufsize 8000 maxblocks       1072613.1 KBps  (30.0 s, 2 samples) Pipe Throughput                             5462333.5 lps   (10.0 s, 7 samples) Pipe-based Context Switching                1565018.7 lps   (10.0 s, 7 samples) Process Creation                              25845.7 lps   (30.0 s, 2 samples) Shell Scripts (1 concurrent)                  12409.1 lpm   (60.0 s, 2 samples) Shell Scripts (8 concurrent)                   2717.7 lpm   (60.1 s, 2 samples) System Call Overhead                        4175337.8 lps   (10.0 s, 7 samples) System Benchmarks Index Values               BASELINE       RESULT    INDEX Dhrystone 2 using register variables         116700.0  102175485.5   8755.4 Double-Precision Whetstone                       55.0      19042.8   3462.3 Execl Throughput                                 43.0      10702.7   2489.0 File Copy 1024 bufsize 2000 maxblocks          3960.0     501088.8   1265.4 File Copy 256 bufsize 500 maxblocks            1655.0     144154.1    871.0 File Copy 4096 bufsize 8000 maxblocks          5800.0    1072613.1   1849.3 Pipe Throughput                               12440.0    5462333.5   4390.9 Pipe-based Context Switching                   4000.0    1565018.7   3912.5 Process Creation                                126.0      25845.7   2051.2 Shell Scripts (1 concurrent)                     42.4      12409.1   2926.7 Shell Scripts (8 concurrent)                      6.0       2717.7   4529.6 System Call Overhead                          15000.0    4175337.8   2783.6                                                                    ======== System Benchmarks Index Score                                        2765.3 虚拟机---192.168.135.141  -m 2048 -vnc 0 ======================================================================== Benchmark Run: Thu Dec 27 2012 15:20:57 - 15:48:55 1 CPU in system; running 1 parallel copy of tests Dhrystone 2 using register variables       11347938.0 lps   (10.0 s, 7 samples) Double-Precision Whetstone                     1123.8 MWIPS (10.0 s, 7 samples) Execl Throughput                               2606.2 lps   (30.0 s, 2 samples) File Copy 1024 bufsize 2000 maxblocks        426633.9 KBps  (30.0 s, 2 samples) File Copy 256 bufsize 500 maxblocks          121600.1 KBps  (30.0 s, 2 samples) File Copy 4096 bufsize 8000 maxblocks        948874.7 KBps  (30.0 s, 2 samples) Pipe Throughput                              792690.6 lps   (10.0 s, 7 samples) Pipe-based Context Switching                 249596.9 lps   (10.0 s, 7 samples) Process Creation                              11784.1 lps   (30.0 s, 2 samples) Shell Scripts (1 concurrent)                   4433.0 lpm   (60.0 s, 2 samples) Shell Scripts (8 concurrent)                    613.1 lpm   (60.0 s, 2 samples) System Call Overhead                         730223.9 lps   (10.0 s, 7 samples) System Benchmarks Index Values               BASELINE       RESULT    INDEX Dhrystone 2 using register variables         116700.0   11347938.0    972.4 Double-Precision Whetstone                       55.0       1123.8    204.3 Execl Throughput                                 43.0       2606.2    606.1 File Copy 1024 bufsize 2000 maxblocks          3960.0     426633.9   1077.4 File Copy 256 bufsize 500 maxblocks            1655.0     121600.1    734.7 File Copy 4096 bufsize 8000 maxblocks          5800.0     948874.7   1636.0 Pipe Throughput                               12440.0     792690.6    637.2 Pipe-based Context Switching                   4000.0     249596.9    624.0 Process Creation                                126.0      11784.1    935.2 Shell Scripts (1 concurrent)                     42.4       4433.0   1045.5 Shell Scripts (8 concurrent)                      6.0        613.1   1021.8 System Call Overhead                          15000.0     730223.9    486.8                                                                    ======== System Benchmarks Index Score                                         746.9 对虚拟机做IO测试时物理机IO利用率可达到93%~97%，此时虚拟机测试得到的磁盘写入速度为物理主机的50%，既相对于物理主机来说虚拟机的IO约有40%~50%的性能损失。 磁盘IO测试       ./iozone -Mcew -i0 -i1 -i2 -s4g -r256k -f /data/test.img   write rewrite read reread read write 物理主机 121229 122212 3849945 3858558 3787035 93721 虚拟机 89278 92306 110171 115639 32169 39354","title":"kvm相关测试"},{"content":"第一步，安装Python2.7.2 # wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tgz # tar zxvf Python-2.7.2.tgz # cd Python-2.7.2 # ./configure # make # make install # vi /etc/ld.so.conf          追加/usr/local/lib/ # sudo ldconfig       这样的话，Python2.7.2就安装完毕了。 第二步，安装zookeeper # wget http://ftp.meisei-u.ac.jp/mirror/apache/dist//zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz # tar zxf zookeeper-3.3.3.tar.gz # cp -R zookeeper-3.3.3 /usr/local/ # ln -s /usr/local/zookeeper-3.3.3/ /usr/local/zookeeper # vi ~./bashrc (设置ZOOKEEPER_HOME和ZOOKEEPER_HOME/bin)            追加：           export ZOOKEEPER_HOME=\"/path/to/zookeeper\"           export PATH=$PATH:$ZOOKEEPER_HOME/bin # cp /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg (用zoo_sample.cfg制作$ZOOKEEPER_HOME/conf/zoo.cfg) # sudo mkdir /tmp/zookeeper # sudo mkdir /var/log/zookeeper 好的，zookeeper的单机安装已经完成了。 第三步，安装zeromq以及jzmq jzmq的安装貌似是依赖zeromq的，所以应该先装zeromq，再装jzmq。 1）安装zeromq： # wget http://download.zeromq.org/historic/zeromq-2.1.7.tar.gz # tar zxf zeromq-2.1.7.tar.gz # cd zeromq-2.1.7 # ./configure # make # make install # sudo ldconfig (更新LD_LIBRARY_PATH) 这里要说一下在./configure中可能会遇到的问题： 首先我遇到了：configure:error:in '/usr/local/download/zeromq-2.1.7': congifure:error:no acceptable C compiler found in $PATH See 'config.log' for more details 这是因为没有安装C编译器。 解决方法是：# yum install gcc* 之后遇到的问题是：Error:cannot link with -luuid, install uuid-dev 这是因为没有安装uuid相关的package。 解决方法是：# yum install uuid* # yum install e2fsprogs* # yum install libuuid* 问题解决了以后就可以make和make install了，如此这般，zeromq就安装好了，接下来我们安装jzmq。 2）安装jzmq # yum install git # git clone git://github.com/nathanmarz/jzmq.git # cd jzmq # ./autogen.sh # ./configure # make # make install 然后，jzmq就装好了，这里有个网站上参考到的问题没有遇见，遇见的童鞋可以参考下。在./autogen.sh这步如果报错：autogen.sh:error:could not find libtool is required to run autogen.sh，这是因为缺少了libtool，可以用#yum install libtool*来解决。","title":"storm安装 - 单机安装"},{"content":"VirtualBox下安装Openstack 安装部署整体架构。 虚拟机配置 主机： windows 7 虚拟机： VirtualBox 4 安装镜像： Ubuntu 12.04 ISO 安装步骤： 1.安装配置VirtualBox open File → Preferences → Network tab 添加 host-only netwok vboxnet0 – 这个作为 Public interface 设置ip 172.16.0.254, mask 255.255.0.0, dhcp disbaled 添加 host-only netwok vboxnet1 – 这个作为 Private (VLAN) interface 设置ip 11.0.0.1, mask 255.0.0.0, dhcp disbaled 2.在VirtualBox中新建虚拟机 内存：1024M 硬盘：20G cpu：2个 Acceleration: 勾选 VT-x 网络： Adapter 1: attached to NAT – eth0 will connect here;  Adapter 2: attached to Host-Only Adapter, vboxnet0 Adapter 3: attached to Host-Only Adapter, vboxnet1 3.安装Ubuntu 12.04 过程比较简单一路选则默认。 4.配置客户机 sudo /etc/network/interfaces auto lo iface lo inet loopback    # The primary network interface auto eth0 iface eth0 inet dhcp    #Public Interface auto eth1 iface eth1 inet static address 172.16.0.1 netmask 255.255.0.0 network 172.16.0.0 broadcast 172.16.255.255   #Private VLAN interface auto eth2 iface eth2 inet manual  up ifconfig eth2 up  启动网卡 ifup eth1 #之后, ifconfig 显示 inet addr:172.16.0.1  ifup eth2 更新 sudo apt-get update &&  sudo apt-get upgrade 安装Git sudo apt-get -y install git 获取Kevin的脚本 git clone https://github.com/uksysadmin/OpenStackInstaller.git cd OpenStackInstaller sudo git checkout essex 安装openstack ./OSinstall.sh -F 172.16.1.0/24 -f 11.1.0.0/16 -s 512 -p eth2 -t demo -v qemu 上传Ubuntu镜像 ./upload_ubuntu.sh -a admin -p openstack -t demo -C 172.16.0.1 添加keypair . demorc euca-add-keypair demo > demo.pem chmod 0600 demo.pem 添加安全组： euca-authorize default -P tcp -p 22 -s 0.0.0.0/0 euca-authorize default -P tcp -p 80 -s 0.0.0.0/0 euca-authorize default -P tcp -p 8080 -s 0.0.0.0/0 euca-authorize default -P icmp -t -1:-1 登录Horizon启动虚拟机  http://172.16.0.1 到Images & Snapshots页点击Launch Instance 登录到虚拟机：（登录时会有点慢，耐心等待） ssh -i demo.pem ubuntu@172.16.1.1 参考 http://www.tikalk.com/alm/blog/expreimenting-openstack-essex-ubuntu-1204-lts-under-virtualbox","title":"VirtualBox下安装Openstack"},{"content":"原文链接： http://blog.cloudera.com/blog/2012/10/cloudera-impala-real-time-queries-in-apache-hadoop-for-real/ ·        by Marcel Kornacker & Justin Erickson ·        October 24, 2012   After a long period ofintense engineering effort and user feedback, we are very pleased, and proud,to announce the Cloudera Impala project. This technology is a revolutionary onefor Hadoop users, and we do not take that claim lightly. 经过长期的设计和用户反馈，我们非常高兴和自豪地发布ClouderaImpala项目。对Hadoop用户来说，这是一项革命性的技术，并且这个结论我们不是随便给出的。 When Google published its Dremel paper in 2010, we were as inspired as the rest of the community by thetechnical vision to bring real-time, ad hoc query capability to Apache Hadoop,complementing traditional MapReduce batch processing. Today, we are announcinga fully functional, open-sourced codebase that delivers on that vision – and,we believe, a bit more – which we call Cloudera Impala. An Impala binary is nowavailable in public beta form, but if you would prefer to test-drive Impala viaa pre-baked VM, we have one of those for you, too. (Links to all downloads anddocumentation are here.) You can also review the source code and testing harness at Github right now. 谷歌在2010发布了关于Dremel的论文，我们和社区的其他人被其所启发，决定开发一个具有实时，特别是热查询功能的ApacheHadoop对应版本，作为传统MapReduce批处理的补充。现在，我们发布了一个具有全部功能（甚至更多）的开源Dremel版本——称之为Cloudera Impala。Impala的二进制码已可用，其以beta版的形式公开。如果你希望以预先安装好的虚拟机来测试Impala，我们也有准备。你也可以在Github查看源代码和测试。 Impala raises the bar forquery performance while retaining a familiar user experience. With Impala, youcan query data, whether stored in HDFS or Apache HBase – including SELECT,JOIN, and aggregate functions – in real time. Furthermore, it uses the samemetadata, SQL syntax (Hive SQL), ODBC driver and user interface (Hue Beeswax)as Apache Hive, providing a familiar and unified platform for batch-oriented orreal-time queries. (For that reason, Hive users can utilize Impala with littlesetup overhead.) The first beta drop includes support for text files andSequenceFiles; SequenceFiles can be compressed as Snappy, GZIP, and BZIP (withSnappy recommended for maximum performance). Support for additional formatsincluding Avro, RCFile, LZO text files, and Doug Cutting’s Trevni columnar format is planned for the production drop. Impala通过记录类似的用户操作结果来提升查询性能。通过Impala，你可以使用SELECT、JOIN和聚集函数实时地查询储存在HDFS或HBase上的数据。此外，其使用了和Hive一样的元数据、SQL语法、ODBC驱动和用户界面，提供了一个类似而且统一的平台进行批处理或者实时的查询（因此Hive用户只需花费很少的设置开销就能使用Impala）。第一个beta版本包含了对文本文件和顺序文件的支持。顺序文件可以通过Snappy、GZIP或BZIP进行压缩（建议使用Snappy，性能最好）。对于其他格式，如Avro,、RCFile,、LZOtext files、 Doug Cutting’s Trevni columnar format等的支持计划在正式产品版本中提供。 To avoid latency, Impalacircumvents MapReduce to directly access the data through a specializeddistributed query engine that is very similar to those found in commercialparallel RDBMSs. The result is order-of-magnitude faster performance than Hive,depending on the type of query and configuration. (See FAQ below for moredetails.) Note that this performance improvement has been confirmed by severallarge companies that have tested Impala on real-world workloads for severalmonths now. 为了避免延迟，Impala没有使用MapReduce而是通过一个特别的，和商业并行RDBMS很类似的分布式查询引擎直接访问数据。相对Hive，根据查询的类型和配置，性能有数量级级别的提升。几家大型公司在过去的几个月中通过在实际工作中对Impala进行的测试已经确认了这种性能提升。 A high-level architecturalview is below: 高层次的结构图： There are many advantagesto this approach over alternative approaches for querying Hadoop data,including: 使用这种方式查询Hadoop数据相对其他方式有很多优势： ·        Thanks to local processingon data nodes, network bottlenecks are avoided. 通过在数据节点上进行本地化处理，避免了网络瓶颈。 ·        A single, open, and unifiedmetadata store can be utilized. 可以使用一个单一、开放、统一的元数据储存。 ·        Costly data formatconversion is unnecessary and thus no overhead is incurred. 不必要进行耗时的数据格式转换，因此不会导致性能开销。 ·        All data is immediatelyquery-able, with no delays for ETL. 所有数据都是可以及时查询的，对于ETL没有延迟。 ·        All hardware is utilizedfor Impala queries as well as for MapReduce. 用于MapReduce的所有硬件都可以用于Impala。 ·        Only a single machine poolis needed to scale. 扩展时只需考虑单一的机器池。 We encourage you to readthe documentation for further technical details. Finally, we’d like toanswer some questions that we anticipate will be popular: 我们建议那你阅读documentation以获取更多的技术细节。 最后，我们将回答一些我们认为会被经常问道的问题： IsImpala open source? Impala开源吗？ Yes, Impala is 100% open source (Apache License). You can review the code foryourself at Github today. Impala百分之百开源（Apache许可）。你可以在Github 查看代码。 Howis Impala different than Dremel? Impala和Dremel区别？ The first and principal difference is that Impala is open source and availablefor everyone to use, whereas Dremel is proprietary to Google. 最重要的区别是Impala是开源的，所有人都可以使用，Dremel则是Google的财产。 Technically, Dremelachieves interactive response times over very large data sets through the useof two techniques: 技术上说，Dremel在超大数据集上实现了可接受的交互相应时间主要是使用了以下两种技术： ·        A novel columnar storageformat for nested relational data/data with nested structures 一种新的，针对嵌套关系数据（或者说具有嵌套结构的数据）列储存格式。 ·        Distributed scalableaggregation algorithms, which allow the results of a query to be computed onthousands of machines in parallel. 分布式可扩展聚集算法，允许查询的结果可以在数千个机器上并行地计算。 The latter is borrowed fromtechniques developed for parallel DBMSs, which also inspired the creation ofImpala. Unlike Dremel as described in the 2010paper, which could only handle single-tablequeries, Impala already supports the full set of join operators that are one ofthe factors that make SQL so popular. 后者借鉴了并行DBMS的技术，这种技术同样对Impala的产生有启发。不同于Dremel在2010paper中描述的只能处理单表查询，Impala已经支持所有join操作集（join操作正是使SQL如此流行的一个因素）。 In order to realize thefull performance benefits demonstrated by Dremel, Hadoop will shortly have anefficient columnar binary storage format called Trevni. But contrary to Dremel, Impala supports a range of popularfile formats. This lets users run Impala on their existing data without havingto “load” or transform it. It also lets users decide if they want to optimizefor flexibility or just pure performance. 为了搞清楚Dremel所有的性能优势，Hadoop很快将拥有一个高效的二进制列储存格式——Trevni。相对Dremel，Impala支持一系列流行的文件格式。这使得用户可以直接在他们已有的数据上运行Impala，而不必对数据进行加载或者转换。同时还可以让用户在灵活性和性之间进行选择。 To sum it up, Impala plusTrevni will achieve the query performance described in the Dremel paper, butsurpass what is described there in SQL functionality. 综上，Impala加上Trevni将实现Dremel论文中描述的查询性能，而且在SQL的功能性上还有所超越。 Howmuch faster are Impala queries than Hive ones, really? 实际中Impala能比Hive快多少？ The precise amount of performance improvement is highly dependent on a numberof factors: 精确的性能提升高度依赖于以下因素： ·        Hardware configuration:Impala is generally able to take full advantage of hardware resources andspecifically generates less CPU load than Hive, which often translates intohigher observed aggregate I/O bandwidth than with Hive. Impala of course cannotgo faster than the hardware permits, so any hardware bottlenecks will limit theobserved speedup. For purely I/O bound queries, we typically see performancegains in the range of 3-4x. 硬件配置： Impala通常情况下可以利用硬件资源的所有优势。特别地，相对Hive，一般来说CPU负载更低，但经常导致更高的可观察到的总I/O带宽需求。Impala不可能超过硬件的限制，所以任何硬件的瓶颈都将限制可观察到的性能提升。对于单纯的I/O消耗的查询，典型的性能提升有3-4倍。 ·        Complexity of the query:Queries that require multiple MapReduce phases in Hive or require reduce-sidejoins will see a higher speedup than, say, simple single-table aggregationqueries. For queries with at least one join, we have seem performance gains of7-45X. 查询的复杂度：需要在Hive中进行多个MapReduce阶段的查询或者需要在reduce时进行join操作的查询相对简单的单表聚集查询将获得更多的性能提升。对于至少包含一次join操作的查询，性能提升在7-45倍。 ·        Availability of main memoryas a cache for table data: If the data accessed through the query comes out ofthe cache, the speedup will be more dramatic thanks to Impala’s superiorefficiency. In those scenarios, we have seen speedups of 20x-90x over Hive evenon simple aggregation queries. 用于缓存表数据的主内存的有效性：如果查询中访问的数据来自缓存，性能提升将更引人注目，这得益于Impala上层架构提供的效率提升。在这些场景，即便是对于简单的聚集查询来说，相对Hive也有20-90倍的性能提升。 IsImpala a replacement for MapReduce or Hive – or for traditional data warehouseinfrastructure, for that matter? Impala是用来替换MapReduce或者Hive，还是用来替换传统数据仓库的基础设施？ No. There will continue be many viable use cases for MapReduce and Hive (forexample, for long-running data transformation workloads) as well as traditionaldata warehouse frameworks (for example, for complex analytics on limited,structured data sets). Impala is a complement to those approaches, supportinguse cases where users need to interact with very large data sets, across alldata silos, to get focused result sets quickly. 不。MapReduce、Hive和传统的数据仓库框架仍然会有很多的可行用例（如：长时间运行的数据转换工作；对于有限的、结构化的数据集的复杂分析）。Impala对于这些处理是一种补充，用于支持需要对超大数据集进行交互，遍历所有储存的数据，快速地获得关注的结果的用例。 Doesthe Impala Beta Release have any technical limitations? Impala beta版有技术限制吗？ As mentioned previously, supported file formats in the first beta drop includetext files and SequenceFiles, with many other formats to be supported in theupcoming production release. Furthermore, currently all joins are done in amemory space no larger than that of the smallest node in the cluster; inproduction, joins will be done in aggregate memory. Lastly, no UDFs arepossible at this time. 之前提到，第一个beta版支持文本文件和顺序文件，其他的格式将在未来的产品发布版本中得到支持。此外，目前所有的join操作 Whatare the technical requirements for the Impala Beta Release? Impala beta版的环境要求？ You will need to have CDH4.1 installed on RHEL/CentOS 6.2. We highly recommend the use of ClouderaManager(Free or EnterpriseEdition) to deploy and manage Impala because it takes care of distributeddeployment and monitoring details automatically. 需要安装在RHEL/CentOS 6.2上的 CDH4.1。我们强烈建议使用 ClouderaManager（免费版或企业版）来部署和管理Impala，因为其可以自动进行分布式部署并对细节进行监控。 Whatis the support policy for the Impala Beta Release? Impala beta版的支持政策？ If you are an existing Cloudera customer with a bug, you may raise a Customer Support ticket and we will attempt to resolve it on a best-effort basis.If you are not an existing Cloudera customer, you may use our public JIRA instanceor the impala-user mailing list, which will be monitored by Cloudera employees. 如果你已经是Cloudera的顾客并发现了一个bug，你可以通过Customer Support向我们反映，我们将尽力尝试解决。如果你不是Cloudera的顾客，你可以通过public JIRA instance或者impala-user邮件列表向我们反映，Cloudera的员工将检查这些问题。 Whenwill Impala be generally available for production use? Impala何时能够作为产品使用？ A production drop is planned for the first quarter of 2013. Customers mayobtain commercial support in the form of aClouderaEnterprise RTQ subscription at that time. 产品版本计划在2013第一季度发布。到时消费者可以通过ClouderaEnterprise RTQ的形式订购以获得商业支持。 We hope that you take theopportunity to review the Impala source code, explore the beta release,download and install the VM, or any combination of the above. Your feedback inall cases is appreciated; we need your help to make Impala even better. 我们希望你抓住机会查看Impala源码，研究beta版本，下载和安装虚拟机，或者以上途径的任意组合。你的任何反馈都是非常有价值的，我们需要你的帮助来使Impala更好。 We will bring you furtherupdates about Impala as we get closer to production availability. 我们在Impala产品化的过程中将带来进一步的更新。 Impalaresources: – Impala source code – Impaladownloads (Beta Release and VM) – Impaladocumentation – Public JIRA – Impala mailing list - Free Impalatraining (Screencast) (Added10/30/2012) Third-party articles about Impala: - GigaOm: Real-time query for Hadoop democratizes accessto big data analytics (Oct. 22, 2012) - Wired: Man Busts Out of Google, Rebuilds Top-Secret QueryMachine (Oct. 24, 2012) - InformationWeek: Cloudera Debuts Real-Time Hadoop Query (Oct. 24, 2012) - GigaOm: Cloudera Makes SQL a First-Class Citizen on Hadoop (Oct. 24, 2012)  - ZDNet: Cloudera’s Impala Brings Hadoop to SQL and BI (Oct. 25, 2012) - Wired: Marcel Kornacker Profile (Oct. 29, 2012) - Dr. Dobbs: Cloudera Impala – Processing Petabytes at TheSpeed Of Thought (Oct. 29, 2012) Marcel Kornacker isthe architect of Impala. Prior to joining Cloudera, he was the lead developerfor the query engine of Google’s F1 project. Justin Erickson isthe product manager for Impala.  ","title":"Impala介绍（Cloudera Impala Real-Time Queries in Apache Hadoop, For Real）"},{"content":"hadoop学习笔记-centos安装单节点及多节点集成（初稿，无图，无连接） 后续将会将软件下载地址，以及截图更新上来，由于此文档是在公司写的，所以只能用文字描述出操作的过程，请谅解。 前言：这一系列的文章好久没有写了，由于工作最近比较繁忙，于是就拖延了一段时间。于是上周日本人计划搭建一个比较真实的环境，由于之前一直是在windows下面模拟的，感觉不是很好，所以就用我那个只有4G的笔记本来跑跑几个虚拟机吧。 在安装之前需要以下几个软件 1）  centos安装包，这个是必须的。我用的是centos6.3，是当前最新的版本。下载地址是： 2）  virtualbox安装包，由于这个相对vm应该比较小巧，功能也比较简单，所以用于练习是比较好的选择。下载地址是： 3）  xshell以及xftp安装包，这个是linux在windows端的工具软件，可以通过ssh来远程连接或者其他协议来连接linux服务器，并可以进行管理，类似于在linux的终端，而xftp是可以通过文件拖拉方式来进行windows端和linux端的文件传输，非常方便，下载地址为： 4）  hadoop1.0.4的rpm的安装包，由于centos是类似red hat，所以可以下载hadoop1.0.4的rpm包。下载地址： 以上软件均是在搭建之前必须下载好的。接下来便进入安装步骤。 Centos的安装： Centos的安装还是比较简单的，具体的步骤可以参考： 本人也是参考这个来进行安装的。 注意：centos在安装的时候，就已经替我们安装好了openjdk和ssh。本人建议不采用它自带的openjdk，下对它进行卸载，然后重新安装，操作步骤为： 操作之前需要将用户切换到root用户，su root ，然后输入你在安装系统的时候设置的密码 rpm -qa | grep java 于是可能会出现下面内容（不同机器会出现不同内容） java-1.4.2-gcj-compat-1.4.2.0-40jpp.115 java-1.6.0-openjdk-1.6.0.0-1.7.b09.el5 执行下面操作： rpm -e --nodeps java-1.4.2-gcj-compat-1.4.2.0-40jpp.115 rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.7.b09.el5 注意上面红色标记是相同的。 最后在重新安装openjdk 注意此时还是在root用户下 yuminstall java-1.6.0-openjdk java-1.6.0-openjdk-devel 执行这个命令， 那么jdk将会安装在/usr/jvm/java下面了。 设置环境变量： echo \"exportJAVA_HOME=/usr/lib/jvm/java\" >> /etc/profile 然后再reboot一下。这是jdk就安装好了。最好是将$JAVA_HOME/bin加到$PATH下面，当然，这是可选的。 搭建单节点的hadoop： 启动virtualbox里面刚刚安装好的刚刚安装好的centos，记住在网络连接那里设置连桥方式，不然虚拟机可能连不上网。 到此你看看你是否已经安装好了xshell和xftp（windows）。通过xshell连接你虚拟机的centos，然后就可以不用在虚拟机里面操作了，从而避免总是在虚拟机和windows切换。 打开xshell，点击new一个新的连接，这里输入虚拟机里面的centos的ip。点击connect，那么就会提示你是以哪个用户登录，输入你设置的centos用户名，勾选记住名字，后面会提示输入对应用户的密码，输入即可，同时也勾选上记住密码。点击确定。于是就连接上了虚拟机里面的centos了。就会看到虚拟机的终端。 注意：以下操作均是在xshell操作。 第一步：在当前用户目录下新建一个opt目录 (这是本人的习惯，不同人可以自己考虑)。这个目录将会放hadoop的安装目录。然后cd ~/opt，于是就进入了opt目录，此时点击xshell导航栏的window选项，里面会看到new file transport，点击这个，如果你已经安装了xftp那么就会通过xftp打开对应centos的opt目录，如果没有安装，将会提醒你安装xftp。这时你就可以将你下载在windows的hadoop 1.0.4的rpm安装文件拖拉到centos的opt目录下。上传完毕后，当你再次回到xshell的终端，在opt下面ls一下就会看到刚刚拖拉的hadoop安装文件了。 第二步：解压hadoop安装包。 由于hadoop的安装包是rpm格式，所以tar不能解压。采用一下方式可以进行解压： rpm2cpioxxx.rpm | cpio –div xxx就是hadoop的安装包名。 于是就会再opt目录下会出现三个文件夹，etc,usr,var Etc可以说是hadoop的配置模板，usr里面才是hadoop的主目录，里面主要的几个目录是： bin:里面有hadoop工具以及taskcontroller sbin：里面有hadoop的启动以及关闭等其他工具 logs：则是存放当前节点hadoop运行日志。 进入/opt/etc/hadoop目录 里面有哦hadoop的所有配置文档 主要是修改core-site.xml,mapred-site.xml,hadoop-env.sh,hdfs-site.xml 修改内容可以参考官方的关于1.0.4的文档，我这里把相关内容粘贴出来： hadoop-env.sh 加入export JAVA_HOME=/usr/lib/jvm/java core-site.xml: <configuration>     <property>         <name>fs.default.name<\/name>         <value>hdfs://localhost:9000<\/value>     <\/property> <\/configuration> hdfs-site.xml: <configuration>      <property>          <name>dfs.replication<\/name>          <value>1<\/value>      <\/property> <\/configuration> mapred-site.xml: <configuration>      <property>          <name>mapred.job.tracker<\/name>          <value>localhost:9001<\/value>      <\/property> <\/configuration> 此时hadoop的基本配置已经完成。 注意刚刚说了，etc目录只是一个配置模板，而并非hadoop的真正配置的地方 我们需要将etc复制到usr里面去： cp  -retc ./usr（执行这条命令的目录是在opt下面） 这才算是真正的配置完了hadoop。 第三步：生成无密码登录ssh 由于hadoop需要无密码登录作为datanode的节点，而由于部署单节点的时候，当前节点既是namenode又是datanode，所以此时需要生成无密码登录的ssh。方法如下： 执行ssh-keygen –t rsa一路回车 然后cd ~/.ssh ls一下会看到有两个文件，一个是id_rsa,另一个是id_rsa.pub id_rsa是密钥，id_rsa.pub是公钥。我们在执行 cat id_rsa.pub >> authorized_keys chmod 600 authorized_keys 测试是否设置成功： ssh localhost 如果不需要输入密码即表示设置成功，否则失败。 第四步：附加操作 为了方便操作，最好是将hadoop的bin以及sbin放到PATH下面去，这样不要每次倒要进入对应目录下才能执行。 所以需要执行：   echo “PATH=/home/username/opt/usr/bin:/home/username/opt/usr/sbin:$PATH”>> /etc/profile 注意：上面命令需要切换到root用户，并且username是你当前用户的名字。到此就剩下启动hadoop了。 启动hadoop: 由于将hadoop的bin以及sbin路径放到了path中，所以可以再任何目录位置执行hadoop命令。 注意：只执行之前到sbin目录下ls一下，会发现有一部分文件没有执行的权限，那么就执行一个chmod 777 *便可以了。 第一步：格式化namenode hadoop namenode format 此时会初始化好hadoop的文件系统。 执行完成之后会发现根目录下会有一个tmp目录 可以cd /tmp 然后ls 里面又会三个目录 Data:这边是datanode的信息存放目录了 Name:这是namenode的信息存放目录 Secondraynamenod:这个可以理解为namenode的一个备份。 这里就是hadoop的文件系统根目录了。你进去根本看不到你所谓的目录和文件，因为里面是hadoop的文件系统。不是我们操作系统的文件系统。所以只有通过hadoop才看看到目录和文件。 第二步：正式启动hadoop 忙活半天，这下终于可以启动hadoop，看看它的真面目了。 让我们执行start-all.sh 就会提示依次启动了namenode后面跟着它的日志存放目录 Datanode ，secondraynamenode,jobtracker以及tasktracker。 一般namenode会配备一个jobtracker用于处理用户的各种请求的。 而datanode会配备一个tasktracker用户处理由jobtracker分发过来的任务。 而secondraynamenode则是namenode的一个备份，会定时的将namenode的信息复制过来，当然，这个备份肯定不能解决namenode完全崩溃的时候。 一般一个hadoop里面最重要的是namenode，它相当于一个hadoop的管家，没有他，那么就不会知道文件怎么存放以及存放在哪等等信息。所以一般在一个hadoop的集群中只有一个namenode。集群可以理解为是多个datanode的集群，统一由namenode来管理。这里扯了一点hadoop的相关知识。 第三步：检查是否启动成功 对于一个单节点，那么当前节点应该有增加五个java进程，分别是namenode,datanode，secondraynamenode,jobtracker,tasktracker。通过jps就可以查看。如果看到这几个进程，表示你安装hadoop成功了。那么你就可以开始你的hadoop之旅了。 搭建集群的hadoop 前期配置：由于之前在virtualbox上面只是安装了一个centos，那么要集群，当然需要至少再安装一个centos。当然，这个centos的用户名最好喝另一个样，从而避免没必要的配置。 到此，假设你已经安装并完成了jdk的安装及配置。并且假设，开始安装的centos是作为master，刚刚安装的作为slaver。 注意：以下操作均是在xshell下操作的。 第一步：修改主机名及hosts文件 1）  master：这个作为namenode节点（同时可以作为datanode）。 vi /etc/sysconfig/network 将里面的HOSTNAME修改成master vi /etc/hosts 加上master对应的ip（既当前的节点ip） 例如：127.0.0.1 master 同时加上slaver的ip 2）  slaver：这个是作为datanode节点，同上 vi /etc/sysconfig/network 将里面的HOSTNAME修改成master vi /etc/hosts 加上master对应的ip（既当前的节点ip） 例如：127.0.0.1 master 同时加上slaver的ip 完成以上操作之后将master和slaver节点均reboot一下。 注意：以上操作均要在root下操作，不然会提示没有权限。 第二步：修改hadoop的配置文档          由于已经在master节点已经搭建好了单节点的hadoop，那么我们就先修改master的hadoop配置信息。同单节点一样，修改core-set.xml.mapred-site.xml 由于之前设置的都是master的ip或者是localhost，那么现在需要修改成在上一步配置好的hosts文件ip和hostname对应内容，我们将在这两个文件的ip都修改成master的hostname或者是ip。因为hostname在hosts文件中已经和ip有对应关系，所以用哪个都一样，不过本人建议用hostname，这样比较明了。          然后修改在etc/hadoop的master和slavers文件。          用vi打开可以看到里面只有localhost，这个hadoop的默认配置，表示当前节点既是master又是slaver，及既是namenode也是datanode。那么此处可以修改master文件将localhost修改成master的hostname（为什么可以，上面已经解释过）。修改slavers文件，将localhost修改成slaver的hostname也可以将master的hostname加进去（注意：一行只能有一个机器的hostname）。这样基本把master节点已经配置完毕。那么就要配置slaver节点了。          Slaver节点的配置很简单，那就是copy。通过tar将opt目录打包： tar –cvf opt.zip ./opt 将opt打好包之后，通过scp将这个文件复制到slaver机器上。（注意当前位置问当前用户的主目录） scp opt.zip slaver_hostname:./ (注意：红色标记表示slaver节点的主机名，ip也可以) 此时到slaver节点上，到用户主目录下，ls一下可以看到刚刚拷贝过来的opt.zip文件。 同样，用tar进行解压 tar –xvf opt.zip ./ 解压完毕之后，在当前目录下会看到一个opt文件夹。 此时便安装好了hadoop了。 第三步：配置ssh无密码登录          由于master节点需要通过ssh登录到slaver节点去启动datanode。那么需要在slaver节点实现ssh无密码登录。为了防治意外发生，我们最好还是使得slaver和master都能够相互的ssh无密码登录。          我们在slaver节点执行ssh-keygen –t rsa,一路回车。          在master节点先删除~/.ssh目录，rm –fr ~/.ssh。然后重新生成私钥和公钥。ssh-keygen–t rsa（至于为什么要重新生成，是由于我们的主机名已经改变了，所以要重新生成）。          cd~/.ssh，里面就会有id_rsa,id_rsa.pub，这两个文件的意义上面已经介绍过了。下面就是要实现互通了。 我们在master的~/.ssh下有一个id_rsa.pub文件。我们将这个文件copy到slaver的.ssh目录。通过scp来复制。scp id_rsa.pub slaver_hostname:./.ssh/tmp.pub，然后回到slaver节点的终端。在.ssh目录下ls一下，会看到多出一个tmp.pub文件。 再次执行cat tmp.pub >>authorized_keys 我们对这个文件赋予权限：chmod 600authorized_keys。这样从master到slaver就实现了无密码ssh登录了。 我们在master端ssh slaver_hostname,如果成功了，那么就不会要求输入密码。 至于slaver到master生成无密码登录，和上面一样，只是是从slaver复制id_rsa.pub到master。，注意，是用cat命令将公钥添加到authorized_keys文件，而不是新建一个authorized_keys。 通过这些操作基本上已经完成了ssh无密码登录了。 第四步：启动hadoop          在启动hadoop之前，由于之前在master上搭建过了一个单节点的hadoop，那么此时需要将原来的/tmp下的所有文件都删除掉。然后执行hadoop namenode –format。          再启动之前，最好还是先要开放一下几个端口：          注意：此操作需要切换到root用户 配置防火墙 Master端： /sbin/iptables -I INPUT -p tcp –dport 9000-j ACCEPT (这个是core-site.xml: 里面配置的端口名) /sbin/iptables -I INPUT -p tcp –dport 9001-j ACCEPT (这个是mapred-site.xml: 里面配置的端口名) /sbin/iptables -I INPUT -p tcp –dport 50030-j ACCEPT（JobTrackeradministrative web GUI JOBTRACKER的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50070-j ACCEPT（NameNode administrativeweb GUI NAMENODE的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50010 -j ACCEPT（DATANODE控制端口，主要用于DATANODE初始化时向NAMENODE提出注册和应答请求） /sbin/iptables -I INPUT -p tcp –dport 50020-j ACCEPT（DATANODE的RPC服务器地址和端口） /sbin/iptables -I INPUT -p tcp –dport 50060-j ACCEPT（TASKTRACKER的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50075-j ACCEPT（DATANODE的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50090-j ACCEPT（辅助DATANODE的HTTP服务器和端口） 保存这些配置信息： /etc/rc.d/init.d/iptables save 重启防火墙： /etc/init.d/iptables restart 查看防护墙信息： /etc/init.d/iptables status Slaver端： /sbin/iptables -I INPUT -p tcp –dport 50030-j ACCEPT（JobTrackeradministrative web GUI JOBTRACKER的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50070-j ACCEPT（NameNode administrativeweb GUI NAMENODE的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50010 -j ACCEPT（DATANODE控制端口，主要用于DATANODE初始化时向NAMENODE提出注册和应答请求） /sbin/iptables -I INPUT -p tcp –dport 50020-j ACCEPT（DATANODE的RPC服务器地址和端口） /sbin/iptables -I INPUT -p tcp –dport 50060-j ACCEPT（TASKTRACKER的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50075-j ACCEPT（DATANODE的HTTP服务器和端口） /sbin/iptables -I INPUT -p tcp –dport 50090-j ACCEPT（辅助DATANODE的HTTP服务器和端口） 保存这些配置信息： /etc/rc.d/init.d/iptables save 重启防火墙： /etc/init.d/iptables restart 查看防护墙信息： /etc/init.d/iptables status 启动 通过漫长的配置终于到了启动阶段了 在master端，start-all.sh 1）  如果你的master既是namenode也是datanode，那么通过jps查看会看到六条数据： 分别是： Psid  JPS Psid  Namenode Psid  Datanode Psid  jobtracker Psid secondraynamenode Psid  tasktracker 顺序可能不是这样，但是会有这几个数据，如果少了某个，说明没有启动成功，那么就到logs目录去查看日子吧，看看是出现了什么异常。 2)      如果master只是namenode，那么jps只有一四条数据，比上面少了tasktracker和datanode 到slaver查看一下datanode是否启动成功： 同样执行jps命令：正常情况会出现三条数据，JPS，datandoe,tasktracker。 到此，hadoop的集群安装已经结束。 扩展hadoop的节点      Hadoop是一个扩展性很高的分布式系统，那么当我们在我们hadoop的集群中添加一个新的datanode的时候，会不会需要重新安装一下hadoop呢？当然不要了。只需要将你新加的slaver的hostname加到master的slavers文件中，并且在master节点的hosts文件中加入新添加的slaver节点的pi和hostname对应信息。 当然，新增加的slaver节点一定要配置好jdk环境。然后将master的hadoop复制一份过去就可以了。          然后再master节点，关闭hadoop，stop-all.sh，然后再启动一下就可以了，start-all.sh. 那么新加的slaver节点就会成功启动datanode和tasktracker了。 安装过程中会出现的某些异常 当某个节点启动不成功的时候，要及时查看相应的logs下的日志。查看出现了什么异常。 例如，master的namenode无法启动，可能是你没有重新格式化hadoop的文件系统，或者是namenode的端口被其他程序占用了。 当slaver节点无法启动了，或者启动了一会，就停止了，可能是你的slaver无法访问master的namenode的节点，那么就可能是master没有关闭某个端口防火墙。例如问的配置，可能是9000端口被防火墙拦截了。那么就需要关闭这个端口的防火墙。 在一中情况就是slaver节点的额datanode的id和namenode的id不一致，会导致datanode无法启动。所以到slaver节点的/tmp/data/current/，有个一VERSION文件，吧里面的id修改成namenode的id一样，然后重启就可以了。（namenode的id信息在/tmp/name/current/VERSION里面）  ","title":"hadoop学习笔记-centos安装单节点及多节点集成(初稿)"},{"content":"原创文章，欢迎转载，转载时请务必给出原文链接，谢谢！http://blog.csdn.net/sinchb/article/details/8433994#t10 一、 什么是CHAP？ Challenge-Handshake Authentication Protocol iSCSI initiators and targets prove their identity to each other using the CHAP protocol, which includes a mechanism to prevent cleartext passwords from appearing on the wire. 二、 iSCSI支持两种级别的chap 认证： Initiator authentication和Target authentication 2.1 Initiator 认证要求：     在initiator尝试连接到一个target的时候，initator需要提供一个用户名和密码给target供target进行认证。下面我们称这个用户名密码为incoming账号，即：incoming账号是initiator端提供给target端，供target端认证的账号。 2.2 target 认证要求：     在initiator尝试连接到一个target的时候，target需要提供一个用户名和密码给initiator供initiator进行认证。与之对应的是outcoming账号，即：outcoming账号是target端提供给initiator端，供initiator认证的账号。     Initiator认证可以在没有target 认证的时候应用，这种只要求target验证initiator的CHAP认证也称为Uni-directional Authentication，单向认证（target做验证）     target认证则要求initiator认证被同时应用才可以，也就是说，initiator和target需要相互认证，这种认证被称为Bi-directional Authentication，相互认证     iSCSI CHAP认证的密码长度必须介于12到16个字符（但是下面测试的时候字符长度都没有超过12字符，也没有问题，这个问题需要进一步求证），空格是合法的密码字符，所以”I Love iSCSI!!!!”是一个合法的密码！ 三、 建立iscsi target lun 3.1在target端建立target     按照下面的步骤建立有两个lun的target (1)创建一个target tgtadm --lld iscsi --op new --mode target --tid 1 -T 1qn.2012-12:disk0 (2)给这个target分配两个设备sdb,sdc tgtadm --lld iscsi --op new --mode logicalunit --tid 1 --lun 1 -b /dev/sdb tgtadm --lld iscsi --op new --mode logicalunit --tid 1 --lun 2 -b /dev/sdc (3)将ACL设置为ALL     ACL 是Access Control Lists 的缩写，访问控制列表，只有在这个列表中的ip才有权限访问本target。我们设置为ALL,默认所有ip都可以访问，当然，我们可以指定某些ip，只有这些ip才可以访问。 tgtadm --lld iscsi --op bind --mode target --tid 1 -I ALL （最后那个参数是大写字母I，不是数字1） (4)看看我们创建的target     [root@iscsiB ~]# tgt-admin --show Target 1: 1qn.2012-12:disk0     System information:         Driver: iscsi         State: ready     I_T nexus information:     LUN information:         LUN: 0             Type: controller             SCSI ID: IET     00010000             SCSI SN: beaf10             Size: 0 MB, Block size: 1             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: null             Backing store path: None             Backing store flags:          LUN: 1             Type: disk             SCSI ID: IET     00010001             SCSI SN: beaf11             Size: 10737 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdb             Backing store flags:          LUN: 2             Type: disk             SCSI ID: IET     00010002             SCSI SN: beaf12             Size: 5369 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdc             Backing store flags:      Account information:     ACL information:         ALL     我们可以看到有两个lun(lun0是控制器，不算)。而Account information则为空。 四、 配置initiator单向认证 设置initiator单向认证，要现在target端新建一个账号以及密码，并把这个账号绑定到特定的target上，然后再在initiator端的iscsi.conf文件中配置这个账号和密码。 4.1．在target端创建redhat账号，密码是redhat123 tgtadm --lld iscsi --mode account --op new --user redhat --password redhat123 4.2. 在target端将账号绑定到指定的target tgtadm --lld iscsi --mode account --op bind --tid 1 --user redhat tgtadm --lld iscsi --mode target --op show     root@iscsiB ~]# tgt-admin --show Target 1: 1qn.2012-12:disk0     System information:         Driver: iscsi         State: ready     I_T nexus information:     LUN information:         LUN: 0             Type: controller             SCSI ID: IET     00010000             SCSI SN: beaf10             Size: 0 MB, Block size: 1             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: null             Backing store path: None             Backing store flags:          LUN: 1             Type: disk             SCSI ID: IET     00010001             SCSI SN: beaf11             Size: 10737 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdb             Backing store flags:          LUN: 2             Type: disk             SCSI ID: IET     00010002             SCSI SN: beaf12             Size: 5369 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdc             Backing store flags:      Account information:         redhat     可以看到，redhat这个账号已经绑定到我们刚刚建立的target上了。 4.3.配置initiator端 4.3.1.在initiator端配置iscsid.conf文件     打开这个文件，并找到CHAP Settings，先开启CHAP认证，然后填写账号密码。注意不要填错！！！ vim /etc/iscsi/iscsid.conf  #将相关项前面的注释符#删除掉  node.session.auth.authmethod = CHAP   //开启CHAP认证 node.session.auth.username = redhat    //配置账号 node.session.auth.password = redhat123  //密码 4.3.2.重启iscsid服务 /etc/init.d/iscsid restart （似乎不是必要的，如果你不能重启iscsid，请查看是否已经登录到某些target了，如果是，就先logout） 4.3.3登录到target目标 iscsiadm -m discovery -t sendtargets -p 192.168.10.185（必须先discovery！！！） iscsiadm -m node -T 1qn.2012-12:disk0 -p 192.168.10.185 -l 如果配置的用户名密码不正确，则登录的时候会显示如下认证错误 [root@Cherish ~]# iscsiadm -m node -T 1qn.2012-12:disk0 -p 192.168.10.185 --login Logging in to [iface: default, target: 1qn.2012-12:disk0, portal: 192.168.10.185,3260] (multiple) iscsiadm: Could not login to [iface: default, target: 1qn.2012-12:disk0, portal: 192.168.10.185,3260]. iscsiadm: initiator reported error (24 - iSCSI login failed due to authorization failure) iscsiadm: Could not log into all portals  注意：修改配置文件的用户名密码后，必须重新discovery目标ip之后才能用新的用户名密码login到target，否则也会提示上述认证错误。 五、 双向认证（也称为mutul认证、相互认证、双向认证） 5.1.在target端创建outgoing账号 tgtadm --lld iscsi --op new --mode account --user out_redhat --password out_redhat123 5.2. 在target端将账号绑定到相应的target tgtadm --lld iscsi --mode account --op bind --tid 1 --user out_redhat --outgoing tgtadm --lld iscsi --mode target --op show root@iscsiB ~]# tgt-admin --show Target 1: 1qn.2012-12:disk0     System information:         Driver: iscsi         State: ready     I_T nexus information:     LUN information:         LUN: 0             Type: controller             SCSI ID: IET     00010000             SCSI SN: beaf10             Size: 0 MB, Block size: 1             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: null             Backing store path: None             Backing store flags:          LUN: 1             Type: disk             SCSI ID: IET     00010001             SCSI SN: beaf11             Size: 10737 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdb             Backing store flags:          LUN: 2             Type: disk             SCSI ID: IET     00010002             SCSI SN: beaf12             Size: 5369 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdc             Backing store flags:      Account information:         redhat         out_redhat (outgoing)  //注意这个标识     ACL information:         ALL 5.3.在initiator端配置iscsid.conf文件     vim /etc/iscsi/iscsid.conf node.session.auth.username_in = out_redhat node.session.auth.password_in = out_redhat123 5.4.在initiator端登录到target iscsiadm -m node -T 1qn.2012-12:disk0 -p 192.168.10.185 --logout /etc/init.d/iscsid reload（不是必要的） iscsiadm -m discovery -t sendtargets -p 192.168.10.185（必须要重新discovery！！！） iscsiadm -m node -T 1qn.2012-12:disk0 -p 192.168.10.185 –login 注意：在双向认证过程中，必须保证incoming和outgoing的账号密码都正确！！！ 六、 绑定多个incoming账号 6.1为一个target创建多个incoming和outgoing账号 (1)再创建两个账号 tgtadm --lld iscsi --mode account --op new --user chenbin --password chenbin123 tgtadm --lld iscsi --mode account --op new --user out_chenbin --password out_chenbin123 创建后我们看看有几个账号了？ [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op show Account list:         out_chenbin         chenbin         out_redhat redhat  (2)将这两个账号分别绑定到目前这个target [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op bind --tid 1 --user chenbin [root@iscsiB ~]# tgt-admin --show Target 1: 1qn.2012-12:disk0     System information:         Driver: iscsi         State: ready     I_T nexus information:     LUN information:         LUN: 0             Type: controller             SCSI ID: IET     00010000             SCSI SN: beaf10             Size: 0 MB, Block size: 1             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: null             Backing store path: None             Backing store flags:          LUN: 1             Type: disk             SCSI ID: IET     00010001             SCSI SN: beaf11             Size: 10737 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdb             Backing store flags:          LUN: 2             Type: disk             SCSI ID: IET     00010002             SCSI SN: beaf12             Size: 5369 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdc             Backing store flags:      Account information:         redhat         chenbin         out_redhat (outgoing)     ACL information:         ALL 再绑定一个incoming账号没有问题，我们再绑定一个outgoing账号试试 [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op bind --tid 1 --user out_chenbin --outgoing tgtadm: this target already has an outgoing account 我们会发现，tgtadm会提示，已经有一个outgoing账号。综上所述，对于一个target，可以绑定多个incoming账号，但是outgoing账号只能绑定一个。也就是说，对于不同initiator端，我们可以设置不同的incoming账号；但是所有的initiator端的outcoming账号必须是一致的。（以上结论只针对某个特定的target） 6.2.解绑定和删除账号 (1)解绑定incoming账号chenbin [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op unbind --tid 1 --user chenbin (2)解绑定outgoing账号out_redhat [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op unbind --tid 1 --user out_redhat --outgoing [root@iscsiB ~]# tgt-admin -s Target 1: 1qn.2012-12:disk0     System information:         Driver: iscsi         State: ready     I_T nexus information:     LUN information:         LUN: 0             Type: controller             SCSI ID: IET     00010000             SCSI SN: beaf10             Size: 0 MB, Block size: 1             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: null             Backing store path: None             Backing store flags:          LUN: 1             Type: disk             SCSI ID: IET     00010001             SCSI SN: beaf11             Size: 10737 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdb             Backing store flags:          LUN: 2             Type: disk             SCSI ID: IET     00010002             SCSI SN: beaf12             Size: 5369 MB, Block size: 512             Online: Yes             Removable media: No             Prevent removal: No             Readonly: No             Backing store type: rdwr             Backing store path: /dev/sdc             Backing store flags:      Account information:         redhat     ACL information:         ALL 我们看到，只剩下一个账号了 (3)删除一个账号 [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op delete --user chenbin [root@iscsiB ~]# tgtadm --lld iscsi --mode account --op show Account list:     out_chenbin     out_redhat redhat 七、 几种特殊情况的处理 如果target端口未绑定任何账号，则initiator端无论是否开启CHAP验证，无论是否设置里用户名密码 都不会进行验证 如果target端绑定了incoming账号或者outgoing账号，则initiator端口必须开启CHAP验证，并设置好账号和密码，否则不能login 如果target端口绑定了incoming账号，没有绑定outgoing账号，但是initiator端口开启了CHAP认证，并设置了incoming和outgoing账号，则无法login（因为无法通过initiator认证。）","title":"iSCSI CHAP认证不完全攻略"},{"content":"        看了好长时间的hdfs，感觉真不是一个简单明了的，多了一些配置性的东西，缺少一些合理的固定约束，或许是赶着云计算的风潮，去把它当作一个分布式文件系统使用。Hdfs的连接感觉不算很简单，在mapreduce上跑了多次程序后，发现其conf在本机上走的那么像是一个没有配置的本机环境，简单的上传文件到了本地文件系统中。         hdfs中文件的上传和获取通过FileSystem操作，算是一个很不错的接口，文件上传的配置都在走一个conf，还不知道怎么在项目中新建xml文件作为其默认配置，其set方法还基本能作为上传的方式 Configuration conf = new Configuration();conf.set(\"fs.default.name\",\"hdfs:///127.0.0.1:9000\");FileSystem fs = FileSystem.get(conf); 这样的设置可以基本把文件传到了hdfs上，好像一个不错的选择。 项目发布在：https://github.com/wangdiao/hdfsextsocket.git","title":"java操作HDFS文件系统"},{"content":" InfoQ于4月23日在北京组织了主题为“企业架构在互联网环境下的挑战”的Oracle技术沙龙。“云计算与SOA有什么区别？”这是Oracle讲师做完企业私有云PaaS解决方案的讲演后，提问环节中观众提出的第一个问题。回答这样的问题是颇具挑战性的，不同背景的人会有不同的理解，也不是一两句话能够解释清楚的。我个人的职业经历正好和SOA、云计算有很大的关系，因此希望和大家分享下我个人对这两者及企业软件领域的一些看法和理解。 　　过热(Hype)中的云计算 　　云计算起源于大型互联网企业，成本和指数级的业务增长压力使他们非常关注于IT资源的利用率和应用的可扩展性。云计算动态的、可伸缩的、基于互联网的IT服务交付模式很快产生共鸣，得到政府、企业和IT软硬件厂商等的一致认同。大家一致认为云计算将是继PC革命、互联网革命之后的第三次IT革命。 　　然而，在Gartner 2010 Hype Cycle(下图)上，云计算位于炒作期的顶峰，而SOA早在2009年就已经位于成熟期，更不在2010的图上。对于SOA来说，人们已经不再谈SOA是什么、能做什么、怎么落地，而是谈论SOA的最佳实践。对于经历过SOA潮流的人来说，应该会有非常深的体会。 　　图片来源：Gartner 2010 Hype Cycle (如果看不懂Hype Cycle这个图，请看这篇文章) 　　面向企业的云计算解决方案，特别面向企业的私有云PaaS产品和解决方案，仍处于创新（研发）和市场整固阶段，离进入主流应用阶段仍有相当的距离。Oracle的现有私有云PaaS解决方案本质上是对已有产品如Fusion中间件及Oracle数据库等的重新包装，宣传和抢占市场的意义更大一些。这一套东西同样也是构成Oracle SOA解决方案的根基。这就不难理解为什么人们听完讲演后会提出“Oracle的云计算和SOA有什么区别？”这样的问题。 　　如果想更深入理解SOA和云计算的区别和共同点的话，需要深入分析企业IT问题的根源，以及SOA和云计算所要去解决的问题和所能带来的价值。 　　企业IT架构面临的核心问题 　　企业软件和互联网有很多差异，本质的区别在于企业必须直面其“遗留系统(Legacy Apps)”，企业必须保证其核心应用系统的稳定，导致其核心应用系统的生命周期会很长。所以，企业面临的核心问题如何解决长期以来形成的“烟囱式(Silo)的企业计算环境”，如下图所示： 　　烟囱式的企业计算环境和IT建设存在如下问题： 不同的应用系统拥有不同的基础设施（硬件）和应用基础设施（中间件）； 每个新应用都要建设一个新“烟囱”，建设周期长； 基于峰值规模设计，系统资源利用率低； 扩展困难； 没有统一的技术标准，运维成本高； 　　在云计算概念普及之前，企业已经在尝试解决这个问题，解决的思路是： 在基础设施层：虚拟化。利用虚拟化的基础设施提高物理资源的利用率和供给速度。 在应用基础设施层：SOA化。 在应用层：集中化。比如原来是一个地市分公司建设一套OA系统，后来是整个省公司只建设一套OA系统；原来结算在每个省公司进行，后来全部集中在集团处理。 　　我们来分析一下SOA化。SOA之前，企业应用集成的方式是EAI，但是由于EAI缺乏统一的标准，集成完后又产生了新的孤岛。我们来看看围绕SOA的一些关键字，就不难看出SOA与传统EAI的区别，这些关键字是SOAP、Web Service、服务、互操作、重用、ESB、服务编排、BPM、复合应用、业务敏捷等。因此SOA的目标是使IT基础架构更加灵活并且可重用，以最终实现业务敏捷性。 　　我们再看看围绕云计算的一些关键字，这些关键字是多租户、共享的资源池、弹性、动态伸缩、自服务、按需使用、基于Internet、快速供应、IT资源利用率等。企业利用云计算进一步地去解决它所面临的核心问题，但主要目标是提升IT资源的利用率、降低IT成本，促进企业IT建设从粗旷型方式到集约型方式的转变。云计算出现后，企业解决烟囱式问题的思路是： 在基础设施层：从虚拟化进一步扩展到IaaS。相比于虚拟化，IaaS增加了共享的资源池、自服务及统一的管理、监控和计量。 在应用基础设施层：基于SOA架构风格上逐步将应用迁移到PaaS平台上。从技术上讲，SOA的核心Building Block如ESB、BPM中间件是位于应用基础设施这层，因此SOA与PaaS之间的对比或许更加合理。下面会对这两者之间的关系进行分析。 在应用层：企业会考虑更多地直接使用一些SaaS应用。 　　PaaS就是云环境中的应用基础设施，也就是中间件，因此PaaS也可以说是中间件即服务，Middleware as a service。中间件的类型非常多，事务型中间件、消息中间件、远程过程/对象调用中间件、应用服务器、数据库服务器、ESB、BPM等等。在传统On-premise部署方式下用到的中间件在云部署下也是要用到的。Gartner把PaaS分成两类，APaaS(application platform as a service)和IPaaS(integration platform as a service)。APaaS主要为应用提供运行环境和数据存储，能够将On-premise下部署的简单三层架构的应用直接部署到APaaS；IPaaS主要用于集成和构建复合应用。 　　鉴于企业现有IT的复杂性及目前PaaS平台的能力，是不可能将所有On-premise方式部署的应用一次性部署到云端的，因此On-premise、私有云、公有云将在很长时间内共存。在这种情况下，SOA架构风格能够非常好的支持On-premise、私有云、公有云的共存，如下图所示： 　　企业IT架构的演进 　　本文并不想直接去回答云计算、PaaS和SOA的关系和区别。我想用下面的这面这张企业架构演进图来作为这篇文章的总结，希望以此来给大家的一些启发，使得大家等够更多地从技术演进的历史来理解新事物。 　　从图中我们可以清楚看到企业架构在大型机时代、客户机-服务器时代、互联网时代和云计算时代的演进过程，以及每次演进的业务驱动力和技术驱动力。 　　从大型机时代物理上的集中，到云计算时代云端的集中，似乎是一个轮回……","title":"云计算与SOA之我见"},{"content":"      9月29日，林玥煜，邓侃联名发表文章，深度分析了世纪互联为何股价低迷的原因，读后有感。          世纪互联董事长兼首席执行官陈升可以算是我的一位学生（他是清华毕业），我们有一段难忘的“交往”经历。1999年，世纪互联刚一成立（位于北京工会大楼后面），陈升带我第一次从互联网上游历（即访问）美国白宫，使我大开眼界，此事至今不能忘怀。           今年4月份，世纪互联在美国纳斯达克上市，我心中为陈升高兴，为他祝福。但是，此后我们也一直没有联系过。            在该文中提到一个事实：华尔街对于世纪互联的期待，不是空穴来风。在世纪互联的上市申请书，F-1Form 中，世纪互联这样描述自己的业务现状。“我们是中国最大的，独立于网络运营商的互联网数据中心服务提供商。我们在全国33城市，运营着47个数据中心。这33个城市，囊括中国互联网全部骨干节点。这47个高等级数据中心，共计5,700个机柜，运行着39,000个服务器。这47个数据中心之间，大多数通过我们私有的光缆专线相连，与中国互联网有260个接入点”。            实际上，根据世纪互联财务数据情况显示，在过去3年中，其运营利润三年连续亏损，净亏损从2008年的1795万元人民币，扩大到2010年的2.4亿元人民币。为什么连年亏损还能够在美国上市？这就是美国股市的魅力所在。亏损不怕，只要发展大方向对头。世纪互联上市的绝招儿（或讲的故事）就是云计算。            前天下午，世纪互联的高级技术顾问李XX博士（原微软大中华区技术高管）给我打电话，想与我节后见面聊聊。我对他说：可以。我要对他说些什么呢？当然不必躲躲闪闪不好意思，就說云桌面eyeOS的故事。云桌面eyeOS是欧盟共同体的最大开源项目（遵守GPLv3），我们为什么不能借用？不管陈升今日当了什么世纪互联的董事长兼CEO，见了面，我还得“教训”他一顿。           世纪互联的关键问题在于：如何真正地把云计算应用搞上去，仅有“云托管”不灵，要靠“云出租”。“云”怎么出租？出租什么，这就是商业机密了。           说明：明天就是国庆节了，预祝大家（一人除外）节日愉快！","title":"评“世纪互联为什么股价低迷？”"},{"content":"        今天下午五点时，在我的群“让大象飞上云端”里一个朋友发了一个消息NoSQL大热 DataStax融资1100万。看过后，感到这样的事情只能发生在国外。国内，在财大气粗的有关系、有背景、有实力的企业看来技术向来是不重要的。因为，这样的企业或单位不差钱，高昂的软件、设备由这样的企业垄断，一般的企业只能望洋兴叹。曾几何时，互联网改变了这个世界的法则，开源的兴起打破了高昂的价格壁垒和技术壁垒。今天，互联网的数据规模已经远远地超过了传统的商业模式，甚至超过了中国移动。         现在的互联网公司多是一些民营企业，本质上出于对资金、ROI的追求多数选择了开源的软件和架构，对技术的重视也超过所有的行业。当前，云计算是互联网企业主流的技术和趋势。只有在互联网企业，云计算才得到了充分的运用，高技术人员云集其中。可以这样说，互联网给了技术人员一个实现自我价值的机会，技术人员把技术运用到极致，两者是相辅相成的。怀揣梦想的 年轻人，应该投身于互联网，尤其是电子商务大潮中去。即将兴起的移动电子商务，是互联网的下一个浪潮，必将随着3G上网资费的大幅下调而到来。         今天的中国，只有在民营互联网公司，技术才是最重要的。有理想、有能力的年轻人，应该认清这一点，努力实现自己的梦想！愿中国的互联网公司能够挑起中国创新的大任，也为自己是一个互联网人而骄傲、自豪！","title":"只有在民营互联网公司技术才是最重要的！"},{"content":"  浏览器下载     http://www.p.cn/downpcnbrowser.aspx?id=fe760a71-5705-4bc4-bd2c-0266fd8464a7         云计算","title":"浏览器下载 云计算"},{"content":"帮助学习云计算开发的几个开源平台 鉴于很多云计算爱好者想学习云计算开发但不知道如何入手，云计算专家提醒想要学习云计算开发的人员关注以下三个开源的云计算项目，接触开源的东西能够更好更快的掌握云计算。 （1） 10gen，它既是一个云平台，又是一个可下载的开放源代码包，可用于创建您自己的私有云。10gen 是类似于 App Engine 的一个软件栈，它提供与 App Engine 类似的功能 — 但有一些不同之处。通过 10gen，可以使用 Python 以及 JavaScript. 和 Ruby 编程语言开发应用程序。该平台还使用沙盒概念隔离应用程序，并且使用它们自己的应用服务器的许多计算机(当然，是在 Linux 上构建)提供一个可靠的环境。 （2） Eucalyptus 项目(Elastic Utility Computing Architecture for Linking Your Programs To Useful Systems)是 Amazon EC2 的一个开源实现，它与商业服务接口兼容。和 EC2 一样，Eucalyptus 依赖于 Linux 和 Xen 进行操作系统虚拟化。Eucalyptus 是加利福尼亚大学(Santa Barbara)为进行云计算研究而开发的。您可以从该大学的网站上下载它，或者通过 Eucalyptus Public Cloud 体验它，不过后者有一些限制。 （3） Enomalism 云计算平台。Enomalism 是一个开放源代码项目，它提供了一个功能类似于 EC2 的云计算框架。Enomalism 基于 Linux，同时支持 Xen 和 Kernel Virtual Machine(KVM)。Enomalism 提供了一个基于 TurboGears Web 应用程序框架和 Python 的软件栈。 以上三个开源平台可以帮助想要学习云计算开发的人员更加深入了解云计算，让学习云计算开发不是一件难事。","title":"帮助学习云计算开发的几个开源平台"},{"content":"  Map/reduce 是一种处理海量数据的分布式模型，是在一种运行在专门为大规模数据处理组建的集群上程序框架，它的技术基础是大家所熟知的并行和分布式处理，现在在工业界和学术可以说有很大的影响，不容小视。 什么是海量数据，为什么要用map/reduce这是最基本的问题。对于海量数据举个例子来说，Google用Map/Reduce处理的数据量从2004年起，每天以100TB的数量增长，候他要每天用Map/Reduce处理20PB的数据。2009年eBay的两个用户数据库的数据局量分别是是2PB和6.5PB，而且用户数据记录每天以150billion的数量增长。FaceBook也是也是个数据大户。计算量比较大的两个领域，天体计算和气象计算数据量就更不用说了。而说道Map/reduce就必须说到云计算。大家都觉得云计算很虚，但是现在真实的云计算就在我们身边。其实任何一种跑在浏览器上的，那些我们能够获取和存储信息，数据的应用都可以看作是一种云计算。比如You-Tube，Gmail，Google Docs等等。一般云计算有三种模式，Iaas，Paas，Saas。我们所熟知的Google App Engine就是一种Paas。 云计算的主要思想来源就是，它希望这种模式能够把计算当作像我们生活中的电或者天然气一样来销售，盈利。云提供者能够提供服务。消费者需要服务，二者双赢。用户在计算一个需要数据量非常大的应用时，有时候需要一个处理数据能力极强的运算器，而也许只是用这么一两次，因此自己购买这样的能够处理当前运算的硬件投资是极为不划算的。有了云计算之后，用户只需把自己的服务交给云端来处理下，缴纳一定的费用就可以了。而云提供者也能够通过这种大规模的计算获利，能够获得较小数据中心更多的利益。云计算是有弹性的，集群的规模可以扩大缩小，这就使云计算变得非常灵活，可以同时为许多人服务，而且每个用户需要的服务器的规模也可以动态改变。 Map/Reduce 背后包含着如下几个思想： 第一个就是：Scale“out”，not“up”，对于密集型数据，相对于，小规模的high-end servers，我们更倾向于大规模的low-end servers。其优势在通讯，电力耗费，以及构建所需要的费用上均有体现。 第二个思想是：要把系统建立在经常会出现错误异常的境况。对于分布式系统，由于冗余的数据量比较小，也很分散，出现错误容易解决。而对于大规模的高端服务器，出现错误想要纠正非常麻烦。 第三个思想是：移动计算到数据。这是云计算非常重要的思想。 第四个思想是：顺序处理数据而不是随即访问。密集型数据处理通常是非常大的数据集，要在硬盘中存储，寻址时间常常受到很大的限制，因为读写头就能读写那么快。对于1000亿字节的数据，要想更新其中1%的数据需要一天时间，如果仅仅是要读取全部数据以及重写所有数据，一台机器只需要一天。 第五个思想就是：隐藏系统级别的细节。虚拟化。把开发者从系统的层的细节中解脱出来。 第六个思想：无缝计算。就是想达到理想的状态，对于同一数据，双倍大小的集群，处理时间要最大为原来的一半时间处理完，对于同一集群，双倍的数据处理，时间应该小于原数据处理时间的二倍。当然这种只是理想状态，是想要达到的境界。 几个世纪前人们就预测出并行时代的来临，由于技术的，单机达到了我们所需要的计算效果，并行计算时代迟迟没有到来。可是在今天，面对着如此庞大的数据量。事情开始改变了。一个集群就相当于一个传统的单机，有自己的存储和计算系统。为什么Map/Reduce如此重要，大体上说，它是一个非常的高效的处理海量数据的工具，但除了这个，它更重要的是改变了我们处理大规模数据的方式。对于冯诺依曼体系，Map/Reduce思想是一个非常大的进步。Valiant把这叫做bridging model。一个概念的桥梁就这样架设在了硬件和在硬件上执行的软件之间。硬件设计者可以从冯诺依曼模式的角度去生产硬件已达到最好的效果而不用去考虑那些在这些硬件上跑的软件，而软件设计者也不需要考虑太多硬件的细节，只需开发高效的算法，结果就是1+1>2。未完待续… 也许Map/Reduce仅仅只是一个开始。","title":"Map/Reduce,a new start"},{"content":"  谢娜与张杰的婚礼，全民围观。这是娱乐界的派对，更是对通信业的检阅。围脖、图片、视频……各种角度见证新郎与新娘的动人时刻。正是有了通信利器的帮助，才让他们远在云南迪庆州香格里拉的梦幻婚礼，真正做到了数字化、网络化、个性化。一个普通的网友，可以在家上网看到，可以用手机在街上看到，可以在高铁上用移动宽带看到，可以在楼宇电视里看到……而他看到的，正是另外一些网友在云南通过云端发布的。这便是一个新型数字生态的例子。远在天边，近在眼前，神奇吧？   通信业发展到今天，无疑形成了一个创新发展、相互融合的新格局。你很难厘清一个单一、纯粹的电信运营商、IT企业、互联网公司及消费电子厂商。大家都在共同做大这块蛋糕，只不过切蛋糕的角度不同，有的是移动宽带，有的是物联网，有的是云计算，有的是家庭网络……。   从移动宽带到无线城市 比如，上面说到，用在高铁上用移动宽带看谢娜张杰婚礼。没错，你可以使用笔记本或者iPad，没问题，只需要无线网卡就可以搞定。考虑到国内的特殊环境，Wi-Fi不常有，手机3G上网的资费和网速的限制，因此自备无线网卡是很明智的选择。当然，运营商也意识到了移动宽带，或者说无线网络对于发展的重要性。毕竟，移动终端、移动数据业务正在高速增长，在无线数据网络不足的情况下，砸钱建Wi-Fi弥补，可能是最好的出路。而且，从iPhone 4主打的FaceTime功能，以及Google+力推10人群聊功能，都可以看出未来高清视频会议很可能成为新的主流。屏幕将从单一化逐步发展成多屏化，手机终端和平板电脑都可以参与。同时，云端化和终端的智能化将会带来更出色的用户体验。   为了提升用户体验，国内三大运营商也纷纷把宽带无线城市作为发力点，竞相出招。其中 “覆盖+应用”模式被认为最具商业潜力和社会前景。中国移动一马当先，先后与湖北等17个省市签订了无线城市的合作协议，以3G、WLA N和LTE相结合，实现城区高速、便捷的宽带无线接入,提供涉及交通、医疗、教育的公共服务平台。此外，中国电信和中国联通也在积极推进各自的无线城市计划。未来5年，移动宽带用户将实现10倍的增长，达到30亿的规模，数据流量将增长成千倍。目前以宽带体验为中心、包含“终端、网络、业务”的开放生态环境已现雏形   物联网引发产业升级 运营商主打的“覆盖+应用”，其实更强调应用所引起的巨大商业利益与社会效益。如果通过基础网络再造神话，无疑是三大运营商苦心钻研的课题。而物联网无疑成为了另一块蓝海。　据市场统计，到2015年，我国物联网产业的市场价值超过7500亿元人民币，年复合增长率超过30%。市场如此多娇，引三大运营商竞折腰。不过，三家的立足点不尽相同：中国电信主攻物联网的研发和试验，中国移动则强调物联网在产业内的应用，中国联通则在细化的车联网领域。可谓各具特色。   与此同时，地方政府也纷纷把这项列入“十二五”规划的高新技术作为重点项目来抓。9月，上海市嘉定区的上海物联网中心正式启用，将集成现有的传感和通信技术，形成从信息感知、传输、存储到处理的物联网系统技术体系，与国家重大科技计划相衔接。三期工程建设划分明确：一期包括中科院无线传感网与通信重点实验室、上海无线通信研究中心、上海汽车电子工程中心、上海物联网创业投资基金、物联网标准化工作组等“落户单元”。二期工程将包括产业孵化中心、应用示范中心等，三期工程将主要打造上海物联网产业集聚核心园区。按规划，嘉定将推进物联网等智能化技术的综合应用，实施内容包括生态环境、智慧社区、绿色建筑、智能交通、公共安全等领域，打造“生态智慧”新城，带动物联网技术的产业化及更广泛的应用。无独有偶，近日，重庆市南岸区也与国内知名手机、物联网企业与达成协议，建设国家物联网产业示范基地。物联网应用领域，北大方正集团将在南岸茶园新区建设二维码中心，总投资达2亿元。其布局的15个投资项目年产值预计将达300亿元。 另据预测，2020年，物物互联业务与现有人与人的通信互联比例将达到10：1，从60亿人口扩展到上万亿的机器和物体，前景令人震惊。   云计算成兵家必争之地 云计算，更是业内的焦点、热点。据预测，云计算的市场空间也将超过2000亿美元，因此三大运营商也纷纷把云计算列为主营业务。   今年8月,中国电信发布了基于天翼业务的云计算应用，成为国内外发布云计算战略及解决方案的第一家通信运营商。而中国移动则在积极探索云计算在四网融合（电信网、互联网、广电网、电网的融合）中的产业应用。中国联通还是将云计算的出现看做用户购买对象的转变，即从购买产品变成购买服务。因此，中国联通在积极探索移动互联网领域内云计算的发展空间。   在这方面，华为的探索值得借鉴。华为为解决研发办公区的信息安全问题, 降低办公系统能耗和提高IT管理维护效率, 对上海研究所研发新办公区办公系统进行改造, 建设成为业界最大的办公桌面云系统, 目前已经覆盖了1万多人, 计划后续逐步推广到深圳和其他海外研究所, 最终达到覆盖6万人的研发办公桌面云。桌面云的采用效果显著, 据统计办公能耗节省71%,维护效率提高9倍,资源利用率提高10倍, 取得了良好的效果。   “光进铜退”的家庭网络 最后，说说家庭网络。近日，北京联通已经放话，“十二五”期间计划实现100%的光纤到户，为家庭用户提供百兆带宽和为企业提供万兆带宽接入。这势必加速北京建设国际先进水平的城市高速信息网络。目前，“光进铜退”工程正在有条不紊的进行，截至今年8月底，覆盖了340万住户——北京市光纤宽带网络规模国内第一。预计今年年底有望覆盖400万住户，光纤宽带用户也将达到百万。预计2012年底，互联网家庭入户带宽的接入能力要超过20M。   “光进”势必带来宽带用户体验的提升。北京联通宣布，只要用户申请了8M宽带业务，就能支持IPTV业务。该业务“十一”就将试商用，试商用期间暂不收费。年底将正式推出此项三网融合的业务。除了1080p的高清视频业务之外，视频医疗、高清电话会议等网络应用也能实现。随着On-Line和On-Demand的业务的推进，也将引发新一轮“三网融合”的逐力。   通过上述关于移动宽带、物联网、云计算以及家庭网络的介绍，可能你会窥探一些通信业的发展脉络。坦白说，超宽带网络是其中的核心，因为速度上去了，所以带来了服务的多元化，平台的智能化。其实质就是云化。云计算、云存储、云安全等应用，把用户体验和产业升级融合在一起，共同提升。在这方面，华为通过对行业变化的深刻理解和实践，紧紧抓住了两个“云化”：一是数据中心的云化，二是业务的云化。上述云平台的解决方案例子，充分说明华为这片“云”有三大特点：平台大，安全性高，管控力强。华为也致力于“云—管—端”未来信息服务的新架构。它不仅是网络架构，也是信息服务平台架构。前者是对移动宽带、家庭网络的定义，着重于架设“云”和“端”之间的桥梁；而后者则指向云计算与互联网的应用，它们的“管”才真正体现智能化的科技含量。它让用户可以充分享受一个实时动态全社会数据库的妙处。可以说，华为的理念正在从商业模式上重塑ICT，这种创新与变革将打造一个新型数字生态系统。","title":"通信业的新型数字生态"},{"content":"虚拟化之于云计算的现状 摘自：阳光云论坛_《关键业务应用程序虚拟化：通往云之旅的关键第一步》   执行摘要：        自从 2003 年首次在 x86 服务器上使用（主要用于测试和开发）以来，虚拟化技术经历了快速的发展。到 2007 年，已进入到以生产应用程序整合为主的第二代虚拟化（即虚拟化 2.0）时代。今天，我们正在向第三代虚拟化部署 (3.0) 过渡，这一代虚拟化具有类似于云计算的特质，可用于实现具备高度虚拟化和自动管理特性的内部部署。 在向采用类似于云的部署方式过渡时，我们的工作重心已从早期的节省资本型开销转变为将 IT 转变为服务以及提高运营效益。要想成功向云计算部署模式过渡，关键业务应用程序的虚拟化至关重要，这些应用程序最复杂，并且对企业业务本质来说通常最为关键。        过去，尽管许多生产应用程序都实现了虚拟化，但关键业务应用程序的虚拟化进程却有些缓慢。造成这一情况的一些顾虑和阻碍包括：  性能  ISV 的支持和许可  应用程序所有者的抵制        今天，这些障碍中的大多数都已消除。最新的 x86 服务器硬件和虚拟化软件可提供无可比拟的虚拟服务器性能，并能够极大改进 I/O 性能。随着客户普遍采用虚拟化，现在支持虚拟化环境的 ISV 数量比以往任何时候都多。        基础架构团队已变得更善于向应用程序所有者传达虚拟化的优势，他们通过与应用程序团队协作开展试用来证明这些优势。第一波虚拟化浪潮以整合为中心，基础架构团队是主要受益者。但是随着虚拟化向前推进并面向云构建，其他应用程序优势也随之体现出来：  通过虚拟机 (VM) 模板可实现更快的应用程序调配和更好的配置管理  通用的高可用性服务可应用于任何虚拟机和应用程序  自动资源优化可利用虚拟机移动性来动态确保服务级别  动态应用程序扩展可满足瞬息万变的业务需求        云的这些功能特性为应用程序的运行提供了更好的平台。长期而言，使用类似于云的基础架构有望将静态应用程序转变为动态 IT 服务，并使客户为最终将部分应用程序迁移到外部云计算环境中做好准备。 现状：        自本世纪初问世以来，x86 服务器上的虚拟机和虚拟化管理程序软件技术已快速成为 IT 基础架构方面最具影响力的技术之一。        客户对服务器采用虚拟化的第一阶段（即 1.0 时代）始于 2003 年。这一年所有虚拟化软件部署中约 70% 与软件开发和测试有关，即在大型组织的测试和开发实验室的沙箱中使用虚拟化管理程序进行整合。        但是到 2005 年底，随着 IT 经理日益熟悉和相信虚拟化管理程序能够处理企业级工作负载（2.0 时代），IDC 发现组织已将虚拟化开支从整合软件开发和测试环境转向了设法整合 IT 基础架构生产部分中的应用程序。        从那以后，业界开始不断地将重心偏向生产级整合、虚拟机移动性和诸如灾难恢复之类的扩展使用案例。目前，虚拟化已成为一种主流技术，虚拟服务器发货量超过了物理服务器发货量。在这些虚拟化案例中，有 75% 要求采用或高度倾向于采用“虚拟化优先”策略，只有在一些特殊情况下才需要进行物理部署。根据 IDC 的调查，早期的虚拟化障碍（例如预算、时间、技术问题、供应商支持、制度方面的抵制和可用性）正在逐年递减。       随着生产级虚拟化在行业中得到充分证明，我们现在开始向虚拟化 3.0 时代迈进，虚拟化 3.0 时代是基础架构即服务 (IaaS) 云的代名词。 虚拟化 3.0 是以服务方式交付的全面虚拟化数据中心。在服务器虚拟化的驱动下，它将与存储、网络和 I/O 虚拟化共同齐头并进。而云计算能够为应用程序提供统一的通用基础架构服务，例如按需调配、发布周期自动化、动态扩展，以及高可用性/灾难恢复 (HA/DR)。企业还可以将应用程序运行时环境与这个虚拟化的基础架构紧密结合，创建平台即服务 (PaaS) 产品。由于虚拟服务器数量将急剧猛增并将超越物理服务器数量，面对这种形势，虚拟化 3.0 数据中心将提供一个智能化的管理层，该管理层可通过策略驱动、面向服务的方法自动执行许多任务。虚拟化 3.0 和/或云计算基础架构都适用于内部云和外部云以及私有云或公共云。从任意位置或由任意提供商作为服务交付的 IT 资源将统一为混合云。        然而，要完全过渡到虚拟化 3.0，企业必须经历一系列 2.x 中间步骤。IDC 将这些步骤划分为三大类：近期、新兴和未来。企业可以按不同的顺序在不同的时期采取不同的步骤，而这些步骤整合在一起就构成了虚拟化 3.0。  ","title":"虚拟化之于云计算的现状"},{"content":"  云计算课程资源 http://scl.cs.nmt.edu/~doshin/t/s09/cs589/index.html http://www.umiacs.umd.edu/~jimmylin/cloud-2008-Fall/index.html http://bishop.camp.clarkson.edu/wiki/en/EE694_21_-_Cloud_Computing_and_Hadoop http://www.cs.vu.nl/~kielmann/cgc/ http://hpc.cs.tsinghua.edu.cn/research/courses/cloud09/cloud09.html http://research.google.com/pubs/author145.html http://search.iiit.ac.in/cloud/lectures.html","title":"云计算课程学习资源"},{"content":"作为现实世界Windows Azure系列的一部分，我们访问了Dot Net Solutions的首席执行官Dan Scarfe，关于该公司是怎样使用Windows Azure来拓展商机、探索新的收入模式和帮助客户降低成本的。以下是他所谈到的： MSDN: Dot Net Solutions是做什么的？ Scarfe: 我们是系统集成商和软件开发机构。如果相关购买机构没有现成可用的解决方案，我们将为其量身定制。我们帮助这些机构发挥他们的信息系统的竞争优势。 MSDN: 您从什么时候开始使用Windows Azure? Scarfe: 2008年9月份，我们开始探索云计算，这甚至是在微软发布Windows Azure之前。我们构建了该平台的第一个应用程序——Wikipedia Explorer，它是Wikipedia中文档之间可视化关系的工具。这一过程需要大量的短时间内的计算能力，它是一个经典的云计算方案。该应用程序仍然作为展示Windows Azure强大功能的示例。 MSDN: 使用云技术，您看到了哪些机遇？ Scarfe: 通过开发Windows Azure，我们可以扩展我们的服务，提供完整的生命周期管理服务。我们可以提供托管和自动化的管理，这这之前我们必须要使用一个单独的宿主合作伙伴。作为一家企业，我们可以提供一个更全面的服务。 MSDN: 你们的客户在Windows Azure解决方案发面寻找什么？ Scarfe: 通过使用Windows Azure，我们的客户可以以最低的风险推出新产品或服务。一些客户正在迅速寻求新的业务模式，而不需要大的预先投资。其他的客户需要一个可靠的平台，它所具有的高度扩展性让他们可以创新。我们也有一些客户想迁移到云，有一个使用非云端部署模型历史上已交付的独立解决方案。 MSDN: 自从您开始为Windows Azure开发解决方案，您的业务模式做了什么样的改变？ Scarfe: 我们正朝着将一个IT项目的所有阶段捆绑在一起的这一目标商业模式努力——包括设计、构建、支持和托管——并在合约期间按月收费。这对我们的客户有吸引力并使得我们更容易地挖掘一个可预测的收入来源。我们开始在纵向联合的市场看到机遇，包括游戏、零售和媒体——在这些区域，组织可以通过探索Windows Azure基础设施来解决其业务问题。我们在未来三五年内的整个经济增长策略固定在Windows Azure上。 MSDN: 请您描述一下Dot Net Solutions的Windows Azure的收益及其客户。 Scarfe: 使用Windows Azure丰富的经验给我们带来从所未有的高需求和大量的客户。如果不是Windows Azure，我们的项目不会取得如此的进展，客户通过免除对非云端基础设施的投资而节省了数万英镑。我们增加了50%的销售量，并预测通过开发Windows Azure解决方案，我们每年可以增加20%的销售量。 在这里阅读全文: www.microsoft.com/casestudies/casestudy.aspx?casestudyid=4000011050 若要阅读Windows Azure客户更多的成功案例，访问: www.windowsazure.com/evidence 本文翻译自：http://blogs.msdn.com/b/windowsazure/archive/2011/09/21/real-world-windows-azure-interview-with-dan-scarfe-chief-executive-officer-at-dot-net-solutions.aspx","title":"现实世界的Windows Azure:采访Dot Net Solutions的首席执行官Dan Scarfe"},{"content":"        在“云”的IT世界里，奇妙的变化正在上演，每个公司都可以根据自己的需求无限制地调用各种计算能力，使用各种软件，然后将它们交还给广袤无垠的以太(ether)。对于这股庞大而神奇的云力量，公司只需要“用多少，付多少”，甚至不用亲自构建、培训和维护。         随着越来越多的服务、公司、计算机功能和恶意功能清除软件闯入云计算市场，整个市场也似乎越来越复杂。         基于IAAS(Infrastructure as a Service，基础设施即服务)平台的亚马逊弹性计算云EC2就是一个典型案例。EC2表面看来就像是一个可供租用的数据中心，而事实上也确实如此。        利用IAAS，用户可以按需运行程序，并自由调节带宽、存储、内存、其他服务器、安全等每一项数据中心工具，这是因为IAAS的设计初衷就是一个理想化的数据中心，不再是印象中那个尘土飞扬的卫星数据中心，IT人员也不用顶着身体的不适来执行每年两次的灾难恢复训练。        本质上的差别在于，在亚马逊的云端，所有的硬件都是自动更新的，所有的软件都能保证近100%的在线运行，用户不用担心正常运行时间。(EC2仍旧会发生宕机事故，微软的Azure平台，谷歌的Gmail等信息管理应用也是如此。但是客户不需要为此担心，他们完全可以忽略宕机风险，即便宕机真的发生了，他们可以尽管抱怨，等待程序恢复。在云平台，一切问题都交给了IT人员。) 撇开云的闪光点，云服务架构呈层状分布         所以说，“云”IT架构环绕着一圈神秘的光泽。但如果你稍微眯起双眼，你会看见在闪闪发光的雾和风中隐藏着一座“金字塔”。         一般来说，由于太多的炒作，云计算市场笼罩着一层浓雾，以至于我们看不清楚云计算的真正架构。除非你愿意冒着风险拨开那层迷雾，你才能够看到真相。 然而，当你看清楚时，你却失望了。因为云的架构看起来那么熟悉。 租用设备却缺乏足够的认知         云看起来如同复杂的OSI(开放系统互连)七层网络模型，抑或空间感极差的人绘制的数据中心图表(他们把存储放置在离事务处理监管器100英里距离的地方)。         有趣的是，在你租用网络和数据中心的每一层功能时，你可以选择不同的供应商，而不用考虑他们的位置所在。         观察数据中心和OSI图解，你会发现最底层都是物理层——连接你的数据中心与云服务商数据中心之间的电线。         你可以从电信运营商那里租到它们，电信运营商的运营模式与云服务提供商如出一辙，只是发展略显落后。(在电信术语里，“云”意味着“不用担心任何技术问题，只要连上电源，即时支付费用，我们就可以帮你实现一切”。)         第二层(数据链路层)的一部分部署需要你亲自动手——打包你的数据以待其他网络和应用程序接受。这是需要你动手的唯一部分。         第三层——交换机和路由器，同样来自电信运营商，第四层(传输层)也是如此。(从本质上说，第三层和第四层都是传输，只不过第四层要略微智能化，而第三层需要在硬件上投入更多的费用，所以说，第三层是供应商极为重视的一层。)        第五层，即会话层，有关于云平台软件。云经纪人构建各方面的联系，包括应用程序和数据库的联系，应用程序之间的联系，以及应用程序和网络的联系。云经纪人解决它们之间的冲突，在必要时解除两者关系，根据终端用户的需求随时将它们导出“云”。        在这一层中，包含了诸如亚马逊弹性计算云等IAAS服务。你可以根据需求，在数据中心自由活动以创造价值。然而在数据中心，本应很简单的技术意外地复杂苦难化了。 将应用程序导入导出云平台，这是一件棘手的事，对于云供应商来说，操作的过程亦是如此。云供应商将APIs(应用程序编程接口)，中间件，信息交换技术塞满了整个箱子，就像一个填满老鼠的鞋盒，空间利用率达到了极限，这时候如果再放几只进去，那原先的老鼠就很难跑出来了。         然而，云供应商不希望你看到这一点。这或许是云计算发展的一大阴暗面。 不要靠的太近，结果可能让你失望        如果你弯下腰来，试图靠近第五层装满老鼠的盒子，自贴“正义”标签的独角兽就会在你背后狠狠地捅上一刀。它们锋利的兽角不是摆设，所以千万要小心。        所有数据的加密与解密，编码与解码都在第六层，即表示层中进行。不管是SAAS(软件即服务)，还是IAAS(基础设施即服务)，每一朵运行程序的云中都有这样一个“表示层”，只不过有着优劣之分罢了。         微软的Azure平台是最棒的云平台之一。此外，云中的另一大构成——PAAS(平台即服务)也是相对优越的云。PAAS为用户运行程序提供了服务器租用服务，而用户甚至不需要亲自接触服务器。你只需要按下“运行”按钮，其他所有的工作都交付给了云供应商。        由于留给企业的控制权过少，很多企业颇有意见，为此微软为管理个人应用，改变内存和磁盘空间等方面增添了新功能，旨在留给客户更多的操作权。当然，你从微软那里租来的仍旧是一个通用的Windows服务器。        第七层，即应用层，是市场的组成部分之一。SAAS都属于第七层。基于IAAS或PAAS运行的SAAS应用程序，利用存储即服务(storage as a Service)来存储数据，同时具备统一通信即服务，视频会议即服务等。用户甚至可以致力于为位置敏感型(location-sensitive)的膳食供应业务(特别是印度，中国，甚至美国的营养产品)提供新兴的午餐配送服务。 谁会关心“云”是不是真正的IT?忘记这个问题，享受云服务就好         简单地说，“云”就是由网络和数据中心构成的。从整体上看，目前的云计算市场正趋向于一个越发巨大的高度分散的数据中心。         在阳光明媚的日子里，你可以看到这样的景象：专家正在管理着几亩的数据中心。所以，如果你想要获得千万亿次(PetaFLOPS)的运行速度，又不想付出努力，那么“云”是令人满意的选择。        记住你对什么感兴趣很重要，同样地，那些并不引起你兴趣的东西也同样重要，主要有电脑，存储，应用程序的安全性以及散热太多而莫名其妙引发的电脑不能工作等问题。         又是那些黑客，更多的黑客，他们的操作像是在喂机器一样。因此，要确保这些被黑客控制的机器不对用户造成损害，就像他们在内部建立了一个数据中心(可以保护用户的私人数据)一样。         然而，云公司的处理人员比IT企业内部人员要好得多了，他们有着很好的图像辨识、感知和市场营销能力。         他们知道绝大多数商业用户很不情愿看到那些，因为用户不可能通过学习黑客那样的技术来完成他们的工作。         当IT公司推出的企业资源规划系统跟不上商业经理的需求速度时，经理们知道他们需要自己去租用一个系统，而且企业资源规划主管也知道，客户通常想看看那些系统的神秘之处以及它们的力量，而不是所谓的细微的变化。        你不会想了解所有的部件是什么、他们安装在哪里以及他们的成本是多少。事实上，在某种程度上，云计算产业将开始企业合并之路，因为如果企业想让其技术服务满足各种客户的各种需求，如服务器、存储、内存分配、网站服务、安全、后台支持、远程控制、电子邮件分发等，那么那些企业的经营成本将会变得非常昂贵。         IT世界不会回到曾经的DIY模式。云计算的发展市场也不会仅仅停留在某项技术，尽管那项技术可能非常强大。         最终，独立系统会趋向于合并，因为这是削减成本的最佳方式。大多数终端用户和企业的担忧，担忧不能将虚拟机或工作负载从一朵云迁至另一朵云，不能形成安全结盟、整合自己的遗留系统，或保证现有SAAS应用的实际使用数量，在未来的几个月中，这些担忧也许都会成为现实。         预计到明年春天，IT行业的一部分投资会挂钩整合业务。这很大程度上，是由于一些云公司通过彼此收购获取了高利润。         到明年秋天，甚至是二线的云公司都会开始担心整合问题，因为整合的声音早已此起彼伏。云供应商CEO(首席执行官)开始和CIO(首席信息官)一样担心，有时候也许会做出非理性的决定。         对CIO来说，考虑的问题不是要不要部署“云”，而是要如何更好地部署“云”，以免在问题爆发时手足无措。         从远处看，雾是如此美丽，就像是从太空中看到的飓风画面。         然而，当你逐渐靠近，雾就变得越浓，破坏性也越大。如果你没有做好充分准备，那么终有一天，一点点的风都会掀起屋顶，一丝丝的阴霾都会聚成致盲的浓雾。","title":"云计算市场：下一个大型数据中心？"},{"content":" 8月13日消息 13日上午，阿里巴巴集团宣布任命王坚为阿里巴巴集团首席技术官，全面负责规划、制定和实施集团技术发展战略。 　　同时，王坚继续兼任阿里云总裁职务，对内继续降低阿里巴巴集团技术运营成本，对外为中小企业提供最为高效实用的云计算服务。王坚此前担任集团首席架构师兼阿里云公司总裁。 　　此前，为进一步加快电子商务生态圈建设，推进One Company目标，阿里巴巴集团调整了组织架构，淘宝、一淘、天猫、聚划算、阿里国际业务、阿里小企业业务和阿里云为七大事业群，组成集团CBBS（消费者、渠道商、制造商、电子商务服务提供商）大市场。 　　阿里巴巴表示，随着上述任命的宣布，阿里还将进一步整合旗下技术力量。 　　资料显示，王坚曾任微软(微博)亚洲研究院副院长，负责用户界面、机器学习、数据智能及工具等研究组及北京adCenter实验室。在1999年加入微软亚洲研究院之前，王坚曾为浙江大学心理学系教授、博士生导师，曾担任浙江大学国家人类因素心理学实验室(State Lab of Human Factors) 主任。（完）","title":"阿里巴巴任命王坚为CTO 负责实施技术发展战略"},{"content":"云计算总是给人一种云里来雾里去的感觉，在前一个公司工作的时候，也看到公司正在研究云计算方案，实际上很多公司都在朝着这个方向迈进，不过直到最近读了《IT不再重要》这本书，才对云计算有了比较清晰的认识。 在IT这个领域最容易做的事就是拿出一些名词来把群众忽悠晕了，因为就算你不懂，也不敢不说他们不先进。不过就像爱因斯坦说的，一件事如果你不能给6岁的小孩讲明白，你就没有真的搞懂。 解释一件事最好的方式就是打比方，这本书也是这样做的。首先回过头来看历史，电力的发展对于人类社会的影响之大真是超乎想象。当年爱迪生和助手日以继夜奋战两年发明了灯泡才使照明也告别了灯火的时代，他的伟大发明我们今天仍然在用。爱迪生不仅是个伟大发明家也是个商业天才，他的设想是让每个需要电力的工厂自己安装有一个直流发电机，这样他就可以买发电设备来赚钱。本来这个计划非常完美，可是直流电的输电成本太高，每个工厂都自己发电，对于整个社会来说不是最完美的方案，因此特斯拉发明的交流电改变了一切，最终人们开始建立集中的大规模发电厂，发送交流电，把电力廉价的送给千家万户，迎来了电气时代。   历史会不断重演，在IT时代的开端和当年电气时代的开端有惊人的相近，如今每个人都拥有了个人电脑，每个企业也需要大量的个人电脑和服务器以及很多工程师来进行IT维护。每台电脑都要为软件和操作系统付钱，而这些钱流入了电脑供应商，如戴尔，或软件供应商，如微软的口袋里。如果从全社会的角度来看，资源被极大的浪费了，人们持有了过剩的电脑，企业建购买了过多的服务器，而且这些运算资源被极大的闲置了。如果采用云计算，建立大规模集中的数据和运算中心，社会就可以共享这些资源，充分利用运算能力，对于每个企业来说，就可以节省成本，对于整个社会来说可以节省资源，数据存储和IT服务应该就像电力供应一样容易使用。 电力的应用，解放了生产力，创造更多的白领工作，扩大了中产阶级，使得有钱人把更多的钱分享给劳动者。而网络时代，却在逆转这个过程。虽然网络使得知识的传播没有了障碍，每个人都可以创作和发布信息，每个人也可以免费阅读信息，但是只有极少数的暴富IT精英才能得到的经济上的收益。在网络时代，美国的财富更加集中到少数人手中，0.1%的福人占有财富的比例是过去100年的最高点。任何电脑的工作都可以外包，所以发达国家的白领工作大量流失到发展中国家。在中国外包来的工作机会大大增加了，可是网络财富的集中趋势是也是很明显的。当人力成本上升后，有些工作仍然会被转移。记得有个口号是“先富带后富”，其实这个说法就是一个无比荒诞的屁话。 对于个人而言，也会使用更多的云服务。比如，ICloud，Evernote。这就引发了一个问题，特别是对于个人，你的所有信息对于云计算的提供商都是透明的，如何保护隐私？而且云平台如果被黑客工作，大量的用户信息就会受到威胁。在云平台上是否可以供更多的分工，而不是一个企业掌握所有的数据，在云平台上如何提供安全控制。  ","title":"云计算时代与IT"},{"content":"    厂商的炒作，加上IT人的自欺，很快就会让人们对某种技术感到失望。如果你正在考虑云计算战略的话，请千万别被这些虚伪的承诺所迷惑。如今，无论你去哪里，都会有人对你说，或者向你兜售和云计算有关的什么东东。而你只有剥去其谎言的外衣，还其本来面目，你才能够了解云计算是否真的适合于你的企业。下面就是我们列出的关于云计算的9大必须剥去的谎言。 　　谎言1：只有一种“云”。     至少有三种格式的“云”，每一种都有着不同的利益和风险。它们是1)“基础设施作为服务”(IaaS，提供按需使用的虚拟服务器，例如Amazon的EC2)；2)Web服务或称“平台作为服务”(PaaS)，提供API或开发平台供客户在云中创建自己的应用；3)软件作为服务(SaaS)，例如Salesforce.com的CRM软件。 　　你正在运行哪类应用，生成何种数据，都会对你是否以及怎样采用云计算产生完全不同的结果。 　　谎言2：你需要的只是一张信用卡。     如果你是位孤独的开发者，有的是时间，那么从命令行上对虚拟服务器进行配置是没什么问题，但如果你掌管着一家企业，那么如何安装配置操作系统、多种应用、数据库连接才能产生回报？都是你必须要考虑的问题。如果你的企业规模够大，那就还得制定安全、数据格式或数据质量等诸多的标准。 　　千万别信一些厂商所说的，“只要去厂商那里买一台开发服务器，过去IT部门需要3、4天才能配置好的工作如今15分钟就能搞掂。”西门子IT解决方案与服务北美公司首席架构师Michael Kollar说，他的公司约有2500台服务器需要虚拟化，向企业内外部的使用者提供云服务，然而，云服务既不安全，也不适合公司的各种标准，无法集成到范围更广的IT环境中去。 　　很多IaaS厂商甚至无法适应企业的应用需求。Sitemasher的创始人兼CTO Phil Calvin尝试着想找一家云服务商，去管理他现在自己管理的服务器。结果呢？“我们找不到一家能够按需扩展我们的标准服务器的厂商”，他说。既没有厂商能够提供他需要的低延迟性能，也没有厂商能提供跨数据中心的全球负载均衡。 　　谎言3：云计算可以减少工作量。     长期来看可能如此，但是开始的时候，你必须首先考虑哪种模式的云计算适合于你；哪些应用或服务适合于这种云；如何保障适当的安全、法规遵从和正常运行。还要记住，监控任何一家厂商的服务性能也需要额外的时间。 　　“当你在运行生产性应用时，还有大量的问题需要考虑，比如冗余、可靠性、性能和延迟等，”RightScale的CTO兼创始人Thorsten von Eicken说。在把应用向云中迁移之前，客户必须确保上述需求都能满足。 　　另外，并非所有应用都能适合云计算。例如依靠服务器集群的应用就不太适合与他人分享计算资源的云环境，因为它们需要每一台服务器的配置不能随意变更，并且需要有专门的带宽等等。 　　谎言4：可以将私有云和公用云无缝集成。     一些云服务的布道者们为我们呈现了这样两个美好的世界：你既能拥有由内部数据中心提供的控制权，又能享受到由外部云所提供的低成本与灵活性，而各类应用、存储和服务器都可以按照你的需要随意地拖放使用。 　　然而，要实现这一点相当困难。就目前来看，需要大量的跑腿工作，大量的手动重配置和大量的工程设计努力，才能将应用同时迁移到公用云和私有云中。只有当客户在公用和私有云中运行相同的平台时，无缝集成才会比较容易实现。 　　西门子的Kollar说，关键是需要有一种安全基础架构，可以跨两种环境；需要有既安全又节约的方法可以跨两种云复制数据或访问数据。 　　谎言5：什么时候都不可能无缝集成公用云和私有云。     这同样是不对的。其实已经有一些厂商正在提供无缝集成。例如Kollar就预计将在12到18个月内，向其客户提供两种云的无缝集成。RightScale的von Eiken推荐了同时适用于公用和私有云的一些标准化配置、数据模型和自动部署策略。当技术、标准和处理流程都比较完善之时，构建一个可共享公用和私有资源的基础应该是可能的。 　 谎言6：云计算怎么都能节约成本。     而麦肯锡最近发布的一份引起诸多争议的白皮书宣称，只有在云中运行某些特殊平台，例如Linux时，才有可能节省成本。 　　Google对此表示了异议。Google Apps的高级产品经理Rajen Sheth认为，麦肯锡的报告只考虑了高度冗余架构中低成本服务器带来的成本节约，这是不全面的。他认为客户利用“相同的可扩展应用服务器和数据库”，而不必再购买、安装、维护、扩展自己的数据库和应用服务器，同样能节约成本。对此，麦肯锡未给出回应。 　　也有用户指出，在现有的许可证和技术支持模式下，客户们在云中部署软件可能要比在企业内部部署软件，需要向软件厂商支付更高的费用。 　　谎言7：云厂商能够确保云安全。     即便云厂商拥有多项安全认证证书，也不能保证你的特定服务器、应用和网络是安全的。 　　以西门子为例，为了确保西门子的云环境是安全的，则需要“从外部”仔细考察IT系统，保证每一条可以想到的用户能够访问关键信息的路径都是安全的才行，Kollar说。保障每一个平台都是安全的，虽然不算是什么了不得的挑战，但是要保障所有需要安全的技术能在一起协同工作，这才是一项巨大的挑战。 　　谎言8：只要运行虚拟机，就是在做云计算。     虚拟化是在多个物理设备之间创建逻辑服务器或逻辑存储，它只是云计算所需要的一部分要素而已。但是，即便有了虚拟机也并不意味着就有了云计算。要想充分获得虚拟化的好处，IT部门或云厂商还必须提供按需伸缩容量的能力，按需付费的定价机制，让用户能够很容易地根据其需要配置新的服务器和存储设备。 　　允许用户定购虚拟服务器(尤其是为某些特殊任务重新配置的服务器)来做某些工作，是云客户的一个关键性的省钱目标。但要说只是因为你运行了例如VMware的Infrastructure 3，自我服务就会自动发生那却未必。Kollar说，西门子就投入了“一大笔钱”用于研发虚拟服务器和相关服务的标准服务菜单，用户可以按需从其私有云中定购这些服务。 　　谎言9：云计算只和技术有关。     的确，是技术让云计算成为可能，但是实现成本节约与灵活性还需要有正确的处理流程。虚拟化是云计算的基础，而当客户要在各种物理设备之间迁移数据和应用时，前者是非常动态、高度变化的。 　　在云中可以使用标准化流程来提高效率。Kollar说，通过利用ITIL管理框架与虚拟化技术相互结合，西门子已经把IT管理的工作量减少了25%到35%。 　　关于云的真相：云并非外卖，也绝非无忧无虑计算的神奇乐土，而是一种需要深入了解，花大力气去正确管理的复杂资源。这里绝没有什么神话可言。 　　企业在将业务迁移到云之前，应首先考虑下列5个问题： 　　1、你的云服务商是如何定义“良好的客户服务”的？服务本身的先进性固然重要，但是你必须弄清楚具体的某个厂商认为哪种服务才是良好的服务，以及服务中都包含了什么，比如赔偿政策、技术援助等等。 　　2、你对云服务商的有形设施是否满意？尽职调查（due-diligence）的部分内容包括检查厂商的有形设施，注意与厂商大楼维护有关的事务，以及厂商的设备维护计划和大楼中员工的数量等。 　　3、你应该清楚会出现哪种类型的服务中断事故。有时，厂商不得不关闭部分更新或升级设备，因为那些活动会严重妨碍你的云计算服务。搞清楚厂商计划多长时间进行一次例行检修，以及它会向用户们提供什么样的预先通知。 　　4、云服务商发展的速度有多快？你必须知道你的厂商是否有能力在不影响服务水准的前提下接受更多的新用户。 　　5、云服务商准备了那些后续程序？一旦服务出现中断故障，重要的是它能多快地找出问题的根源。","title":"识破云计算九大谎言"},{"content":"神州数码昨日发布了2011/2012年度业绩报告，包含智慧城市的服务业务营业额约78.92亿港币，较上财年同期的60.42亿港币增长了30.62%。神州数码首席执行官林杨向腾讯科技表示，神州数码未来将围绕“两线三区”布局智慧城市，同时他表示，神州数码与国外企业相比对中国客户的需求把握更好。 林杨透露，神州数码智慧城市业务与去年相比，覆盖城市从57增长到了67个只增长了10个。他表示，智慧城市业务是非常有选择性的，神码的选择标准是两线三区，两线是指京广线，京沪线；三区是指环渤海经济区、长三角和珠三角经济区。 他解释，两线三区正式是中国经济最发达的地方，智慧城市业务必然会从最发达的地方开始，神州数码会按照这个方向来选择智慧城市的项目，只要把握好这两线三区，这个市场就足够支持未来发展的空间。 在谈到与其他跨国企业和运营商在智慧城市运营的优劣势时，林杨表示，运营商在基础设施上面非常有优势，所以神州数码在智慧城市市场上，与运营商是合作关系。跟国外厂商相比，技术，研发和方案上，国外企业有优势，但是对客户需求的把握来讲，国内企业非常有优势。最大的区别有两点： 一是诞生于发达国家的智慧城市企业，能提供更好的针对发达国家的解决方案，但不适用于中国；二是外国企业都是将已有的成熟解决方案卖给中国，而神州数码能够通过定制来满足中国政府的需求，最终形成合理的解决方案。 他透露，未来五年神州数码将转向城市信息化的战略，智慧城市不是一个局部的战略，会成为未来五年的战略的核心，包括云计算为核心的信息服务集团、以移动互联网为核心的终端及移动技术集团、以SAAS为方向的系统科技技术集团、智慧城市解决方案及运营、智慧城市协同产业等五块业务。","title":"神码林杨：围绕“两线三区”布局智慧城市"},{"content":"云计算时代最具潜力的12种编程语言 我们需要新的编程语言？你可能认为并不需要，但是如果你去了解最近的趋势，你可能会改变你的想法。为什么Google采用GO和DART两种编程语言？为什么IBM、Cray、Red Hat分别创造了X10、Chapel和Ceylon三种语言？ 未来，这10种编程语言（DART、Ceylon、GO、F#、OPA、Fantom、Zimbu、X10、Haxe、Chapel）是否能否撼动IT。新的编程语言是为了满足某些人的创作冲动还是新编程方式的技术演进？ 回顾历史 如果你回头看看，我们可以看出新语言的爆发将历史分为3个时期，每个时期都链接到技术演进的临界点。 图中时间点以外的还有其他重要语言：(1)Pascal – 1970、(2)C – 1972、(3)Prolog – 1972、(4)Smalltalk – 1972、(5)Erlang – 1986、(6)Perl – 1987、(7)C# 云计算是否会用到这些语言？如果你分析这些新语言背后的故事，你会看到一个新兴的共同主题。 1.分布式/并行计算 可用于并行计算的编程语言（Cray的Chapel、IBM的X10）、并发编程（Clojure，Fantom，Go）和完整云栈单语言（Opa）。 由于云计算所有模式是将任务分发跨越不同地域的多个CPU并行或同时运行，所以现今的编程语言都不是很适合。 2.多范式编程 支持面向对象和函数式编程语言（Clojure、F#、Fantom、Scala），相对于并行化程序要简单，而纯函数式语言看来并不是十分成功。因此，需要尝试多范式编程语言。 3.多平台编程 多平台编程语言不仅可在JVM和CLR实施（Clojure、Fantom、Scala），还可以在其他几个平台（Clojure & Fantom on JavaScript engine、Scala on Android、Haxe on several platforms）。这事我们几十年来一直追逐的梦想，因此这就是创建跨平台语言的最好理由。 4.规模化编程 可读性、模块化（Ceylon）、编译速度（Go、Zimbu）、适合大型团队（Scala）、Meta-programmability（Ceylon、Scala）和简洁（Scala、Zimbu）是构建大型应用程序的编程语言的特性。 云计算提供了几乎无限的计算能力，这使得我们可以构建更大规模、更复杂的应用。当然构建大型应用需要大型团队和易于维护的代码。因此创建大型应用程序的编程语言势在必行。 5.客户端编程 替代JavaScript的DART、客户端和服务器端相同的语言（Naxe、Opa、Zimbu）自然有自己特有的优势。 云计算需要客户端代码无缝的运行在多个客户端设备上，虽然JavaScript已经成为了一个标准，但没有人喜欢它。因此，需要构建比JavaScript更好的并适用于多客户端平台的语言。 12种语言快速预览 12种语言是按照A-Z进行排序的，有趣的是这12种语言都是遵循某种开源许可之下（图表中不包括HTML5，因为从严格意义上它还不是一个新语言，同时也排除了Node.js，因为它仅仅是服务器端JavaScript引擎）。（李智/编译）","title":"云计算时代最具潜力的12种编程语言"},{"content":"目录 一、导读 1.APEX支持基于云计算的网络开发 Oracle APEX支持基于云计算的网络开发          二、安装与维护 1. 安装APEX  Steps to install Apex 4 on linux          2.安装Sample，创建一个人力资源应用程序 Building Applications with APEX          3.如何重启APEX APEX不能访问          三、表单Form 1.如何实现级联选择列表 Oracle APEX级联LOV：Cascading LOVs/Select Lists          2.实现打开新页面的link Oracle APEX Open a new window/tab page and navigate to a URL          3.按钮的事件处理 Oracle APEX 点击按钮出发事件执行PL/SQL          4.实现页面刷新按钮 Page refresh button          四、报表Report 1.创建参数化搜索表单 Oracle APEX创建参数化可以搜索的表单 2.报表列的显示风格控制 Oracle APEX Report的某一个列根据条件显示不同的颜色          五、其他常用的Features 1.APEX页面间参数传递 Oracle APEX 在页面直接传递参数值  2.APEX实现文件上传下载 APEX文件上传下载          六、编程语言 1.在APEX中使用CSS Using CSS in APEX pages and regions          Oracle APEX 如何在APEX中使用CSS  2.在APEX中使用JavaScript Oracle APEX JavaScript APIs 3.在APEX中使用AJAX APEX中使用AJAX及其调试方法          4.使用PL/SQL function返回select语句进行动态查询 Oracle APEX使用PL/SQL function返回select语句进行动态查询          5.使用htp包动态生成html源码 Oracle APEX 使用htp包动态生成HTML源码          6.Oracle APEX 使用htp和htf生成html源码（含css和javascript）和业务逻辑处理 Oracle APEX 使用htp和htf生成html源码（含css和javascript）和处理业务逻辑          7.在APEX中使用Java 在APEX中调用Java方法          在Oracle中使用Java存储过程JSP(Java Stored Procedures)一些技术要点          用PL/SQL Java存储过程发送带附件的邮件（使用第三方Java API）          七、访问控制与安全 1. APEX session 保持登陆状态           APEX session保持登陆状态         ","title":"[置顶] Oracle APEX Web开发入门 Oracle APEX支持基于云计算的网络开发          Steps to install Apex 4 on linux          Building Applications with APEX          APEX不能访问          Oracle APEX级联LOV：Cascading LOVs/Select Lists           Oracle APEX Open a new window/tab page and navigate to a URL           Oracle APEX 点击按钮出发事件执行PL/SQL           Page refresh button          Oracle APEX创建参数化可以搜索的表单 Oracle APEX Report的某一个列根据条件显示不同的颜色          Oracle APEX 在页面直接传递参数值    APEX文件上传下载          Using CSS in APEX pages and regions           Oracle APEX 如何在APEX中使用CSS  Oracle APEX JavaScript APIs APEX中使用AJAX及其调试方法          Oracle APEX使用PL/SQL function返回select语句进行动态查询           Oracle APEX 使用htp包动态生成HTML源码           Oracle APEX 使用htp和htf生成html源码（含css和javascript）和处理业务逻辑          在APEX中调用Java方法           在Oracle中使用Java存储过程JSP(Java Stored Procedures)一些技术要点           用PL/SQL Java存储过程发送带附件的邮件（使用第三方Java API）          1. APEX session 保持登陆状态           APEX session保持登陆状态         "},{"content":"         在今天所处的大时代背景下，嵌入式、3G移动互联网、物联网、云计算俨然已成为信息产业的主旋律，不管从政府大力扶持角度来看，还是从产业变革的主流方向来说，这股潮流早已势不可挡。而嵌入式系统正是这些产业应用技术中最核心、最关键的部分。随着智能化电子行业的迅猛发展，嵌入式行业更是凭借其“应用领域广、人才需求大、就业薪资高、行业前景好”等众多优势无疑已成为当前最热门、最有发展前途的行业之一，与此同时，嵌入式研发工程师更是日益成为IT职场的紧缺人才。为了让更多想从事和即将从事嵌入式研发工作的朋友们能够更好地、更充分地了解嵌入式专业领域，特别是近两年行业的发展状况和发展趋势，华清远见教育集团先后连续3届,分别在2008年底至2009年初、2009年底至2010年初，及2010年底至2011年初联合多家业内专业媒体共同开展了“2008-2009年中国嵌入式开发从业人员大调查”、“2009-2010年中国嵌入式开发从业人员大调查”及“2010-2011年中国嵌入式开发从业人员大调查”，并连续3年隆重推出了中国嵌入式领域最具广泛性、代表性、权威性和实用性的产业调查报告。基于调查报告统计数据的真实性，广泛性和专业性，每一届调查活动及权威报告的推出都获得了业内的高度关注，也得到广大嵌入式从业人员的认可和共鸣，起到了很好的行业指导和从业规划的建议作用。特别是报告中汇总呈现的、描述中国嵌入式行业的发展趋势和实际现状的专业数据，更是成为整个行业状况的真实体现和实时反映。         2011年12月至2012年6月，应众多业内同行和广大嵌入式从业人员的需求，在3G移动互联网、物联网、云计算日益成为嵌入式技术核心应用领域的时代背景下，华清远见再次联合行业主管协会、国际国内知名嵌入式企业、数十家业内专业媒体共同推出“2011-2012年中国嵌入式开发从业人员大调查”，并在上万名嵌入式从业人员的积极参与和支持下，通过调研结果数据的横向时间对比，结合业内上百家企业的深入调研情况，并参考数十位行业知名专家学者的分析和判断，正式推出了《2011-2012年中国嵌入式开发从业人员调查报告》，期待帮助正在关注或从事嵌入式领域专业工作的各位技术爱好者，更加充分地了解中国嵌入式行业的整体状况、发展趋势及嵌入式开发从业人员的现状，希望能够帮助大家更好的认识和定位自我，更有效地规划职业发展，适应整个IT产业的成长需求。         需要说明的是，做为业界知名的专业嵌入式培训机构，经过9年的专注和努力，从华清远见培训课堂中走出的专业嵌入式研发工程师的总人数已经突破了30000名，他们分布在各个不同领域内的嵌入式产品研发的企业中，从而为本次行业调查提供了最基础和最直接的数据。与此同时，作为嵌入式技术推广、普及和职业教育的倡导者和实施者，自2004年成立以来，华清远见已举办近千场线上及线下的“公开讲座”活动，每场讲座的报名注册人数都在500人以上，俨然已成为嵌入式行业最受欢迎的专业品牌活动之一；而华清远见公开出版的专业图书的发行量每年超过15万，读者注册数非常庞大，这些都有效确保了华清远见推出并组织这样一份调查报告的针对性和专业性，能在很大程度上反映中国嵌入式开发人群的整体情况。         而针对本次调查特别成立的更加庞大、专业的专家顾问团队，也共同见证了本次调查的公正性和公开性。作为目前中国嵌入式行业的知名专家和资深学者，顾问团队的专家们对国内嵌入式行业发展现状有着充分的认识和深刻的理解，他们共同参与了调查问卷的问题设计，并承担了最终报告的撰写和修订，这些都进一步确保了报告的有效性和权威性。         本次调查活动继续秉承了一直以来坚持的专业、严谨、客观、实用的原则，问卷部分的问题都是经过了非常严格的设计和筛选，分别从嵌入式工程师个人基本情况、嵌入式行业研发公司的基本情况、嵌入式工程师职业生涯发展及获得技术提升、培训的方式等五个不同的角度进行问题设置，特别是考虑到近一年来嵌入式技术在物联网、云计算、移动互联网等领域的广泛应用和发展，在本次调查问卷中也专门调整增加了相关的题目和选项，并在此基础上进行反馈数据的汇总、统计和分析，以呈现出行业发展的专业性趋势和普遍的关注点，力争再次打造出2011-2012年度中国嵌入式专业领域最具广泛性、权威性和实用性的产业调查报告。欢迎广大嵌入式开发从业人员更多的关注和支持，并提出更多更好的建议和想法，与华清远见及众多国内外业内知名企业携手，共同为提升嵌入式开发从业人员整体价值，推动中国嵌入式行业发展贡献一份力量！ 下载调查报告PDF电子版请点击http://www.farsight.com.cn/subject/report2011-2012.htm  ","title":"2011—2012（第四届）中国嵌入式开发从业人员调查报告"},{"content":"         在今天所处的大时代背景下，嵌入式、3G移动互联网、物联网、云计算俨然已成为信息产业的主旋律，不管从政府大力扶持角度来看，还是从产业变革的主流方向来说，这股潮流早已势不可挡。而嵌入式系统正是这些产业应用技术中最核心、最关键的部分。随着智能化电子行业的迅猛发展，嵌入式行业更是凭借其“应用领域广、人才需求大、就业薪资高、行业前景好”等众多优势无疑已成为当前最热门、最有发展前途的行业之一，与此同时，嵌入式研发工程师更是日益成为IT职场的紧缺人才。为了让更多想从事和即将从事嵌入式研发工作的朋友们能够更好地、更充分地了解嵌入式专业领域，特别是近两年行业的发展状况和发展趋势，华清远见教育集团先后连续3届,分别在2008年底至2009年初、2009年底至2010年初，及2010年底至2011年初联合多家业内专业媒体共同开展了“2008-2009年中国嵌入式开发从业人员大调查”、“2009-2010年中国嵌入式开发从业人员大调查”及“2010-2011年中国嵌入式开发从业人员大调查”，并连续3年隆重推出了中国嵌入式领域最具广泛性、代表性、权威性和实用性的产业调查报告。基于调查报告统计数据的真实性，广泛性和专业性，每一届调查活动及权威报告的推出都获得了业内的高度关注，也得到广大嵌入式从业人员的认可和共鸣，起到了很好的行业指导和从业规划的建议作用。特别是报告中汇总呈现的、描述中国嵌入式行业的发展趋势和实际现状的专业数据，更是成为整个行业状况的真实体现和实时反映。         2011年12月至2012年6月，应众多业内同行和广大嵌入式从业人员的需求，在3G移动互联网、物联网、云计算日益成为嵌入式技术核心应用领域的时代背景下，华清远见再次联合行业主管协会、国际国内知名嵌入式企业、数十家业内专业媒体共同推出“2011-2012年中国嵌入式开发从业人员大调查”，并在上万名嵌入式从业人员的积极参与和支持下，通过调研结果数据的横向时间对比，结合业内上百家企业的深入调研情况，并参考数十位行业知名专家学者的分析和判断，正式推出了《2011-2012年中国嵌入式开发从业人员调查报告》，期待帮助正在关注或从事嵌入式领域专业工作的各位技术爱好者，更加充分地了解中国嵌入式行业的整体状况、发展趋势及嵌入式开发从业人员的现状，希望能够帮助大家更好的认识和定位自我，更有效地规划职业发展，适应整个IT产业的成长需求。         需要说明的是，做为业界知名的专业嵌入式培训机构，经过9年的专注和努力，从华清远见培训课堂中走出的专业嵌入式研发工程师的总人数已经突破了30000名，他们分布在各个不同领域内的嵌入式产品研发的企业中，从而为本次行业调查提供了最基础和最直接的数据。与此同时，作为嵌入式技术推广、普及和职业教育的倡导者和实施者，自2004年成立以来，华清远见已举办近千场线上及线下的“公开讲座”活动，每场讲座的报名注册人数都在500人以上，俨然已成为嵌入式行业最受欢迎的专业品牌活动之一；而华清远见公开出版的专业图书的发行量每年超过15万，读者注册数非常庞大，这些都有效确保了华清远见推出并组织这样一份调查报告的针对性和专业性，能在很大程度上反映中国嵌入式开发人群的整体情况。         而针对本次调查特别成立的更加庞大、专业的专家顾问团队，也共同见证了本次调查的公正性和公开性。作为目前中国嵌入式行业的知名专家和资深学者，顾问团队的专家们对国内嵌入式行业发展现状有着充分的认识和深刻的理解，他们共同参与了调查问卷的问题设计，并承担了最终报告的撰写和修订，这些都进一步确保了报告的有效性和权威性。         本次调查活动继续秉承了一直以来坚持的专业、严谨、客观、实用的原则，问卷部分的问题都是经过了非常严格的设计和筛选，分别从嵌入式工程师个人基本情况、嵌入式行业研发公司的基本情况、嵌入式工程师职业生涯发展及获得技术提升、培训的方式等五个不同的角度进行问题设置，特别是考虑到近一年来嵌入式技术在物联网、云计算、移动互联网等领域的广泛应用和发展，在本次调查问卷中也专门调整增加了相关的题目和选项，并在此基础上进行反馈数据的汇总、统计和分析，以呈现出行业发展的专业性趋势和普遍的关注点，力争再次打造出2011-2012年度中国嵌入式专业领域最具广泛性、权威性和实用性的产业调查报告。欢迎广大嵌入式开发从业人员更多的关注和支持，并提出更多更好的建议和想法，与华清远见及众多国内外业内知名企业携手，共同为提升嵌入式开发从业人员整体价值，推动中国嵌入式行业发展贡献一份力量！ 下载调查报告PDF电子版请点击http://www.farsight.com.cn/subject/report2011-2012.htm  ","title":"2011—2012（第四届）中国嵌入式开发从业人员调查报告"},{"content":"当局域网内某台主机运行ARP木马程序时，会欺骗局域网内所有主机和交换机，让所有上网的流量必须经过病毒主机。那么该如何有效地如何防止ARP木马程序呢？ AD： 51CTO云计算架构师峰会 抢票进行中！ ARP木马程序（ARP病毒）的攻击（ARP是“AddressResolutionProtocol”“地址解析协议”的缩写），病毒发作时其症状表现为计算机网络连接正常，却打开网页时断时通；或由于ARP木马程序（ARP病毒）发作时发出大量的数据包，导致用户上网不稳定，极大地影响了用户的正常使用，给网络安全带来严重的隐患。 ARP病毒原理 当局域网内某台主机运行ARP木马程序时，会欺骗局域网内所有主机和交换机，让所有上网的流量必须经过病毒主机。其他用户原来直接通过交换机上网现在转由通过病毒主机上网，切换的时候用户会断一次线。由于ARP木马程序发作的时候会发出大量的数据包导致局域网通讯拥塞以及其自身处理能力的限制，用户会感觉上网速度越来越慢。当ARP木马程序停止运行时，用户会恢复从交换机上网（此时交换机MAC地址表正常），切换过程中用户会再断一次线。该病毒发作时，仅影响同网段内机器的正常上网。 防止ARP木马程序采取的措施 一、用户要增强网络安全意识，不要轻易下载、使用盗版和存在安全隐患的软件；或浏览一些缺乏可信度的网站（网页）；不要随便打开不明来历的电子邮件，尤其是邮件附件；不要随便共享文件和文件夹，即使要共享，也得设置好权限，一般指定特定帐号或特定机器才能访问，另外不建议设置可写或可控制，以免个人计算机受到木马病毒的侵入给网络的安全带来隐患。 二、计算机用户要及时下载和更新操作系统的补丁程序，安装正版的杀毒软件，增强个人计算机防御计算机病毒的能力。 三、用户检查和处理ARP木马程序的方法。 1、检查本机是否中的ARP木马程序染毒 同时按住键盘上的“CTRL+ALT+DEL”键，选择“任务管理器”，点选“进程”标签。查看其中是否有一个名为“MIR0.dat”之类的进程。如果有，则说明已经中毒。右键点击此进程后选择“结束进程”。 2、在受到ARP木马程序（ARP病毒）攻击时，用户可选择下列方法的一种处理。 方法一： 下载AntiARPSniffer软件保护本地计算机正常运行。同时把此软件设为自动启动，步骤：先把Antiarp.exe生成桌面快捷方式->选\"开始\"->\"程序\"->双击\"启动\"->再把桌面上Antiarp.exe快捷键拷到\"启动\"中，以保证下次开机自动运行，起到保护的作用。 方法二： 在“开始”-“程序”-“附件”菜单下调出“命令提示符”。输入并执行以下命令：ipconfig，记录网关IP地址，即“DefaultGateway”对应的值，例如“10.1.4.1”。再输入并执行以下命令：arp?Ca 在“InternetAddress”下找到上步记录的网关IP地址，记录其对应的物理地址，即“PhysicalAddress”值，例如“00-e0-fc-0f-8f-4d”。在网络正常时这就是网关的正确物理地址，在网络受ARP木马程序影响而不正常时，它就是木马所在计算机的网卡物理地址。也可以扫描本子网内的全部IP地址，然后再查ARP表。如果有一个IP对应的物理地址与网关的相同，那么这个IP地址和物理地址就是中毒计算机的IP地址和网卡物理地址。本方法可在一定程度上减轻中木马的其它计算机对本机的影响。用上边介绍的方法确定正确的网关IP地址和网关物理地址，然后在“命令提示符”窗口中输入并执行以下命令：arp?Cs，网关IP网关物理地址。 方法三：(只适用时出现故障时的临时解决办法） 在“开始”-“程序”-“附件”菜单下调出“命令提示符”。输入并执行以下命令：arp-d 方法四： 局域网ARP攻击免疫器,网上有得下。（1）将这里面3个dll文件复制到windows\\system32里面，将npf这个文件复制到windows\\system32\\drivers里面。（2）将这4个文件在安全属性里改成只读。也就是不允许任何人修改。 四、以下程序带有此类ARP病毒（传奇杀手等），请不要使用： 传奇2冰橙子1.44版 传奇2及时雨PK版 \"网吧传奇杀手\"的木马软件进行传奇帐号和密码的扫描 网络执法官等类似程序 五、ARP病毒清除工具","title":"如何防止ARP木马程序？"},{"content":"　　当前，移动互联网前沿竞争激烈，形势扑朔迷离。今年以来千元智能手机成为市场和业界关注焦点，终端利润急剧下滑；运营商面临向数据增值服务转型压力，互联网企业纷纷表现出对移动终端的兴趣，开发者跃跃欲试。6月5日，中国社科院信息化研究中心举办“下一代移动互联网产业格局和发展”研讨会，分析当前形势。我主持了这个会议，综合专家的意见，我得出一个判断，认为移动互联网将进入2.0时代。 　　移动互联网的1.0时代和2.0时代有哪些不同？我认为，1.0时代是手机品牌商为核心的时代，当时主流的Symbian系统偏于封闭，手机品牌商不仅提供智能终端，也主导了手机内置应用的开发，本地应用（NativeApp）构成主要的应用模式；2.0时代是“平台+应用”的开放时代。设备不再重要，应用服务的重要性日益凸显。HTML5有望成为新平台的基础，云计算平台成为主流趋势，基于HTML5的网页应用（WebApp）将成为主要的应用模式。 　　移动互联网2.0时代也是智能化的时代。当前移动互联网出现智能化加速趋势。智能化受到云计算和大数据发展的驱动，对于移动终端与互联网服务的结合，在智能化上提出新的要求。互联网云计算与移动终端的结合，将形成平台级云服务与移动终端应用的配合，使云和端将更紧密地结合。这对产业格局产生深刻影响。 　　应用与开发模式的变化，将成为移动互联网2.0时代最引人注目的现象。 　　应用模式将发生显著变化。本地应用向网页应用的转向，将引发产业格局的一场革命性的变革。支撑增值应用的平台将发生颠覆性创新，随着HTML5具有越来越多平台特征，以操作系统、应用商店和客户端为代表的平台，有可能逐步改朝换代，网页OS和具有HTML5加强功能的浏览器正在兴起之中。新的应用竞争的焦点，开始从本地，转向网页。Facebook将API开在网页，而不是以往的平台上，就是一个代表的趋势。移动互联网应用将进入云计算和大数据时代。 　　开发模式也正在发生变化。本地应用的开发模式，如AppStore模式，有可能从领潮变为退潮。而基于云平台的网页应用开发模式将兴起。目前，几大开放平台对开发者的支持普遍存在不足。iOS平台和AppStore模式采用的下载到本地应用的模式仍不够开放，大部分开发者无法从中盈利；Android平台相比iOS更为开放，版本繁多、终端适配成本高昂、应用分发渠道散乱等，让开发者无所适从。 　　目前，移动互联网2.0时代的变化，已不再停留在理论上，Facebook、百度等领袖企业的实践已提供了佐证。在现有开放平台中，我认为百度云平台代表发展方向，值得关注。2.0时代的开放平台不同于以往OS，一要全面集成云计算核心技术，二要具有云服务特色应用能力，三要为开发者提供最强有力的支持，四要为终端厂商提供最优秀的互联网内容和应用服务能力，五要为用户提供最人性化、最贴近实际使用的互联网体验。百度建设的移动互联网生态圈，正在向形成上述能力方向发展，目前已聚集6万开发者，超过8万个移动应用，具有成为移动互联网领袖平台商的潜力。 　　移动互联网向2.0时代的转变，在国际上也刚刚起步。这是中国互联网企业做强做优，成为世界一流企业的良机。中国互联网下一个500亿美元、5000亿美元的机会就摆在面前，让我们抓住机遇。 本文转自HTML5中国网站：http://www.html5cn.org/article-3193-1.html","title":"移动互联网向2.0时代转变"},{"content":"《互联网运营智慧》随书视频 1、田逸0-前言下载处 2、田逸1 第一章到第四章 下载 3、田逸2 第五章到第7章   下载 4、田逸3 第8章moosefs分布式文件系统 下载 5、田逸3 第9章 MySQL实战 下载 6、田逸3 第10章云计算架构之hadoop 下载 7、田逸3 第11章网关服务 下载 8、田逸3 第12章 nagios监控系统，部署脚本，调试 下载 9、田逸3 第13章 高可用高扩展负载均衡方案 下载   本文出自 “sery” 博客，请务必保留此出处http://sery.blog.51cto.com/10037/363658","title":"《互联网运营智慧》随书视频"},{"content":"11月28日消息，英国电信今日宣布，欢迎中国领先的IT服务提供商软通动力(纽交所上市代码：ISS)成为MDCL-Frontline的股东。MDCL-Frontline 作为英国电信在中国的主要交付分支，为英国电信在中国市场的全球客户提供IT基础架构服务。英国电信仍然是MDCL-Frontline最大的股东，持股比例为47.5%。 　　软通动力董事长兼首席执行官刘天文表示，“我们很高兴完成了本次对MDCL-Frontline的注资，我相信软通动力带来的服务能力将会进一步增强MDCL-Frontline作为领先的IT服务提供商为中国客户及在中国的跨国公司客户提供端到端服务的能力。” 　　MDCL-Frontline是一家优秀的IT服务提供商，拥有150名工程师在中国的21个城市提供服务，尤其是IT系统集成及基础架构开发服务，包括网络、服务器、数据存储及数据中心等。MDCL-Frontline的客户包括中国的电信、银行及能源行业的大型企业。 　　MDCL-Frontline 已经成为英国电信在中国首选的服务提供商。随着软通动力的注资，双方期望能够优势互补，并在智能城市、医疗、物联网及云计算等领域加强双方战略合作。 　　英国电信亚太区总裁Kevin Taylor表示，“MDCL-Frontline在IT基础架构、系统集成以及本地化服务人才方面的杰出技能，帮助英国电信打造在中国市场差异化服务交付能力。软通动力在众多行业都具备丰富的专业服务经验，MDCL-Frontline通过与软通动力合作，将进一步加快发展步伐。此次强强联合将推动英国电信作为实力强大的领先供应商的地位，并为在中国扩张的跨国公司客户提供增值IT服务。” 　　MDCL-Frontline取得的成就广受认可，所获行业资质包括：IBM解决方案提供商合作伙伴和甲骨文OPN。此外还被授予由中国政府颁发的国家A级系统集成证书。  ","title":"[置顶] 英国电信及和软通动力注资MDCL-Frontline"},{"content":" 转载请注明出处：http://blog.csdn.net/zbf8441372 上周看了O`Reilly的《OpenStack》，让人很失望，架构性的分析很少，大多是部署的内容，实用性也是有限，也怪不得没有人翻译它。OpenStack是一个开源的IaaS实现方案，是一套构建云的框架，有Nova这套比较成熟的虚拟机管理方案。趁着上周在上海的Openstack亚太技术大会，侃侃业界大小公司对公有云，私有云构建的情况。 云计算的几个as a Service 云计算之所以被称作在玩概念，主要在于他的SaaS。SaaS面向的对象是软件使用者，即普通百姓，任何一个web上的app都可以称作SaaS，所以SaaS被看作纯粹只是搞了个概念在玩儿。之外的PaaS和IaaS则不然，是真的提出了一种新的服务模式。先说PaaS，平台即服务，他面向的用户是开发人员。用户只考虑应用逻辑，操作对象是某个具体应用中的逻辑。他的特点是Auto-scaling。比如Tomcat/Apache Hosting业务,用户只要把你写的网站的代码,域名都丢给他,针对你的访问量和需求,他自动给你起虚拟机,在适合数目的虚拟机上起适合数目的Tomcat,你无需考虑之后的问题。公有PaaS的提供商有Google App Engine，EMC的Cloudfoundry以及Redhat开源的Openshift。PaaS的技术门槛是高的。再看IaaS，基础设施这块。国内的大公司，阿里和盛大都推出了自己的云，他们都是IaaS的公有云提供商。IaaS的用户是开发人员，用户接触到的是虚拟机，需要考虑应用部署，应用逻辑等问题。一般虚拟机上还会提供一些非结构化的KV云存储服务，以及Block Storage，load balance这样的业务，所以有人反对云计算等于虚拟机。相比auto-scaling的PaaS，再相比腾块地儿给你装东西玩的虚拟主机，我们可以看到IaaS的定位。Amazon上的web services以及微软的Azure，他们也属于公有云IaaS提供商。 公有云和私有云 在国内，想做公有云对于普通公司来说是不可能的。公有云需要机房，需要数据中心，只有具备一定实力的大公司才玩的起，而且也是向电信或者网通租的机房，国内也不允许你自己建机房，应该是违法的。除此之外，对公有云来说，三分研发，七分运维。一家公司的运维实力也决定了你是否玩的了它。公有云是多租户的，要解决数据隔离等问题。相比之下，私有云是可以让小公司或者个人实现得了的一种云。只要有局域网，只要一个你自己的机房，甚至可以是单租户的，反正你自己搞个私有云，给自己的应用提供些内部服务，怎么来都可以。 OpenStack的定位 只谈OpenStack的Nova和Swift。Nova较为成熟，是虚拟机管理方案。Swift比较简单，是一套KV存储方案。虽然Nova由开源社区投入了大量时间和精力维护开发，他的架构和计费模式却完全不能拿来做公有云。英特尔公司因此还向OpenStack社区的委员会申请重写它，被建议还是不要改写它为好。反倒是Swift，因为简单，却是可以用的。Swift的成熟应用有韩国电信，Rackspace的Cloudfiles。总之OpenStack离公有云还有很长一段路要走。国内的小公司，对于OpenStack的应用，仅停留在界面定制、部署工具、周边开发，他们依赖二级运营商，比如上海电信。Intel，HP这样的大公司是真正在捐献重要的代码，为性能做评测。国内确实还是有拿OpenStack来做公有云的，但是必定高度不足，比如常州公云: pubyun.com和上海VAS Cloud：try.cloud-open.cn。前者不知道为谁提供服务，或者常州政府之类？后者是为上海电信提供服务的。在云存储方面，EMC公司的Atomos更牛逼。 云计算硬件方面：OpenCompute 听说硬件方面各大大公司想一统江湖啊，要给云计算下的服务器硬件配置做一个可整机定制。Facebook宣布了OpenCompute项目，事无巨细地公开了自己的数据中心和服务器软硬件架构，甚至公布了服务器主板和数据中心配电系统等的硬件规格，兵提供了机械图纸，公布了如何改进数据中心能效的方法。也许不久的将来各大硬件生产商的产品都互相杂合在一起了。","title":"结合OpenStack 谈谈云计算那点事"},{"content":"手机日新月异的的发展，无论是果粉们日夜期待的新一代iPhone，还是三星的Galaxy系列各种让人眼花缭乱的新款。都还是不能摆脱必须有一定体积的手机屏幕以及机身的空间。虽然说三星的抄袭某公司很厉害，但是今天这款概念机会不会让你眼前一亮？ 有没有想过哪天你的手机可以摆脱现在的板砖设计，变成一只笔，轻轻一拉屏幕出现了，屏幕隐藏在笔里面，不用时候就变回一支笔直接丢口袋就好了。这个笔形手机依赖于云计算，屏幕是一个6英寸的可弯曲显示屏，也有一个内置摄像头。 你可以使用一个支架，以便他们充分使用6英寸的屏幕。 这个笔形手机在侧面还有一个小显示屏，你可以通过他来控制设备，并有显示通知，信号，电池的作用。 但是看到这里大家有没有想到这个设计很像外展会时候送的礼品笔，难道X星公司灵感来源于中国的小广告？ via：Yankodesign 了解更多新酷炫设备，敬请关注@爱搞机 （二手科学家 供雷锋网专稿，转载请注明来自雷锋网及作者，并链回本页)","title":"三星概念机： 一支笔，一部手机"},{"content":"换个马甲来唬人。。。","title":"云计算就是N年前的网格计算。。。真够云的。。。"},{"content":"          一、建立信息化的运维管理平台系统 　　云计算数据中心的运维管理应从数据中心的日常监控入手，事件管理、变更管理、应急预案管理和日常维护管理等方面全方位地进行数据中心的日常监控。实现提前发现问题、消除隐患，首先要有完整的、全方位实时有效的监控系统，并着重监控数据的记录和技术分析。 　　数据中心的业务可以概括为：通过运行系统来向客户提供服务。没有信息系统的支撑来运行IT系统就如超市里仍然采用手工结账一样不能让顾客满意。信息化的数据中心运维管理平台系统包括如下方面： 　　机房环境基础设施监控管理系统 　　IT系统监控管理系统 　　IT服务管理系统   　　二、理清云计算数据中心的运维对象 　　数据中心的运维管理指的是与数据中心信息服务相关的管理工作的总称。云计算数据中心运维对象共可分成5类： 　　（1）机房环境基础设施部分。这里主要指为保障数据中心所管理设备正常运行所必需的网络通信、电力资源、环境资源等。这部分设备对于用户来说几乎是透明的，因为大多数用户基本并不会关注到数据中心的风火水电。但是，这类设备如发生意外，对依托于该基础设施的应用来说，却是致命的。 　　（2）在提供IT服务过程中所应用的各种设备，包括存储、服务器、网络设备、安全设备等硬件资源。这类设备在向用户提供IT服务过程中提供了计算、存储与通信等功能，是IT服务最直接的物理载体。 　　（3）系统与数据，包括操作系统、数据库、中间件、应用程序等软件资源；还有业务数据、配置文件、日志等各类数据。这类管理对象虽然不像前两类管理对象那样\"看得见，摸得着\"，但却是IT服务的逻辑载体。          （4）管理工具，包括了基础设施监控软件、监控软件、工作流管理平台、报表平台、短信平台等。这类管理对象是帮助管理主体更高效地管理数据中心内各种管理对象，并在管理活动中承担起部分管理功能的软硬件设施。通过这些工具，可以直观感受并考证到数据中心如何管理好与其直接相关的资源，从而间接地提升的可用性与可靠性。 　　（5）人员，包括了数据中心的技术人员、运维人员、管理人员以及提供服务的厂商人员。人员一方面作为管理的主体负责管理数据中心运维对象，另一方面也作为管理的对象，支持IT的运行。这类对象与其他运维对象不同，具有很强的主观能动性，其管理的好坏将直接影响到整个运维管理体系，而不仅仅是运维对象本身。","title":"运维管理平台 和 理清云计算数据中心的运维对象"},{"content":"                                                                          随着现代IT行业的高速发展，分布计算也提上了日程，就像我们从2G入3G时代一样来的那样迅猛，当你真是感受到时，真是万尘莫及。云计算时代到临了，以迅雷不及掩耳之势。哲学上说当旧的东西阻碍了新型事物的发展，那么当新事发展到一定水平，必然会引起革命，亦或是改革发展。面临着突如其来的第三次信息技术改革，即使ISP不着急，国家也会出来宏观调控，中国不会对网络经济尤其是新兴的云计算领路置之不理。云计算的实现是要依托理想的网络条件，简而概之就是良好的网速，所以ISP提高宽带接入和实现网络的优化升级已经刻不容缓，目前来说中国的网络在世界上已经是落后之际，网络用户占全球总网民的比例相当大，波动的经济下网费也久高不下，而网络服务也较其他发达国家望尘不及，这种高网费差服务已经持续了多年，也是联通，移动，电信等ISP取得了相当客观的收入，面临这当前的国际国内形式，令我们深感欣慰的是运行商们已经开始了积极的行动，在国家发改委的指导督促下已经开始了网费下调和网络优化，我们看到我们正想云计算时代迈进。       同时我觉得这个网络提速也应该统筹城乡，协调区域。虽然市场经济是用资本来调节的，但国家的宏观调控也应该需要得到体现，许多农村地区无线网络几Kb网速简直让我汗颜，而对外宣称我们的网络技术是多么的先进，的确在上海等地区的 无线网络已小有建树，但是那是代表中国吗？我们是社会主义国家，网络的优化刻不容缓，大势所趋。","title":"刻不容缓，大势所趋"},{"content":"在数据中心生命周期中，数据中心运维管理是数据中心生命周期中最后一个、也是历时最长的一个阶段。数据中心运维管理就是：为提供符合要求的信息系统服务，而对与该信息系统服务有关的数据中心各项管理对象进行系统的计划、组织、协调与控制，是信息系统服务有关各项管理工作的总称。数据中心运维管理主要肩负起以下重要目标：合规性、可用性、经济性、服务性等四大目标。 　　由于云计算的要求弹性、灵活快速扩展、降低运维成本、自动化资源监控、多租户环境等特性除基于ITIL的常规数据中心运维管理理念之外，以下运维管理方面的内容，也需要我们加以重点分析和关注。 　　一、理清云计算数据中心的运维对象 　　数据中心的运维管理指的是与数据中心信息服务相关的管理工作的总称。云计算数据中心运维对象共可分成5类： 　　（1） 机房环境基础设施部分。这里主要指为保障数据中心所管理设备正常运行所必需的网络通信、电力资源、环境资源等。这部分设备对于用户来说几乎是透明的，因为大多数用户基本并不会关注到数据中心的风火水电。但是，这类设备如发生意外，对依托于该基础设施的应用来说，却是致命的。 　　（2） 在提供IT服务过程中所应用的各种设备，包括存储、服务器、网络设备、安全设备等硬件资源。这类设备在向用户提供IT服务过程中提供了计算、存储与通信等功能，是IT服务最直接的物理载体。 　　（3） 系统与数据，包括操作系统、数据库、中间件、应用程序等软件资源；还有业务数据、配置文件、日志等各类数据。这类管理对象虽然不像前两类管理对象那样“看得见，摸得着”，但却是IT服务的逻辑载体。 （4） 管理工具，包括了基础设施监控软件、监控软件、工作流管理平台、报表平台、短信平台等。这类管理对象是帮助管理主体更高效地管理数据中心内各种管理对象，并在管理活动中承担起部分管理功能的软硬件设施。通过这些工具，可以直观感受并考证到数据中心如何管理好与其直接相关的资源，从而间接地提升的可用性与可靠性。 　　（5） 人员，包括了数据中心的技术人员、运维人员、管理人员以及提供服务的厂商人员。人员一方面作为管理的主体负责管理数据中心运维对象，另一方面也作为管理的对象，支持IT的运行。这类对象与其他运维对象不同，具有很强的主观能动性，其管理的好坏将直接影响到整个运维管理体系，而不仅仅是运维对象本身。 　　二、定义各运维对象的运维内容 　　云计算数据中心资源管理所涵盖的范围很广，包括环境管理、网络管理、设备管理、软件管理、存储介质管理、防病毒管理、应用管理、日常操作管理、用户密码管理和员工管理等。要对每一个管理对象的日常维护工作内容有一个明确的定义，定义操作内容、维护频度、对应的责任人，要做到有章可循，责任人可追踪。实现对整个系统的全生命周期的追踪管理。 　　三、建立信息化的运维管理平台系统 　　云计算数据中心的运维管理应从数据中心的日常监控入手，事件管理、变更管理、应急预案管理和日常维护管理等方面全方位地进行数据中心的日常监控。实现提前发现问题、消除隐患，首先要有完整的、全方位实时有效的监控系统，并着重监控数据的记录和技术分析。数据中心的业务可以概括为：通过运行系统来向客户提供服务。没有信息系统的支撑来运行IT系统就如超市里仍然采用手工结账一样不能让顾客满意。信息化的数据中心运维管理平台系统包括如下方面： 　　机房环境基础设施监控管理系统 　　IT系统监控管理系统 　　IT服务管理系统 　　四、定制化管理 　　灵活性、个性化是云服务的显著特点，用户对应用系统有着千差万别的个性化需求，云服务提供商在保证共性需求的基础上，需满足用户个性化定制需求，向用户提供灵活、个性化配置的云服务系统。云服务提供商要提供按需变化的服务，就要有反应敏捷的人、流程、工具来适应业务变化的需要。云服务下的运维需要更多的灵活性和可伸缩性，可以根据客户、合作伙伴的需要，快速调整资源、服务和基础设施。 　　五、自动化管理 　　IT服务根据负载变化可以自动调整所需资源，以求在及时响应和节约成本上取得平衡：同时，计算能力规模越来越大，人工管理资源也越来越不实际。这些新特性对IT管理自动化能力提出了更高要求，企业往往希望在不失灵活性的前提下可以得到更高程度的自动化。 　　为此，云计算数据中心需要部署自动化管理平台，集中管理虚拟化和云计算平台、提供自定义规则定制功能的自动化解决方案，用户通过使用事件触发、数据监控触发等方式来自动化管理，节约人力同时提高响应速度。","title":"云计算数据中心需要关注运维管理"},{"content":"从物联网的定义及各类技术所起的作用来看，物联网的关键核心技术应该是无线传感器网络（WSN）技术，主要原因是：WSN技术贯穿物联网的全部三个层次，是其它层面技术的整合应用，对物联网的发展有提纲挈领的作用。WSN技术的发展，能为其它层面的技术提供更明确的方向。         以下是实现物联网的五大核心技术：         核心技术之感知层：         传感器技术、射频识别技术、二维码技术、微机电系统和GPS技术         1.传感器技术         传感技术同计算机技术与通信技术一起被称为信息技术的三大技术。从仿生学观点，如果把计算机看成处理和识别信息的“大脑”，把通信系统看成传递信息的“神经系统”的话，那么传感器就是“感觉器官”。微型无线传感技术以及以此组件的传感网是物联网感知层的重要技术手段。         2.射频识别（RFID）技术         射频识别（RadioFrequencyIdentification，简称RFID）是通过无线电信号识别特定目标并读写相关数据的无线通讯技术。在国内，RFID已经在身份证、电子收费系统和物流管理等领域有了广泛应用。         RFID技术市场应用成熟，标签成本低廉，但RFID一般不具备数据采集功能，多用来进行物品的甄别和属性的存储，且在金属和液体环境下应用受限，RFID技术属于物联网的信息采集层技术。 3.微机电系统（MEMS）         微机电系统是指利用大规模集成电路制造工艺，经过微米级加工，得到的集微型传感器、执行器以及信号处理和控制电路、接口电路、通信和电源于一体的微型机电系统。MEMS技术属于物联网的信息采集层技术。         4.GPS技术         GPS技术又称为全球定位系统，是具有海、陆、空全方位实时三维导航与定位能力的新一代卫星导航与定位系统。GPS作为移动感知技术，是物联网延伸到移动物体采集移动物体信息的重要技术，更是物流智能化、智能交通的重要技术。              核心技术之信息汇聚层：传感网自组网技术、局域网技术及广域网技术         1.无线传感器网络（WSN）技术         无线传感器网络（WirelessSensorNetwork，简称WSN）的基本功能是将一系列空间分散的传感器单元通过自组织的无线网络进行连接，从而将各自采集的数据通过无线网络进行传输汇总，以实现对空间分散范围内的物理或环境状况的协作监控，并根据这些信息进行相应的分析和处理。         WSN技术贯穿物联网的三个层面，是结合了计算、通信、传感器三项技术的一门新兴技术，具有较大范围、低成本、高密度、灵活布设、实时采集、全天候工作的优势，且对物联网其他产业具有显著带动作用。         2.Wi-Fi Wi-Fi（WirelessFidelity，无线保真技术）是一种基于接入点（AccessPoint）的无线网络结构，目前已有一定规模的布设，在部分应用中与传感器相结合。         Wi-Fi技术属于物联网的信息汇总层技术。         3.GPRS         GPRS（GeneralPacketRadioService，通用分组无线服务）是一种基于GSM移动通信网络的数据服务技术。GPRS技术可以充分利用现有GSM网络，目前在很多领域有广泛应用，在物联网领域也有部分应用。GPRS技术属于物联网的信息汇总层技术。           核心技术之传输层：通信网、互联网、3G网络、GPRS网络、广电网络、NGB         1.通信网         通信网是一种使用交换设备、传输设备，将地理上分散用户终端设备互连起来实现通信和信息交换的系统。通信最基本的形式是在点与点之间建立通信系统，但这不能称为通信网，只有将许多的通信系统（传输系统）通过交换系统按一定拓扑结构组合在一起才能称之为通信。也就是说，有了交换系统才能使某一地区内任意两个终端用户相互接续，才能组成通信网。         2.3G网络         3G是英文the3rdGeneration的缩写，指第三代移动通信技术。相对第一代模拟制式手机（1G）和第二代GSM、CDMA等数字手机，第三代手机（3G）是指将无线通信与国际互联网等多媒体通信结合的新一代移动通信系统。 3.GPRS网络         这是一种基于GSM系统的无线分组交换技术，提供端到端的、广域的无线IP连接。通俗的讲，GPRS是一项高速数据处理的科技，方法是以“分组”的形式传送资料到用户手上。虽然GPRS是作为现有GSM网络向第三代移动通信演变的过渡技术，但是它在许多方面都具有显著的优势。         4.广电网络         广电网通常是各地有线电视网络公司（台）负责运营的，通过HFC（光纤+同轴电缆混合网）网向用户提供宽带服务及电视服务网络，宽带可通过CableModem连接到计算机，理论到户最高速率38M，实际速度要视网络情况而定。         5.NGB广域网络         中国下一代广播电视网（NGB）是以有线电视数字化和移动多媒体广播（CMMB）的成果为基础，以自主创新的“高性能带宽信息网”核心技术为支撑，构建适合我国国情的、三网融合的、有线无线相结合的、全程全网的下一代广播电视网络。           核心技术之运营层：专家系统、云计算、API接口、客户管理、GIS、ERP         1.企业资源计划（ERP）         ERP是指建立在信息技术基础上，以系统化的管理思想，为企业决策层及员工提供决策运行手段的管理平台。ERP技术属于物联网的信息处理层技术。         2.专家系统（ExperSystem） 专家系统是一个含有大量的某个领域专家水平的知识与经验，能够利用人类专家的知识和经验来处理该领域问题的智能计算机程序系统。         属于信息处理层技术。         3.云计算         云计算概念间由Google提出的，这是一个美丽的网络应用模式，是指IT基础设施的交付和使用，通过网络以按需、易扩展的方式获得所需的资源。          核心技术之应用层：垂直行业应用、系统集成、资源打包         应用层主要是根据行业特点，借助互联网技术手段，开发各类的行业应用解决方案，将物联网的优势与行业的生产经营、信息化管理、组织调度结合起来，形成各类的物联网解决方案，构建智能化的行业应用。         如交通行业，涉及的就是智能交通技术；电力行业采用的是智能电网技术；物流行业采用的智慧物流技术等。行业的应用还要更多涉及系统集成技术、资源打包技术等。","title":"实现物联网产业的五大核心技术"},{"content":"1、我理解的云计算  （1）从平台/服务提供商的角度，可能是SaaS, PaaS, IaaS。要考虑平台架构、负载均衡、备份、灾难恢复、7x24小时在线、风格一致的API等等。如果是SaaS，可能还会集成用户、内容管理、支付等通用模块。 （2）从开发者的角度，不需要担心硬件故障、硬件扩展、数据备份、负载均衡等等底层问题。只需要思考产品和用户体验；知道Cloud服务商给出的定价的含义：各种流量的计价、存储计价、计算计价等等；能够实时变更CPU数目、带宽等等。 （3）从普通用户的角度，不管某产品的背后是一台服务器，还是一个云计算平台，只需要对方能够提供7x24小时服务，不会因为各种名义而停机，不会发生各种数据回滚……。 2、Metro Studio Syncfusion的Metro Studio推出第二个版本了，更加牛叉：新版本不仅仅用XAML制作图标，还制作了字符，和中文有关的包括“幼圆”这个字体库： 做与不做：有人做了，而你/我没做，这就是关键。和创业一样，有些想法/灵感，人家就是想出来了；有些产品的功能，你觉得就那样，谁不会做，关键还是人家做出来了，并坚持下去，把它做成了产品。 3、关于IM的一点点想法 可以设定用户分组，经双方同意，两人对话时默认进入视频模式（可以有声音开关），将头像替换为实时视频。 关键点：设定某些用户组；双方同意；默认关闭声音。  ","title":"Random Thoughts #10 2012：云计算/Metro Studio/IM"},{"content":"1.云计算特点：超大规模，可扩展，按需服务，高可靠性。 2.java与与云计算：java可以使云计算更简单。 3.SUN公司描述JAVA的11个定语：简单的、面向对象、分布式、解释型、可靠、安全、与平台无关、可移植、高性能、多线程、动态； 4. | |--分布式的--服务器（记录所有属性）和客户端（做效果，场景的变化） |--并行计算，网格技术 5.分布式：分布式计算是一门计算机科学，它研究如何把一个需要非常巨大的计算能力才能解决的问题分成许多小的部分，然后把这些部分分配给许多计算机进行处理，最后把这些计算结果综合起来得到最终的结果。   socket的编程：网络进行客户端和服务端进行交换   解决各个机器在同一时间内进行计算，   通过java的多线程---并行技术 pvm 6.网格计算:通过利用大量异构计算机（通常为桌面）的未用资源（CPU周期和磁盘存储），将其作为嵌入在分布式电信基础设施中的一个虚拟的计算机集群，为解决大规模的计算问题提供了一个模型。网格计算的焦点放在支持跨管理域计算的能力，这使它与传统的计算机集群或传统的分布式计算相区别。 网格计算的设计目标是：解决对于任何单一的超级计算机来说，仍然大得难以解决的问题，并同时保持解决多个较小的问题的灵活性。这样，网格计算就提供了一个多用户环境。它的第二个目标就是：更好的利用可用计算力，迎合大型的计算练习的断断续续的需求。 7.虚拟 8、gfs：缓冲了好多网页，每个一个周期（4s 20万网页）进行更新、数据储存的数据在GFS中 9、数据处理（data processing）----》储存（manager）----》数据库（database）----》服务 10、  分布式基础设施：GFS，Chubby和Protocol Buffer。 分布式大规模数据处理：MapReduce和Sawzall。 分布式数据库技术：BigTable和数据库Sharding。 数据中心优化技术：数据中心高温化，12V电池和服务器整合。 11、GFS 由于搜索引擎需要处理海量的数据，所以Google的两位创始人Larry Page和Sergey Brin在创业初期设计一套名为“BigFiles”的文件系统，而GFS（全称为“Google File System”）这套分布式文件系统则是“BigFiles”的延续。 12、BigTable 由于在Google的数据中心存储PB级以上的非关系型数据时候，比如网页和地理数据等，为了更好地存储和利用这些数据，Google开发了一套数据库系统，名为“BigTable”。BigTable不是一个关系型的数据库，它也不支持关联（join）等高级SQL操作，取而代之的是多级映射的数据结构，并是一种面向大规模处理、容错性强的自我管理系统，拥有TB级的内存和PB级的存储能力，使用结构化的文件来存储数据，并每秒可以处理数百万的读写操作。 什么是多级映射的数据结构呢？就是一个稀疏的，多维的，排序的Map，每个Cell由行关键字，列关键字和时间戳三维定位．Cell的内容是一个不解释的字符串，比如下表存储每个网站的内容与被其他网站的反向连接的文本。 反向的URL com.cnn.www是这行的关键字；contents列存储网页内容，每个内容有一个时间戳，因为有两个反向连接，所以archor的Column Family有两列：anchor: cnnsi.com和anchhor:my.look.ca。Column Family这个概念，使得表可以轻松地横向扩展。下面是它具体的数据模型图： 在结构上，首先，BigTable基于GFS分布式文件系统和Chubby分布式锁服务。其次BigTable也分为两部分：其一是Master节点，用来处理元数据相关的操作并支持负载均衡。其二是tablet节点，主要用于存储数据库的分片tablet，并提供相应的数据访问，同时tablet是基于名为SSTable的格式，对压缩有很好的支持。 大表： url  content time 数据量大：没法放在数据库， 由于数据库最终还是放在文件里：google把大表放在文件。把大表分为很多块（64M），每64M存放多份，放在不同位置。 大文件和大数据块：数据文件的大小普遍在GB级别，而且其每个数据块默认大小为64MB，这样做的好处是减少了元数据的大小，能使Master节点能够非常方便地将元数据放置在内存中以提升访问效率。 存入后如何访问：MapReduce：分布在机器上，怎么查--->怎么保证并行查询 Map映射：电话本一个对一个； reduce：减少简化 其实存放的是网站关键字：出现的几次，在哪个网页上，根据关键字排序 13、物联网，构建智慧的地球其英文名称是“The Internet of things”。   智能设备和不智能设备都可以把它练到互联网上   感知中国，智慧地球，美国提高国家战略 14、java和物联网 标识技术：IP 白菜（标示），物联网技术是通过射频识别（RFID），现在用于防盗，我们加入数字可以标示是什么物体，物联网的统一标示符，IPV6可能不可用，域名不够用啦，我们想象将来利用类似于DNA标示，类似于生物DNA的信息。 通信技术： 组网技术： 软件算法： 硬件技术： java可以干什么：除了硬件不擅长，其他都可以 15、零售业：物流业：不用向生产商下订单，直接向物品发订单；智能交通：汽车之间，与道路，与监控设备，自动驾驶，食品药品 16、海量的移动互联应用：     IT技术革命80--90年pc机取代大的服务器(微软,每一个桌面都有计算机)       90--2000年互联网(google,baidu)       2010移动互联(苹果) 17、制约性：网络流量，速率，存储， 18.《寻隐者不遇》贾岛 松 下 问 童 子， 言 师 采 药 去。 只 在 此 山 中， 云 深 不 知 处。","title":"云计算"},{"content":"       作者：Infosys管理咨询服务事业部数字变革实践助理 Nisrine Kaderbhay       最近，我遇到了一家领先的技术企业的业务主管。他非常了解社交媒体的无形价值，但却断然拒绝采用社交媒体。他的态度是：\"我们没有使用社交媒体，因为有人可能会因此说我们的坏话。我们的重点是如何赚钱！\"       我回答说：\"无论你是否使用社交媒体，你的目标市场（18至45岁的消费者）无疑正在使用社交媒体。他们已经开始在说你们的坏话了，而且还向朋友们宣传。更重要的是，他们就是你们收入的来源！\"         虽然社交媒体的使用已经出现爆炸式激增，但是哪怕只是提一下社交媒体这个词都会让许多企业心烦意乱。他们害怕失去对敏感信息、投资回报率可测性以及战略的控制，此外还存在法律问题等方面的忧虑。我相信，这种阻力的背后隐含着三个基本的原因。       ·  忽视我们这一代的人----Y一代或千禧一代（在80年代和90年代初出生的人）。大多数企业领导人都出生在80年代以前。他们将社交媒体视为年轻人的东西，无法真正的了解它，或是拒绝去考虑它。然而，Y一代群体的人口要大于婴儿潮时期出生的人，而且千禧一代中有94%的人都在使用社交媒体。这一点是不能被忽视的。         随着我们逐渐成为未来的核心市场，我们以不同的方式进行通信，通过媒体交流。我们可以很容易地接受新技术，这种能力是与生俱来的。我们喜欢通过社交媒体平台发送信息，而不是打电话；通过手机观看喜爱的节目；下载音乐，而不是收听广播电台；喜欢在网上看新闻，或通过虚拟工具转发新闻。          ·  恐惧因素----对失败的恐惧：对生产力的威胁、智力资本的损失、隐私问题、管理权力的侵蚀、合规性以及其他问题，往往会阻碍企业使用社交媒体，甚至会让企业禁止使用社交媒体。所有这一切导致了企业的不作为，当然这也是一种选择，但做出这种选择的企业会处于劣势。         虽然社交媒体会涉及到相关的法律问题，但有充足的数据统计表明，其好处远远超过这些问题带来的困扰。克服这些困扰以及法律问题的关键，是首先制定一个健全社交媒体政策。例如，可以根据最佳实践制定政策，如鼓励企业及其员工之间的协作，鼓励反馈，强调提高生产力，等等。          ·  内部障碍----除了诸如失去控制这样的一般性恐惧之外，技术实施的难度，安全方面的挑战，以及对员工滥用社交媒体的担忧，也都阻碍了企业使用社交媒体。所有这些问题最终归结到钱上----成本效益分析，即结果存在不确定性。这是一条合理的商业规则。然而，当社交媒体集成了云计算软件之后，企业将看到其在安全和实施成本方面的共同优势。需要再次强调的是，与员工的合作和与客户的合作同样重要。         社交媒体的恐惧因素是真实的，但却是可控的。我的建议是充分利用社交媒体的普及，使其成为有用信息的可靠来源，而这反过来将可以帮助企业建立一个更强大的社区。从现在开始，找到符合你的业务的战略会经历各种尝试和失败----不存在放之四海而皆准的方法。也许可以从重新审视你的理由开始，了解同行对社交媒体有何反应。他们是否在使用社交媒体？如果是，他们是怎么使用社交媒体的？找出他们是如何通过使用社交媒体取得成功的。         与那些在自己房间里玩智能手机Y一代进行交流----你的儿子或女儿、侄女或侄子。建立明确、灵活的政策，与客户和潜在客户进行更紧密的沟通，同时尽量减少公司的风险。       随着社交媒体的发展，许多证据已经表明，互联网蕴藏着巨大的营销机遇。在下一篇博客中，我将讨论社交媒体在哪些方面超越了单纯广告，以及如何说服你的老板为社交媒体关系投入巨资。         同时，我也想了解你在社交媒体方面的经验。你的公司是否在使用社交媒体？你是否知道或遇到过这些恐惧因素？希望能了解你的想法。","title":"企业为何惧怕社交媒体？"},{"content":"作者：趋势科技诈骗分析师Maela Angeles 即时转播充斥钓鱼网站；回味开幕式的影片中网络钓鱼虎视眈眈；恶意应用下载后帐单破纪录…伦敦奥运相关威胁层出不穷 期待已久的 2012 年伦敦奥运正式揭开序幕。除了一些兜售门票的诈骗网站与贩售伪造票卡给日本消费者的恶意网站外，趋势科技还发现很多会趁机伪装称提供在线视频的网站。下面摘录一些供大家参考： 奥运实况转播？19 个有毒网址! http://olympicsopeningceremony2012live.{BLOCKED}d.com http://olympicgames2012live.{BLOCKED}d.com http://olympics-2012-live-stream.tumblr.com http://olypiccoverage2012.{BLOCKED}d.com http://{BLOCKED}12openinglivestream.{BLOCKED}d.com http://{BLOCKED}livestream.epl-schedule.com http://{BLOCKED}ingceremony2012live.blogspot.com http://{BLOCKED}ndonolympics2012liveonline.{BLOCKED}g.com http://{BLOCKED}12olympicsonline.{BLOCKED}log.com http://{BLOCKED}12olympicsliveonline.{BLOCKED}o.com http://{BLOCKED}ndonolympicsliveonline.tumblr.com http://{BLOCKED}12olympicsliveonline.{BLOCKED}w.com http://{BLOCKED}12olympicsliveonline.{BLOCKED}b.com http://{BLOCKED}12olympicsliveonline.{BLOCKED}ner.com http://{BLOCKED}ympics2012livestreamfree.{BLOCKED}d.com http://{BLOCKED}donolympics2012liveonline.{BLOCKED}g.com http://{BLOCKED}12olympicsliveonline.{BLOCKED}b.com http://{BLOCKED}peningceremony2012.{BLOCKED}b.com http://{BLOCKED}urnal.co.uk 搜索”奥运”就能找到找到便宜奥运门票？想再度回味开幕式，却发现网络钓鱼正在守株待兔 当用户搜索“watch london olympics opening ceremony live”(观赏伦敦奥运开幕式实况转播)、“watchlondon olympics online”(线上观赏伦敦奥运)、“watch london olympics 2012 live”(观赏 2012 伦敦奥运实况转播) 等关键词时，上文列出的网站会出现在搜索结果的最前端，因为黑客使用了一种黑帽搜索引擎优化技术（简称 BHSEO）。     搜索“watch london olympics online”(线上观赏伦敦奥运)当新病毒就在幕后虎视眈眈 趋势科技在分析时发现，上述有些网站会将用户重定向到假冒的 2012 年伦敦奥运实况转播网站，网站上还提供了一些链接，可以购买便宜的（也就是假冒的）门票。     山寨网站提供便宜（实际就是假冒）的奥运门票购买链接 还有一些在线视频网站，则会将您重定向到一个要求输入电子邮件地址的恶意网站上。网络罪犯会借此收集用户的电子邮件地址，并用于发送垃圾邮件。     一些在线视频网站会将用户重定向到另一个要求输入电子邮件地址的恶意网站，网路罪犯通过这种方式收集用户邮件地址，并用于发送垃圾邮件     搜索伦敦奥运相关的应用，代价昂贵 此外趋势科技也发现一些假冒Google Play商店的恶意网站。这些网站通常使用俄文，并且提供了一个搜索框。当用户搜索与伦敦奥运有关的手机应用时，会看到一个名为 London2012-Official game 的恶意程序。该网站还提供了一个二维码和下载按钮。如果用户不够小心，一旦点击这个下载按钮，就会被重定向到一个专门传播恶意软件 ANDROIDOS_SMSBOXER 变种的网站去。该恶意应用会偷偷在后台给增值服务商发送短信，产生高额电话费。     当用户搜索与伦敦奥运相关的应用时，会看到一个名为 London2012-Official game 的恶意程序     在同一个假冒的 Google Play 商店中，趋势科技还发现另一个恶意程序，叫做“TheDark Knight Rises mobile game”(《黑暗骑士：黎明升起》手机游戏)。 趋势科技强烈建议用户，如果要下载与伦敦奥运有关的程序，应该去官方的Google Play 商店，并且只通过合法网站观看在线视频。 趋势科技的PC-Cillin云安全软件用户已经可以享受到趋势科技云计算安全技术提供的保护，可拦截上述各项恶意 URL 与恶意网站。请立刻免费下载试用！     PC-cillin2012 云计算安全软件可以自动扫描 Facebook 涂鸦墙的内容，并将于奥运有关的钓鱼网址用红色显示，提醒用户注意   @原文来源:More London Olympics-Related Threats  ","title":"下载奥运相关手机程序，当心账单暴增"},{"content":"最近，有不少企业的IT部门纷纷把虚拟化引进了其现有的计算环境中。整合服务器、模仿生产环境、虚拟化测试网络、安全化企业网络、增加灾备选项等等，所有这些都只是使用了虚拟化的应用而已。有些企业还用各种系统管理解决方案所提供的自动化对其IT设施进行了高度虚拟化。我认为很多IT专业人士已经认识到了虚拟化所带来的好处，包括更高效地利用服务器，通过减少物理碳足迹从而节约成本等等。如今我们正在进入云时代，于是问题就成了“虚拟化和私有云一样吗?”或者“我们已经拥有了高度虚拟化的计算资源，还需要私有云吗?”对这些问题的回答一般总是从“你需要解决什么样的业务问题?”开始的。然后评估究竟私有云解决方案才可以解决这一问题呢，还是说虚拟化就已足够?当然这里是假定了我们对什么是虚拟化和什么事私有云有很清晰的理解而言。而问题的关键在于，虚拟化和云计算并非一回事。它们要解决的是不同维度的IT问题，而且对企业会产生不同层面的影响，导致不同的发展前景。 　　虚拟化 　　简要言之，在IT环境中，虚拟化是要“隔离”计算资源，如此一来，某个层上的一个对象(如一个应用，一个任务，一个组件)就可以不考虑该层之下的其他变化而独立操作。对虚拟化做详尽的探讨超出了本文的范围。然而，还是让我们解释一些术语，虚拟化和“隔离”常常因为某些特殊原因而被选用，其实在“虚拟化”和“仿真”、“隔离”和“重定向”之间是存在技术差异的。虚拟化隔离了各种计算资源，因此也就提供了重新分配与整合被隔离资源的机会，以便更好、更高效地利用这些资源。 　　云计算 　　而另一方面，云计算则是一种让各种资源按需取用的能力。一般而言，我们指望从云计算获得什么，有很多种答案。而美国国家标准与技术研究院(NIST)给出的云计算定义概括出了基本特征、如何交付，以及何种部署模式才算得上是云计算等等。我则进一步简化了这一定义，提供了一种更直接、更简单的方法来描述云计算，下面就是我用5-3-2原理对云计算所做的图说。 　　云计算的本质源于“服务”。在云计算的语境中，一个服务意味着一种可按需取用的状态。所以SaaS就意味着软件，例如某个应用程序，可以按需取用，关注点在于其内部的可用功能而不是应用之外的东西。PaaS提供的是一种按需取用的正常运行环境，因此问题就成了把什么样的按需应用功能组合部署到这一环境中去。由于正常运行环境是可以按需取用的，所以一个部署到其中的应用也可以在按需取用的状态下运行。也就是说，这些部署到PaaS环境中的应用是可以按需交付的，结果就和SaaS一样。再说到IaaS，它指的是可以按需取用、按需预配置的基础设施。对IT专业人士来说，在运营层面预配置基础设施等同于部署服务器。而在云计算环境中，所有服务器都已虚拟化，而且是以虚拟机的形式部署的，所以IaaS最终就成了按需部署虚拟机的能力。 　　“按需取用”并非随意使用的一个词。这个词语强烈地暗示着云计算的五大基本特征。按需取用意味着高可获得性和总是就绪的状态，因为它必须是对每个SLA而言是随时可用，随时就绪的。按需取用主张的是标准化、自动化、优化和编排必须就位，整体而言则呈现为资源池和弹性。按需取用意味着必须有审计和度量，也就是分析，所以容量可以进行相应的规划。这也就是为什么基于消费的计费或使用后付费模式被包括在了云计算的基本特征内的原因。 　　云计算和虚拟化的明显差异 　　如上所述，要搞清楚虚拟化和私有云之间的本质差异，其实不难。很显然，虚拟化和云计算截然相反，它不是建立在5-3-2原理之上的。例如自服务模式就不是虚拟化的基本构件，但是对云计算来说却是必不可少的。有人肯定会反驳说，某些虚拟化解决方案是包含了自服务组件的。但问题是，自服务对于虚拟化来说既不是必要条件，也不是充分条件。而在云计算中，自服务却是一个至关重要的概念，对用户来说必须是任意时刻都可以获得的。而且，为了减少长期培训，支持所有服务等级，自服务显然是一种高效机制。长期而言，它是加速云计算解决方案ROI，使其可持续的一个至关重要的因素。 　　虚拟化是虚拟机的核心，它源于基础设施的管理、运营及部署的灵活性。虚拟化指的是整合服务器、管理虚拟机、精简桌面等等的能力。 　　与此同时，云则是和“服务”相关的，而“服务”是和云就绪以及对市场机会的反应相关的。云关注的是如何走向市场。它重视的是怎么让一个被申请的企业核心业务应用可以按需取用，而不仅仅是为了部署一个虚拟机。云感兴趣的不仅是虚拟机的运营，而且要洞察在虚拟机上运行的目标应用。 　　因此说，虚拟化绝不是云计算。而云计算则远远超出了虚拟化的范畴。所以我们会在下一部分中探讨私有云如何交付IT即服务。 ","title":"云计算与虚拟化到底有何不同"},{"content":"众说周知Amazon EC2是一个公共的云计算平台,属于IaaS(基础设施即服务)这类. 现在有一款开源的项目Eucalyptus(Elastic Utility Computing Architecture for Linking Your Programs To Useful Systems),同样实现了Amazon EC2的功能和接口,由于其开源性,注定了搭建一个私有的云计算平台成为可能. 更方便的是Ubuntu9.10服务器版已经集成了Eucalyptus这个开源软件,使的搭建企业私有的云计算平台变得方便而简单. 下面我们将一步步来搭建这个私有的云计算平台. 一 相关资源 1) 至少准备两台机器, 当然我这里是用虚拟机软件(Sun VirtualBox)来虚拟出两台实际的机器 (如果你也采用Sun VirtualBox,有些注意事项,可以参见后面的附录一) 2) 底层操作系统: Ubuntu9.10 服务器版 (http://www.ubuntu.com/cloud) 3) 云服务环境 : Eucalyptus , ( Ubuntu9.10 服务器版 内置) http://eucalyptus.com/ 4) Eucalyptus 命令行客户端(Euca2ools) 5) Eucalyptus客户端: Elastic Fox ,这是一个firefox插件 :http://developer.amazonwebservices.com/connect/entry.jspa?externalID=609 ————————————————————————– 二 云计算服务的搭建(使用Ubuntu自带的向导,十分简单的哦) 1) 一台机器, 作为Cluster(Front End) , 命名为: ubuntu-cluster , 它包含了如下部分 Cloud Controller (clc)  Cluster Controller (cc)  Walrus (the S3-like storage service)  Storage Controller (sc) 2) 至少一台机器作为Node, 命名为: ubuntu-node1,它包含了如下部分 Node Controller (nc) 3) 在作为Cluster的机器上 ,安装基本系统: Ubuntu9.10 服务器版 1.安装引导时,要选择 “Install Ubuntu Enterprise Cloud”  2. 安装过程中,如果提示”Cluster” 还是”Node”,一定要选择Cluster  3.安装过程中,提示”Configure postfix” 时 选择 internetSite 4. 安装过程中,提示”Name your cluster” 时 ,请取一个合适的名字,比如我取之为: cluster1  5. 安装过程中,提示”a list of available IP addresses on your network”, 一定要选择一个可用的公共IP段. 4) 在作为Node的机器上 ,也安装基本系统: Ubuntu9.10 服务器版 1.安装引导时,要选择 “Install Ubuntu Enterprise Cloud”  2. 安装过程中,如果提示”Cluster” 还是”Node”,一定要选择Node, (如果Cluster正在运行,这一步可能不会出现,自动会选择Node  3.安装完一个节点后,,后续的节点可以采用克隆方法,参见后面的 附录二 5) 在Cloud Controller(位于ubuntu-cluster)上注册所有的Node机器: 在ubuntu-cluster上执行: sudo euca_conf –no-rsync –discover-nodes 至此,一个私有的云计算平台的服务端已经搭建好了,下面就开始说如何管理了,很简单吧! 三 云计算平台管理之命令行工具(Euca2ools) 1)在 https://YourIP:8443 中注册个人信息然后登录下载 证书 euca2-yourname-x509 .zip 2) 在客户端机器上执行 $ mkdir ~/.euca  $ cd ~/.euca  $ unzip euca2-yourname-x509 .zip  $ chmod 0700 ~/.euca  $ chmod 0600 ~/.euca/* 3) 在客户端机器上执行, 安裝 Euca2ools 和 EC2-API-Tools . ~/.euca/eucarc  echo “[ -r ~/.euca/eucarc ] && . ~/.euca/eucarc” >> ~/.bashrc  sudo apt-get install euca2ools  sudo apt-get install ec2-api-tools  sudo reboot 4)在客户端机器,使用 Euca2ools 上传 Kernel / Ramdisk / FS Image (使用者可注册 Image，但只有管理者才可注册 kernel/ramdisks) 1. 目前 Eucalyptus 系統上没有 Kernel、Ramdisk 和 FS Image，所以我們使用官方提供的 Image (上传需要用到三个指令) euca-bundle-image – 打包好將要上传的档案  euca-upload-bundle – 上传到 Eucalyptus  euca-register – 注册上传的档案 2. 上传Kernel,如(以我客户端机器的vmlinuz为例): euca-bundle-image -i /boot/vmlinuz-2.6.31-14-generic-pae –kernel true  euca-upload-bundle -b kernel -m /tmp/vmlinuz-2.6.31-14-generic-pae.manifest.xml  euca-register kernel/vmlinuz-2.6.31-14-generic-pae.manifest.xml 3.上传 Ramdisk, 如(以我客户端机器的initrd.img为例) euca-bundle-image -i /boot/initrd.img-2.6.31-14-generic-pae –ramdisk true  euca-upload-bundle -b ramdisks -m /tmp/initrd.img-2.6.31-14-generic-pae.manifest.xml euca-register ramdisks/initrd.img-2.6.31-14-generic-pae.manifest.xml 4. 查看已上传到档案: 方法一: https://YourIP:8443/#images 方法二: euca-describe-images 5. 根据查看的结果,上传FS Images:(分配 Kernel 和 Ramdisks 給 VMs 有三种方法,见附录三)  如(以我从Ubuntu官网上下载的Images:karmic-server-uec-i386.tar.gz为例 ): tar zxvf karmic-server-uec-i386.tar.gz  euca-bundle-image -i karmic-server-uec-i386.img –kernel eki-977213C6 –ramdisk eri-0CBA157D  euca-upload-bundle -b images -m /tmp/karmic-server-uec-i386.img.manifest.xml  euca-register images/karmic-server-uec-i386.img.manifest.xml 5) 申請 key pair，以便 ssh 登入 instance ec2-add-keypair mykey >mykey.private  chmod 0600 mykey.private 6) 在客户端机器,开启虚拟机. 1.查看 euca-describe-images ,获得希望启动Image的emi 2.启动一个虚拟机: euca-run-instances -k mykey -n 1 <emi-XXXX> 3.查看这个虚拟机的基本信息,比如IP地址,和 此实例id euca-describe-instances 4.登录这个新启动的虚拟机 ssh -i mykey.private root@192.168.100.X 5.终止这个虚拟机实例 euca-describe-instances(获得instance-id)  euca-terminate-instances <instance-id> —————————————————————————————————- 附录一: 虚拟测试环境的搭建: 1.虚拟机软件: Sun VirtualBox 2.管理 -> 全局设定 -> 网络 中 选择 “Host-Only” 点编辑,然后选择 “DHCP服务器”, 禁用”启用服务器” 3建立两台虚拟机, Linux/Ubuntu ,网络选择Host-Only方式 4在宿主机器上,将可以联互联网的 网卡设置为 针对 Host-Only 网卡的共享 说明,这里之所以采用 , Host-Only + 通过宿主机器共享上网 ,而不采用Bridged的联网方式,是前者可以在离开网络支持的情况下, 依然可以保证虚拟机的IP在局部可用并且不变. 附录二: VirtualBox 系统克隆及其可能后续操作: 1) VirtualBox 的虚拟硬盘的克隆命令: VBoxManage clonevdi old.vdi new.vdi 2) Ubuntu 修改主机名: 1. 启用root用户: sudo passwd root  2. .以root用户身份登录  3. pico /etc/hosts : 修改对应的旧的主机名  4. pico /etc/hostname : 删除该文件的所有内容，添加新的主机名  5. 执行命令: hostname <新的主机名>  6. logout  7. 禁用root用户: sudo passwd -l root 3)如果找不到网卡,不妨,查看一下: ifconfig –a ,然后配置 /etc/network/interfaces ,然后重启网卡 附录三: 分配 Kernel 和 Ramdisks 給 VMs 有三种方法 1) 在 ‘ec2-bundle-image’ 步骤指定 ec2-bundle-image -i <path/to/my/>vmimage.img –kernel <eki-XXXXXXXX> –ramdisk <eri-XXXXXXXX> 2)在 ‘ec2-run-instances’ 步骤指定 ec2-run-instances <emi-XXXXXXXX> –kernel <eki-XXXXXXXX> –ramdisk <eri-XXXXXXXX> 3) 在 https://YourIP:8443 选择 ‘Configuration’ 标签，新增 <eki-xxxxxxxx> 和 <eri-xxxxxxxx> 作为预设的 kernel 和 ramdisk 附录四: 如何删除Image 1) 先取消注册 ec2-deregister <emi-XXXXXXXX> 2) 移除位于 bucke 的档案 ec2-delete-bundle -a $EC2_ACCESS_KEY -s $EC2_SECRET_KEY –url $S3_URL -b <bucket> -p <file prefix> 3) 移除 image 和 bucke (—clear) ec2-delete-bundle -a $EC2_ACCESS_KEY -s $EC2_SECRET_KEY –url $S3_URL -b <bucket> -p <file prefix> –clear 附录五: Euca2ools常用命令: euca-describe-availability-zones verbose 察看可用的资源 euca-describe-instances 察看目前正在執行的 虚拟机(VM) euca-bundle-image 打包好将要上传到档案 euca-upload-bundle 上传档案到 Eucalyptus euca-register 组成已经上传到档案 euca-describe-images 查看可用的 images CentOS6下安装基于Xen的Eucalyptus 2.0.3 Eucalyptus 官网 http://open.eucalyptus.com/downloads 手册 http://open.eucalyptus.com/wiki 服务器角色 Cloud controller(CLC)，控制调度云的资源，同时提供web界面以及兼容EC2的SOAP服务 Walrus，实现了基于桶的存储，同时提供兼容S3的SOAP服务以及REST接口 Cluster controller(CC)，实现以集群为单位的调度 Storage controller(SC)，基于块的存储控制器，EBS-style Node controller(NC)，虚拟节点，运行xen及虚拟机的机器 版本 CentOS 6 Minimal install Xen 4.1.1 NC服务器上面需要完全安装，其余服务器需要几个编译好的rpm，参考 http://blog.csdn.net/phoenixie/article/details/6885313 Eucalyptus 2.0.3，下载offline源码包, http://eucalyptussoftware.com/downloads/releases/eucalyptus-2.0.3-src-offline.tar.gz , 依赖的库 http://eucalyptussoftware.com/downloads/releases/eucalyptus-2.0.3-src-deps.tar.gz euca2ools 1.3.1, 使用fedora的，下载 http://eucalyptussoftware.com/downloads/releases/euca2ools-1.3.1-fedora-x86_64.tar.gz dhcpd 3.0.5, CC上需要安装, 使用旧版本rhel5的, eucalyptus 2.0.3对稍微高版本的ISC dhcpd支持有问题, 下载http://ftp.redhat.com/redhat/linux/enterprise/5Server/en/os/SRPMS/dhcp-3.0.5-29.el5_7.1.src.rpm 准备工作  1. 下载各个软件包  2. 除了NC以外的服务器安装CentOS 6 Minimal方式  3. NC服务器按照参考文档安装配置Xen环境，注意在Xen的内核配置里面添加一项 max_loop=256  4. 配置好所有机器的NTP，使它们时钟保持同步 安装过程  1. 创建 /etc/yum.repos.d/euca.repo  [plain] view plaincopy [euca]   name=Eucalyptus   baseurl=http://www.eucalyptussoftware.com/downloads/repo/eucalyptus/2.0.3/yum/centos/x86_64   gpgcheck=0    2. 通过yum安装必须的软件包 (所有机器上) [plain] view plaincopy yum -y install perl-Convert-ASN1.noarch scsi-target-utils httpd java-1.6.0-openjdk-devel ant ant-nodeps libvirt-devel curl-devel httpd-devel apr-devel openssl-devel libxml2 libxml2-devel gnutls gnutls-devel libgcrypt-devel zlib-devel perl-Convert-ASN1 perl-Crypt-OpenSSL-RSA perl-Crypt-OpenSSL-Random chkfontpath fuse-libs swig gcc make patch compat-expat1 compat-db43 lzo2 vblade m2crypto lvm2 rsync ntp vconfig groff rpm-build    3. 安装之前编译好的Xen的rpm包(给控制服务器，节点服务器已经装过xen的就不需要了) [plain] view plaincopy rpm -Uvh xen-licenses-*.x86_64.rpm xen-devel-*.x86_64.rpm xen-libs-*.x86_64.rpm     4. 安装dhcpd [plain] view plaincopy wget http://ftp.redhat.com/redhat/linux/enterprise/5Server/en/os/SRPMS/dhcp-3.0.5-29.el5_7.1.src.rpm        rpm -i dhcp-3.0.5-29.el5_7.1.src.rpm        cd ~/rpmbuild/SPECS/   rpmbuild -bb dhcp.spec  # 如果编译不过去，可能需要手动去掉-Werror编译选项        cd ~/rpmbuild/RPMS/x86_64/   rpm -Uvh dhcp-3.0.5-29.el6.1.x86_64.rpm # 如果已经装了dhcp，先手动删除掉原来的    5. 安装Eucalyptus的依赖软件(eucalyptus-2.0.3-src-deps.tar.gz) [plain] view plaincopy export EUCALYPTUS=/home/public/eucalyptus-2.0.3   export APACHE_INCLUDES=/usr/include/httpd/   export APR_INCLUDES=/usr/include/apr-1/   export AXIS2C_HOME=${EUCALYPTUS}/packages/axis2c-1.6.0      mkdir -p ${EUCALYPTUS}/packages/      tar xzf eucalyptus-2.0.3-src-deps.tar.gz   cd eucalyptus-src-deps      tar xzf axis2-1.4.tgz -C ${EUCALYPTUS}/packages/   cd ${EUCALYPTUS}/packages/   ln -sf axis2-1.4 axis2   cd -      tar xzf axis2c-src-1.6.0.tar.gz   cd axis2c-src-1.6.0   CFLAGS=\"-w\" ./configure --prefix=${AXIS2C_HOME} -with-apache2=${APACHE_INCLUDES} --with-apr=${APR_INCLUDES} --enable-multi-thread=no   make   make install   cd -   rm -rf axis2c-src-1.6.0      export LD_LIBRARY_PATH=${AXIS2C_HOME}/lib   tar xzf rampartc-src-1.3.0-0euca2.tar.gz   cd rampartc-src-1.3.0   ./configure --prefix=${AXIS2C_HOME} --enable-static=no --with-axis2=${AXIS2C_HOME}/include/axis2-1.6.0/   make   make install   rm -rf rampartc-src-1.3.0      cd ${EUCALYPTUS}/packages   ln -sf axis2c-1.6.0 axis2c   cd -   sed -i \"s;<\\!--phase name=\\\"Security\\\"/-->;<phase name=\\\"Security\\\"/>;g\" ${AXIS2C_HOME}/axis2.xml      cd ..   rm -rf eucalyptus-src-deps    6. 安装Eucalyptus (eucalyptus-2.0.3-src-offline.tar.gz) [plain] view plaincopy export EUCALYPTUS=/home/public/eucalyptus-2.0.3   export AXIS2_HOME=${EUCALYPTUS}/packages/axis2   export AXIS2C_HOME=${EUCALYPTUS}/packages/axis2c   export JAVA_HOME=\"/usr/lib/jvm/java-openjdk/\"   export JAVA=\"$JAVA_HOME/JRE/bin/java\"      tar xzf eucalyptus-2.0.3-src-offline.tar.gz   cd eucalyptus-2.0.3-src-offline   ./configure --with-axis2=${AXIS2_HOME} --with-axis2c=${AXIS2C_HOME} --enable-debug --prefix=${EUCALYPTUS}   make   make install   cd -   rm -rf eucalyptus-2.0.3-src-offline      cd /home/public/   ln -sf eucalyptus-2.0.3 eucalyptus      export EUCALYPTUS=/home/public/eucalyptus   ln -sf $EUCALYPTUS/etc/init.d/eucalyptus-cloud /etc/init.d/eucalyptus-cloud   ln -sf $EUCALYPTUS/etc/init.d/eucalyptus-cc /etc/init.d/eucalyptus-cc   ln -sf $EUCALYPTUS/etc/init.d/eucalyptus-nc /etc/init.d/eucalyptus-nc      chkconfig eucalyptus-cloud off   chkconfig eucalyptus-cc off   chkconfig eucalyptus-nc off    7. 安装工具(euca2ools-1.3.1-fedora-x86_64.tar.gz) [plain] view plaincopy tar xzf euca2ools-1.3.1-fedora-x86_64.tar.gz   cd euca2ools-1.3.1-fedora-x86_64      rpm -Uvh euca2ools-1.3.1-1.x86_64.rpm      cd -   rm -rf euca2ools-1.3.1-fedora-x86_64   配置  1. 创建一个专属用户  [plain] view plaincopy adduser eucalyptus    2. 初始化 [plain] view plaincopy export EUCALYPTUS=/home/public/eucalyptus   $EUCALYPTUS/usr/sbin/euca_conf \\    -d $EUCALYPTUS \\    --hypervisor xen \\    --instances /home/eucalyptus/instances \\    --user eucalyptus \\    --setup   # -d: Eucalyptus路径   # --hypervisor: 使用的hypervisor类型，可以是kvm或xen   # --instances: instance存储路径   # --user: 服务使用的用户   # --setup: 初始化      service eucalyptus-nc start   chkconfig eucalyptus-nc on    3. 编辑 /home/public/eucalyptus/etc/eucalyptus/eucalyptus.conf，按自己的需求修改，其中 VNET_BRIDGE 是xen要使用的bridge名字，其余的VNET_MODE等请参考配置文件的说明，里面写的很详细。  4. 复制eucalyptus安装目录到所有机器上，建立init.d的链接，添加service的服务，然后还需要运行一次初始化  5. 启动NC [plain] view plaincopy service eucalyptus-nc start # NC的Web service默认端口8775   chkconfig eucalyptus-nc on    6. 启动CC [plain] view plaincopy service eucalyptus-cc start # CC的Web service默认端口8774   chkconfig eucalyptus-cc on    7. 启动相关服务，不同的服务可以部署在不同机器上面 [plain] view plaincopy export EUCALYPTUS=/home/public/eucalyptus   $EUCALYPTUS/usr/sbin/euca_conf -d $EUCALYPTUS --enable cloud   $EUCALYPTUS/usr/sbin/euca_conf -d $EUCALYPTUS --enable walrus   $EUCALYPTUS/usr/sbin/euca_conf -d $EUCALYPTUS --enable sc      service eucalyptus-cloud start # 三个服务都通过这个脚本启动，http端口8080，https端口8443，Web service端口8773   chkconfig eucalyptus-cloud on    8. 注册服务 [plain] view plaincopy $EUCALYPTUS/usr/sbin/euca_conf --register-walrus $IP   $EUCALYPTUS/usr/sbin/euca_conf --register-cluster OurCloud $IP # 注册一个Cluster，名字叫OurCloud，默认端口8774   $EUCALYPTUS/usr/sbin/euca_conf --register-sc OurCloud $IP # 给Cluster添加一个SC    9. 注册节点 [plain] view plaincopy $EUCALYPTUS/usr/sbin/euca_conf --register-nodes $IP    10. 访问Cloud(CLC)所在IP的https://$IP:8443，用户名admin，密码admin，第一次登陆成功后会要求马上修改密码  11. 在管理界面的导航栏找到Credentials，进入，点击按钮\"Download Credentials\"，会下载一个zip文件  12. 把zip文件传到安装了euca2ools的服务器上，建一个目录解压进去，以后每次使用euca2ools前需要执行一次下面的命令 [plain] view plaincopy source eucarc    13. 安装完成 实例1: 使用官网提供的Ubuntu image  1. 下载地址 http://open.eucalyptus.com/wiki/EucalyptusUserImageCreatorGuide 2. 添加 (euca-ubuntu-9.04-x86_64.tar.gz)  [plain] view plaincopy tar xzf euca-ubuntu-9.04-x86_64.tar.gz   cd euca-ubuntu-9.04-x86_64      # 进入运行环境   source ~/.euca/eucarc      # 上传内核，得到一个eki-XXXXXXXX   euca-bundle-image -d ./tmp/ -i xen-kernel/vmlinuz-2.6.27.21-0.1-xen --kernel true   euca-upload-bundle -b ubuntu9-bucket -m ./tmp/vmlinuz-2.6.27.21-0.1-xen.manifest.xml   euca-register ubuntu9-bucket/vmlinuz-2.6.27.21-0.1-xen.manifest.xml      # 上传ramdisk，得到一个eri-XXXXXXXX   euca-bundle-image -d ./tmp/ -i xen-kernel/initrd-2.6.27.21-0.1-xen --ramdisk true   euca-upload-bundle -b ubuntu9-bucket -m ./tmp/initrd-2.6.27.21-0.1-xen.manifest.xml   euca-register ubuntu9-bucket/initrd-2.6.27.21-0.1-xen.manifest.xml      # 上传根分区，用上面两个命令得到的数字执行   euca-bundle-image -d ./tmp/ -i ubuntu.9-04.x86-64.img --kernel eki-XXXXXXXX --ramdisk eri-XXXXXXXX   euca-upload-bundle -b ubuntu9-bucket -m ./tmp/ubuntu.9-04.x86-64.img.manifest.xml   euca-register ubuntu9-bucket/ubuntu.9-04.x86-64.img.manifest.xml    3. 创建一个登录虚拟机用的key [plain] view plaincopy euca-add-keypair euca-key > ~/euca-key.private   chmod 0600 ~/euca-key.private    4. 使用刚才上传虚拟机时候得到的emi值启动一个虚拟机实例 [plain] view plaincopy euca-run-instances -k euca-key -n 1 emi-XXXXXXXX    5. 查看运行状态，没有dhcpd的话，这时拿不到IP [plain] view plaincopy >euca-describe-instances      RESERVATION r-4F030A57 admin default   INSTANCE i-35C505C3 emi-XXXXXXXX 0.0.0.0 0.0.0.0 running euca-key 0 m1.small 2011-11-01T10:48:56.831Z OurCloud eki-XXXXXXXX eri-XXXXXXXX   实例2: 使用dhcpd分配IP  0. CC服务器, IP eth3 192.168.11.3/24; NC服务器, IP eth3 192.168.11.4/24, Xen的bridge xenbr0; 实现从NC上面运行的虚拟机可以通过CC访问到外面的网络  1. 配置CC的/home/public/eucalyptus/etc/eucalyptus/eucalyptus.conf [plain] view plaincopy VNET_PUBINTERFACE=\"eth3\"   VNET_PRIVINTERFACE=\"eth3\"      VNET_DHCPDAEMON=\"/usr/sbin/dhcpd\"   VNET_DHCPUSER=\"eucalyptus\"      VNET_MODE=\"MANAGED-NOVLAN\"   VNET_SUBNET=\"192.168.101.0\"   VNET_NETMASK=\"255.255.255.0\"   VNET_DNS=\"192.168.11.2\"   VNET_ADDRSPERNET=\"16\"   # 这个数字如果太大会无法创建虚拟机   VNET_PUBLICIPS=\"192.168.11.80-192.168.11.120\"   VNET_CLOUDIP=\"192.168.11.3\"   #VNET_MODE=\"SYSTEM\"    2. 配置NC的/home/public/eucalyptus/etc/eucalyptus/eucalyptus.conf [plain] view plaincopy VNET_PUBINTERFACE=\"xenbr0\"   VNET_PRIVINTERFACE=\"xenbr0\"   VNET_BRIDGE=\"xenbr0\"   VNET_MODE=\"MANAGED_NOVLAN\"   #VNET_MODE=\"SYSTEM\"    3. 重新启动CC [plain] view plaincopy service eucalyptus-cc cleanrestart    4. 创建一个虚拟机看看  [plain] view plaincopy >euca-run-instances -k euca-key -n 1 emi-XXXXXXXX    RESERVATION r-502007DA admin admin-default   INSTANCE i-440907AE emi-XXXXXXXX 0.0.0.0 0.0.0.0 pending euca-key 2011-11-04T11:01:17.656Z eki-XXXXXXXX eri-XXXXXXXX      >euca-describe-instances    RESERVATION r-502007DA admin default   INSTANCE i-440907AE emi-XXXXXXXX 192.168.11.101 192.168.101.131 running euca-key 0 m1.small 2011-11-04T11:01:17.656Z OurCloud eki-XXXXXXXX eri-XXXXXXXX      >ssh -i ~/euca-key.private 192.168.11.101   root@ubuntu:~#      >ip addr show eth0   UNKNOWN qlen 1000       link/ether d0:0d:44:09:07:ae brd ff:ff:ff:ff:ff:ff       inet 192.168.101.131/28 brd 192.168.101.143 scope global eth0       inet6 fe80::d20d:44ff:fe09:7ae/64 scope link           valid_lft forever preferred_lft forever      >ping -c 1 192.168.11.2    PING 192.168.11.2 (192.168.11.2) 56(84) bytes of data.   64 bytes from 192.168.11.2: icmp_seq=1 ttl=63 time=1.26 ms      --- 192.168.11.2 ping statistics ---   1 packets transmitted, 1 received, 0% packet loss, time 0ms   rtt min/avg/max/mdev = 1.264/1.264/1.264/0.000 ms   实例3: 自己建立CentOS6虚拟机  1. 使用virtinst以minimal模式安装一个CentOS6虚拟机，硬盘弄一个分区就行了，其他分区都可省，在虚拟机里面安装配置好需要的软件，关掉虚拟机(安装参数可参考http://blog.csdn.net/phoenixie/article/details/6885313)  2. 提取虚拟机 / 分区，假设硬盘文件名为sda.img，2GB [plain] view plaincopy > parted sda.img   GNU Parted 2.1   Using /home/vms/centos6/sda.img   Welcome to GNU Parted! Type 'help' to view a list of commands.   (parted) U   Unit?  [compact]? <span style=\"color:#ff0000;\">b<\/span>                                                          (parted) p   Model:  (file)   Disk /home/vms/centos6/sda.img: 2147483648B   Sector size (logical/physical): 512B/512B   Partition Table: msdos      Number  Start     End          Size         Type     File system  Flags    1      1048576B  2147483647B  2146435072B  primary  ext3         boot      (parted) quit   > dd if=sda.img of=rootfs.img bs=1M skip=1 count=2047   2047+0 records in   2047+0 records out   2146435072 bytes (2.1 GB) copied, 37.3425 s, 57.5 MB/s    3. 配置根分区文件 [plain] view plaincopy # 加载根分区   mkdir /mnt/rootfs   mount -o loop rootfs.img /mnt/rootfs/      # 复制出来kernel和initramfs   cp /mnt/rootfs/boot/vmlinuz-* ./kernel   cp /mnt/rootfs/boot/initramfs-* ./ramdisk      # 配置网卡   rm udev/rules.d/70-persistent-net.rules   vi /mnt/rootfs/etc/udev/rules.d/60-net.rules   ACTION==\"add\", SUBSYSTEM==\"net\", IMPORT{program}=\"/lib/udev/rename_device\"   SUBSYSTEM==\"net\", RUN+=\"/etc/sysconfig/network-scripts/net.hotplug\"      vi /mnt/rootfs/etc/sysconfig/network-scripts/ifcfg-eth0   DEVICE=eth0   BOOTPROTO=dhcp   ONBOOT=yes   TYPE=Ethernet      # 关闭selinux   vi /mnt/rootfs/etc/sysconfig/selinux    SELINUX=disabled      # 修改fstab，去掉所有的UUID方式   vi /mnt/rootfs/etc/fstab   /dev/xvda1         /             ext3     defaults,errors=remount-ro 0 0   /dev/xvda2         /mnt          ext3     defaults                   0 0   /dev/xvda3         swap          swap     defaults                   0 0   tmpfs                   /dev/shm                tmpfs   defaults        0 0   devpts                  /dev/pts                devpts  gid=5,mode=620  0 0   sysfs                   /sys                    sysfs   defaults        0 0   proc                    /proc                   proc    defaults        0 0      vi /mnt/rootfs/etc/mtab   /dev/sda1 / ext3 rw,errors=remount-ro 0 0   proc /proc proc rw 0 0   sysfs /sys sysfs rw 0 0      # 启动时自动下载可登录的ssh-rsa的public key   vi /mnt/rootfs/etc/rc.local    # simple attempt to get the user ssh key using the meta-data service   mkdir -p /root/.ssh   echo >> /root/.ssh/authorized_keys   curl -m 10 -s http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key | grep 'ssh-rsa' >> /root/.ssh/authorized_keys   echo \"AUTHORIZED_KEYS:\"   echo \"************************\"   cat /root/.ssh/authorized_keys   echo \"************************\"      # 删除密码   vi /mnt/rootfs/etc/shadow   root:!:15280:0:99999:7:::      # 卸载   umount /mnt/rootfs    4. 修改NC上面的 /home/public/eucalyptus/usr/share/eucalyptus/gen_libvirt_xml, 把所有的sda改为xvda, 这个修改后，目前官网提供的image将不能使用  5. 最后, 上传 [plain] view plaincopy source ~/.euca/eucarc   # 上传内核，得到一个eki-KKKKKKKK   euca-bundle-image -d ./tmp/ -i ./kernel --kernel true   euca-upload-bundle -b centos6-bucket -m ./tmp/kernel.manifest.xml    euca-register centos6-bucket/kernel.manifest.xml   # 上传ramdisk，得到一个eri-RRRRRRRR   euca-bundle-image -d ./tmp/ -i ./ramdisk --ramdisk true   euca-upload-bundle -b centos6-bucket -m ./tmp/ramdisk.manifest.xml   euca-register centos6-bucket/ramdisk.manifest.xml   # 上传根分区   euca-bundle-image -d ./tmp/ -i ./rootfs.img --kernel  eki-KKKKKKKK --ramdisk eri-RRRRRRRR   euca-upload-bundle -b centos6-bucket -m ./tmp/rootfs.img.manifest.xml    euca-register centos6-bucket/rootfs.img.manifest.xml    6. 现在可以试试了，需要注意的即将创建的虚拟机的磁盘，不能小于根分区文件的字节数，否则不能建立虚拟机；而且设定的虚拟机的内存，不能小于内核的最低需要；这两个参数可以在管理界面里面调整。","title":"搭建类似Amazon EC2的私有云计算平台"},{"content":"国培总结 本次培训由河北软件职业技术学院主办、CSDN协办，针对的是各高职高专院校软件技术类专业骨干教师、专业带头人等，来自河北、天津、内蒙古、四川、福建等省的28名教师参加。本次培训内容先进，多位有企业开发经验的讲师讲授了流行的开发技术和经验；培训形式多样，有教育专家的关于实训的讲座、有技术专家CTO俱乐部的云计算讲座、有针对苹果系统和安卓系统的训练营、有走进知名软件企业的参观访问、有国内外知名专家参加的云大会Open Stack。听了他们的讲解，我的思想深深受到震撼，现将此次培训的收获总结如下。 一、改善课程安排 我们的这些年的课程安排，一直闭门造车，流行什么讲什么，不管是否合理，一直是多而不精，Java、.NET、PHP等多种编程语言都有，每门课程的课时都不够多，所以学生的状态是好像什么都懂，但是什么都不精。这次培训过程中，通过交流，我了解到，河软-CSDN乐知学院的课程设置每个方向都是目标明确，力争做到专而精，学生能达到企业的要求，就业情况很好。这样的课程安排是需要我们总结学习的。 二、不断更新知识、提高实践能力 本次培训的Android开发，有些学校以及开设了相应的课程，而我校还尚未涉及。有企业开发经验的讲师在给我们讲课的过程中，都能熟练讲解知识、指导项目实战。他们的技术、经验和认真负责的工作态度，都使我受益匪浅。在听课、实训的基础上，加上自己的练习，我觉得自己相关方面的知识和能力有了很大提高。同时，我深深地体会到，一定要不断更新知识、不断提高实践能力，才能跟上时代步伐。要采他山之玉为我所用，纳百家之长解我所困需要一个消化吸收的过程，这个过程也许很漫长，也许会走得很累，但作为一线教师的我会走下去。前边的路很长，前面的人也很多，我不能走到最前沿，但我会朝这个目标去努力。所谓“高山仰止，景行行止，虽不能至，心向往之”，这将是我一生的追求。 三、加强企业合作 博彦科技的张总介绍，他们在招聘应届毕业生的时候都要经过一段时间的培训、再经过实习，然后才能上岗。也就是说企业对应届毕业生所具备的的通用技能与企业的需要还有很大的差距，企业需要用大量的时间和财力弥补这个差距。而河软与CSDN的合作，“1+1+1”的模式值得借鉴。学生学习基础课一年、项目实训一年、企业实习一年，学生在毕业前获得了足够多的、可以胜任企业工作的知识和技能，这样大大缩小了毕业生能力与企业要求之间的距离。我校也应该积极探索企业合作之路，使学生在校期间能够学习到更多的适合企业需要的知识和技能，为就业打开宽敞的大门。 培训只是一个开端，对于培训给予的清泉，我要让它细水长流。今后我会学以致用，将在这里学到的新知识尽快地内化为自己的东西，运用于教育教学过程中去，结合我校的实际情况，及时为学校的专业建设和发展出谋划策。教坛无边，学海无涯，在以后的教学中，我将以更加昂扬的斗志，以更加饱满的热情，全身心地投入到教育教学工作中。   唐山科技职业技术学院王春丽 2012.8.7","title":"国培学习阶段性总结"},{"content":"传统用户自己管理所有IT系统和数据。采用监控系统可以保证服务质量和安全性。 采用公共云服务时，虽然不需要进行IT管理，也失去了对IT系统运行状况的了解。 由于云服务管理的复杂性，云提供商可能顾此失彼，对某些客户造成难以弥补的损失。  这种情况可以通过云提供用户监控解决。 即云提供商为云的使用者提供应用运行监控功能，包括所用系统的配置，性能，资源使用状况。 这样不仅使用户对自己应用和数据状况有全面了解，及时发现问题， 也方便进行用户和云提供商对服务的未来需要计划。    提供用户监控有一定的技术难度。因为在云中都是虚拟资源。 如何使显示给各个用户的数据与实际云整体运行数据相符需要一些分析。 随着云计算市场的成熟，能否提供用户对云的方便监控可以成为验证云的服务质量和运行水平的重要标志。     http://tech.sina.com.cn/it/2012-08-08/01177478277.shtml","title":"盛大云数据丢失问题说明云的用户应该能够监控云的运行"},{"content":"企业软件的互联网化现在也许是最热门的话题，有很多人似乎对此深信不已，在这点上我同样深信并且已经在这个领域内工作了，这是个不可逆转的趋势，但关键是这个趋势需要多久变为现实呢？       企业软件的种类很多，领域划分也越来越细，如hr部分的hrm，财务，crm，csm，erp等等，这些企业软件的互联化是需要时间的，目前来看，一些软件在国外的互联网化都有人做了，但在国内真正做基于云计算saas模式的并不多，原因是什么呢，大体上有以下几个方面： 1，企业对saas模式的理解和信任还不够，试问现在哪家公司会把自己的财务软件选择这种模式，哪家公司会把自己的供应链体系依托与saas模式？所以这种saas模式的软件革命首先要选对方向，应该从边缘入手，比如说对企业来讲不是那么核心的系统，例如hrm部分，e-learning部分，或者是crm部分。 2，中国本身的互联网环境还不够成熟，saas模式是需要足够强悍的网络硬件环境支持的，中国的南北互通的问题目前也许会是做saas模式的企业软件商面临的第一个难题。 3，真正做saas模式的各种人才缺乏，包括技术人才，运营人才，甚至是售后服务人才。","title":"个人观点之企业软件互联网化"},{"content":"架构师是公司的“金领”，很少需要考虑生存的问题，从而有更多的精力思考关键技术，形成“强者愈强”的良性循环。当然，冰冻三尺非一日之寒，成为一名合格的架构师是一个漫长的积累过程。对于任何一个软件开发人员来说，架构师都是一个令人向往的角色。那么程序员们要想如何去成为一名合格的架构师，我们还要先从一名合格的架构师的身上去了解，了解架构师们的一些成长经历，了解他们是如何加强自己的技能修养，了解他们是怎样的一个自我培养的过程等等。下面小编就以上问题采访了新浪云计算架构师丛磊老师。 丛磊，新浪云计算首席架构师 丛磊介绍：2005年作为中国访问学生在印度TATA学习，2006年北京化工大学计算机系毕业后加入新浪，先后独立开发第一个用在Spider的JavaScript编译器YAJSC、用于新浪视频相关推荐计算的分布式计算框架DCF等。2008年开始带领技术团队从事云计算方面的开发，2009年起负责SAE的整体架构和技术实现，作为一线开发人员先后经历了SAE的原始版本、Alpha1、Alpha2、Beta的发布。 对于任何一个软件开发人员来说，架构师都是一个令人向往的角色。那么从程序员与架构师有没有比较明显的区别呢？从丛磊老师的介绍中我们知道，其实架构师和程序员的界限并不是很大，比如现在仍然在每天写代码。其实成长首先来自于自身的学习，而阅读成熟项目的代码会使人受益匪浅，其次就是来自于所从事领域的经验，要了解分布式系统的特点，在做项目时，要能够关注性能、扩展性、可靠性、可用性等指标。   架构师其实就是一个漫长的积累过程，从准备期到动荡期我们都是不停的探索，学习。大部分的架构师的年龄都是在35岁左右，这个阶段就是程序员的黄金期。那么我们如何以一个架构师的标准来加强自己的能力呢？下面我们来看看丛磊老师的一些建议。 如何去加强技能修养？ 程序员要成为一名架构师发展，需要进一步加强技能的修养。丛磊认为，对于互联网公司来言，最重要的技能是对网络和分布式系统的理解，网络上面的书籍很多，比较麻烦的是分布式系统，需要结合很多实际的paper和方案来理解。对于这些知识，他个人推荐不断的读书，反复的读书，因为同一个知识，在不同的项目经验后，绝对不是不同的理解。 如何去自我培养？ 当然要成为一名架构师仅仅通过理论学习是不行的，在丛磊的介绍中了解到，其实他理想中的架构师要求很高，不仅有丰富的编码经验，而且还要熟悉硬件性能优化、内核调试、网络故障排查、系统安全、分布式系统设，还有了解国内外技术的新趋势和特点，最重要的是，还要善于与人沟通，敢于排除不同意见，敢于承担责任，了解团队内工程师的特点，善于将他们组成一个整体。他自己也在朝着这个目标去努力。  如何在团队中开展工作？ 很多正在发展为架构师的程序员也很想了解架构师在团队中时如何进行设计工作的，丛磊也根椐他的工作做了介绍。在他们团队中，其实很难分离出一个单纯的架构师的角色，换句话说，很难界定架构师只需要做哪些。架构师更多的是以一个技术负责人的身份和工程师一起做好产品，这里面包括，项目开展前的方案设计，方案完成后的评审，方案确定后的开发，以及之后的调试、优化，故障排查。 当然了，良好的驾驭管理开发团队的能力，良好的人格修养，能够让架构师在开发项目中游刃有余，不会出现意料之外的干扰，更能从内散发出人格魅力。 最后，在面临架构师的一些困难克服问题上，丛磊老师介绍说，最大的挑战是不断更新自己，适应不断前进的技术演变。那么解决办法也很简单，但也很难，那就是“学习”和“坚持”。","title":"架构师的成长历程：合格的架构师是如何炼成的"},{"content":"我们需要新的编程语言？你可能认为并不需要，但是如果你去了解最近的趋势，你可能会改变你的想法。为什么Google采用GO和DART两种编程语言？为什么IBM、Cray、Red Hat分别创造了X10、Chapel和Ceylon三种语言？ 未来，这10种编程语言（DART、Ceylon、GO、F#、OPA、Fantom、Zimbu、X10、Haxe、Chapel）是否能否撼动IT。新的编程语言是为了满足某些人的创作冲动还是新编程方式的技术演进？ 回顾历史 如果你回头看看，我们可以看出新语言的爆发将历史分为3个时期，每个时期都链接到技术演进的临界点。 图中时间点以外的还有其他重要语言：(1)Pascal – 1970、(2)C – 1972、(3)Prolog – 1972、(4)Smalltalk – 1972、(5)Erlang – 1986、(6)Perl – 1987、(7)C# 云计算是否会用到这些语言？如果你分析这些新语言背后的故事，你会看到一个新兴的共同主题。 1.分布式/并行计算 可用于并行计算的编程语言（Cray的Chapel、IBM的X10）、并发编程（Clojure，Fantom，Go）和完整云栈单语言（Opa）。 由于云计算所有模式是将任务分发跨越不同地域的多个CPU并行或同时运行，所以现今的编程语言都不是很适合。 2.多范式编程 支持面向对象和函数式编程语言（Clojure、F#、Fantom、Scala），相对于并行化程序要简单，而纯函数式语言看来并不是十分成功。因此，需要尝试多范式编程语言。 3.多平台编程 多平台编程语言不仅可在JVM和CLR实施（Clojure、Fantom、Scala），还可以在其他几个平台（Clojure & Fantom on JavaScript engine、Scala on Android、Haxe on several platforms）。这事我们几十年来一直追逐的梦想，因此这就是创建跨平台语言的最好理由。 4.规模化编程 可读性、模块化（Ceylon）、编译速度（Go、Zimbu）、适合大型团队（Scala）、Meta-programmability（Ceylon、Scala）和简洁（Scala、Zimbu）是构建大型应用程序的编程语言的特性。 云计算提供了几乎无限的计算能力，这使得我们可以构建更大规模、更复杂的应用。当然构建大型应用需要大型团队和易于维护的代码。因此创建大型应用程序的编程语言势在必行。 5.客户端编程 替代JavaScript的DART、客户端和服务器端相同的语言（Naxe、Opa、Zimbu）自然有自己特有的优势。 云计算需要客户端代码无缝的运行在多个客户端设备上，虽然JavaScript已经成为了一个标准，但没有人喜欢它。因此，需要构建比JavaScript更好的并适用于多客户端平台的语言。 12种语言快速预览 12种语言是按照A-Z进行排序的，有趣的是这12种语言都是遵循某种开源许可之下（图表中不包括HTML5，因为从严格意义上它还不是一个新语言，同时也排除了Node.js，因为它仅仅是服务器端JavaScript引擎）。（李智/编译）","title":"云计算时代最具潜力的12种编程语言"},{"content":"“云” 端 漫 步——记国家首批“青年千人计划”入选者戴元顺博士 新闻来源：电子科技大学人事处     编辑：人事处      共 326 人浏览过该信息 “云” 端 漫 步 ——记国家首批“青年千人计划”入选者戴元顺博士 记者 林坤  2006年，Amazon率先推出“弹性计算云服务”（EC2）；2008年，Google推出Google App Engine云计算网络应用平台；2010年，微软发布下一代云计算产品Office 365；2011年，苹果发布iCloud云服务……当业界大鳄竞相抢占日益火爆的“云计算”市场时，一位1978年出生的年轻人已经在云计算、网格计算、自主计算等研究领域执着坚守了十年。      在国家首批“青年千人计划”入选者名单中，我校推荐的来自美国田纳西大学的戴元顺博士成为“云计算”方向的唯一入选者。十年漫步“云”端之旅，有过从零开始的挫折与艰辛，但更多的是游刃有余的快乐和满足。 “云”上的日子 “云”上的日子始于2000年。从清华大学毕业的戴元顺，进入新加坡国立大学开始硕博连读，师从IEEE Fellow谢敏教授。戴元顺敏锐地将网格计算和虚拟化作为自己的研究方向，这一领域的研究在美国也才刚刚兴起，“这是一个非常新的方向，谢老师鼓励我一起来进行研究和探索，而这一方向后来也成为云计算研究的基础。” 三年潜心钻研，戴元顺开始在国际学术界崭露头角，其关于大规模系统的安全性、可靠性领域的研究成果获得了国际同行的高度关注。2004年，Springer出版了以他博士论文为主要内容形成的专著《Computing Systems Reliability》。同年，他获得国际期刊《IIE Transactions》评选出的2004年最佳精选论文。 戴元顺在三年内完成硕博连读学业后，于2004年前往普渡大学执教。当年，戴元顺作为主要成员之一参与了美国官方实施的第一个云计算项目“VGrADS”（网格虚拟化和软件开发平台）。该项目由美国国家科学基金（NFS）投资825万美元，七所大学联合研发。戴元顺率先为网格计算可靠性建立了全新的理论模型，在该项目中得以应用。同年，他提出了超大规模协同自主计算的概念和理论，获NFS资助，并与NASA合作，在之后的几年内将该技术应用到小行星带探索的项目中。 2007年,受田纳西大学工程学院院长Way Kuo之邀，戴元顺加盟该校，进入美国工程院院士Jack Dongarra教授带领的Innovative Computing Lab（ICL）任Research Professor。“从2004-2009年的五年时间内，VGrADS项目的研究不仅为云计算IaaS、PaaS两个层次的问题奠定了理论基础，其开发出的Eucalyptus(桉树)云计算平台，在美国NASA等政府机构以及企业、军方等得到了广泛应用，对产业界和社会产生了非常大的影响。”戴元顺表示。在此期间，他先后发表了10余篇IEEE Transactions论文，20余篇SCI检索论文，另有20余篇论文发表在诸如INFOCOM等计算机领域的重要国际会议上，并获ICPADS 05年最佳论文奖。 “宝剑锋从砥砺出，梅花香自苦寒来。”这是戴元顺的人生信条，也是支持他拨“云”见日的动力。“十年前在选择博士课题时，我并没有预料到云计算这个方向今后会这么火，我唯一能做的就是专注做好自己的东西，同时坚定信心，战胜困难。”   风吹云动星不动 两年前，戴元顺进入正大力实施“人才强校”战略的电子科技大学的视野。“学校领导亲自关心，人事处等部门大力支持，加上对计算机学院的考察评估，我认为当时学校的环境和平台很利于发展云计算学科，所谓万事俱备只欠东风。” 2009年，“东风”如约而至，戴元顺作为学术带头人被兼职引进，被我校聘为教授，并成立“电子科技大学协同自主计算实验室”。当时，国内的云计算研究尚处于起步阶段，对于普通人来说，云计算就更只是一个遥远而模糊的概念。他希望将美国的研究成果带回国内进行进一步改造研发，带动国内相关学科和产业的发展。 “云计算就是一种新的计算模式，它的最终目的是要建IT界的‘发电厂’。”戴元顺如此描述这一IT业继个人电脑的出现、互联网的应用之后的又一次巨变。“如果说网格计算是‘分’的机制的话，云计算就是‘合’，它实现的是一种大规模的整合，是IT界自然发展到一定阶段的产物。” 他用计算“水电化”来阐释这一云计算技术的发展趋势。现在传统的计算模式，常用的工具是计算机，计算和存储资源在本地，“就好比手电筒，自己有一套完整的电力系统，一按开关就能亮”。而在云计算时代，个人电脑、本地的计算和存储资源都不需要了，他们都将在云平台上完成。“通过云的‘发电厂’，只要能连接上互联网的地方，就能接收到计算和存储资源，获得云计算的服务。这就好比节能灯，本身并没有电力系统，但一插上电就能用，而我们并不需要知道电力来自于何处。” “在田纳西大学ICL，我的导师Jack Dongarra教授不但教会了我如何真正的创新，而且教会了我创新一定要真正落实，转变为对社会和人民有意义的东西，转变为生产力和产品。” 为了让“云计算”的概念真正落地，2009年，实验室与中科院合作，在广东省建立了中国首个自主研发的云计算平台并投入运营使用；2010年，与中国联通合作，为“沃云计划”、“桌面云”办公系统等项目提供技术支持；2011年，与天津国家数字出版基地开展合作，为在云计算平台上进行的数字出版交易提供技术支持。此外，实验室还作为主要技术提供方参与了广东省科技厅“手机云服务”省部重点项目。从合作项目开始，戴元顺与国内学界和产业界的联系日益密切。 计算机学院的余盛季老师从实验室建立起就参与项目组的管理,他说：“虽然在与企业合作的过程中，我们有机会承接到如办公自动化系统等大项目，但戴老师要求我们一定要专注云计算这一方向，宁愿牺牲项目也不能牺牲方向。” “风吹云动星不动”，这颗不为流云所动的“星星”，在夜空持续散发着它的光芒。   建设“云”团队 两年多来，在戴元顺的带领下，协同自主计算实验室不断发展壮大。“戴老师不仅带来一个大的学科方向，他还根据团队青年老师原来的研究兴趣和方向，让每个人都能找到与云计算这一方向的结合点，并从中受益。”肖鸣宇副教授将自己原本主攻的算法运用到“云调度”的研究中，今年在算法的顶级刊物Algorithmica上发表了一篇论文。向艳萍副教授结合自己的研究方向自主计算，对云系统里的自修复进行研究，今年与戴元顺合作发表了一篇IEEE Transactions论文。“戴老师带来的不仅是国际化的创新思维与眼界，还有对学科总体发展趋势前瞻性的洞察和把握。站在他的肩膀上，青年老师更容易出成果。”向艳萍说。绿色云、云安全、云的可靠性……这样的契合点还有很多。今年，团队的陈波博士和李洪伟博士顺利晋升为副教授。目前，实验室已经拥有4名教授，5名副教授，4名讲师，招收近20位博士生和70多名硕士生，形成了自己的学术梯队。 戴元顺强调的“务实”精神已根植于团队师生的心中，也进一步带动了理论和实践的“双丰收”。据向艳萍介绍，两年来，实验室作为第一单位、实验室成员作为第一作者共计发表SCI检索论文30余篇，获得科研项目20余项，其中国家级项目10项（包括8项国家自然科学基金项目）。戴元顺较强的工程应用能力也成为青年教师迅速成长的“助推器”，他的项目管理能力让余盛季体会深刻：“每当项目中出现突发状况时，戴老师总是挺身而出，自己先设计一个详细的优化方案，为项目组节约几天的宝贵时间。”此后，戴元顺会与项目组成员讨论，“通过消化吸收他的设计方案，我能学到很多。每遇到一次这样的情况，就能成长一次。” 虽然事务繁杂，但戴元顺对博士生都是亲自指导，对所有硕士生也都一视同仁。他勤奋严谨的态度、做事的激情和充沛的精力，如细雨般滋润着2010级硕士生徐涛。“戴老师要求我们做事一定要精益求精。有时候做样品测试要熬通宵，不管戴老师在国内还是国外，会随时与我们保持电话和邮件联络，陪着我们熬夜。”经过一年多的磨练，徐涛已成长为项目骨干，“也许云计算具体的技术我会忘记，但戴老师教给我的一种宏观的思想，已经在我的头脑中扎根。” 随着对学校工作和生活环境的日趋认同，戴元顺产生了全职回国的念头。2011年初，国家启动“青年千人计划”，为像戴元顺一样愿意发挥所长报效祖国的海外高层次人才提供了绝佳机会。 学校抓住机遇，经过半年的申报、评审，最终如愿“摘星”。对此，戴元顺表示：“学校、学院对发展云计算学科的支持力度很大，我也希望能全身心地去建设一个团队，让大家朝着一个方向共同努力，做出高水平的研究成果。”   “云”中的未来 “未来的十到二十年，IT界将是云计算的天下！”展望云计算的未来，戴元顺信心满满，“我的目标是让中国掌握拥有自主知识产权的云计算全套技术。” 目前，实验室研发完成的“云电脑”已经在联通研究院上线使用，台湾等地的几家企业已购买该产品。“未来一两年之内，我相信老百姓就能陆续体会到云计算给生活带来的实实在在的变化。”戴元顺介绍，除了产业化，实验室另一个大的研究方向是低碳、节能，也就是实现终端“瘦弱化”。以后老百姓不再需要大的电脑，高档的手机配置，这些终端将会变得越来“瘦”，而且还能节约90%以上的耗电量。 争取国家级的大项目，建设国家级的科研平台，争取出大的科研成果……全职回国之后，戴元顺筹划在这个全新的舞台上要做的事情还有很多，“目前国际上还没有开设云计算这门课程，我已经着手编写一本云计算教材，希望回国后能把这门课开起来，为国家培养云计算领域的优秀人才。” 计算机学院党委书记李雪梅表示：“我们希望戴老师这样在国际上有一定影响力的青年学者回国后，凝练一个方向，汇聚一支队伍，推动云计算学科的发展，为学校计算机应用技术进入国家重点学科提供支撑。” 在未来的“云”世界，戴元顺和他的团队，注定还将继续书写精彩。        电子科技大学人事处(C)版权所有 川ICP备123456号 沙河校区地址：成都市建设北路二段四号  邮编:610054  清水河校区地址:成都市高新区（西区）西源大道2006号  邮编：611731 电话：+86.028-61830539 83202297 83208288  传真：+86.028-61830539  E-mail：shizi@uestc.edu.cn","title":"“云” 端 漫 步——记国家首批“青年千人计划”入选者戴元顺博士"},{"content":"ITSM与BSM与云计算 云计算近几年很火热，炒得一塌糊涂，云计算是ITSM无法回避一个课题，任何一种新的技术或产业模式的调整，必须会对管理理论带来挑战，我们必须需要考虑云计算与ITSM的关系问题，云计算到底是一种架构模式？一种产业方式？一种新的技术？又或是一种运营理念？，当一个数据中心已经实施了ITSM之后，引入云计算，应该如何将两者进行整合？，云计算的实现依赖于两个技术基础，一个是虚拟化，一个是自动化，前者主要是VMware、Citrix、Microsoft提供的虚拟软件及平台，这一方相对稳定成熟了，后者自动化分为二个层面，一个是针对具体服务对象的操作动作自动化，比如对服务器、网络设备、中间件、数据库等，这好比人的手与脚，另一个是指跨对象、跨事务的自动化，它通过调度连接一系列的动作来实现某一个流程链条，这好比是人的神经系统。可以想象一下，当虚拟化技术发展成熟后，各种原来固定的架构对象，将会高度动态的做自我调整，这导致原来的配置管理流程或CMDB技术完全无法应对，而自动化技术发展成熟，原来需要依赖大量业务逻辑的活动，完全会被封装在自动化软件本身，这同样会对管理流程带来极大的冲击，这些应对，没有哪个人或组织已经做好准备。 前段讲的是云计算的两个技术基础，云计算的同样需要依赖扎实的管理基础，没有管理的云，那是风云，仅仅技术的封装是不够的，从管理体系而言，它必须统摄云计算，自动化的前提是标准化，而标准化依赖于流程的设计，当我们把架构的动作分散成标准的之后，通过自动化技术把这些动作进行重复与组装，这跟T型车的生产线一样，服务将以流水线的方式被生产出来，这预示着大批量的服务将不再依赖人类的参与，在一个数据中心的IT架构每天在执行自动化的操作，这对管理的要求将比以前高很多，尤其是在变更与配置的部份。云带来的收益与风险是成正比的，IT服务管理是实现云计算的基石。用一句话来总结，管理是云计算的体，技术是云计算的相，服务是云计算的用。","title":"ITSM浅析"},{"content":"近200篇云计算、虚拟化、Hadoop、MapReduce、HDFS等云计算相关资料整理下载   http://vivianskyer.iteye.com/blog/1604651","title":"近200篇云计算、虚拟化、Hadoop、MapReduce、HDFS等云计算相关资料整理下载"},{"content":"我们需要新的编程语言？你可能认为并不需要，但是如果你去了解最近的趋势，你可能会改变你的想法。为什么Google采用GO和DART两种编程语言？为什么IBM、Cray、Red Hat分别创造了X10、Chapel和Ceylon三种语言？ 未来，这10种编程语言（DART、Ceylon、GO、F#、OPA、Fantom、Zimbu、X10、Haxe、Chapel）是否能否撼动IT。新的编程语言是为了满足某些人的创作冲动还是新编程方式的技术演进？ 回顾历史 如果你回头看看，我们可以看出新语言的爆发将历史分为3个时期，每个时期都链接到技术演进的临界点。 图中时间点以外的还有其他重要语言：(1)Pascal – 1970、(2)C – 1972、(3)Prolog – 1972、(4)Smalltalk – 1972、(5)Erlang – 1986、(6)Perl – 1987、(7)C# 云计算是否会用到这些语言？如果你分析这些新语言背后的故事，你会看到一个新兴的共同主题。 1.分布式/并行计算 可用于并行计算的编程语言（Cray的Chapel、IBM的X10）、并发编程（Clojure，Fantom，Go）和完整云栈单语言（Opa）。 由于云计算所有模式是将任务分发跨越不同地域的多个CPU并行或同时运行，所以现今的编程语言都不是很适合。 2.多范式编程 支持面向对象和函数式编程语言（Clojure、F#、Fantom、Scala），相对于并行化程序要简单，而纯函数式语言看来并不是十分成功。因此，需要尝试多范式编程语言。 3.多平台编程 多平台编程语言不仅可在JVM和CLR实施（Clojure、Fantom、Scala），还可以在其他几个平台（Clojure & Fantom on JavaScript engine、Scala on Android、Haxe on several platforms）。这事我们几十年来一直追逐的梦想，因此这就是创建跨平台语言的最好理由。 4.规模化编程 可读性、模块化（Ceylon）、编译速度（Go、Zimbu）、适合大型团队（Scala）、Meta-programmability（Ceylon、Scala）和简洁（Scala、Zimbu）是构建大型应用程序的编程语言的特性。 云计算提供了几乎无限的计算能力，这使得我们可以构建更大规模、更复杂的应用。当然构建大型应用需要大型团队和易于维护的代码。因此创建大型应用程序的编程语言势在必行。 5.客户端编程 替代JavaScript的DART、客户端和服务器端相同的语言（Naxe、Opa、Zimbu）自然有自己特有的优势。 云计算需要客户端代码无缝的运行在多个客户端设备上，虽然JavaScript已经成为了一个标准，但没有人喜欢它。因此，需要构建比JavaScript更好的并适用于多客户端平台的语言。 12种语言快速预览 12种语言是按照A-Z进行排序的，有趣的是这12种语言都是遵循某种开源许可之下（图表中不包括HTML5，因为从严格意义上它还不是一个新语言，同时也排除了Node.js，因为它仅仅是服务器端JavaScript引擎）。","title":"云计算时代最具潜力的12种编程语言"},{"content":"【北京晨报报道】云计算是个实在悬乎的概念，自提出6年以来，无数的文字在解释它，却有90%以上的读者不知“云”为何物。这些文字都带着一种腔调：云计算吗，简单来说就是……然而不幸的是，“简单来说”后面的文字，读者依然看不懂，智商严重受挫。请读完下面的故事，笔者将确信您能找回智商的自信：云计算就是这么个东西。 　　故事一：公共电网抛弃了爱迪生 爱迪生的牛气无法言说，这辈子有2000多项发明，在科学界他吃的盐比普通人吃的饭还多。但就是这么一个牛人，也曾被拍打在沙滩上：公共电网狠狠地抛弃了他。1878年，爱迪生决定开发一种新产品——电灯泡，为了持续地给它供电，他紧跟着又发明了电流表、发电机等，这是一套完整的供电系统：爱迪生灯具公司制造灯泡，爱迪生电器公司制造发电机，爱迪生电线公司生产电线。 然而，他的产品只支持直流电厂。直流电有一个很大的缺陷，那就是不能进行长距离运输。于是，越来越多的个人和企业开始独立发电，来点亮爱迪生的直流灯泡。独立发电使得小型私人电厂遍地开花。由于长期为这些电厂提供设备，爱迪生成立的通用电气公司趁机发了大财。然而，爱迪生是个伟大的发明家，却不是一个精明的企业家，它相信直流电才是未来。这个短板被他的崇拜者英萨尔意识到：他更推崇交流电。交流电可以长距离运输，有了这个基础，大量效率低的私人电厂，就能整合成一个“中央电厂”，通过一根电线，电能就能运输到各处使用。但爱迪生并不看好这种设想，因为这会断掉他的财路：他的商业兴趣在于，私人电厂越多，他的设备就会卖得越好。按照爱迪生的想法，每个企业或者个人都得自备一个小型发电厂。所以，在这场战役中，信赖交流电的英萨尔胜出了。通过“中央电厂”，英萨尔实现了大规模的公用电网。如此一来，原先建立私人电厂的企业或个人，就可以避免采购设备昂贵的发电设备。他们只需付上费用，墙面的插头就能提供源源不断的电力，而不必关心这些电力来自何方。故事中取代私人发电厂的“公共电网”，就是电气时代的“云计算”。 　　故事二：信息“公用电网”的诞生 　　1971年，英特尔(微博)公司发明了微型电脑。由于价格低廉，且能够完成各种任务，微型电脑很快取代主计算机，成为公司电脑运算的中心。其后，原来的主计算机被改造成了私人服务器(私人发电站)，这些服务器下面连接着许多个人电脑。爱迪生的灯泡只能搭配直流发电厂，这些个人电脑也只能使用服务器上的程序。这种模式(C/S模式)一直延续至今。正如电气时代每个企业都必须自建一个私人发电厂一样，现在每个企业必须配备一个私人数据中心。私人发电厂不能实现远距离传输，服务器内的信息也只能在局域网传播。私人电厂只供企业和个人使用，数据中心的信息也只供企业内部使用。2005年2月，google在俄勒冈州北部买下三十亩地准备建立一个庞大的服务器技术中心。于是，信息的“公用电网”出现了，这就是“云计算”。在这里，包含着数万、甚至数十万廉价CPU和硬盘组成的服务器，这就是信息时代的“中央电厂”，它把原来企业内部的服务器(私人电厂)整合为一台机器集中处理。自此，企业再不用采购昂贵的设备，不必再培养一支庞大的技术队伍。他们只要相信，手里有一台连接网络的计算机就行，而不必担心数据存储在什么地方。“云计算”随后迅速地进入到我们的生活。YouTube每月8亿独立访问用户，但运营这些网站的，往往只有几个人，他们租用亚马逊(微博)的服务器提供服务，节省了大批资本投资。这两个故事关联性很大：电线相当于宽带，电灯泡相当于电脑，私人电厂相当于私人服务器，公用电网就相当于现在的“云计算”。 　　手记：让99%读者不懂的“云计算” 　　“云”正在与我们的生活越飘越近，然而，它的概念却离我们越来越远。笔者日前在网上看到一组调查数据，有90%以上的读者不知道“云计算”为何物。当我拿着这组数据，跟一位业内人士诉说时，他却不屑地回答：“不止90%吧，真正懂的估计不到1%。”他也纠结于“云计算”的理解障碍，“太抽象了，没有具体可感的东西，所以理解起来费劲。”龙真也告诉笔者，“这个概念本身就是一个很扯淡的事。”基于此，笔者四处向专业人士“取经”，直到有人推荐了这本《IT不再重要》。“云计算”是个浮躁的概念，被商业化的速度远超过我们想象。由于“云计算”的应用，一大批“云产品”被问世，这其中有真货，也有水货。但是，只要我们理解了“云计算”概念的本质，就自然能清晰地辨别，所谓的他们口中“云产品”，究竟是个什么东东。（ www.cloudcomputing-china.cn 中国云计算网） 　　探索：“云计算”的双重含义 信息“公用电网”之说只属于“云计算”含义中的一方面，来源于尼古拉斯•卡尔的《IT不再重要》。还有一种更通俗的理解，“把所有的本地的事，都可以放到云端来完成就是云计算了。”未来的电脑将不需要主机，只需要一个显示器。原来机箱里的东西哪去了？它们将全部存储在“云计算”中。一些游戏玩家渴望追求带劲的显卡、CPU，未来这些统统不需要，你只需要一套键盘鼠标和显示器，就能实现“发烧友”的愿望，而这背后的支撑者，就是“云计算”。信息“公用电网”，只属于“云计算”含义中的一方面。通信观察家项立刚(微博)认为，“‘云计算’的概念也可以这么说，原来大家私人发电，现在有中央电厂集中发电。”他表示，这个概念还可以理解为“把大量计算机的计算、存储能力聚合起来”。 它还有着更丰富的意义。“信息‘公用电网’是个伪概念，”i黑马联合发起人龙真表示。“它主要说的是大家之后都不要用自己的服务器了，直接租用别人的服务器更好。”他认为，“云计算就是我们原来用硬盘来存储的数据，现在直接存储在网络上。”当然，“云储存”只是“云计算”中的一个基本功能。比如，“云计算”存储着许多网络游戏，但这些游戏能够直接被用户运行，且不需要CPU。还有一种更通俗的理解，“把所有的本地的事，都可以放到云端来完成就是云计算了。”龙真表示。 　　其实，信息“公用电网”并不是卡尔的唯一观点。在书中他还提到，未来装在电脑机箱的各个配件，通过“云计算”能够全部集成于互联网，供每一位用户分享。这句话的含义，就是机箱内的CPU、硬盘等都挂在“云端”，未来的电脑仅需要一个显示器加鼠键。笔者认为，“云计算”的这层含义同样能用信息“公用电网”理论来解释，可以将个人电脑机箱内的配件看成是私人发电站，当未来用“中央电厂”(云计算)时，电脑将无需主机，所有的数据将存储于“中央电厂”。“云计算”就是一台超级计算机，里面不仅存储着无数数据和软件，还能提供“计算”功能。它可以是企业的“中央服务器”，也可以是个人电脑的“中央大主机”。两种含义结合起来理解，或许才能更好地阐释“云计算”。 读后感： 看了这篇文章，个人感觉不应该称为“云计算”，应该称为“云计算机系统”。这个“系统”包括了”硬件部份“和”软件部份“的整合，实现了强大的运算能力、存储能力以及娱乐能力。它的这些能力，是一般的网络、服务器和个人计算机无法比拟的。对于用户而言，提供了便捷服务的同时，还降低了成本。","title":"读两个故事一定弄懂“云计算”"},{"content":"Android拍照的实现方法在这里总共介绍了两种。我们可以通过几段代码的解读，来对这些方法进行一个详细的了解。 AD： 51CTO云计算架构师峰会 抢票进行中！ 编程人员在Android手机操作系统中可以实现许多功能来满足各种用户不同的需求。比如我们以前介绍的通话监控功能等。在这里就先来为大家详细介绍一下有关Android拍照的实现方法。 Android拍照有两种方式，一是使用android.hardware.Camera，二是使用Intent(\"android.media.action.IMAGE_CAPTURE\")，当然还是第一种好，不过代码太复杂，以后有时间再说，这里就说一下第二种方式吧。 try {    Intent i = new Intent(\"android.media.action.IMAGE_CAPTURE\");    startActivityForResult(i, Activity.DEFAULT_KEYS_DIALER);    } catch (Exception e) {    }  这样就可以调用系统的像机了。 当然你的Activity要重构一下onActivityResult方法，Android拍照实现代码如下： @Override    protected void onActivityResult(int requestCode,  int resultCode, Intent data) {    super.onActivityResult(requestCode, resultCode, data);    Bundle extras = data.getExtras();    Bitmap b = (Bitmap) extras.get(\"data\");    ImageView img = new ImageView(this);    img.setImageBitmap(b);    setContentView(img);    }  这样，你拍到的照片就可以显示在ImageView中了。当然，你也可以保存这个Bitmap到文件。 经测试，SDK 1.5版中，测试出错，大概是因为用的是模拟器吧，SDK 1.1版中，程序可以拍到照片，但是尺寸有点小，不知道为什么。 以上就是我们为大家介绍的Android拍照功能的实现，虽然有些小瑕疵，但是具体操作方法大致如此。 【编辑推荐】 Android数据库相关代码解读 Android系统信息查看方法详解 Android创建sdcard详细图解 Android Activity跳转相关操作技巧分享 Android AlertDialog操作代码详解","title":"Android拍照实现方式概述"},{"content":"我们总是从项目经理那听到疲于编写项目报表，手头上也没有好的工具可以减轻报表编写强度的抱怨。从Project2003到Project2010都提供了默认的报表功能，但在实际使用过程中，我们发现尽管其功能很强大，但不是报表无法导出，就是无法获取到有效的信息，导致报表功能没办法被用起来。今天向广大项目管理从业者推荐Project 2013最新的报表功能。我们的目标是：简单、粗暴、有效。     首先我们使用Project2013打开一个MPP文件，如果您还未安装Project2013，建议您通过如下地址网站下载安装（中文版Project2013暂未提供下载）   Project 2013 下载地址 http://www.microsoft.com/click/services/Redirect2.ashx?CR_CC=200113118   当然如果你对云计算版本的Project比较感兴趣，可以先注册Office365和Project Online，然后再下载Project Pro 2013  for Office 365版本   Project Online注册地址 http://www.microsoft.com/project/en-us/Preview/default.aspx   打开MPP后，我们选择【项目】选项卡，然后点击【报表】，出现了很多选择的报表方式：  Project 2013的界面看上去是不是和Project2010不太一样了呢？ Project 2013的正式版将新增一个【报表】选项卡，我手头上面的只是测试版本，所以”报表“功能只好委屈放在【项目】选项卡下：   我们选择”工作概述“报表看看如下效果：   看上去是不是很酷呢？其实这个完全是内置了一个轻量级的Excel透视表功能，看看操作： 看上去是不是和Excel在操作透视表差不多呢？好吧，还真差不多。 在看看其它的效果 成本概述   当然这个只是系统自带的实例，您也可以自定义，并且将这些报表拷贝到Word等软件中。   您是否有兴趣和我一起来试用Project2013了呢？  ","title":"[置顶] Project 2013新报表功能"},{"content":"         8月9日上午消息，英特尔亚太研发有限公司、新浪网技术(中国)有限公司、中标软件有限公司以及上海交通大学在北京正式签署协议，联合成立“中国开源云联盟(China Open Source Cloud League，简称COSCL)”，致力于整合企业用户对云计算基础架构平台的需求，基于OpenStack等开源框架协同研发并加速完善，推动中国云计算产业发展。 　　中国开源云联盟将致力于OpenStack开发、操作系统支持、性能优化、规模部署，通过业界合作，针对不同应用领域，探索OpenStack的解决方案，并与业界分享，促进OpenStack的产业化应用；同时，将工作成果代码返回OpenStack全球开源社区，提升中国区对OpenStack全球社区的影响力。 　　英特尔亚太研发有限公司总经理兼英特尔软件与服务事业部中国区总经理何京翔表示，在中国市场，开源有了很好的发展势头，但开源云项目有待完善，这个联盟将把开源云项目落实到中国市场，为中国企业所用。 　　作为联盟的发起成员，新浪较早就开始了基于OpenStack开源平台的云计算研发和使用，并成为社区的重要贡献者。 　　新浪研发事业部总经理符庆明表示：“开源正是云计算发展的灵魂，并成为行之有效的商业模式并被普遍接受，这种可以创造社会价值和商业价值的方式也将成是推动开源事业运作的关键，我们希望更多具有奉献精神的开源人才加入并成为开源社区发展的核心驱动力。” 　　上海交通大学的金耀辉表示，虽然中国区开源云联盟目前能力有限，但希望企业和科研单位可以共同解决关键问题，开源代码实现资源共享。 　　目前OpenStack项目及其模式受到了中国开发者和公司的欢迎，从官方的统计数据来看，来自于中国的下载数和OpenStack用户数仅次于美国，但目前OpenStack项目开发中，来自于中国的贡献非常有限。 　　OpenStack是一个由美国国家航空航天局NASA和美国网络托管公司Rackspace共同发起，旨在为公共及私有云的建设与管理提供软件的开源项目，旨在打造易于部署、功能丰富且易于扩展的云计算平台。目前它的社区拥有超过160家企业及3000多位开发者。","title":"英特尔联合国内厂商成立中国开源云联盟"},{"content":"l IaaS(Infrastructure as a Service，基础架构即服务)通过互联网提供了数据中心、基础架构硬件和软件资源。IaaS可以提供服务器、操作系统、磁盘存储、数据库和/或信息资源。最高端IaaS的代表产品是亚马逊的AWS(Elastic Compute Cloud)，不过IBM、Vmware和惠普以及其他一些传统IT厂商也提供这类的服务。IaaS通常会按照\"弹性云\"的模式引入其他的使用和计价模式，也就是在任何一个特定的时间，都只使用你需要的服务，并且只为之付费。 l paas(Platform as a Service，平台即服务)提供了基础架构，软件开发者可以在这个基础架构之上建设新的应用，或者扩展已有的应用，同时却不必购买开发、质量控制或生产服务器。Salesforce.com的Force.com、Google的App Engine和微软的Azure(微软云计算平台)都采用了paas的模式。这些平台允许公司创建个性化的应用，也允许独立软件厂商或者其他的第三方机构针对垂直细分行业创造新的解决方案。 l SaaS(Software as a Service，软件即服务)是最为成熟、最出名，也是得到最广泛应用的一种云计算。大家可以将它理解为一种软件分布模式，在这种模式下，应用软件安装在厂商或者服务供应商那里，用户可以通过某个网络来使用这些软件，通常使用的网络是互联网。这种模式通常也被称为\"随需应变(on demand)\"软件，这是最成熟的云计算模式，因为这种模式具有高度的灵活性、已经证明可靠的支持服务、强大的可扩展性，因此能够降低客户的维护成本和投入，而且由于这种模式的多宗旨式的基础架构，运营成本也得以降低。Salesforce.com、NetSuite、Google的Gmail和SPSCommerce.net都是这方面非常好的例子。   1. 阿里云 代表云产品：阿里云云计算平台（2011年7月发布） 点评：自主研发，体系完整。同时提供基础层、平台层和应用层各项功能，包括安全、搜索、地图、广告等。有云市场。 实际落地案例：万网、管易软件、安存网络、欢乐逛、淘满意、囧记单词、刷机精灵、嘉兴第九区、八咏网、评论啦 主页：http://www.aliyun.com/ 2. 新浪 代表云产品：Sina App Engine（2009年11月推出） 点评：国内最早、最为成熟的PaaS平台。基于LAMP架构，同时在支持新浪微博等公司各种内部业务以及众多第三方微博应用，经过生产环境检验。首选支持PHP，也支持Java，近期通过Cloud Foundry支持Ruby。Python支持尚处于测试阶段。开发者社区较活跃。 实际落地案例：新浪微博、ThinkSAAS（ThinkSAAS - 最简单APP开发开源PHP社区系统） for SAE等 主页：http://sae.sina.com.cn/ 3. 百度 代表云产品：百度开放云平台 点评：由百度应用引擎（BAE）和个人云存储两部分组成。目前仍处在公测阶段。提供云存储、云环境、消息服务、关系服务。支持PHP和Android开发。该平台依托百度基础架构，在百度内部产品线上有着广泛的使用，这一点有说服力。 实际落地案例：ting!、百度应用、hao123网址之家、百度团购 主页：http://yun.baidu.com/ 4. 盛大 代表云产品：盛大云（2011年7月公测） 点评：基本上仿照AWS模式，自主研发。提供云计算、存储、网络、数据库（包括MongoDB）服务。计费粒度很细。2012年4月宣布已有三万注册用户。 实际落地案例：YesMyLaw法律管家、金达网、挚诚广告联盟、渤海岸电脑、绍兴汽车网、驱动开发网、创拓软件、《创业家》、盛大网盘、云中书城 主页：http://www.grandcloud.cn/ 5. 腾讯 代表云产品：腾讯开放平台（2011年陆续发布） 点评：腾讯其实也有云计算服务，但置于开放平台之内，目前支持PHP和Java语言。就开放平台而言，规模很大，涵盖其几乎所有产品线，而且钱景看上去不错。2012年3月宣布已有近30万开发者入驻，超过4万款应用提交上线申请，平台分成总收入(第三方最终实收)突破6亿元。针对开发者的文档和教程丰富。可以一次接入多个产品平台。 实际落地案例：胡莱三国、YOKA网、摩天大楼、56网、音悦台、情侣主页、联通网上营业厅、豆丁网。其中多家游戏开发商月收入分成过千万 主页：http://open.qq.com/ 6. 用友 代表云产品：用友企业云 点评：信息不足。用友此前的云计算尝试多无果而终，这次仍需拭目以待。 实际落地案例：刚发布，关注中 主页：http://www.uftong.com/ 7. 360 代表云产品：360开放平台 点评：国内用户量较大的软件下载与发布平台，每月有数亿独立用户。目前支持WebApp、无安装桌面软件和手机应用。提供JavaScript和PHP API，有官方PHP SDK和第三方提供的Java、Python SDK。 实际落地案例：豆瓣电台，贝瓦，凤凰网，微软Bing词典 主页：http://open.360.cn/ 8. 淘宝 代表云产品：淘宝开放平台 点评：离钱最近的开放平台。业务母体强大、商机多，开放规模大、程度深、限制少，合作形式丰富。已有众多财富神话。 实际落地案例：小艾分析、收藏有利、超级店长、多买多优惠、活法儿健康生活助手、淘大奖、赤兔名品客服绩效管理、鸵鸟网店管理系统 主页：http://open.taobao.com/index.htm 9. 八百客 代表云产品：在线CRM 800APP（2005年发布） 点评：海归创业公司。在既有的CRM上，新增社会化功能。现有企业用户超过1万家，帐户数量9万。获得Salesforce投资。 实际落地案例：励步国际儿童教育、中易安房地产担保信息、蛙视通信、开心网、戴尔国际英语、清投视讯 主页：http://www.800app.com/ 10. Xtools 代表云产品：Xtools CRM平台（2004年10月上线） 点评：以CRM为核心、综合电子账本、来电精灵和销售自动化软件群的SaaS服务。已有10651家中小企业租用。以续租率高而著称。 实际落地案例：阿拉丁，海纳喷绘，盈舟贸易等 主页：http://www.xtools.cn/  11. 金山 代表云产品：快盘 点评：类似DropBox，强调个人云存储，支持多终端。金山内部创业项目。具备较强技术实力和一定的成本优势。2011年底注册用户超1000万。金山除快盘之外，能否将其他产品实现云转型，是一个考验。 实际落地案例：康佳云电视 主页：http://www.kuaipan.cn/index.htm 12. 首都在线 代表云产品：云主机 点评：传统IDC厂商的新业务，服务方面应有优势。技术主要依靠软硬件供应商。 实际落地案例：不详 主页：http://www.yun-idc.com/index.php/service/index/id/1.html 13. 酷盘 代表云产品：酷盘 点评：另一个DropBox类产品，不少核心技术人员也来自金山。以同步速度快和用户体验见长。2011年10月B轮获得2000万美元投资。用户数估计达到千万，每天上传文件超过2000万个。下一步的发展，要看是否能尽快平台化，经受平台厂商的冲击。 主页：https://www.kanbox.com/ 14. 蓝汛 代表云产品：云+CDN 点评：蓝汛的云计算主要还是落在CDN之上，此外的云服务探索也有一段时间了，但可见的成果不多。 主页：http://www.chinacache.com/ 15. 华为 代表云产品：华为网盘 点评：DBank作为一个纯粹的互联网项目能在激烈竞争的消费者市场中站稳脚跟，对于传统电信设备厂商出身的华为来说是个好消息。当然，网盘只是一个开始，也只是华为云计算战略的冰山一角。在平台技术和服务上，华为投入巨大，前途光明，但困难也前所未有。 主页：http://www.dbank.com/ 16. 班墨 代表云产品：云测试平台 点评：国内首个云测试服务。难能可贵。 实际落地案例：江苏电信CDMA网元服务遍历测试、江苏电信13个本地网（江苏13市）BSS版本回归测试、“千里马”对讲机销售管理 主页：http://www.alldaytest.com 17. 北京云联科技 代表云产品：云游戏 点评：类似Onlive，还需要培育市场，也许发力移动平台是一种选择。版权游戏达到200款，线上游戏超过100款，并且在不断更新。2012年1月或Intel资本投资。公司技术顾问是开发了第六感技术的Pranav Mistry。 主页：http://www.godhd.com/ 18. 百会 代表云产品：在线Office 点评：Zoho的中国版。数字星空从做发行商转型云服务运营商，勇气可嘉。目前产品已经超过20款，办公、维基、邮箱、聊天、CRM、报表等等一应俱全。这样当然能带来协同优势，可是，是否也有重点不突出，什么都有，什么都不是最好的问题？ 实际落地案例：捌零国际、成龙汽车网、UnixIDC、SaaSCHN、尚邮、喜欢玩、第一阵地、项目管理者联盟、京城邂逅、Alex Global Enterprise Ltd、Teachers Without Borders 主页：http://www.baihui.com/index.htm 19. 美科德 代表云产品：云宝 点评：创始人曾经供职华为数据通信产品部。主攻方向——个人云硬件产品市场开拓难度不小。目前已经在同时兼顾软件和互联网。 主页：http://www.mycloud.net.cn/ 20. 科大讯飞 代表云产品：语音云 点评：感谢苹果的Siri，为语音带来春天。讯飞语音云的合作伙伴目前已达3100家，用户3300万，每日请求700万次。但这一领域属于里平台最近的特性，下一步竞争将非常激烈。 实际落地案例：新浪微博客户端和红围脖客户端、小米科技的米聊客户端、搜狐的搜狐微博客户端，还有凯立德导航、图吧地图、大众点评等 主页：http://www.voicecloud.cn/index.html 21.广东一一五科技有限公司 代表云产品：115网盘 点评：Dropbox类产品，15G的超大免费空间，1G单文件大小限制，永久分享期限。 实际落地案例：115网盘 主页：http://www.115.com/ 22.华云信息技术有限公司 代表云产品：华云弹性计算云 点评：华云弹性计算云是整合了计算、存储与网络资源的IT基础设施能力租用服务，是具备基于云计算模式的按需使用和按需付费能力的服务器租用服务。 实际落地案例：中国石油、盛大游戏、国家电网、华军软件园、完美时空等。 主页：http://www.chinac.com/index.php 23.谷数科技 代表云产品：D-Fusion 8000系列 点评：D-Fusion 8000系列是谷数科技特别为专用和商用高性能计算（HPC）市场推出一款高端集群网络存储系统。它不但具有企业级存储望尘莫及的高性能、高可靠和高扩展性，并且在满足功能与应用方面丝毫不逊于任何企业级存储。 实际落地案例：谷数科技专注于大型设计制造行业，针对航空航天、核能、汽车、军工科研等提供定制化、专业级的解决方案，满足各种类型业务及混合业务的高I/O负载、高安全可靠性、海量数据存储等需求。 主页：http://www.ceresdata.com/ 24.又拍云存储 代表云产品：又拍云存储 点评：又拍云存储是通用的大规模存储服务。开放高度可扩展的API，开发人员可轻松使用，帮助互联网企业以极其低的价格，获得可靠、安全、快速的基础存储系统。 实际落地案例：又拍云存储 主页：https://www.upyun.com/index.php 25.深圳中科金证科技有限公司 代表云产品：健康云平台 点评：健康云平台利用云计算平台技术，构建数据共享平台、数据交换平台，构建公共卫生、医疗服务、新农合、基本药物制度、综合管理五大应用体系，建设标准统一的健康档案和电子病历库，实现各级医疗卫生机构应用服务和区域信息共享，实现全民健康档案的建立与有效利用。 实际落地案例：深圳市健康云平台系统、南非健康云 主页：http://www.casking.com.cn/ 26.中科曙光 代表云产品：曙光cloudbase 点评：曙光cloudbase以低能耗、绿色环保的特色，成为企业数据中心采购的首选。 实际落地案例：成都市电子政务云平台、大连市政府电子政务外网暨大连市政府数据中心建设、上海市多媒体公共技术平台、创新工场“点心”OS 主页：http://www.dawning.com.cn/chpage/c1/ 27.中科蓝鲸 代表云产品：云计算存储平台BWStor CSA 点评：中科蓝鲸为云计算平台提供存储服务，实现非结构化数据的存取、调度。 实际落地案例：以色列国家有线电视网络存储案例、水晶石影视传媒后期制作网存储案例、广东省数字电视高清互动端到端平台存储案例 主页：http://www.bwstor.com.cn/index.aspx 28.太极计算机股份有限公司 代表云产品：北京祥云工程参与者，定制化系统 点评：作为IT服务的“国家队”，太极积累了深厚的资源。面对云计算的落地，太极的着力点是定制化。 实际落地案例：政府信息化行业优势带动云计算在其他行业落地 主页：http://www.taiji.com.cn 29.亚信联创 代表云产品：橘云 点评：中国最大、全球收入和市值均第二大的电信BSS/OSS提供商 实际落地案例：重庆电信EDA系统建设案例、亚信BI助云南移动大客户经理精确服务、 “个人服务顾问”助四川移动实现精准营销、江西移动“客户统一营销”案例 主页：http://www.asiainfo-linkage.com.cn 30.济南银泉科技 代表云产品：Green2C云计算平台 点评：虚拟技术、容灾系统和云计算基础架构方面，济南银泉在当地区域非常有影响力。 实际落地案例：齐鲁制药虚拟化建设、吉利集团虚拟化容灾建设、济南市国税局等 主页：http://www.yinquan.cn/index.html 31.炫我科技 代表云产品：炫云引擎 点评：炫云作为SaaS应用平台已被诸多企业认可，提供灵活高效的图形图像渲染引擎。 实际落地案例：北京电影学院、东北师范大学、天津科技大学、北京世纪彩蝶动画 主页：http://www.shinewonder.com/ 32.拿云时代 代表云产品：拿云ECP、拿云云桌面 点评：通过灵活高效的性能分配架构，帮助企业提高云计算应用的效率，节省成本。 实际落地案例：Christie选用Magor通讯的视频协作解决方案 主页：http://www.nayun.cn 33.北京美地森科技有限公司 代表云产品：Cloud Engine 点评：拥有先进的云存储解决方案，可提供云计算、高性能云主机服务，性价比突出。 实际落地案例：中国铁通集团NDC、安博教育、联想数据 主页：http://yftty.com 34.友友系统 代表云产品：云计算操作系统CloudWare 点评：通过自有核心技术实现了存储、管理、通信等整套功能。 实际落地案例：某国防重点实验室云计算仿真平台、区域电网公司客服系统云化改造、数据统一存储和访问平台、DNS日志分析系统、互联网网游平台、平安城市大规模高清视频监控平台 主页：http://www.yoyosys.com/cn 35.UIT创新科 代表云产品：UCA2000 点评：从备份、重复数据删除、多重数据保护策略等全面的数据保管、传输方案。 实际落地案例：UIT灾难备份外包业务整体解决方案 主页：http://uit.com.cn 36.新浪 代表云产品：微盘 点评：新浪微盘的特色在于与新浪微博的结合，与好友分享快乐，支持电脑、手机等多终端访问，简单易用。 实际落地案例：微盘 主页：http://vdisk.weibo.com/ 37.百度 代表云产品：百度网盘 点评：作为国内最大的搜索引擎，百度网盘令人期待。百度网盘随时随地分享，安全无忧。 实际落地案例：百度网盘。 主页：http://pan.baidu.com/ 38.迅雷 代表云产品：迅雷网盘 点评：迅雷网盘结合自己的下载、点播等在线服务，力图为用户打造一站式存储服务。 实际落地案例：迅雷网盘。 主页：http://dynamic.xlpan.com/ 39.浪潮 代表云产品：浪潮云海集装箱数据中心 点评：浪潮云海数据中心以其灵活、模块化的设计理念，成为云计算时代的首选数据中心之一。 实际落地案例：环保国控重点污染源自动监控系统方案、电力行业调度技术支持系统分析、MaxIQ固态盘缓存性能解决方案。 主页：http://www.inspur.com/ 40.华为 代表云产品：OceanStor CloudStor CSE云存储业务平台 点评：OceanStor CloudStor CSE云存储业务平台是华为打造的一款高性能企业云存储平台。 实际落地案例：上海联通。 主页：http://www.huawei.com/ 41.中兴 代表云产品：ZXF20 S260V1.5 存储系统 点评：作为最早涉足云计算的厂商之一，中兴的ZXF20 S260V1.5 存储系统为绿色云计算量身定制。 实际落地案例：重庆移动农网基地呼叫中心。 主页：http://www.zte.com.cn/ 42.中国软件与技术服务股份有限公司 代表云产品：中软红云 点评：中国领先的云计算提供商，从IaaS到PaaS层拥有成功实践，已实施若干成熟案例。 实际落地案例：北京歌华有线交互应用虚拟化支撑平台、上海浦东软件园“汇智在线”IT云服务平台、中国电子云计算信息平台。 主页：http://www.css.com.cn/ 43.用友 代表云产品：网商服务 点评：非常实用的网商发货管理软件，淘宝卖家认知度非常高，可提升发货速度数倍，节省人工成本。 实际落地案例：苏诺童品。 主页：http://www.chanjet.com/ 44.金蝶 代表云产品：云计算的运行支撑平台 点评：非常成熟云计算支撑平台，经过多年积累有丰富的实践，在安全管理、稳定性方面位于国内前茅。 实际落地案例：中国人民银行信息中心、国家民政部信息中心、广东省工商行政管理局信息中心、神州数码。 主页：http://www.apusic.com/ 45.东软 代表云产品：Aclome敏捷云管理环境 点评：拥有强大的研发实力，经过多项重大成功案例的考验，系统成熟稳定。 实际落地案例：中国移动南方基地“天云计划”、中国联通VDC虚拟数据中心、福建移动资源池项目、无锡物联院博览园项目、天津国家数字出版基地云计算项目、东软“熙康”健康云。 主页：http://aclome.neusoft.com/ 46.新浪微博 代表云产品：新浪微博开放平台 点评：国内人气最高的社交媒体推出的开放平台，可轻松通过新浪微博开发应用。 实际落地案例：Weico、微博三格半、微盘、街旁 主页：http://open.weibo.com/ 47.同有科技 代表云产品：NetStor iSUM300 点评：轻松易用，无需经过专业培训，维护简单。 实际落地案例：广州市中医医院、吉林国土资源厅 主页：http://www.toyou.com.cn/ 48.卫士通 代表云产品：SJY15-C服务器密码机 点评：国内最具实力的信息安全企业。 实际落地案例：国家体育总局，北京地方税务局 主页：http://www.westone.com.cn/ 49.北京电信通 代表云产品：IDC数据中心 点评：在北京拥有四所机房，地理位置优越。 实际落地案例：北京赛维创世、瑞星科技、千龙网都、盛大 主页：http://www.bjdxt.com/ 50.华胜天成 代表云产品：华胜天成IaaS管理平台 点评：提供IaaS云服务目录的管理，以及IaaS云服务交付过程的管理，从而帮助用户构建全面的IaaS云运营管理体制。 实际落地案例：中国联通某省分公司产创部云计算平台建设项目，中国移动某省分公司业务支撑部绿色数据中心建设项目 主页：http://www.teamsun.com.cn/","title":"什么是云？云里雾里——最流行的云时代"},{"content":"最近微博上很热闹，各路大牛悉数出马，讨论大家都很鄙视却又时不时拿出来争个面红耳赤的“语言”问题。此番场景甚是熟悉，就如《西游记》隔那么一段时间就要拿出来翻拍一遍…… AD： 51CTO云计算架构师峰会 抢票进行中！ 最近微博上很热闹，各路大牛悉数出马，讨论大家都很鄙视却又时不时拿出来争个面红耳赤的“语言”问题。此番场景甚是熟悉，就如《西游记》隔那么一段时间就要拿出来翻拍一遍…… 首先是 @tinyfool 发表了简单直接的观点“Objective-C显然是最好的语言，没有之一”，我充分相信这是 tinyfool 为了活跃 Tiny4Cocoa 社区气氛，有意抛出的话题。 随后 @寒冬winter 发表了《我心中编程语言的评价标准》，我不知道这篇文章跟 tinyfool 的观点是否有关系。寒冬从方法论的角度阐述了如何评判编程语言的好坏。没有偏向任何一门语言，强调的观点是“物尽其用”，没有好与不好的语言，只有合适与不合适的语言。 我估计 @庄表伟 ，是看了寒冬的文章，所以发表了《聊聊语言之争》。庄表伟虽然认为语言之争不必有，但是语言还是有差别的。比如他热爱的 Ruby 就比 C++好……这个逻辑似乎挺矛盾。 随后 @左耳朵耗子（陈皓） 在酷壳发表了重量级文章《C++的坑真的多吗？》。 这篇文章旁征博引，首先阐述的是 C++ 比 C 要好，然后表达了 C++ 之所以坑多是因为你不会用，随后陈皓讲述了 C++ 历史和未来，并表达了自己对于 C++ 的情感。文章涉及到很多知识点，是值得学习的好文。陈皓在撰写的时候措辞非常谨慎，极力的想要避免“语言之争”，殊不知这篇文章将此次争论推向高潮。 在看了陈皓的文章之后 @Laruence （惠新辰） 终于憋不住了，发表了《关于语言的选择-选易用的》因为他自己曾经因学不会 C++ 而放弃了 C++。他认为一门语言最大的有点就是易于上手，而不是本末倒置把大量精力放在学习“工具”的使用上。惠新辰认为 C++ 相对于 C 并没有扩展更多可适用的场景, 也没有提升性能, 更没有提高多少开发效率。他建议开发者要选择可以迅速上手并解决实际问题的语言，比如他正在维护的 PHP 语言。   最后 @老赵 终于坐不住了，发表了《我对“语言之争”的看法：别随便拉我入场》。 我刚看老赵这个标题没理解他是想入场还是不想入场，还是想强调他不是一个随便的人？老赵的这篇文章将语言之争推向一个新的高度，“大部分人没有资格讨论语 言优劣”！他认为编程语言是一门课，一门学科，不是什么惹人都自然懂自然会的东西，所以在仔细阅读相关书籍之前，你没有资格发表意见。 我认为这场语言之争很精彩，有很多独到的观点，仔细阅读能也学到不少知识。于是总结整理了一下，仅供参考。 选编程语言就如初恋，一见钟情，很多时候是命运安排你学习了一门语言，那个年少懵懂的你偏偏不小心爱上了它，于是难免情人眼里出西施。所以关于语言的争论带有太多个人的经历和情感因素，可能是程序员世界唯一不符合逻辑的话题 ：） 原文链接：http://www.oschina.net/question/28_63456","title":"程序员永远的鸡血：编程语言之争"},{"content":"2013年《计算机工程》云计算专题征稿通知（正刊） http://www.ecice06.com/CN/column/item2816.shtml   【计算机工程】《云计算专题》征稿通知 http://www.ecice06.com/CN/column/item2006.shtml 2012年《计算机科学》专辑征文 http://www.jsjkx.com/jsjkx/ch/index.aspx 投稿截止时间：2012年9月25日 第四届全国智能信息处理学术会议(NCIIP2013) http://nciip2013.gxu.edu.cn http://www.jsjkx.com/jsjkx/ch/index.aspx 投稿截止日期: 2013年2月28日  ","title":"【备忘录】学术会议&论文专辑"},{"content":"今时今刻，大数据这个词提得最多 不过 表现得最多还是商业智能 数据挖掘 云计算 在人脸识别领域 甚至在模式识别领域？ 同样是数据为王的领域 几乎一样的feature 几乎一样的model 所不同的是数据 表现在数据的量，类别上 类分得越多 每类的数据越多 识别率就会越高 所以，采集数据成为人脸识别的一个重要过程 数据为王的时代真正来领了～！！！","title":"数据时代"},{"content":"海量分布式存储技术 　　为保证高可用、高可靠和经济性，云计算采用分布式存储的方式来存储数据和冗余存储的方式来保证存储数据的可靠性，一高可靠软件来ibuyingjian呃不可靠，从而提供廉价可靠的系统。为了满足大量用户的需求，数据存储技术必须具有高吞吐率和高传输率的特点。 　　云计算的数据存储系统主要有Google GFS(Google File System)和Hadoop开发团队的开源系统HDFS(Hadop Distributed File System)。大部分IT厂商，包括Yahoo、Intel的“云”计划采用的都是HDFS的数据存储技术。 　　并行编程模式 　　为了高效地利用云计算的资源，使用户能更轻松地享受云计算带来的服务，云计算的演变是必须保证后台复杂的并行执行和任务调度向用户和编程人员透明。云计算采用MapReduce编程模式，将任务自动分成多个子任务，通过Map和Reduce两部实现任务在大规模计算节点中的调度与分配。 　　数据管理技术 　　云计算系统对大数据集进行处理、分析，向用户提供高效的服务。因此，数据管理技术必须能够高效地管理大数据集。其次，如何在规模巨大的数据中找到特定的数据，也是云计算数据管理技术所必须解决的问题。云系统的数据管理往往采用列存储的数据管理模式，保证海量数据存储和分析性能。云计算的数据管理技术最著名的是Googe的BigTable数据管理技术，同时Hadop开发团队开发了BigTable的开源数据管理模块HBase。 　　分布式资源管理技术 　　在多节点并发执行环境，分布式资源管理系统是保证系统状态正确性的关键技术。系统状态需要在多节点之间同步，关键节点出现故障时需要迁移服务，分布式资源管理技术通过锁机制协调多任务对于资源的使用，从而保证数据操作的一致性。Google的Ghubby是最锥你给的分布式资源管理系统。 　　云计算平台管理技术 　　云计算资源规模庞大，一个系统的服务器数量可能会高达十万台并跨越几个坐落于不同物理地点的数据中心，同时还运行成百上千种应用。如何有效地管理这些服务器，保证这些服务器组成的系统能提供7*24小时不间断服务是一个巨大的挑战。云计算系统管理技术是云计算的“神经网络”，通过这些技术能够是大量的服务器协同工作，方便地进行业务部署和开通，快速发现和恢复系统故障，通过自动化、智能化的手段实现大会磨系统的可运营、可管理。Google通过其卓越的云计算管理系统维持着全球上百万台PC服务器协同、高效地运行，起云计算系统管理技术也被作为企业核心机密，至今没有公布任何技术资料。 　　绿色节能技术 　　云计算技术降低了服务器的采购成本，从而使电源消耗所带来的运营成本成为云计算计算中心的主要开支之一，为了进一步降低成本，云计算的先去在绿色节能技术上进行了大量探索。 　　传统数据中心空调冷却的费用约占整体电费的30%—70%，Google为了节省能源，在比利时的数据中心降温系统无需冷却剂，而是采取额室外空气进行自然冷却。根据比利时的气候条件，每年只有7天左右无法使用自由冷却方式。在比较炎热的夏天，Google可以通过云计算管理系统将该数据中心的计算任务转移到其他数据中心中。 海量分布式存储技术 　　为保证高可用、高可靠和经济性，云计算采用分布式存储的方式来存储数据和冗余存储的方式来保证存储数据的可靠性，一高可靠软件来ibuyingjian呃不可靠，从而提供廉价可靠的系统。为了满足大量用户的需求，数据存储技术必须具有高吞吐率和高传输率的特点。 　　云计算的数据存储系统主要有Google GFS(Google File System)和Hadoop开发团队的开源系统HDFS(Hadop Distributed File System)。大部分IT厂商，包括Yahoo、Intel的“云”计划采用的都是HDFS的数据存储技术。 　　并行编程模式 　　为了高效地利用云计算的资源，使用户能更轻松地享受云计算带来的服务，云计算的演变是必须保证后台复杂的并行执行和任务调度向用户和编程人员透明。云计算采用MapReduce编程模式，将任务自动分成多个子任务，通过Map和Reduce两部实现任务在大规模计算节点中的调度与分配。 　　数据管理技术 　　云计算系统对大数据集进行处理、分析，向用户提供高效的服务。因此，数据管理技术必须能够高效地管理大数据集。其次，如何在规模巨大的数据中找到特定的数据，也是云计算数据管理技术所必须解决的问题。云系统的数据管理往往采用列存储的数据管理模式，保证海量数据存储和分析性能。云计算的数据管理技术最著名的是Googe的BigTable数据管理技术，同时Hadop开发团队开发了BigTable的开源数据管理模块HBase。 　　分布式资源管理技术 　　在多节点并发执行环境，分布式资源管理系统是保证系统状态正确性的关键技术。系统状态需要在多节点之间同步，关键节点出现故障时需要迁移服务，分布式资源管理技术通过锁机制协调多任务对于资源的使用，从而保证数据操作的一致性。Google的Ghubby是最锥你给的分布式资源管理系统。 　　云计算平台管理技术 　　云计算资源规模庞大，一个系统的服务器数量可能会高达十万台并跨越几个坐落于不同物理地点的数据中心，同时还运行成百上千种应用。如何有效地管理这些服务器，保证这些服务器组成的系统能提供7*24小时不间断服务是一个巨大的挑战。云计算系统管理技术是云计算的“神经网络”，通过这些技术能够是大量的服务器协同工作，方便地进行业务部署和开通，快速发现和恢复系统故障，通过自动化、智能化的手段实现大会磨系统的可运营、可管理。Google通过其卓越的云计算管理系统维持着全球上百万台PC服务器协同、高效地运行，起云计算系统管理技术也被作为企业核心机密，至今没有公布任何技术资料。 　　绿色节能技术 　　云计算技术降低了服务器的采购成本，从而使电源消耗所带来的运营成本成为云计算计算中心的主要开支之一，为了进一步降低成本，云计算的先去在绿色节能技术上进行了大量探索。 　　传统数据中心空调冷却的费用约占整体电费的30%—70%，Google为了节省能源，在比利时的数据中心降温系统无需冷却剂，而是采取额室外空气进行自然冷却。根据比利时的气候条件，每年只有7天左右无法使用自由冷却方式。在比较炎热的夏天，Google可以通过云计算管理系统将该数据中心的计算任务转移到其他数据中心中。","title":"云计算发展进程中的六大关键技术"},{"content":"Esri是行业内第一个提出GIS云端化的公司，目前拥有完整、开放、可落地的云GIS解决方案和丰富多样的客户端。随着信息技术的不断发展，特别是互联网、移动互联网的发展，带动了GIS的广泛应用，新技术也让GIS的普适化成为一种可能，GIS如今已不再是专业人员独享的东西。其实大家都知道“普适”实际上已经不是一个新鲜的词，在计算机领域，“普适计算”概念已经出现了很多年，而GIS的出现，似乎目前正在朝着它的方向前进。 　　也许大家对这个GIS地图服务模式还比较生疏，但是想必大家听过LBS服务吧，即通通过电信移动运营商的无线电通讯网络(如GSM网、CDMA网)或外部定位方式(如GPS)获取移动终端用户的位置信息(地理坐标，或大地坐标)，在GIS(Geographic Information System，地理信息系统)平台的支持下，为用户提供相应服务的一种增值业务。这种LBS基于位置的服务简单的说就是GIS地图服务模式。 　　移动时代，借助GIS地图服务模式打造本地生活娱乐圈可称之为目前所谓的“O2O模式” 　　线上地图精准定位，线下商家进行商业服务。移动智能手机的普及，使得这种模式的应用愈发的成熟和普遍。据新闻报道，借助于Esri的平台和技术，北京大学开发了基于Android平台的“北大之星”校园宝典。这款移动应用将传统基础地理数据和时效性很强的大众共享型信息进行空间整合，实现手机实时定位、地图导航、景区风光、教室课程、名家讲座、社团活动、聚会社交、文娱演出、餐饮美食等特色服务信息的空间整合，使校内外广大师生、游客等群体更便捷地利用移动平台资源对个人出行、学习、生活、社交进行科学合理规划，是对移动GIS公众化的大胆尝试。 　　移动时代，借助GIS应用能够将区域化的所有信息进行分类聚合展示，增强用户粘性，方便用户使用，无疑是为LBS服务进行了一次全新的注释。真是手持智能终端、走到哪里都不怕! 　　经济时代，借助GIS地图服务模式部署智能高效率办公平台已是时代所需 　　刚才说的LBS服务只是属于GIS应用的一个小小拓展，除了移动生活应用之外，经济时代的爆发也使得GIS的应用更加商业化和更加智能化。据新闻报道：西安环保局在基于环境地理信息系统建设的应用系统建立环境数据中心，通过把各部门的公共信息存储在数据中心、统一GIS服务中心、建立环保综合门户中心等方式实现共享服务平台，从而实现城市的“智慧环保”建设!此外，上海、内蒙古等环境部门也部署了环保基础GIS共享平台。 　　通过GIS地图模式的智能应用，使得政府官方平台对于资源的部署和规划掌握的更加科学、更加客观、更加透彻，各职能部门解决问题能力更加高效、更加具有针对性、更加智能化。 　　云时代， 借助云平台使得GIS地图服务模式更加成熟、更加普适 　　前几年一直喊的云计算一直个嘘头，而如今伴随着信息量的膨胀和需求，云计算时代确实已经植入到了我们的生活当中。而有了云平台的崛起，才有了GIS真正的兴起。目前，GIS越来越向大众化、普适化方向发展，而不再局限于专业领域，开发者通过借助Esri构建的基础平台为大众开发出各种各样的应用，从而满足大众的各种需求。刚才上面提到的两个简单的应用都是通过云平台开发出来的，云平台给予GIS的便利就是处理信息速度比较快、可无限存储GIS庞大的信息量、可便于开发众多商业应用等。 　　另外，Esri借助云时代向全球客户推出的第一个云GIS商业服务平台，该平台允许用户在线创建、浏览、使用和分享智能地图信息，用户还可以上传和设计地理数据，创建Web地图，通过任何设备与地图进行互动，以及将地图嵌入网站和基于Web的应用。 　　由此可见，伴随着云时代的来临，GSI的应用已经越来越垂直化的影响到了我们生活的各个方面，笔者相信随着云平台的普及，更多的垂直化应用会被相继开发。而这只能使得GIS更加成熟、更加普适。 　　GIS，不是概念，不是泡沫，不是虚构，它只是一颗具有无限潜力的炸弹!相信随着外部条件的不断成熟，GIS会越来越智能，越来越移动，越来越个性，越来越普适!如果大家对GIS感兴趣，可以报名参加2012在北京国际会议中心举行的GIS应用论坛，相信会让你体会到不一样的空间数据聚合的商业震撼力!（文/独孤依风，原创文章，如若转载，请保留此出处！）","title":"谈“普适GIS在时代中扮演的角色”"},{"content":"OpenStack已引起了业内众多眼球的关注，这是一个承诺为建设公共云计算和私有云计算建立通用基础的开源项目。如果实现了OpenStack的大规模实施，其架构就可以进一步促进混合云计算的实施、有助于云计算联盟的建立以及对高效云计算运行相关的一些关键配置任务的支持。　　它甚至可以改变我们看待云计算与网络之间关系的看法。但是，如同其他众多技术一样，OpenStack是否存在着被过度炒作的风险呢?这个问题可能是云计算中最为关键的问题了，同时它也是难以给出合适回答的。 　　OpenStack架构：一个具有竞争力的先天不足? 　　OpenStack最初是一个由NASA和Rackspace公司共同开发的项目，它旨在提供一个可以在成熟商业硬件产品上运行的云计算框架。OpenStack架构囊括了云计算中的各类模式，其中包括资源分配、机器-镜像配准与控制，以及数据存储等。目前，该项目已有超过150家以上的组织参与其中，这使得它成为创建基础设施即服务(IaaS)环境的最流行软件工具。 　　但是，作为一个商业化的云计算平台，其用户数量排名仍然落后于Amazon公司的弹性云计算(EC2)，而微软公司的Azure平台也是一个强大的竞争对手。它的IaaS关注焦点、它所受到的广泛业界支持以及它所面临的激烈竞争都成为了OpenStack变得强大或弱小的重要因素。* a0 e( @# l/ G\" u' s6 F& \\ 　　IaaS是云计算的最基本形式，基本上它所提供的虚拟裸机就是一台服务器。因为它只是更换服务器和可能的本地存储器，所以，与平台即服务(PaaS)和软件即服务(SaaS)相比，IaaS的相对用户成本较高而与之相关的利润则较低。虽然潜在的云计算供应商和用户可以在IaaS之上构建PaaS和SaaS，但是很难衡量这些更为复杂配置的效益。但是，如果运营商们关注于OpenStack IaaS，他们可能会一跃踏上由数百竞争对手所提供的平台之上，这就可能将他们置于无法(除通过定价以外)区分他们云计算服务的窘境。 　　而反对意见是，OpenStack架构实际上可以有助于服务供应商通过为IaaS提供所有的基本基础而区分他们的云计算产品，让供应商专注于其他的功能和增强功能。OpenStack是开源的、易于集成的且已与众多有趣项目相关的，这些特点都促使其基本功能逐步提升。事实上，这些项目中有许多都拥有着交集，这一点恰恰促成了以特定市场机遇为目标各种各样基于OpenStack部署，从而为供应商们提供了区分各自产品与竞争对手产品的广阔空间。4 K. ]3 U  o0 p$ a4 }5 P6 ~ 　　一个云计算供应商的最大竞争对手并不是另一个基于OpenStack的供应商。而是Amazon公司。 　　与其他诸如Eucalyptus或Nebula等IaaS云计算工具不同，OpenStack架构还未关注EC2的兼容性。OpenStack计算所使用的应用程序编程接口(API)不同于EC2模式，但是OpenStack社区承诺保持现有应用程序的EC2兼容性。虽然，它可能仍然可以在运行在EC2的OpenStack上构建应用程序，反之亦然，但是它仍然可能构建与EC2完全不兼容的OpenStack 基于IaaS应用程序。 　　在镜像管理和存储方面，这两个平台之间存在着明显的差异。这就意味着两件事情：它可能更难以使用EC2和OpenStack云计算来支持客户，而采用OpenStack的云计算供应商不能指望把EC2用户迁往他们的服务而不对应用程序或他们自己的环境做出改变。9 `* B  `\" u, y# m& e! H- t7 m% o 　　DevOps与OpenStack：路在何处? 　　从技术完整性的角度来说，OpenStack架构还存在着其他的问题。 　　可以扩展OpenStack资源控制的基本机制，以便于支持“容器配置”模型，在这样的模型中应用程序与容器及其规则相关。其中的规则包括如何为给定的应用程序分配资源以及在应用程序在服务时如何解决问题。这些项目都属于一个名为DevOps的通用目录，该目录定义了如何统一云计算应用程序开发、云计算配置与应用程序部署。在简单实用虚拟机以取代专用内部服务器的IaaS云计算中，DevOps并不是关键，但是，如果一个IaaS产品将用于构建特定云计算应用程序，那么它就是绝对至关重要的。 　　IBM公司近期对使用云计算重整业务流程(而不仅仅是外包现有应用程序)重要性的研究表明，云计算的未来可能在于它如何支持我们今天在数据中心中无法实现的工作，而不是简单地更新重复我们已完成的工作。这就意味着编写新的云计算应用程序。如果这样做了，那么如DevOps(促进软件元素的组件化和业务流程)的现代软件实践必须为这些元素提供一个在云计算中互相寻找对方的机制。如果一个IaaS云计算被用于托管PaaS或SaaS服务，那么具有同一应用程序灵活性是必不可少的。& r2 j) R3 _\" c9 G& Q 　　这里还有一个问题：OpenStack的DevOps是不完整的，除非经过精心梳理，否则PaaS、SaaS或特定云计算应用程序就无法在OpenStack架构上实现轻松实施。 　　有人认为，OpenStack的所有问题是OpenStack所独有的问题，当然这样的说法并不完全公平。事实上，其中大多数问题都与云计算服务的IaaS模式相关。但现在，OpenStack应用可能是IaaS市场中唯一一个服务选择，但是从长期来说它可能并不是供应商的最佳服务选择。在考虑决策OpenStack架构是构建公共云计算基础设施最佳框架之前，所有这些都需要慎重考虑。# N6 `! |3 u( i. `8 K$ e8 ]( J. K$ ^; N","title":"OpenStack架构：一个具有竞争力的先天不足?"},{"content":"云计算概念出现已经五年有余，大量与互联网有关的产品和服务被贴上云概念的标签。福布斯杂志刊文指出，从目前的情况看，人们对云计算的关注很可能由盛转衰，但并不会对云计算的发展构成威胁。云计算权威专家基于其丰富经验，认为云计算已经相对成熟，并详细阐述了云计算未来发展的六大趋势。 请点击下面的链接阅读全文： http://www.enterprisecioforum.com/cn/blogs/%E7%9F%B3%E5%A8%9C/2012%E4%BA%91%E8%AE%A1%E7%AE%97%E5%8F%91%E5%B1%95%E8%B6%8B%E5%8A%BF","title":"2012云计算发展趋势"},{"content":"     “云计算”在互联网的搜索量持续居高不下，各种“云”相关的服务已经充斥了生活中的每个角落，无数的事实让我们深刻地感觉到自己已经生活在了“云”时代。不过话说回来，你知道到底知道什么是“云计算”吗？你了解多少“云计算”的事情……下面就让我们走进“云计算”，开始一段发现之旅吧！ 云计算的定义     狭义云计算：是指IT基础设施的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的资源（硬件、平台、软件）。广义云计算：是指服务的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的服务；这种服务可以是IT和软件、互联网相关的，也可以是其他的任意服务。 云计算是并行计算、分布式计算和网格计算的发展，或者说是这些计算机科学概念的商业实现。也可以说，云计算是虚拟化、效用计算、IaaS、PaaS、SaaS等概念混合演进并跃升的结果。 云计算名称的由来 早在20世纪60年代麦卡锡（John McCarthy）就提出了把计算能力作为一种像水和电一样的公用事业提供给用户。云计算的第一个里程碑是1999年Saleforce.com提出的通过一个网站向企业提供企业级的应用的概念。不过“云计算”这个词语最早则是在2006年8月9日，由Google的首席执行官埃里克·施密特（Eric Schmidt）在搜索引擎大会（SES San Jose 2006）提出“云计算”（Cloud Computing）的概念。自此，全球IT著名企业纷纷予以极大关注，并投入了巨大力量进行云计算技术的研究开发。 云计算为何叫“云” “云计算”之所以称为“云”，是因为它在某些方面具有现实中云的特征：云一般都较大；云的规模可以动态伸缩，它的边界是模糊的；云在空中飘忽不定，你无法也无须确定的具体位置，但它确实存在于某处，因此云也是无处不在的。 另外一个原因是，云计算的鼻祖之一亚马逊公司将大家曾经称为“网格计算”的东西，取了一个新名称“弹性计算云”（EC2），并取得了商业上的成功，因此当计算机技术发展到“云计算”的阶段之时，也就以“云”来命名了。 云计算之延伸：云存储     云存储是在云计算(cloud computing)概念上延伸和发展出来的一个新的概念。它是指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统。 如同云状的广域网和互联网一样，云存储对使用者来讲，不是指某一个具体的设备，而是指一个由许许多多个存储设备和服务器所构成的集合体。使用者使用云存储，并不是使用某一个存储设备，而是使用整个云存储系统带来的一种数据访问服务。所以严格来讲，云存储不是存储，而是一种服务。(初志云存储产品介绍) 云计算的识别     虽然知道了云计算的定义及由来，但是我们还是容易把它与其他的网格计算、并行计算等技术混淆。我们该如何用简单的方式从大量的信息发展模式中识别云计算呢？以下是判断云计算的的两种基本方法: 1、服务是否通过网络计算云实现，即终端用户只需要简单的输入/输出。 2、网络计算云提供的服务能力即服务节点数目是否能达到即时调整，即根据终端用户服务能力需求即时增加或减少到适当服务节点数目。 看过以上内容，大家是否对于云计算有个简单的初步认识呢？下个版块中，我们还将一起去了解一下云计算的现状，请往下看。     云计算的现状 除了清楚云计算的基本知识外，了解云计算的现状将更能够帮助我们理清思路，在“云”海中站得更高，看得更远。 云计算市场应用情况 2008年全球云产业产值是10亿美元，占全球IT业总产值的4%；而到了2012年，其产值将达IT产业总产值的9%，到了2016将达IT产业总产值的15%。据估计，到了2020年，云计算产业产值将达IT产业总产值的30%-50%，产值将达万亿美元大关。 从国际范围看，EMC、Google、IBM等公司已经在纷纷抢滩云计算市场；在国内，短短的几年内国内众多的新兴公司迅速占领云计算市场，以初志科技为例：初志科技已经在教育行业，政府企业、影视传媒、互联网行业等诸多领域都已经有了很多成功的案例，获得了市场的认可。云计算产业将是个前景广阔的朝阳产业。 初志观点：云计算中的三种人 初志科技经过一段时间的研究发现，人们对于云计算的理解有较大差异，总的来说可以分为三种人。为了更好地帮助大家理解，初志将“云计算”比作一头远古的大象来叙述： 第一种人听别人说过大象，但没有见过，知道它很大很神秘，觉得很晕乎，时间久了甚至觉得那是一种忽悠。 第二种人感受过大象的厉害，比如，看到过大象走过草地留下的大脚印，听过大象的叫喊声，感觉得它是真实的，十分与众不同。 第三种人摸过大象，但是没有摸过它的全部，比如摸过象腿，摸过尾巴，觉得象不但是存在的，而且还感受到它的强大力量，并不断努力地尝试看到完整的大象。也有一些人根据自己的理解告诉别人自己也摸到了大象，但实际上他摸到的是一头牛而已，这些人较为少数。 但是这三种人都没有看到过完整的大象。 第一种人是听说过云，但没有用过云的人；第二种是用过云，知道什么是云的人；第三种是不但知道云，而且还在打造云的人，初志科技正是第三种。初志已经形成了云基本底层架构的基础（就相当于摸到了一只象腿）持续地发展，就将不断丰富对云计算产品的掌握和运用。换一种思维方式看待这个问题：正因为没有人了解云的全貌，云才显得更有魅力，也给了企业很大的发展市场；而如果“云”已经众所周知的话，那么企业就没有机会了。    对于云计算我们需要了解的不仅仅是这些，下期小憩中，我们还将为大家一起分享云计算在行业中的具体应用情况，欢迎大家继续关注。        ","title":"什么是云计算"},{"content":"阿里云计算联合海尔发布搭载阿里云OS的云智能手机——劲-Zing。该手机拥有2000毫安的电池、1GHz的CPU处理器，4G eMMC大容量存储器、4.0英寸480*800的液晶触控屏幕，同时搭载500万像素的摄像头和30万的前置摄像头，售价999元。 据了解，该手机将于今年6月15日上市，采用线上预售与线下实体店并行的销售模式。 阿里云此前在手机领域与天宇公司合作，并推出过两款阿里云OS手机。阿里云总裁王坚表示，与海尔的合作，开拓了阿里云OS的合作伙伴圈子，未来阿里云OS的整体生态圈将会更加丰富。","title":"阿里云与海尔发布新款手机 售价999元"},{"content":"1 S0A技术理念 面向服务的体系结构(service—oriented architecture，SOA)是一个组件模型，它将应用程序的不同功能单元(服务)通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言，这样做保证了这样系统构建中的不同服务可以有一种和大家都适用的办法进行相互的交换，这里我就可以看到整个的SOA的实现的最终核心就是服务，最基本的元素也就是服务。 1.1 SOA的关键的技术。 1)WSDL(Web Service Definition Language)，web服务描述定义语言。WSDL描述了web服务的接口、消息格式约定和访问地址三方面的基本内容。对服务最基本的描述是接口描述，服务消费者只有获得接口描述才能向服务发送正确的调用消息。另外服务的通信协议、访问地址、发送给服务的消息格式约定也是访问服务之前必须获得的信息。 2)SOAP(Simple Object Access Protocol)，简单对象访问协议。SOAP是一种轻量的、简单的、基于XML的协议，它被设计成在WEB上交换结构化的和固化的信息，它这是可以和当前很多的互联网协议和方式结合着使用的一种信息。 3)UDDI(Universal Description Discovery and Integration)，统一描述发现和集成，UDDI是一种目录服务，用来说明一个web服务的一些信息类型，UDDI定义如何查找web服务(及其WSDL文件)，企业可以使用它对web服务进行注册和搜索。 1.2 S0A的特殊性和优势的地方。 1)松散耦合。这样的特点可以解除对整个系统两端紧密控制的必要。对整个系统的可用性、伸缩性等，每个模块都可以进行单独的管理，保证了系统不同部分的正常运行。 2)复用增加。这项优点是可以复用曾经开发和布置的不同的服务，从而保证了资源的有效利用，实现了资源整体项目的继续开发和交付工作。 3)遗留集成。这可以帮助把之前遗留的使用系统、信息系统进行必要的服务的改善，以便它们进入新的应用系统，从而达到资源重复使用，避免不必要的过多资源的浪费，就是相当于资源的回收，然后包装改善之后在加以利用的过程，这样可以更好的减少维护和集成的使用成本。 2 微软云计算革命 云计算起源于大型互联网企业，成本和指数级的业务增长压力使他们非常关注于IT资源的利用率和应用的可扩展性。云计算提供动态的、可伸缩的、基于互联网的IT服务交付模式。目前，人们一致认为云计算将是继Pc革命、互联网革命之后的第三次IT革命。云计算根据服务部署的位置可以分为公有云、私有云和混合云三种形式。 2.1云计算存在的特殊方面。 1)对资源强调共享而不是单独的占有。云计算是利用资源之间的共享来达到提升资源利用效率，从而达到减低计算的成本的目的。当前很多企业的信息化系统通常采用“独立方案”来进行，形成了很多“遗留系统”，造成了数据库、Web应用和Web资源的浪费，而云计算是可以很好的解决这些问题的。 2)对资源强调集中不是分散开来。综观计算模式的发展，从最早期的主机计算模式，到分布式计算模式下的c/s和B/S模式，再到现在的云计算模式。可谓是“合久必分、分久必合、合中有分、分中有合”。云计算通过资源集中形成一个计算资源(包括网络、服务器、存储、应用和服务)共享池(资源池)，然后让不同的用户共享访问，因此云计算模式下一个显著的特点便是数据中心的建立。 3)不推崇静态资源配置，强调动态的资源配置。云计算作为一种提供服务的系统，客户需要的是满意的服务，所以云计算必须对客户的资源的需要做好及时的反馈，那么做好这一方面的工作，很多的云计算运用中采用了虚拟化的技术，这样才能减低不同的信息资源之间的耦合度，以便更好的做好动态资源配置的效率提升。 2.2云计算的SPI模型 根据云计算中资源池内资源的类别，可将其服务模式分为三种。 1)基础设施即服务(IaaS，Infrastructure as a Service)。这是云所提供的最为基础的服务形式，在这种形式中，用户从云中获取的是基础设施资源，例如服务器、存储设备、网络设备等。具备了这样的设施资源， 使用者就不用购买、维护相关的系统的设施和软件，还可以更加直接的使用这些设施做好自己的平台和不同信息体系的建立工作了。 2)平台即服务(PaaS，Platform as a Service)。这样的服务就是指为用户通过服务的不是可以拿过来就用的软件，也不是硬件信息，而是一个经过处理整合的基础性的资源，是一个可以为用户提供开发使用的平台，所以平台服务所面对的不是一些普通的用户，而是那些软件开发的工作人员，他们可以完全的使用这些资源，开发定制化的应用。 3)软件即服务(SaaS，Software as a Service)。这样的服务中，云服务可以把提供的商用软件放在自己的服务器上，使用的客户按照需要在网络上向厂家订购自己使用的软件，根据订购的服务的数量和时间给厂商支付费用，然后通过网络获得厂商提供的服务。这个服务的出现，使组织不需要开发跟不需要购买软件，只是在租用Web的软件、云服务所提供的管理和维护软件，还提供软件离线的使用和数据具体的存储管理服务，这样保证用户可以任何时候使用订购的软件和服务。 3 基于云计算的S0A企业絮构设计模式 分析了S0A和云计算这些技术的特点以后，我们可以看得出，它们最终给客户的都是服务，不一样的地方是SOA它更加的注重的是服务的理念来设计架构。而云计算则通过IaaS、PaaS和SaaS将各种资源(服务)提供给用户，所以在建设自己的企业的使用时，想要做到成本的节约和遗留信息的整合是可以使用基于云计算的SOA这样混合的架构设计的， 这样可以更好的提高企业信息化实际建设的效率的。 使用这样的架构模式在企业架构设计的时候，在整体上需要依旧使用SOA设计模式，而在具体的各个部分的架构设计的时候，都采用云计算技术予以实现。首先，在硬件底层、数据层和业务层将企业应用以私有云或公有云的形式进行布署(采用IaaS和PaaS)，以提高系统资源的利用率：然后在服务层使用web服务的形式封装分布在云端的各个功能：最后，在表示层采用SaaS的形式，用统一的平台来实行企业应用的完美整合，从而加强用户的体验。 4 结论 因为云计算在国内的发展才刚刚开始，很多的技术方面的问题需要不断的试验和验证， 但是SOA在软件发展的行业却是一个比较成熟的设计架构理念，它在企业遗留信息和孤立信息整合方面有着重要的作用，所以把云计算和SOA进行结合是不错的选择，可以更好的发挥它们的优点，保证企业信息化的迅速发展，为更好的为企业提供技术和软件的支持。","title":"基于云计算的SOA企业架构设计"},{"content":"感受云计算，从弹性计算开始 作者： baiyuzhong分类：CTO视点, 云计算  阅读：1,006 次添加评论 文 / 刘江 说起弹性计算，相信没有人怀疑亚马逊EC2（Elastic Compute Cloud）是目前的业界翘楚：亚马逊将自己的弹性计算云建立在公司内部的大规模集群计算的平台之上，而用户可以通过弹性计算云的网络界面去操作在云计算平台上运行的各个实例（Instance），而付费方式则由用户的使用状况决定，即用户仅需要为自己所使用的计算平台实例付费，运行结束后计费也随之结束。 煎蛋网创始人骆水银 可以看出，弹性计算这种方式，一方面减少了小规模软件开发人员对于集群系统的维护，另一方面收费方式简单明了，用户需要使用多少资源，只需要为这一部分资源付费即可。因此，从这两个方面来说，对处于创业期的公司来说，尤其适用。阿里云作为国内云计算行业的领军者，为广大企业提供稳定的弹性计算服务，这其中，煎蛋网、向日葵、上网快鸟就是应用阿里云弹性计算的典型代表。本文就带你走进这三家公司，在分享其创业历程的基础上，展现它们在弹性计算上的实践。 煎蛋网：阿里云，很贴心 煎蛋，很简单 煎蛋，谐音“简单”，以翻译和摘要形式向中文读者介绍境外新鲜资讯，其前身是煎蛋网创始人骆水银（sein）的个人博客。当时他订阅了很多国外网站，感觉每天都有众多新鲜有趣的事情发生，而国内网站却还在转载早已发霉的火星文，于是他就和另一位创始人杨光（oioi）一起，决定把它做成一个境外资讯内容分享网站。 从成立至今，煎蛋始终以“创作共用协议”授权方式坚持原创，在以复制粘贴为内容源的中文站大环境下逐渐脱颖而出。另外由于轻松随意的写作方式，煎蛋站内互动氛围非常热烈，得到了众多读者的认同和支持。目前，煎蛋成长为拥有几十位兼职作者的团队博客，已是同类小众网站的典型，在hao123、360等导航首页上长期推荐，在Google Reader、QQ订阅里也有累计200万左右的RSS读者。 结缘阿里云 作为非专业人员组成的兴趣团队，煎蛋每次在经历主机升级、服务器故障和改换机房时，往往不知所措，有时一个简单的问题就可能让网站宕机一整天。 与阿里云走到一起也算是机缘巧合。大约2个月前，因为某黑客的临时起意，煎蛋不幸成为其DDoS的目标。当时的托管机房所采取的措施不是协助煎蛋找出攻击来源，而是把煎蛋的网络切断，并封锁其IP不再上线。这让煎蛋很是苦恼。恰好此时骆水银了解到阿里云的硬件防火墙，于是抱着尝试心态，在阿里云购买了一个月的试用。 据骆水银介绍，煎蛋现在每天的流量是15万独立IP访问、80万左右PV，而静态文件和图片都存储在第三方服务上，这样他们便考虑用阿里云最低的5MB独立带宽（这也比煎蛋之前使用的北京某BGP机房里号称100MB共享实际限速2MB的好得多）。经过初步估算，煎蛋选择了云服务器D套餐和RDS数据库中型。煎蛋在之前的机房托管了两台服务器（一台前端、一台数据库），服务器购买成本2万元左右，托管费每年成本在1.5万元左右，而使用阿里云的话不需要再单独购买数据库服务器，只需购买RDS服务就可以，这样云服务器+RDS的费用加起来也就2万元左右，比之前反而节省了很多。此外，由于都是云服务器，因此以后不用担心硬件故障或者为了升级内存而专门跑机房了，而且现在还有专门人员提供技术支持，这样看的话，云服务就显得更具优势。于是煎蛋果断下单，购买了预定的服务。 在迁移到阿里云、配置服务器的过程中，煎蛋网还经历了外网IP无法获取、数据库连接无法ping通等问题。这倒是让煎蛋首次使用了阿里云的工单系统，在后台提交工单后，很快就在后台看到了阿里云的反馈，问题解决之后，阿里云的技术还亲自打电话说明了情况。 值得一提的是，5月9日，煎蛋又遭遇了一次小规模攻击，网站浏览速度被严重拖慢，前台只能显示静态缓存而后台基本瘫痪。骆水银迅速在阿里云后台提交了工单反馈问题，10分钟后阿里云方面就打来电话，通过PHP进程和网络状态判断出煎蛋遭受了小规模CC攻击。因为这种DDoS的流量较小没有被阿里云的硬件防火墙清洗，就只能靠煎蛋服务器端发现问题所在并设置防火墙来解决。同时，阿里云RDS数据库的技术人员还发现煎蛋数据库引擎用的是MyISAM，不支持多并发更新，在压力大时读操作会卡住而让故障更严重，因此建议转为InnoDB数据库引擎。随后，煎蛋的网管Paveo将数据库转换为InnoDB引擎并添加了iptables规则，将进入流量降了下来，网站也恢复了正常访问。 这次小规模攻击是对煎蛋的一次考验，但他们这次并没有张皇失措，因为服务商不是撇清关系赶他们走而是帮他们解决问题。 谈及阿里云的使用体会，骆水银总结道：“就我个人目前的体会，阿里云的优势是稳定的带宽和周到的技术服务，而这是对网站正常运行来说最为重要的。阿里云与传统机房的区别就是在线后台和工单系统。完善的在线后台可以做一些基本管理操作，有问题时可以在线提交工单。一开始我们对不能直接打电话找客服的方式很不习惯，但使用工单后发现阿里云的同学反馈非常及时，而且在答复时一般都会打电话进行说明，这样在解决问题时非常方便。” 阿里云给煎蛋带来的好处，连他们的读者都能够真实地感受到：“我们以前的服务器经常超载，超载的提示页面是一只鸡，读者们把它称作超载鸡。最近2个月经常有读者说，自从煎蛋搬了服务器，都看不到超载鸡了，好怀念它。事实上，在我们搬到阿里云的这2个月里，我也注意到阿里云的网站后台在不断升级改版，后台界面更漂亮了，功能更多了，与之前不同的是可以直接监控系统状况，并增加了续费和升级管理配置功能。” 未来，继续“煎蛋” 从2006年创立至今的6年时间里，从零做到现在的日浏览量近百万，煎蛋增长速度相当缓慢。不过煎蛋没有做过任何主动推广，前期完全是通过读者的主动传播逐渐成长起来，到后期网站内容多起来以后，搜索引擎开始成为煎蛋重要的流量来源。与同类网站在成长起来后转向商业化相比（比如译言、果壳），煎蛋一直保持个人网站形态，所有成员都有自己的正式职业（或者学业），以兴趣为基础，从而保证在煎蛋的持续内容更新。成员都没有任务要求，也没有定量的更新压力，还是跟最初一样：看到自己觉得好玩的内容才会拿来写。而唯一的区别就是，从之前的单纯的义务团队，转变为现在的付费兼职制度，虽然没有专门成立公司，但广告收入能保证成员的稿费和基本运营成本。谈及是否有投资和收购机会时，骆水银说他一直没有接受，因为他不希望为了“做大”或者发展得“更快”而承受盈利压力变得商业化，或者承载起门户或媒体的雄心而失去煎蛋原始的趣味；他希望煎蛋继续保持简单，始终保持轻松的小网站姿态，即使走得慢一点，也要能留住老读者。 骆水银坦言，从商业角度来说，煎蛋从不是一个很好的范本，毕竟它不以盈利为目的。他们追求的是在持续的分享中收获成就感并乐在其中。因此，从这个角度来说，骆水银建议创业的朋友们不一定都从热门入手，扎堆去做SNS或者iOS APP，可以想想自己的兴趣所在。做自己喜欢的事，才是长久的事业。 对于阿里云，骆水银的寄语是：“阿里云在前进，我们也在成长。作为阿里云的新用户，我们对这个平台只有感谢和祝福，希望阿里云更好地走下去。” 向日葵：与弹性计算同行 向日葵的由来 向日葵远程控制是一款面向企业和专业人员的远程PC管理和控制的服务软件，它是由上海贝锐信息科技有限公司（简称Oray）推出的。主机安装了向日葵远程控制客户端后，用户在任何可连入互联网的地点，都可以通过向日葵轻松访问和控制远程主机，整个过程完全通过浏览器进行，无需再安装软件。向日葵远程控制在各种复杂网络环境下也能实现内网穿透，通过浏览器能轻松实现对远程PC的服务、进程、用户和文件等进行管理。 谈到做向日葵的初衷，Oray CTO张小峰说：“当初决定做向日葵就是想控制家里的电脑下载东西，试用了几款软件后，感觉都不顺手，于是就萌生了做一款简单易用的远程控制软件的想法。而向日葵的前身是花生壳远程控制，花生壳本来是一款动态域名解析软件，开始时就想利用花生壳+RDP的方式来远控，但慢慢发现这种方式很麻烦，后来想何不做成基于互联网的远程控制软件。但真正开始做的时候，才发现这不是简单地实现远程桌面，还包含远程文件管理、远程摄像头等各种类型的应用。” 上海贝锐信息科技有限公司CTO张小峰 打造创新思维 市场上远程控制和管理软件众多，鱼龙混杂，而与其他同类型的公司相比，向日葵加入了很多自己的创新思维。 自主知识产权的远程控制协议。现在大部分远程控制软件都是采用VNC的开源的远程控制协议，目的就是为了极大缩短开发周期，远程控制协议也是远程控制的最核心和最难的部分。Oray一直以来坚持原创精神，做拥有自主知识产权核心技术的软件企业。 开启全新的云配置的远程控制模式。被控端在首次部署完成后，其配置参数将全部存储于向日葵的云服务器中，这样当部署被控端或被控端机器重新安装时，无需进行任何配置，做到真正的无缝衔接。 全面兼容微软RDP远程桌面协议（俗称3389）。在向日葵四种桌面模式中，工作模式采用了微软RDP远程桌面协议，这样方便用户在多种远程桌面模式中自由切换，体验完全不同的桌面效果。 与国内其他远程控制软件不同，Oray坚持正规化运作路线，不作恶，也不提供作恶的途径，向日葵被控端全面获得了微软软件徽标和WHQL双重认证，与Windows系统完全兼容，并且会一直坚持安全的路线。 弹性计算改变传统的项目上线方式 虽说向日葵有这么多创新的地方，但张小峰并不讳言，在创业过程中，他们确确实实遇到一些挑战。 一个项目的上线，如果通过传统的方式进行规划，需要考虑硬件采购、多点线路部署等一系列问题，这些问题对项目的服务质量都有着深远的影响。而云计算作为一种新型的计算模式，云服务商可以很好地提供海量IT资源，如计算能力、海量存储、多线路互访……而阿里云的弹性计算可以很好地解决一系列问题。 首先，阿里云的弹性计算，可以简化整个硬件采购的过程，有效地控制项目的运营成本，而无需在项目开始的时候投入大量的资金。通过阿里云弹性计算按需扩展、实时开通等服务，还可以实现服务快速搭建、切换、扩容，为用户提供更优质的体验。 其次，阿里云的优质线路，令用户无论身在任何线路运营商的环境下，都可以畅游阿里云上的服务。这优势是其他单一线路的机房无可比拟的。 在谈及阿里云弹性计算的使用经验时，张小峰说：“阿里云的弹性计算既存在一定优势，同时也不可避免地存在磁盘I/O资源竞争问题。如果只是完全把物理服务器上的服务进行迁移，未必能完全适用。因此在部署之前，我们根据其特点，对服务架构及服务端程序进行有针对性的优化，力求在云服务器上能发挥最大的优势。” 上网快鸟：云计算对移动互联网格外重要 晨风云（北京）科技有限公司是一家移动互联网新创公司，团队最初由4个人组建。他们开发了一款节省流量的手机软件——上网快鸟，可以使手机上网加速，同时节省流量从而节省手机话费。上网快鸟采用最新云计算技术，带给用户省钱、快速、安全的上网体验，安装完成即时生效，退出软件也能享受以上服务，好用不耗电。在对上网快鸟项目组的采访中，项目成员谈的最多的还是“服务用户，以用户为导向”。 晨风云（北京）科技有限公司联合创始人兼CEO张慧 不要为了创业而创业 关于创业历程，晨风云CEO张慧说他们不是为了创业而创业，大多数人在创业之前都会有很多纠结，有的人最终坚持下来，有的人中途放弃。而自己之所以创业，一方面是与之前的工作经历有关；另一方面就是年龄——人过了而立之年就想做一些自己喜欢的产品，让自己更有成就感。张慧2000年开始工作，之后经历了互联网 “兴起—泡沫—再次兴起”的过程，凭借敏感的嗅觉，他看好移动互联网的发展机遇，与朋友一起于2011年10月毅然决然地投身到创业大军中，创建了晨风云，目的就是希望能够做出优秀的产品服务于用户。 在创建晨风云之前，张慧团队进行了大量的市场分析和技术预研，确定了服务用户的方式，在不断的否定、思想碰撞和沟通中对产品做了很大的改变，最终定义出上网快鸟这款产品。从2011年10月到2012年1月，上网快鸟历时3个月后正式发布上线，上线第一周便被应用市场评为“上升最快的Android应用”，说到这里，这位严谨的CEO脸上浮现出了幸福的微笑。 创业方向和团队有优势 张慧表示，晨风云是一家新兴的、朝气蓬勃的创业公司，根据现代移动互联网手机上网的普遍现状，即每个月包的流量到月末时就不够用，以及上网速度不快，他们便顺势开发了“上网快鸟”这样一款能够使加速上网、节省流量的免费软件，争取提高手机用户的上网体验，期待得到用户的认可和喜欢。同时，晨风云与众不同的地方还体现在团队骨干成员及其背景上，团队成员中张慧有着十年电信运营商行业经验，其他创始人也均有多年工作经验。尤其架构师团队是做企业级网关产品和云安全产品出身，因此团队在系统稳定性方面具备丰富的经验，能够确保产品服务质量，达到99.9999%的可用率。 创业真体验 “创业最困难的首先是资金问题，”在提到创业困难时，张慧颇为感慨地说，“刚开始时，项目资金不够，大家就一起凑钱，直到成功融资，资金紧缺的状况才得以改善。其次是人才的稀缺，创业初期，团队小，知名度不高，吸引不到合适的人才加入到团队，这样就导致了团队技术开发的困难。最初，工程师们要熬夜工作到凌晨两点，甚至一起通宵在办公室工作也是常有的事情。随着产品的上线得到用户的认可，团队才开始逐渐壮大。” 晨风云团队成员很认同马云说的一句话：“今天很残酷，明天更残酷，后天很美好，但绝大部分的人死在明天的晚上，看不到后天的太阳。”在张慧眼中，“创业是一件艰苦而且持续的事情，创业者需要不断给自己加油”。创业是“打江山难，守江山更难”，创业者要始终保持清醒的头脑，守得住孤独，经得住考验。自身具备了创业的条件之外，还要选择一个好的合作伙伴，这个合作伙伴，不仅要志同道合，而且要优势互补。晨风云团队就是由一群志同道合的、愿意为了共同的目标而奋斗的人组建。尽管创业很艰苦、很有挑战，但张慧很享受现在这个过程，他表示，自己的团队还是很幸运的，来到了创新工场的平台，使得资金、人才招聘、场地、培训等方面的问题得到解决，并能专注于技术、产品和运营方面的工作。 探索弹性计算在移动互联网中的应用 云计算作为革命性的技术，带来了很多的机会，如Amazon AWS、Dropbox、Evernote等成功者。在移动互联网情景下，由于终端的存储、计算能力有限，云计算显得格外重要。而且云计算推动了企业和社会的进步，带来了新的契机，并开启了更高效、灵活、协作的计算模式。 晨风云团队在成立初期已经使用过一些云服务，但最终选择了阿里云，原因何在？在张慧看来，首先，阿里云可以随着业务需求的增加不断扩展资源，很便利，同时可以定制进项，系统做好进项之后，可以马上上线和使用，很及时；其次，性价比高，适合需要很好的控制资金成本的创业初期的公司；再次，阿里云已经可以支持淘宝和支付宝这样大的业务，对小团队的支持更没有问题；最后，阿里云的网络用户和接入商比较多，这样商家就很容易获取服务。 晨风云的云计算需求主要是在数据挖掘系统方面。由于每天需要处理非常多的信息，除了例行任务，还有很多临时性的任务，如果使用传统的IT解决方案，可能需要准备N台机器处理例行任务，再准备M台机器处理临时性任务，当然，还得雇用相应数量的IT工程师来维护。对于创业公司来讲，这是一笔相当大的开支。而通过长期租用阿里云的虚拟机处理例行任务，当有临时任务时，再临时租用一些机器，因此，无论从硬件成本，还是IT运维成本考虑，阿里云这种弹性计算服务都是大数据量计算的不二之选。 而在使用阿里云的过程中，让晨风云团队成员感触最深的当属阿里云的客户服务和技术服务：网站有稳定的服务器环境和畅快的访问速度、贴心的技术维护，同时问题提交之后，会有后期的跟踪，使问题得到彻底解决。 当然，在张慧看来，阿里云也存在需要改善的地方。比如：阿里云目前没有远程控制界面，只能通过SSH登陆管理；服务、响应时间需要进一步提升，真正为用户提供好的服务","title":"感受云计算，从弹性计算开始"},{"content":"首先转载一下我年初看到的两篇文章 http://chuangye.umiwi.com/2012/0802/71897.shtml?ref=29“ http://blog.csdn.net/m13666368773/article/details/7817938               很有感触的文章，经意不经意间就会在大脑浮现，与自己的价值观进行猛烈的撞击。屌丝们，有木有？我们追求的到底是什么，“市中心500万的豪宅，名车，还是有一天能在福布斯排行榜上能看到我们的名字”，这些都没有错，我尊重每个人的选择，我们的追求很有价值，可以说完全正确，年轻人应有的斗志。        对于刚毕业的大学生或有梦的屌丝们来或出身偏僻的人来说，大部分没有自己的社会阅历，对于有点远大目标的年轻人来说，李开复，俞敏洪，周鸿祎，柳传志等成功人士的‘潇洒’无疑是我们崇拜的对象，给我们指明了方向，在他们闪耀的光环下，给我们动力，精神支柱，时刻左右着我们的价值观，表达出人出生就应该是做大事的。但又知道，并不是每个人都能改变世界，不多讨论。        目前的移动互联网，云计算，物联网，嵌入式........时髦词汇充斥着我们的眼球，屌丝们如苍蝇见到大粪般一涌而上，当然比喻不是很恰当，对于我们大部分年轻人来说，出身并不是很好，看着电视求职节目如《非你莫属》，什么海龟，牛企，名校，都是他妈的浮云，故意夸大，误导观众的价值观。我们大部分出生普通家庭，父母都是务农，希望自己的打拼能够改变命运与现实，我们CSDN的屌丝们追求技术，崇拜技术，技术才是王道，技术才能改变世界，乔布斯就是典型例子，我目前一直这么认为，也是这么做，技术就是一切，强大的内心告诉我们，困难是暂时的，特别是北漂的屌丝们，学好技术什么都能解决，这也是一种精神支柱，IT创业者无不都技术扎实，这也是一种生活方式，很体面的生活方式，别人一提起做什么的，移动互联网，网游，云计算，都是时髦的词汇，高智商。但是只有自己知道，自己有多么的苦逼，如上面文章W。         L，与W迥然不同的人生态度，我在想，我们能不能多一点L般的心态，哪怕没事时候用心想想L的方式。不要那么的‘挤大粪’，我们会不会活的更好，更快乐，但做技术固执的个性很难让我们这么做，金字塔模式注定我们大部分成为牺牲品，社会的浮躁让我们只能看到城市的光辉一面，夜晚的霓虹灯，市中心的写字楼，美女帅哥，虚伪与奸诈，我在想，如果让我们少读点书，就高中毕业，然后工作，或者参加个培训什么的，我们活的肯定没这么累，看着儿时的伙伴，都结婚生孩子了，自己还他妈什么都不是，回家种地不甘心，也不会，在都市打拼又是那么的不幸福，人生没有如果，如果有......。所以，其实我们80后没有退路，无论如何都要坚持下去，但浮躁的心态，社会的变动，技术的更新，时刻影响着我们的价值观，我们只能靠自己去判断，辨别，我特崇拜白手起家的任何有思想有梦想有作为的人，特别是农二代，他们身上发出一种特别的品质，怎么都不会被社会污染。希望能仔细站在L的角度想想。         屌丝们，我们追求的梦想是什么？","title":"屌丝们，我们追求的到底是什么？"},{"content":"什么是云计算？ 　　云计算（cloud computing）是一种基于因特网的超级计算模式，在远程的数据中心里，成千上万台电脑和服务器连接成一片电脑云。因此，云计算甚至可以让你体验每秒10万亿次的运算能力，拥有这么强大的计算能力可以模拟核爆炸、预测气候变化和市场发展趋势。用户通过电脑、笔记本、手机等方式接入数据中心，按自己的需求进行运算。 it精英们如何看待云计算 　　那么，it精英们如何看待云计算？IBM的创立者托马斯·沃森曾表示，全世界只需要5台电脑就足够了。比尔·盖茨则在一次演讲中称，个人用户的内存只需640K足矣。李开复打了一个很形象的比喻：钱庄。最早人们只是把钱放在枕头底下，后来有了钱庄，很安全，不过兑现起来比较麻烦。现在发展到银行可以到任何一个网点取钱，甚至通过ATM，或者国外的渠道。就像用电不需要家家装备发电机，直接从电力公司购买一样。云计算就是这样一种变革——由谷歌、IBM这样的专业网络公司来搭建计算机存储、运算中心，用户通过一根网线借助浏览器就可以很方便的访问，把“云”做为资料存储以及应用服务的中心。 广义的云计算和狭义的云计算 　　狭义的云计算是指IT基础设施的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的资源(硬件、平台、软件)。提供资源的网络被称为“云”。“云”中的资源在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。这种特性经常被称为像水电一样使用IT基础设施。广义的云计算是指服务的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的服务。这种服务可以是IT和软件、互联网相关的，也可以是任意其他的服务。 （一）云计算的原理:　　　　　 　　云计算(Cloud Computing)是分布式处理(Distributed Computing)、并行处理(Parallel Computing)和网格计算(Grid Computing)的发展，或者说是这些计算机科学概念的商业实现。 云计算的基本原理是，通过使计算分布在大量的分布式计算机上，而非本地计算机或远程服务器中，企业数据中心的运行将更与互联网相似。这使得企业能够将资源切换到需要的应用上，根据需求访问计算机和存储系统。这可是一种革命性的举措，打个比方，这就好比是从古老的单台发电机模式转向了电厂集中供电的模式。它意味着计算能力也可以作为一种商品进行流通，就像煤气、水电一样，取用方便，费用低廉。最大的不同在于，它是通过互联网进行传输的。云计算的蓝图已经呼之欲出：在未来，只需要一台笔记本或者一个手机，就可以通过网络服务来实现我们需要的一切，甚至包括超级计算这样的任务。从这个角度而言，最终用户才是云计算的真正拥有者。 　　云计算的应用包含这样的一种思想，把力量联合起来，给其中的每一个成员使用。   （二）云计算有哪些好处？　　　　　　 　　1、安全，云计算提供了最可靠、最安全的数据存储中心，用户不用再担心数据丢失、病毒入侵等麻烦。 　　2、方便，它对用户端的设备要求最低，使用起来很方便。 　　3、数据共享，它可以轻松实现不同设备间的数据与应用共享。 　　4、无限可能，它为我们使用网络提供了几乎无限多的可能。 （三）几款主流的云计算应用 1、微软云计算   　　目前来看微软的云计算发展最为迅速。微软将推出的首批软件即服务产品包括Dynamics CRM Online、Exchange Online、OfficeCommunications Online以及SharePointOnline。每种产品都具有多客户共享版本，其主要服务对象是中小型企业。单客户版本的授权费用在5,000美元以上。针对普通用户，微软的在线服务还包括Windows Live、Office Live和Xbox Live等。 2、IBM云计算 　　IBM是最早进入中国的云计算服务提供商。中文服务方面做得比较理想，对于中国的用户应是一个不错的选择。07年，IBM公司发布了蓝云(BlueCloud)计划，这套产品将“通过分布式的全球化资源让企业的数据中心能像互联网一样运行”。以后IBM的云计算将可能包括它所有的业务和产品线。 3、亚马逊云计算 　　亚马逊作为首批进军云计算新兴市场的厂商之一，为尝试进入该领域的企业开创了良好的开端。亚马逊的云名为亚马逊网络服务（Amazon WebServices，下称AWS），目前主要由4块核心服务组成：简单存储服务（Simple StorageService，S3）；弹性计算云（Elastic Compute Cloud，EC2）；简单排列服务（Simple QueuingService）以及尚处于测试阶段的SimpleDB。换句话说，亚马逊现在提供的是可以通过网络访问的存储、计算机处理、信息排队和数据库管理系统接入式服务。 4、谷歌云计算 　　围绕因特网搜索创建了一种超动力商业模式。如今，他们又以应用托管、企业搜索以及其他更多形式向企业开放了他们的“云”。谷歌推出了谷歌应用软件引擎（Google AppEngine，下称GAE），这种服务让开发人员可以编译基于Python的应用程序，并可免费使用谷歌的基础设施来进行托管（最高存储空间达 500MB）。对于超过此上限的存储空间，谷歌按“每CPU内核每小时”10至12美分及1GB空间15至18美分的标准进行收费。谷歌还公布了提供可由企业自定义的托管企业搜索服务计划。  5、红帽云计算服务 　　红帽是云计算领域的后起之秀。红帽提供的是类似于亚马逊弹性云技术的纯软件云计算平台。它的云计算基础架构平台选用的是自己的操作系统和虚拟化技术，可以搭建在各种硬件工业标准服务器(HP、IBM、DELL等等)和各种存储(EMC、DELL、IBM、NetAPP等)与网络环境之中。表现为与硬件平台完全无关的特性，给客户带来灵活和可变的综合硬件价格优势。红帽的云计算平台可以实现各种功能服务器实例。 （四）云计算最有利于中小企业？　　　　　　 　　云计算技术将使得中小企业的成本大大降低。如果说“云”给大型企业的IT部门带来了实惠，那么对于中小型企业而言，它可算得上是上天的恩赐了。过去，小公司人力资源不足，IT预算吃紧，那种动辄数百万美元的IT设备所带来的生产力对它们而言真是如梦一般遥远，而如今，“云”为它们送来了大企业级的技术，并且先期成本极低，升级也很方便。这一新兴趋势的重要性毋庸置疑，不过，它还仅仅是一系列变革的起步阶段而已。云计算不但抹平了企业规模所导致的优劣差距，而且极有可能让优劣之势易主。简单地说，当今世上最强大最具革新意义的技术已不再为大型企业所独有。“云”让每个普通人都能以极低的成本接触到顶尖的IT技术。   （五）在云计算时代　　　　　　 　　目前，PC依然是我们日常工作生活中的核心工具——我们用PC处理文档、存储资料，通过电子邮件或U盘与他人分享信息。如果PC硬盘坏了，我们会因为资料丢失而束手无策。而在云计算时代，“云”会替我们做存储和计算的工作。“云”就是计算机群，每一群包括了几十万台、甚至上百万台计算机。“云”的好处还在于，其中的计算机可以随时更新，保证“云”长生不老。Google就有好几个这样的“云”，其他IT巨头，如微软、雅虎、亚马逊（Amazon）也有或正在建设这样的“云”。届时，我们只需要一台能上网的电脑，不需关心存储或计算发生在哪朵“云”上，但一旦有需要，我们可以在任何地点用任何设备，如电脑、手机等，快速地计算和找到这些资料。我们再也不用担心资料丢失。　　 （六）云计算的几大形式　　　　　　   　　1.SAAS（软件即服务） 　　这种类型的云计算通过浏览器把程序传给成千上万的用户。在用户眼中看来，这样会省去在服务器和软件授权上的开支；从供应商角度来看，这样只需要维持一个程序就够了，这样能够减少成本。Salesforce.com是迄今为止这类服务最为出名的公司。SAAS在人力资源管理程序和ERP中比较常用。 Google Apps和Zoho Office也是类似的服务 　　2.实用计算（Utility Computing） 　　这个主意很早就有了，但是知道最近才在Amazon.com、Sun、IBM和其它提供存储服务和虚拟服务器的公司中新生。这种云计算是为IT行业创造虚拟的数据中心使得其能够把内存、I/O设备、存储和计算能力集中起来成为一个虚拟的资源池来为整个网络提供服务。 　　3.网络服务 　　同SAAS关系密切，网络服务提供者们能够提供API让开发者能够开发更多基于互联网的应用，而不是提供单机程序。 　　4.平台即服务 　　另一种SAAS，这种形式的云计算把开发环境作为一种服务来提供。你可以使用中间商的设备来开发自己的程序并通过互联网和其服务器传到用户手中。 　　5.MSP（管理服务提供商） 　　最古老的云计算运用之一。这种应用更多的是面向IT行业而不是终端用户，常用于邮件病毒扫描、程序监控等等。 　　6.商业服务平台（如： www.cloudcomputing-china.cn ） 　　SAAS和MSP的混合应用，该类云计算为用户和提供商之间的互动提供了一个平台。比如用户个人开支管理系统，能够根据用户的设置来管理其开支并协调其订购的各种服务。 　　7.互联网整合 　　将互联网上提供类似服务的公司整合起来，以便用户能够更方便的比较和选择自己的服务供应商。 　　说了半天相信很多人还没搞清怎么回事，因为单“云计算”这三个字就已经够云里雾里的了。云计算到底有多强大，仍有待时代的检阅！  ","title":"什么是云计算？"},{"content":"[PPT]云计算时代的社交网络平台和技术 [PPT]汉周云计算白皮书简版 [PDF]《云计算 信息产业新浪潮》第一篇 云计算概念解读 -- 锋迈正德云计算报告 [PPT] 3G时代的云计算-刘鹏 [PDF] 【百度世界2011】潜龙骄首 志在凌云 [PDF] HDFS2,一种分布式NN实现 [PDF] Hadoop在海量网页检索中的应用之我见 [RAR] 云计算ERP开发框架 [PDF] 清华云存储：从Corsair到MeePo [PDF] 如何考虑及规划动态的 IT 基础架构 [PPT] Java与云计算 [PDF] DOT一个开发处理大数据软件的分析模型 [PDF] 云计算中运营商效益最优的资源分配机制 Hadoop 作业调度技术研究 [PDF] 云计算下的酒店管理与市场营销 [PDF] 2010版桌面虚拟化技术教程 [PPT] 云计算时代的社交网络平台和技术 [PDF] SAE数据存储的演化 [PDF] 云计算数据中心可行性研究报告 [PDF] 建立异构环境下的信息架构-虚拟化存储解决方案 [PDF] 支付宝数据平台及应用 [PDF] 基于云计算技术的业务平台整合方案研究 [PDF] IBM-大数据及云计算背景下的信息管理 [PPT] 个人Blog架设攻略 [PDF] 数据中心和云计算对存储的需求 [PDF] SAE云计算平台 [PDF] 白皮书 ：VMware拨开云雾 认识云计算 [PDF] IBM-实现电信云计算管理平台的关键因素 [PDF] 高新区云计算中心建设调研报告 [PDF] 基于云计算系统的资源负载均衡的方法和设备 [PDF] 基于风险的云计算环境用户效用分析 [PDF] 基于Hadoop的城市交通碳排放数据挖掘研究 [PDF] 虚拟的路 真实的云 [PDF] 云计算的技术挑战 [PDF] 微软三大云计算产品全概览 [PPT] Hadoop与数据分析 [PDF] 虚拟化软件 云计算 [PDF] 云安全与隐私：解决方法与安全框架 [PDF] 云计算：体系架构与关键技术 [PPT] 网格计算与云计算-刘鹏 [PPT] 基于海量用户的云安全技术发展 [PDF] 世纪互联云计算培训材料 [PDF] 跨平台虚拟化管理之道——IBM Systems Director VMControl [PDF] HDFS的透明压缩存储 [PDF] 互联网超级云计算平台 [PDF] 企业应用的动态交付-Power 服务器虚拟化方案 [PDF] 世纪互联刘黎明《云计算与开源》 [PDF] Oracle云计算解决方案综览 [PDF] HDFS元数据的独立服务和独立持久化存储 [PDF] 一种面向虚拟化数字中心资源按需重配置方法 [PDF] 数据中心网络高可靠性解决方案 [PDF] 云计算科研与应用最新动态 [PDF] IBM 企业级数据资源动态优化解决方案 [PPT] 基于云计算的物联网关键技术研究 [PDF] 下一代绿色数据中心概览 [PDF] IBM—借力云计算 腾飞业务转型 [PPT] 物联网与云计算 [PDF] 云计算&SOA调研报告 [PDF] Power驱动地球-为智慧的地球提供智慧的系统 [PDF] 智慧企业与云计算 [PDF] 云数据管理技术与挑战 [PDF] 一步一步教你打造私有云 [PDF] 云计算应用 - 国家科学图书馆机构知识库 [PDF] 云服务性能监测和评估指南 [PDF] 中国云计算产业发展白皮书 [PDF] 分布式流数据实时与持续计算 [PPT] 云计算--第三次IT产业变革 [PDF] 数字校园平台及应用案例介绍 [PDF] 工信部电信研究院云计算白皮书(2012) [PDF] 跨平台2地3中心高可用及容灾解决方案深度探讨 [PDF] 云计算 系统实例与研究现状 [PDF] 云计算安全研究 [PPT] 架构变革-云计算的架构 赛迪顾问—中国三大电信运营商面向云计算转型战略研究(2012) [PPT] 谷歌与云计算-Google and Cloud Computing [PDF] 鸿泉云网—物联网云计算解决方案 [PDF] 基于Hodoop的SNS统计平台和聚类推荐 [PPT] 那些云端运算教我的事 [PDF] 直入云端＂——IBM 云计算策略概览 [PDF] 现代云计算加密技术 [PPT] 新一代P2P如何向互联网基础设施演进 [PDF] 中国移动业务支撑云计算整体规划简介 [PDF] 微软云计算之道 [PDF] 新一代企业级虚拟网格存储 XIV,构建存储云计算 [PDF] 英特尔中国大数据最佳云实践 [PDF] 云计算—31家公司经验分享 [PDF] 云计算环境下动态资源管理 [PDF] 云计算深度报告 [PDF] 中国云计算基础设施产业地图白皮书(2011) [PDF] 云计算研究报告 [PDF] 正确理解和运用云计算 走近云计算PDF完整版 云计算的关键技术与应用实例_王鹏_高清PDF扫描版下载 Hadoop开发者1-4期打包整理下载，需要的赶紧 [PPT] 云计算时代的社交网络平台和技术 [PPT] 汉周云计算白皮书简版 [PDF] Eucalyptus A Technical Report on an Elastic Utility Computing [PDF] The Challenges and Opportunities in Interfacing Hadoop with Condor [PDF] Cloud Computing What to Ask When the Clouds Roll In eBay’s Hadoop Stack Evolution and Revolution [PPT] Resources and Services Virtualization without Barriers [PDF] Programming Abstractions for Clouds [PDF] The Google File System [PDF] The Apache Way [PDF] Special Issue on Cloud Computing [PDF] Santonu-Accenture-SaaS [PPT] Virtualization, Cloud Computing,and TeraGrid [PDF] The Grid, Cloud Computing and our Manycore Future [PDF] Toward a Unified Ontology of Cloud Computing [PDF] Cloud Computing for parallel Scientific HPC Applications [PDF] Cost-Benifit Analysis of Cloud Computing Versus Desktop Grids [PDF] MapReduce Simplified Data Processing on Large Clusters [PDF] Toward a Unified Ontology of Cloud Computing [PDF] A Testbed for Datacenter Computing [PDF] A Short Introduction To Cloud Platform [PDF] A Service for Data-Intensive Computations on Virtual Clusters [PDF] Cloud Computing [PDF] Cloud Computing Today and Tomorrow [PDF] The Challenges and Opportunities in Interfacing Hadoop with Condor PDF] The State of the Apache Hadoop Ecosystem(Doug Cutting) [PDF] From Grid Computing to Cloud Computing – The IBM Approach [PPT] Cloud Computing From 30,000 Feet [PDF] Cloud Computing and Net Centric Operations [PDF] The Eucalyptus Open-source Cloud-computing System [PDF] The Economic Impact of Cloud Computing on Business Creation, Employmen... [PDF] Cloud Computing and Grid Computing 360-Degree Compared [PDF] LINQ-to-Datacenter [PDF] Cloud-Computing Good bye Big Datacentres Hello Applications running in... [PPT] Cloud Computing [PDF] Enabling Interactive Jobs in Virtualized Data Centers (Extended Abstra... [PDF] Cloud-Computing-and-Grid-Computing-360-Degree-Compared [PDF] Tech Brief Cloud Computing [PDF] IEEE INTERNET COMPUTING Special Issue on Cloud Computing [PDF] The Impact of Cloud Computing on Enterprise Architecture [PDF] Digital Ecosystems in the Clouds Towards Community Cloud Computing [PDF] Cloud-computing-wp-final-8Oct [PDF] Science Clouds Early Experiences in Cloud Computing for Scientific App... [PDF] IBM Moves Toward a -Cloud Computing- Infrastructure [PPT] Google and Cloud Computing [PDF] Application Architecture for Cloud Computing [PDF] Towards Self-Adaptive Service-Oriented Architectures [PDF] Big Data Intelligence [PDF] Big Data Systems and Architecture(NQ) PDF] Sunny Days with Cloud Computing [PDF] Bigtable A Distributed Storage System for Structured Data [PDF] Bring Cloud Computing Inside [PDF] Building mission critical messaging system(Guoqiang Jerry) [PDF] Capacity Leasing in Cloud Systems using the OpenNebula Engine [PDF] Chukwa A large-scale monitoring system [PDF] Cloud Computing What to Ask When the Clouds Roll In [url=http://www.aiitee.com/thread-5693-1-1.html][PDF] Introduction to Cloud Computing Power-All Networks[/url] [PDF] Cloud Computing [PPT] Cloud Computing @ UW [PDF] IBM Introduces Ready-to-Use Cloud Computing [PDF] THUIRDB A Large-Scale, Highly-Efficient Index, Fast-Access Key-Value S... [PDF] Cloud Computing and Cloud Networking [PDF] Cloud Computing And Equal Access For All [PDF] Clover A NameNode Cluster Version of HDFS [PDF] CloudComputing CACM [PDF] HBase Coprocessors and Security [PDF] Using HadoopMapReduce with SolrLucene for Large Scale Distributed Sear... [PDF] Towards Cloud Computing Opportunities and challenges for e-Science [PDF] Perspectives on Cloud Computing and Standards [PDF] MRGIS A MapReduce-Enabled High Performance Workflow System for GIS [PDF] MapReduce 综述 [PDF] Technical Report TR-08-07 An Evaluation of Amazon-s Grid [PDF] Cloudstone Multi-Platform, Multi-Language Benchmark and Measurement To... [PDF] Future of Big Data Analytics(Ronaldo Ama) [PDF] Amazon S3 for Science Grids a Viable Solution [PDF] Licensing Oracle Software in the Cloud Computing Environment [PPT] Cloud Computing BOF [PPT] Amazon Web Services Building Highly Scalable Web Applications [PDF] Search Index Building with HBase at eBay(Ming Ma) [PPT] An Introduction to SaaS and Cloud Computing [PPT] Clouds An Opportunity for Scientific Applications [PDF] Data Freeway and Puma Realtime Data Streams and Analytics [PPT] IBM-s Perspective on Cloud Computing [PDF] Big Data Migration Practice using Column Database(p-c) [PPT] CloudComputing [PDF] Deploying Database Appliances in the Cloud [PDF] An-Architectural-Map-of-the-Cloud-Landscape [PDF] Apache BookKeeper High-performance reliable write-ahead logging [PDF] Sector and Sphere The Design and Implementation of a High Performance... Hadoop：The Definitive Guide Second Edition Hadoop_The_Definitive_Guide_First_Edition Hadoop_The_Definitive_Guide_Third_Edition","title":"近200篇云计算、虚拟化、Hadoop、MapReduce、HDFS等云计算相关资料整理下载"},{"content":"云计算的虚拟技术架构分析 发表时间：2012-2-28 周冠宇 来源：万方数据 关键字：云计算 虚拟化 ESX Hyper-V XEN KVM 架构 信息化调查找茬投稿收藏评论好文推荐打印社区分享 云计算离不开底层的虚拟化技术支持。维基百科列举的虚拟化技术有超过60种，基于X86(CISC)体系的超过50种，也有基于RISC体系的，其中有4种虚拟化技术是当前最为成熟而且应用最为广泛的，分别是：VMWARE的ESX、微软的Hyper-V、开源的XEN和KVM。云计算平台选用何种虚拟化技术将是云计算建设所要面临的问题，文章就4种主流虚拟化技术的架构层面进行了对比分析。     XEN支持两种类型的虚拟机，一类是半虚拟化(PV，Paravirtualization)，另一类是全虚拟化(XEN称其为HVM，Hardware Virtual Machine)。半虚拟化需要特定内核的操作系统，如基于Linux paravirt_ops(Linux内核的一套编译选项)框架的Linux内核，而Windows操作系统由于其封闭性则不能被XEN的半虚拟化所支持，XEN的半虚拟化有个特别之处就是不要求CPU具备硬件辅助虚拟化，这非常适用于2007年之前的旧服务器虚拟化改造。全虚拟化支持原生的操作系统，特别是针对Windows这类操作系统，XEN的全虚拟化要求CPU具备硬件辅助虚拟化，它修改的Qemu仿真所有硬件，包括：BIOS、IDE控制器、VGA显示卡、USB控制器和网卡等。为了提升I/O性能，全虚拟化特别针对磁盘和网卡采用半虚拟化设备来代替仿真设备，这些设备驱动称之为PV on HVM，为了使PV on HVM有最佳性能。CPU应具备MMU硬件辅助虚拟化。     XEN的Hypervisor层非常薄，少于15万行的代码量，不包含任何物理设备驱动，这一点与Hyper-V是非常类似的，物理设备的驱动均是驻留在Dom 0中，可以重用现有的Linux设备驱动程序。因此，XEN对硬件兼容性也是非常广泛的，Linux支持的，它就支持。     (4)KVM的虚拟化架构(如图4)   图4  KVM的虚拟化架构示意图     KVM的全称是Kernel-based Virtual Machine，字面意思是基于内核虚拟机。其最初是由Qumranet公司开发的一个开源项目，2007年1月首次被整合到Linux 2.6.20核心中；2008年，Qumranet被RedHat所收购，但KVM本身仍是一个开源项目，由RedHat、IBM等厂商支持。KVM作为Linux内核中的一个模块，与Linux内核一起发布，至2011年1月的最新版本是kvm-kmod 2.6.37。     与XEN类似，KVM支持广泛的CPU架构，除了X86/X86_64 CPU架构之外，还将会支持大型机(S/390)、小型机(PowerPC、IA64)及ARM等。     KVM充分利用了CPU的硬件辅助虚拟化能力，并重用了Linux内核的诸多功能，使得KVM本身是非常瘦小的，KVM的创始者Avi Kivity声称KVM模块仅有约10000行代码，但我们不能认为KVM的Hypervisor就是这个代码量，因为从严格意义来说，KVM本身并不是Hypervisor，它仅是Linux内核中的一个可装载模块，其功能是将Linux内核转换成一个裸金属的Hypervisor。这相对于其它裸金属架构来说，它是非常特别的，有些类似于宿主架构，业界甚至有人称其是半裸金属架构。     通过KVM模块的加载将Linux内核转变成Hypervisor，KVM在Linux内核的用户(User)模式和内核(Kernel)模式基础上增加了客户(Guest)模式。Linux本身运行于内核模式，主机进程运行于用户模式，虚拟机则运行于客户模式，使得转变后的Linux内核可以将主机进程和虚拟机进行统一的管理和调度，这也是KVM名称的由来。     KVM利用修改的QEMU提供BIOS、显卡、网络、磁盘控制器等的仿真，但对于I/O设备(主要指网卡和磁盘控制器)来说，则必然带来性能低下的问题。因此，KVM也引入了半虚拟化的设备驱动，通过虚拟机操作系统中的虚拟驱动与主机Linux内核中的物理驱动相配合，提供近似原生设备的性能。从此可以看出，KVM支持的物理设备也即是Linux所支持的物理设备。     本文所讨论的4种虚拟化技术都用到了半虚拟化驱动，若要在不同虚拟化架构之间迁移虚拟机，这些半虚拟化驱动将必然带来兼容性问题。因此，RedHat和IBM联合Linux社区推出VirtIO半虚拟化驱动开发标准，基于VirtIO的半虚拟化驱动独立于Hypervisor，跨平台迁移时半虚拟化驱动仍可重用，使得不同虚拟化架构之间更容易实现互操作。 3 结束语     目前，传统概念下的半虚拟化和全虚拟化的界线越来越模糊了，而且半虚拟化和全虚拟化得到了有机的整合，如半虚拟化的设备驱动和全虚拟化的虚拟机在上述四种虚拟化架构中得到了统一，很多虚拟化厂商也不再明确自己的虚拟化产品归类(如VMware和微软)。     随着CPU硬件辅助虚拟化技术发展到了二代，而且新版的操作系统对虚拟化技术的原生支持(如Windows7的Natively Enlightened，Linux的paravirt_ops内核选项)，以及Hypervisor对虚拟机的CPU调度和内存管理越来越少的干预。则软件做得越少而硬件做得越多，如虚拟机之间内存管理所需用到的地址翻译由软件的影式分页(Shadow Paging)转变为由CPU硬件加速的嵌套分页(Nested Paging)，各种虚拟化技术既有全虚拟化技术对操作系统的兼容性，又有半虚拟化技术所带来的性能优势。     从架构上来看，各种虚拟化技术没有明显的性能差距，稳定性也在逐渐逼近中，各自有着自身的优势场景和市场群体。因此，我们在进行虚拟化技术选型时，不应局限于某一种虚拟化技术，而应该有一套综合管理平台实现对各种虚拟化技术的兼容并蓄，实现不同技术架构的统一管理及跨技术架构的资源调度，最终达到云计算可运营的目标。","title":"云计算的虚拟技术架构分析"},{"content":"Google  1. nosqldbs-NOSQL Introduction and Overview  2. system and method for data distribution(2009)  3. System and method for large-scale data processing using an application-independent framework(2010)  4. MapReduce: Simplified Data Processing on Large Clusters;  5. MapReduce-- a flexible data processing tool(2010)  6. Map-Reduce-Merge: Simplified Relational Data Processing on Large Clusters  7. MapReduce and Parallel DBMSs--Friends or Foes(2010)  8. Presentation:MapReduce and Parallel DBMSs:Together at Last (2010)  9. Twister: A Runtime for Iterative MapReduce(2010)  10. MapReduce Online(2009)  11. Megastore: Providing Scalable, Highly Available Storage for Interactive Services (2011,CIDR)  12. Interpreting the Data:Parallel Analysis with Sawzall  13. Dapper, a Large-Scale Distributed Systems Tracing Infrastructure (technical  report 2010)  14. Large-scale Incremental Processing Using Distributed Transactions and Notifications(2010)  15. Improving MapReduce Performance in Heterogeneous Environments  16. Dremel: Interactive Analysis of WebScale Datasets(2011)  17. Large-scale Incremental Processing Using Distributed Transactions and Notifications  18. Chukwa: a scalable cloud monitoring System (presentation)  19. The Chubby lock service for loosely-coupled distributed systems  20. Paxos Made Simple(2001,Lamport)  21. Fast Paxos(2006)  22. Paxos Made Live - An Engineering Perspective(2007)  23. Classic Paxos vs. Fast Paxos: Caveat Emptor  24. On the Coordinator’s Rule for Fast Paxos(2005)  25. Paxos  made code:Implementing a high throughput Atomic Broadcast (2009)  26. Bigtable: A Distributed Storage System for Structured Data(2006)  27. The Google File System  Google patent papers  1. Data processing system and method for financial debt instruments(1999)  2. Data processing system and method to enforce payment of royalties when copying softcopy books(1996)  3. Data processing systems and methods(2005)  4. Large-scale data processing in a distributed and parallel processing environment(2010)  5. METHODS AND SYSTEMS FOR MANAGEMENT OF DATA()  6. SEARCH OVER STRUCTURED DATA(2011)  7. System and method for maintaining replicated data coherency in a data processing system(1995)  8. System and method of using data mining prediction methodology(2006)  9. System and Methodology for Data Processing Combining Stream Processing and spreadsheet computation(2011)  10. Patent Factor index report of system and method of using data mining prediction methodology  11. Pregel: A System for Large-Scale Graph Processing(2010)  Hadoop  1. A simple totally ordered broadcast protocol  2. ZooKeeper: Wait-free coordination for Internet-scale systems  3. Zab: High-performance broadcast for primary-backup systems(2011)  4. wait-free syschronization(1991)  5. ON SELF-STABILIZING WAIT-FREE CLOCK SYNCHRONIZATION(1997)  6. Wait-free clock synchronization(ps format)  7. Programming with ZooKeeper - A basic tutorial  8. Hive – A Petabyte Scale Data Warehouse Using Hadoop  9. Thrift: Scalable Cross-Language Services Implementation(Facebook)  10. Hive other files: HiveMetaStore class picture, Chinese docs  11. Scaling out data preprocessing with Hive (2011)  12. HBase The Definitive Guide - 2011  13. Nova: Continuous Pig/Hadoop Workflows(yahoo,2011)  14. Pig Latin: A Not-So-Foreign Language for Data Processing(2008)  15. Analyzing Massive Astrophysical Datasets: Can Pig/Hadoop or a Relational DBMS Help?(2009)  a. Some docs about HStreaming,Zebra  16. HIPI: A Hadoop Image Processing Interface for Image-based MapReduce Tasks  17. System Anomaly Detection in Distributed Systems through MapReduce-Based Log Analysis(2010)  18. Benchmarking Cloud Serving Systems with YCSB(2010)  19. Low-Latency, High-Throughput Access to Static Global Resources within the Hadoop Framework (2009)  SmallFile Combine in hadoop world  1. TidyFS: A Simple and Small Distributed File System(Microsoft)  2. Improving the storage efficiency of small files in cloud storage(chinese,2011)  3. Comparing Hadoop and Fat-Btree Based Access Method for Small File I/O Applications(2010)  4. RCFile: A Fast and Space-efficient Data Placement Structure in MapReduce-based Warehouse Systems(Facebook)  5. A Novel Approach to Improving the Efficiency of Storing and Accessing Small Files on Hadoop: a Case Study by PowerPoint Files(IBM,2010)  Job schedule  1. Job Scheduling for Multi-User MapReduce Clusters(Facebook)  2. MapReduce Scheduler Using Classifiers for Heterogeneous Workloads(2011)  3. Performance-Driven Task Co-Scheduling for MapReduce Environments  4. Towards a Resource Aware Scheduler in Hadoop(2009)  5. Delay Scheduling: A Simple Technique for Achieving  6. Locality and Fairness in Cluster Scheduling(yahoo,2010)  7. Dynamic Proportional Share Scheduling in Hadoop(HP)  8. Adaptive Task Scheduling for MultiJob MapReduce Environments(2010)  9. A Dynamic MapReduce Scheduler for Heterogeneous Workloads(2009)  HStreaming  1. HStreaming Cloud Documentation  2. S4: Distributed Stream Computing Platform(yahoo,2010)  3. Complex Event Processing(2009)  4. Hstreaming : http://www.hstreaming.com/resources/manuals/  5. StreamBase: http://streambase.com/developers-docs-pdfindex.htm  6. Twitter storm: http://www.infoq.com/cn/news/2011/09/twitter-storm-real-time-hadoop  7. Bulk Synchronous Parallel(BSP) computing  8. MPI  SQL/Mapreduce  1. Aster Data whilepaper:Deriving Deep Insights from Large Datasets with SQL-MapReduce (2004)  2. SQL/MapReduce: A practical approach to self-describing,polymorphic, and parallelizable user-defined functions(2009,aster)  3. HadoopDB: An Architectural Hybrid of MapReduce and DBMS Technologies for Analytical Workloads(2009)  4. HadoopDB in Action: Building Real World Applications(2010)  5. Aster Data presentation: Making Advanced Analytics on Big Data Fast and Easy(2010)  6. A Scalable, Predictable Join Operator for  7. Highly Concurrent Data Warehouses(2009)  8. Cheetah: A High Performance, Custom Data Warehouse on Top of MapReduce(2010)  9. Greenplum whilepaper:A Unified Engine for RDBMS and MapReduce(2004)  10. A Comparison of Approaches to Large-Scale Data Analysis(2009)  11. MAD Skills: New Analysis Practices for Big Data (2009)  12. C Store A Column oriented DBMS(2005)  13. Distributed Aggregation for Data-Parallel Computing: Interfaces and Implementations(Microsoft)  Microsoft  1. Dryad: Distributed Data-Parallel Programs from Sequential Building Blocks (2007)  Amazon  1. Dynamo: Amazon’s Highly Available Key-value Store(2007)  2. Efficient Reconciliation and Flow Control for Anti-Entropy Protocols  3. The Eucalyptus Open-source Cloud-computing System  4. Eucalyptus: An Open-source Infrastructure for Cloud Computing(presentation)  5. Eucalyptus : A Technical Report on an Elastic Utility Computing Archietcture Linking Your Programs to Useful Systems (2008)  6. Zephyr: Live Migration in Shared Nothing Databases for Elastic Cloud Platforms(2011)  7. Database-Agnostic Transaction Support for Cloud Infrastructures  8. CloudScale: Elastic Resource Scaling for Multi-Tenant Cloud Systems(2011)  9. ELT: Efficient Log-based Troubleshooting System for Cloud Computing Infrastructures  Books  1. Distributed Systems Concepts and Design (5th Edition)  2. Principles of Computer Systems (7-11)  3. Distributed system(chapter)  4. Data-Intensive Text Processing with MapReduce (2010)  5. Hadoop in Action  6. 21 Recipes for Mining Twitter  7. Hadoop.The.Definitive.Guide.2nd.Edition  8. Pro hadoop  Other papers about Distributed system  1. Flexible Update Propagation for Weakly Consistent Replication(1997)  2. Providing High Availability Using Lazy Replication(1992)  3. Managing Update Conflicts in Bayou,a Weakly Connected Replicated Storage System(1995)  4. XMIDDLE: A Data-Sharing Middleware for Mobile Computing(2002)  5. design and implementation of sun network filesystem  6. Chord: A Scalable Peertopeer Lookup Service for Internet Applications(2001)  7. A Survey and Comparison of Peer-to-Peer Overlay Network Schemes(2004)  8. Tapestry: An Infrastructure for Fault-tolerant Wide-area Location and Routing(2001)  BI  1. 21 Recipes for Mining Twitter(Book)  2. Web Data Mining(Book)  3. Web Mining and Social Networking(Book)  4. mining the social web(book)  5. TEXTUAL BUSINESS INTELLIGENCE (Inmon)  6. Social Network Analysis and Mining for Business Applications(yahoo,2011)  7. Data Mining in Social Networks(2002)  8. Natural Language Processing with Python(book)  9. data_mining-10_methods(Chinese editation)  10. Mahout in Action(Book)  11. Text Mining Infrastructure in R(2008)  12. Text Mining Handbook(2010)  Web search engine  1. Building Efficient Multi-Threaded Search Nodes(Yahoo,2010)  2. The Anatomy of a Large-Scale Hypertextual Web Search Engine(google) ","title":"云计算核心论文"},{"content":"Oracle创始人兼CEO拉里·埃里森曾表示“云计算完全是胡扯。”，但在上周举行的Oracle开发者大会上，Oracle透露其APEX产品完全支持基于云计算的互联网和内联网开发。记者就此专访了Oracle服务器技术软件开发副总裁Michael Hichwa。 　　在9月份的Oracle OpenWorld大会上，Oracle的创始人兼CEO拉里·埃里森曾公开表示云计算已经成为广告词，认为“云计算完全是胡扯。”国内知名IT评论人士洪波对此将信将疑，认为这只不过是Oracle一贯的伎俩，对公众又释放的一枚烟雾弹而已，当Oracle看到云计算的价值时，它一定会不遗余力地占领这块市场： 　　当微软成为威胁的时候，必须打击微软。当云计算成为威胁的时候，同样地，也必须打击云计算。试想，如果Google、Amazon和Salesforce的云计算，已经可以满足大部分企业存储和计算的需要，是否意味着Oracle美好时光的终结? 　　不过，埃利森之所以能成为富豪，是因为他很清楚，理念是理念，生意是生意。如果云计算可以帮助Oracle更好地推广它的企业协作产品，那么它也很乐于和Amazon合作，如果云计算可以让Oracle的产品成为云计算的基础构件，并让Oracle对产业标准拥有更多的发言权，它也十分乐意和英特尔在云计算上展开合作。 　　在上周举行的Oracle开发者大会上，Oracle服务器技术软件开发副总裁Michael Hichwa在他的演讲中明确提到其所负责的Oracle APEX产品完全支持基于云计算的Internet和Internat开发。这也验证了洪波的“预言”。在大会期间，记者中文站编辑就APEX产品和云计算相关的话题专访了Michael。 　　记者：APEX主要解决的问题是什么，是否支持Web 2.0相关的特性? 　　Michael：Oracle APEX的全称是Oracle Application Express，以前称HTML DB，是一个用于Oracle数据库的快速Web应用开发工具。通过Web浏览器以及少量的编程经验，数据库开发人员就可以利用它开发和部署专业的应用程序。开发、部署或者运行APEX不需要额外的客户端软件，目前其所提供的工具为应用程序构建器、SQL Workshop和实用程序等。APEX对Web 2.0特性的开发也提供了多种支持，比如分页、基于Ajax的列选、动态创建报表以及Web服务开发等。 　　记者：Oracle APEX如何支持基于云计算的应用? 　　Michael：使用APEX进行云计算相关的开发有两种途径，一种是登录apex.oracle.com网站，免费注册账号后，就可以在互联网上创建自己的应用，可以直接在上面运行APEX。通过这种方式，一个互联网上的数据库就可以同时为多个公司共同服务，每个人或者企业都拥有自己的数据库，彼此之间又相互独立，也就是“多租户”方式。另外，对企业用户而已，他们更关心的是如何在企业内部应用云计算。比如有个澳大利亚的客户，他们就在自己的IT部门应用APEX，使得企业内网中的每一个用户都能使用。Oracle对云计算的观点是：云计算不仅对互联网有好处，对内联网也有很多好处。 　　记者：目前有无基于APEX产品完成实际交付应用的案例? 　　Michael：全球网络赌博门户网站Betfair就通过Oracle APEX产品减少了自己新应用程序的面试周期，也得到了Betfair数据库架构师Alex De Vergori的认可。另外人力资源咨询公司DDI、JVISTA技术服务社交网络社区Community Connect也都是基于APEX进行开发的。 转载自： http://dev.yesky.com/352/8644352.shtml","title":"Oracle APEX支持基于云计算的网络开发"},{"content":"话题背景： 从目前来看，企业内网运维和互联网运维还是存在着不小的差别，大家的关注点也有所区别，但是随着对IT的要求越来越高，以及云计算技术的越来越完善，企业内网和互联网融合的趋势已经势不可挡。 传统企业内网运维关注点是在安全、权限管理等重点，以及旧IT资产利用率，如何利用好现有的IT资产是他们目前迫切需要解决的问题。传统的企业内网，使用大量的小型机（IBM Power小型机、HP小型机、Sun小型机等）、高端网络和存储设备（Cisco、EMC、日立等），使用大量的商业数据库、ERP和中间件技术（IBM DB2、Oracle、SAP等）。企业的核心业务运行于这些设备和软件之上，业务年限长、历史遗留问题多，数据安全、业务连续性等是这些企业的生命线，往往通过购买厂商和集成商的服务来保证其IT业务的稳定性。 对于互联网运维，如何快速有效地部署，如何保证可利用率，如何处理大并发访问等是他们的头等要事。现代的互联网企业，大量使用PC服务器、普通硬盘盘阵和集群、先进的SSD技术，大量使用Linux、MySQL等开源软件。业务模式单一，软件技术、硬件设备更替迅速。性能优化、部署灵活、提升IT硬件利用率是他们的工作重点，业务领先的互联网企业背后都有一个强大的IT运维技术团队。 本期话题： 1、对于传统企业内网运维和互联网运维，哪些技术和素质是两个运维团队都所必须具有的？ 2、企业内网运维和互联网运维人员，在面对新技术（硬件设备和软件技术）方面，有何区别，为什么？ 3、如何看待企业内网运维和互联网运维的区别，在云计算大潮下，他们真的会走到一起么？ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   1、对于传统企业内网运维和互联网运维，哪些技术和素质是两个运维团队都所必须具有的？ 结实的技术基础，良好的日志检查、信息检控、巡检习惯，超强的责任心和处理问题的能力，跟得上行业技术更新、发展这对每个团队都是一样的。 2、企业内网运维和互联网运维人员，在面对新技术（硬件设备和软件技术）方面，有何区别，为什么？ 面对新技术的学习我认为都是一样的，但是企业内的运维更看重成熟的、稳定性强、商业化程度高的技术，一般不会成为吃螃蟹的人，安全稳定是第一位的；而互联网运维正相反，要时刻紧跟新技术，应用新技术，绿色、节能、高效、可用率最大化是优先的。 3、如何看待企业内网运维和互联网运维的区别，在云计算大潮下，他们真的会走到一起么？ 会走到一起的.       -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------       1、对于传统企业内网运维和互联网运维，哪些技术和素质是两个运维团队都所必须具有的？     操作系统，数据库，网络是必备知识。     能敏锐的分析问题，很好的解决问题。运维的工作繁多，一个人不可能对所有方面都有深入研究，团队的配合和重要。 2、企业内网运维和互联网运维人员，在面对新技术（硬件设备和软件技术）方面，有何区别，为什么？     企业内网的运维以稳定，可靠为主，对新技术的反应比较慢，一般都是等新技术成熟了以后才开始使用的。     互联网运维对性能的要求较高，经常会遇到瓶颈，对新技术反应很快，非常敢于尝试新技术的使用。 3、如何看待企业内网运维和互联网运维的区别，在云计算大潮下，他们真的会走到一起么？     两者对运维的要求不同，一个以稳定为主，一个以用户体验为主，至少在最近几年内，两者不会走的一起，但会出现部分的融合。","title":"互联网运维和传统企业内网运维区别"},{"content":"引自 浪潮之巅 在云计算提出的初期，三个公司有三种解释，综合起来可以是云计算比较准确的定义。 IBM，卖云计算使用的服务器。 亚马逊，提供计算资源 谷歌，对用户提供服务。 首先，云计算保证用户可以随时随地地访问和处理信息，并且可以非常方便的与他人共享信息。 第二，云计算保证用户可以使用大量在云端的计算资源，包括处理器CPU和存储器(内存和硬盘)，而不需自己购置设备。 云计算的核心技术和工程 包括：存储，资源管理和信息安全等 存储：谷歌的GFS和BigTable。 资源管理：Mapreduce，Hadoop。还有Borg","title":"云计算的基本概念"},{"content":"正如单机操作系统的内核，在阿里云OS中，飞天大规模分布式计算平台起到了承上启下的关键作用。飞天运行在通过网络互联的通用服务器集群上，隐藏了海量硬件所带来的复杂度和不可靠，向云OS的其他组件提供可信赖的的计算能力和存储能力。 具体来讲，飞天本身是一个由多个组件所构成的复杂的分布式系统，其中的核心组件是以下两个子系统。 计算资源调度系统（又称伏羲）：管理和调度集群计算资源；在多个云服务间动态分配计算资源，以满足用户的计算需求；自动检测服务器故障并迁移故障服务器上的服务。 分布式文件系统（又称盘古）：管理集群的所有硬盘；合理地安排数据存放位置以兼顾性能和数据安全性；自动检测磁盘故障并复制数据以保证安全。 在实现飞天云计算平台的过程中，工程师们面临了许多技术挑战，包括： 在不可靠硬件基础上提供高可靠的计算能力和存储能力； 提供高可用服务； 低成本运维海量硬件； 在线应用与离线应用并存； 克服节点间带宽的限制； 最大化利用计算资源，等等。 其中，不可靠的硬件是最基本的挑战。集群规模达到上千台后，单机上的小概率事件变成了必然的、频繁发生的事件。硬盘、硬盘控制器、CPU、内存、主板、电源等故障造成的宕机每天都会发生。这类硬件失效故障，我们称之为“硬”故障（fail-stop故障）。此外，还有一类故障现象不那么明显，称之为“软”故障，例如，磁盘可访问但速度只有正常的1/10、服务器没有宕机但程序运行缓慢、网络时好时坏等。这类“软”故障同样会影响服务质量，因为在线服务如果执行缓慢会造成客户端超时，而对离线作业而言，哪怕只有1%的数据处理任务缓慢，也会拖延整个数据分析作业的完成时间。 硬、软故障发生都会对系统的可靠性甚至可用性造成不良影响，因此如何及时有效地进行故障检测和恢复就变得比较关键。对于硬故障的检测业界已有成熟的方案，本文第一部分只重点讨论软故障的检测；本文的第二部分将集中探讨故障恢复策略相关的问题；最后，我们将介绍如何在保证数据可靠的同时满足在线应用的低延时需求。 云环境中的软故障检测 检测“软”故障有两种思路。  一种思路是针对每种具体故障设计检测方法。但“软”故障产生的原因可能很多，例如执行缓慢可能是服务器硬件故障、网络故障、磁盘故障、操作系统软件故障等，逐一检测会使系统过于复杂。 另一种思路是从宏观现象来检测，下面看两个例子。 例子一：检测作业在某台服务器上执行特别缓慢的情况。 我们统计每个作业在每台服务器上的执行时间。因为输入数据被均匀地切片，每台服务器上的执行时间应该大致相同。如果某台服务器上执行时间超过了平均时间的三倍，它就被标记为“缓慢”。如果各种不同作业在某台服务器上都“缓慢”，那么我们有充分理由怀疑这台服务器有问题（但不知道原因）。调度系统会自动把这台服务器加入黑名单，不再用它执行作业。之后再自动或人工检查这些可疑服务器的具体故障原因。 例子二：检测磁盘读写慢的情况。 我们在分布式文件系统里也会统计每次磁盘访问的时间。如果某块磁盘有大比率的访问时间远远超过系统平均值，那么很有可能是这块磁盘快要发生故障了。文件系统此时会做三件事：  停止写新数据到这块磁盘，防止更多数据处于危险中； 开始为这块磁盘上的数据增加更多副本； 当这块磁盘上的所有数据都有额外的副本，就可以将它下线，待运维处理。 故障自动恢复的策略 在检测到故障后，需要有自动及时的故障恢复机制。然而，故障自动恢复机制一旦没有考虑周全就会成为一把双刃剑。让我们从Amazon云服务那次严重的事故说起。 Amazon EC2大规模停机事件 2011年4月21日，Amazon的虚拟主机服务EC2发生大规模停机，时间超过两天，影响波及Reddit、Foursquare、Quora等众多网站。事后Amazon对此次事故作了详细分析。事故起因是Amazon对集群网络作日常维护升级时操作错误，网络流量被全部切换到备用网络，导致备用网络过载。自动故障恢复机制检测到网络不通，认为服务器大量宕机，马上开始数据复制以替换“宕机”的服务器上的数据副本，引发了“镜像风暴”（大量服务器同时尝试创建数据镜像）。而由此增加的数据流量更加剧了网络过载，从而使故障在集群中蔓延，进入恶性循环。最终采取了包括暂时关闭自动故障恢复系统和增加硬件在内的多种措施，服务于故障发生两天半以后恢复。 在此案例中，故障自动检测和恢复的策略是“在数据副本所在服务器失去联系时，复制数据”。这一策略对“一台服务器故障”这种小范围的常见问题很有效，然而在大范围故障如“网络过载”的场景下，可能会起反作用。在这个案例中，如果根本没有故障自动恢复机制，故障影响范围反而不会有那么大。 实际上，这一模式在过去的大规模分布式系统故障中反复出现：发生了未曾预料到的、中小范围的故障 →故障自动恢复机制采取了错误的手段 →故障恶化，进入恶性循环 Amazon S3存储服务2008年的故障就仅仅是由于故障自动检测机制的自身状态中一个bit出错，然而故障同样迅速蔓延到整个系统，导致服务在没有发生硬件故障的情况下不可用。 对此，我们的策略是限制故障自动恢复机制的作用范围：  正常情况下，任何时候集群中都有且仅有很小比例的服务器发生故障，此时自动恢复有效，即使无效也不会造成灾难； 如果发生（罕见的）大范围故障，明智的策略是尽量降低系统负载，因为此时实际上已不可能靠故障自动恢复来保持服务质量。万一此时故障自动恢复机制试图进行大量操作，并超出预设的限制，即暂时禁止掉这部分逻辑。 以前面提到的硬盘访问变慢为例：考虑到硬盘平均日故障率小于千分之一，我们给前述的疑似问题硬盘自动下线机制设置上限，例如，任何时候只能通过此机制下线总数1%的硬盘。此限制可以防止极端情况下，如大量硬盘出现问题，或者自动下线机制本身故障时，故障恢复机制本身不会引发灾难。 数据可靠性和实时性能优化 云环境中，由于分布式系统有硬件故障多发的特点，保证数据可靠性成为文件系统的一个挑战。 在飞天云计算平台的实际运营中发生故障最多的硬件是硬盘。硬盘故障占阿里云数据中心故障总数的80%。原因之一是硬盘是数量最多的部件，例如一个3000节点的集群就有30000多块硬盘，即使硬盘本身的平均无故障工作时间（MTBF）达到1,000,000小时，30000块硬盘也意味着平均每33小时就有一次硬盘故障发生。实际运营数据显示硬盘厂家标称的MTBF值并不可靠，生产环境的硬盘故障率可以几倍到几十倍于标称值。 硬盘故障最直接影响的就是盘古分布式文件系统。为了保证数据安全性，盘古文件系统对所有的数据均采用了多份拷贝。在创建文件时，用户可以指定文件数据的拷贝数目，文件系统会保证数据分布在不同的节点和不同的机架上，使得单个硬件故障不会造成数据无法访问。 多副本技术是业内广泛认可的有效防止数据丢失的技术，通常采用流水线方式传递写需求以减轻单个节点的负载。但这会导致数据写入的延迟增大，因为只有当所有副本都写成功后才能结束一个写操作。 由于磁盘读写特性，上述多副本写入磁盘的延迟通常在几十毫秒量级，有时可达100毫秒以上。云环境中的线上应用，有时会有更高的实时性要求。盘古通过内存日志文件（in-memory redo log）来解决此问题。 内存日志文件的基本思想基于以下事实：虽然服务器因为掉电或者宕机丢失内存数据的概率高于硬盘损坏的概率（所以在单机系统中我们会把日志文件写入磁盘以避免内存数据丢失），但多台服务器同时故障的概率却可以低到能够满足数据可靠性的要求。对于实时性要求高的应用，盘古提供接口，使得数据文件进入指定数量服务器的内存即可认为是写成功；盘古的后台线程随后会把内存中的数据批量写入磁盘。 盘古在保证内存日志的可靠性和低延时上做了如下考虑。 保证redo log是多份拷贝的，避免单机故障造成数据损坏或丢失。 为降低写入延迟，确保redo log写入多个数据服务器内存buffer后即返回成功，由后台工作线程保证内存数据在很短时间内持久化到磁盘。 严格检测redo log数据的健康状态，并及时采取补救策略确保数据的可靠性。 分布式系统的一个优势是对单点故障的屏蔽：数据的可靠性通过多台服务器间的复制备份得到极大的增强。对于单机，内存数据是易丢失的；但在多机环境下，如果能保证服务器不是同一时间宕机，并辅以严格的策略保证，内存数据在不降低可靠性的情况下，可以极大地提高性能。阿里云的数据中心保证了很好的硬件隔离和冗余，并备有UPS等应急措施，为我们提供了使用内存缓冲的良好硬件环境。 下面主要介绍我们在内存文件数据可靠性上的一些考虑。 写入内存阶段 确保多个数据服务器成功接收数据并放到内存buffer中（这点是redo log的设计基础）。 选择数据服务器充分考虑硬件的隔离性，避免故障的关联。 在接受数据时数据服务器判断自身的健康状态： 所写的磁盘状态是正常的，并且剩余空间足够； 当前的workload状况良好，比如内存和I/O队列没有超负荷。 内存到磁盘持久化阶段 限制从内存buffer到磁盘I/O的最长时间（30秒内）。 发现写入超时后（比如磁盘异常慢或I/O请求超载），立刻通知master服务器进行复制备份。 当发现写入异常（磁盘坏或者满等）后，立刻报警，通知master复制。 检测与复制阶段 监测磁盘异常和后台检查数据完整性，发现异常后立刻通知master复制。 可以看出，写入内存阶段的策略是预防措施；内存到磁盘持久化阶段最危险，我们确保这个阶段尽可能短（保证预期性能的情况下给出最长写入时间），并在确认出错后及时采取措施；检测与复制阶段是典型的磁盘坏掉但保证数据不丢的策略。 小结 在设计和实现飞天云计算平台过程中，工程师们花费了大量努力来应对海量硬件所带来的可靠性的挑战。本文叙述了部分设计思路但远远不是全部。锤炼一个健壮的大规模分布式系统一定需要良好的设计、精致的实现以及严格的测试。有了飞天这个稳定可靠的云OS内核，各种丰富的云计算服务及应用便有了生存、长大的肥沃土壤。我们随后将会介绍的各种云服务，正是运行建立在阿里云自行研发的飞天云计算平台上。 作者刘缙，2008年底加入阿里集团，专注于云计算平台的研发。目前在阿里云数据中心计算平台部任架构师，着重于集群资源调度系统。2006年于北京大学获得计算机硕士学位；在加入阿里之前，在微软亚洲研究院从事大规模数据分析平台的研发工作。对分布式系统和编程语言有浓厚兴趣。 作者朱家稷，阿里云计算高级专家，负责分布式存储，主要兴趣在大规模分布式系统的架构和实现。 作者张海勇，阿里云公司计算平台部高级架构师，从事文件系统以及通信模块的研发工作。之前担任IBM系统与技术研发中心高级软件工程师，从事高性能计算软件研发工作，组建并领导并行文件系统中国开发团队。在10年的IT职业生涯中，积累了丰富的大规模分布式系统的设计、开发经验，并对操作系统、文件系统有浓厚兴趣和深入理解。","title":"阿里云的介绍"},{"content":"在云计算漫漫之旅上，虚拟化将是我们建设架构即服务云不得不跨越的一道坎，而大规模部署虚拟化更是给传统数据中心管理模式、服务器、存储和网络架构规划管理带来巨大的挑战。为培养提高IT团队服务水平和总结有关这些方面的IT管理方法，笔者结合实际工作经验，与大量用户交流与反馈，阅读了国内外一些书籍、互联网资料，在本文就云计算虚拟化交换网络原理、边缘网络、核心网络和产品与发展趋势等方面给出了业务挑战、技术、经济分析和解决方案，希望对读者有所启发。 第一节云计算虚拟化交换网络——原理篇 架构即服务云计算 云计算是实现方便、快速、简单、按需访问可配置计算资源的管理模型(部分定义来自nist)，云计算是企业IT资源管理的高级阶段，随业务变化而变化，而不仅仅是IT技术简单合并与应用。云计算所包含内容非常广泛，如图1所示，分成不同层次，从最接近用户的上层到最下面的物理层，包含有业务接口层、应用平台层、分布式操作系统层、虚拟化层、硬件架构层和数据中心设施层，同时有支撑不同层次之间管理和平台，技术之外就作为商业模式出现的云服务交付体系和互联互通标准等。而架构即服务云计算是什么呢，很简单，就是根据用户需求，在虚拟化层、硬件层和数据中心设施基础等实现动态资源管理与调配的云计算服务，具备了这些特征计算模式就可以称之为架构即服务云。 图1云计算架构模型 在实现架构即服务云计算过程中，虚拟化部署与实施是迈向成功的最关键一步。这里的虚拟化概念是更大范围的架构虚拟化，与我们平时所认为的狭义服务器虚拟化不同，架构即服务云的虚拟化应该是端对端的虚拟化，包括数据中心虚拟化和桌面用户虚拟化，而数据中心虚拟化（英文称为VirtualData Center或更细分为vPoD，VirtualPoint ofDelivery）又包含了服务器虚拟化、存储虚拟化和网络虚拟化。在所有虚拟化实现方式之中，以网络虚拟化实现、设计和部署难度最大，因为大多数网络还是基于传统硬件芯片转发机制，无法实现灵活升级，所以只有实现了网络虚拟化，我们才能真正最终实现基础架构端对端的虚拟化，才能实现架构资源动态调度。 云计算数据中心资源融合演变 谈到云计算数据中心架构，我们知道，如图2所示，数据中心最基本的三种基础资源组成信息基础架构，即服务器、存储和网络。当前融合趋势之一是服务器与存储相互融合，服务器增加内置硬盘容量替代大量直联和近线存储，以分布式文件系统方式管理，存储设备则利用标准服务器实现更大规模横向、竖向扩展和更高性能架构，将原本在服务器上的文件系统内置于存储架构，通过存储内的元数据信息做到了应用智能感知和处理；融合趋势之一是服务器计算节点虚拟化需要更高比如万兆、更强、更灵活网络设备支持，而传统网络设备功能也从游离在服务器之外进入到内部物理，即虚拟化软件交换机，不但如此还在服务器内部实现了虚拟防火墙或虚拟负载均衡，CPU作为服务器内部计算核心在内部网络实现将发挥更大作用；融合趋势之三是基于IP扁平化存储与网络结合更加紧密，需要优化以IP网络为基础支撑的云存储，作为存储服务被异构服务器或客户端调用。在服务器、存储和网络硬件三种基础资源平台上，虚拟化和管理平台建立统一架构资源池，通过标准如RESTful接口进行即时调度管理。 实际上，我们仔细分析一下，从云计算数据中心存在的三个基础网络就不难理解前面所述架构融合趋势。如图3，第一个网络是服务器与前端客户之间通信网，特点是高接入、协议兼容，目前常用以太网络,用户对网络价格弹性和敏感性较高；第二个网络是服务器与服务器之间进程通信网，特点是高可靠、低延迟，进程消息微秒级实时同步，目前常用InfinitBand网络，大规模部署时对网络价格敏感性高；第三个网络是服务器与存储阵列之间通信网，特点是满足SCSI的Initiator和Target之间高带宽、高IOPS和可靠性传输，目前通常维持独立IPSAN或FCSAN，对网络价格敏感性一般，因为网络在总存储成本只是少部分，来自数据保护和关键业务的需要也降低了价格弹性。这些两两对象之间的需求就是云计算数据中心架构资源包括网络需求在内的最基本需求。要分析业务IT架构需求、了解用户痛点，规划、设计和实现数据中心架构，根据图2和图3确定的基本原则，就可以做到有的放矢，迎刃而解。 图2架构云计算数据中心基础架构图3数据中心基本网络I/O需求 进一步分析，在我们建立虚拟化环境后，服务器与服务器之间通信网被融合到单台物理机内部的不同虚拟机之间，从而服务器与存储通信网、服务器与前端客户网络也被拉到单台物理机内部，导致南北流量从90%减少25%，东西流量成为主流占据75%，如图4所示，这样趋势下，传统系统架构和网络设计势必相应改变才能适应设计要求。这就是我们今天要谈的云计算虚拟交换网络。 图4云计算虚拟化数据中心I/O演变 从历史来看，云计算虚拟交换网络由服务器内部基于软件虚拟交换发展而来，进化发展到基于硬件的数据中心边缘网络，再升级到到数据中心核心层演变，层次叠进，由用户需求推动到不同层面技术革新，从技术创新新反哺到用户需求业务发展，又有新需求促进反复作用，不断提高和前进的过程。 云计算计算资源虚拟交换网络——计算资源内部虚拟交换网络 计算资源内部虚拟交换网络原理 简单来讲，计算资源虚拟交换网络就是在物理主机内部，虚拟机管理平台为了实现同一物理机或不同物理之间虚拟机通信而实现的软件交换机。为了便于大家理解虚拟交换网络原理，下面以VMware虚拟交换网络概念为例介绍： 虚拟交换机概念一览表 英文名称 中文名称 描述 vNetworkStandard Switch 标准交换机 VMwareESX和ESXi内置软件交换机，用于实现同一物理机内不同VMware虚拟机通信，是基本网络数据转发平面。 vNetworkDistributed Switch 分布式交换机 虚拟交换增强版本，连接位于不同物理机不同VMware虚拟机通信，可以认为是可扩展、开放的虚拟网络控制平面。 ServiceConsole Port 控制台管理接口 VMwareESX平台才有，可单独配置IP地址，用于访问ESX服务器管理服务，接口名是vswif，更高级网络控制平面。 VMkernelPort VMware内核特别功能接口 可单独配置IP地址内核接口，实现虚拟管理平台特定功能例如vMotion、FaultTolerance、Logging、iSCSI和NFS等。 VirtualMachine Port Group 虚拟机端口组 允许配置同一端口组的虚拟机操作系统互相访问，若把vmnics（VMware上联物理网卡）加入了端口组，则组内的虚拟机可与物理主机外的其他网络主机通信。相当在软件交换机内做了网络分组VLAN。 VirtualNetwork Interface Card 虚拟网络接口卡 虚拟机客户操作系统内部的网卡接口名，别名又称vnic，工作负载应用通过它与外界交互。 图5虚拟化交换网络示意图（VMware软件交换） 虚拟化交换网络接口分两大类，一类是位于虚拟化支撑操作系统内部，另一类是位于虚拟客户机操作系统内部。虚拟化支撑操作系统内部网络接口有IP存储网络接口（NFS或iSCSI，需要约2G带宽，存取虚拟机映像或用户数据），资源调度和虚拟机飘移网络接口（如vMotion，一般最大消耗是3.6Gbps带宽，传递飘移信息），保证虚拟机高可用网络接口和容错日志接口（FaultTolerantLogging，消耗约4Gbps带宽，同步高可用信息）。虚拟化客户机操作系统需求则比较简单，只要客户操作系统内部虚拟接口。从图5，我们看到，每个虚拟化支撑平台内核本身就需要5个通信接口，而每个虚拟化客户机至少配置一个虚拟化接口，每个接口都需要独立IP和MAC地址。为了简化虚拟化软件交换机复杂性、构建更加开放的IT虚拟化生态环境，VMware提供了VNetwork控制平面接口，第三方软件厂家可以自己开发独立虚拟化控制平面交换机，或网络硬件厂家开发出虚拟化管理平台插件，与VMware虚拟化管理平台整合集成，自动化调度网络设备硬件配置随虚拟机飘移而变化。比如Cisco公司Nexus1000V就是第三方软件交换机解决方案，Force10等还提供了基于VMware虚拟化交换机符合VNetware规范的控制平台插件，与VMware飘移策略集成，虚拟化计算节点智能感知，实现虚拟机调度是网络自动化调度，这里就不费篇幅赘述了，有兴趣读者可以在网上查找资料。 计算资源内部虚拟交换网络挑战 随着虚拟化和云计算的深入发展，人们发现藏在虚拟操作系统内的虚拟化交换机越来越成为头痛的问题。根据IDC统计（图6），到2013年底虚拟机部署数量将是物理机的2.5倍，达到8千2百万台，虚拟机节省了大量的物理购买成本，但在管理复杂度上面造成运营成本增加也非常显著。虚拟交换机既要与现有虚拟管理平台兼容，又要应对高度动态变化端设备，维护虚拟逻辑抽象链接，集成与交换硬件设备功能，从移动性、机动性、维护性和集成性分类如下： 跟踪设备移动状态。网络端节点实体（比如虚拟机）的网络状态需要简单确定，不同主机之间可相互迁移节点状体。这些状态包括传统“软状态”，比如数据链路层学习表、三层路由转发状态、路由策略状态、访问控制列表、服务质量策略、配置监控及结构化自动化系统等。简单来讲，就是每个虚拟机移动时，其所带虚拟接口策略如何主动随之漂移。 响应网络动态变化。虚拟化环境最大特点是网络高度状态变化。跟踪虚拟机加入和离开，虚拟机往前或往后即时移动，逻辑网络环境快速变化，开放式控制平面控制流量和全局网络自动发现管理。而且由于虚拟机动态变化，防火墙和入侵检测系统无法有效随之变化而保护它们，无法做到及时被动有效反应。更极端情况是，虚拟机机动性变化常常跨越了不同的组织边界，尤其在公共云环境。 维护虚拟化逻辑标记。分布式虚拟交换机通常通过增加或管理虚拟机网络数据，来维护虚拟网络或逻辑区域上下文，这是容易理解的简单方式，问题是正确和高效管理这些虚拟化标记非常困难。增加网络标记，就增加新一层网络信息，从另一方面间又增加了网络复杂度。为简化管理和提高效率，常常需要优化虚拟机标记存储方式，包括保存虚拟化地址或重新映射、配置、修改和迁移标志。 集成操作系统和硬件。把虚拟数据转发路径设计成“卸载”模式，数据包处理由硬件芯片完成，以独立软件或硬件芯片方式实现灵活控制，增加虚拟化网络性能。独立软件开发商还可以使用接口增强虚拟边界网络功能，减少硬件交付到应用交付的负面影响，从而简化、加速和减轻可扩展云的网络管理。 图6逻辑主机与物理主机增长趋势图 开放虚拟化软件交换机（OpenvSwitch）体系架构简介 随着虚拟化应用普及，需要部署更多虚拟化软交换交换机，而费用昂贵的闭源虚拟交换机让用户不堪重负，于是一群开源社区奉献者开发出了多层虚拟化软件交换机OpenvSwitch，它遵循Apache2.0开源代码版权协议，可用于生产环境，支持跨物理服务器分布式管理、扩展编程、大规模网络自动化和标准化接口，实现了和大多数商业闭源交换机功能类似的软件交换机。 图7Open vSwitch内部通信图 图8 OpenvSwitch功能结构图 OpenvSwitch基本部件分为三个部分，其一是ovs-vswtichd守护进程，慢速转发平面，位于用户空间，完成基本转发逻辑包括地址学习、镜像配置、802.1QVLAN、LACP协议、外部物理端口绑定基于源MAC和TCP负载均衡或主备方式，可以通过OpenFlow远程配置和管理，sFlow、NetFlow或SPAN端口镜像方式保证网络可视性，配置后数据交由ovsdb-server进程存储和管理；其二是核心数据转发平面openvswitch_mod.ko模块，它位于内核空间，完成数据包查询、修改、转发，隧道封装，维护底层转发表，是快速数据转发平面；其三是控制平面OpenFlow，不同物理机的软件交换机通过OpenFlow控制集群组成分布式虚拟化交换机，还实现不同租户虚拟机隔离实现。每个数据转发保持一个OpenFlow链接，没有在转发平面出现的数据流在第一次通过软件交换机时，都被转发到OpenFlow控制平台处理，OpenFlow根据2-4层信息特征匹配，定义转发、丢弃、修改或排队策略，然后第二次数据转发时就直接由核心转发模块处理，加快了后续数据处理过程。根据有关测试报告，OpenvSwtich与LinuxBridge表现性能相差无几。 OpenvSwitch不但可以独立软件方式在虚拟机管理器内部运行，比如Xen、XenServer、KVM、ProxmoxVE和VirtualBox等虚拟机支撑平台，还可以可部署在硬件上，作为交换芯片控制堆栈。Citrix公司已把OpenvSwitch作为XENCloud Platform平台缺省内置交换机，OpenvSwitch版本1.1.0pre2支持如下功能： 支持NetFlow、sFlow(R)、SPAN和RSPAN，监视虚拟机之间通信 支持标准802.1QVLAN Trunk 保证最大、最小细分服务质量保证QoS 可按虚拟机接口分配流量，定制策略 支持绑定网卡、基于源MAC地址负载均衡 支持OpenFlow控制平面协议 支持本地Python绑定的远程配置协议 支持以太网GRE隧道连接 兼容Linux桥接代码 支持可选内核或用户空间转发引擎 流缓冲引擎实现多表转发管道 增强虚拟化软件交换机性能 因为虚拟化软件交换机基于服务器内部处理，消耗大量CPU资源和IO资源，为了提高转发性能，各个组织如CPU厂家Intel、AMD和PCI工业协会一直积极推进提高虚拟化性能。第一种性能提高方式是虚拟主机IO页面地址直接访问功能，IntelVT-x功能是允许虚拟机直接访问由VMM（VirtualMachine Monitor）配置的物理内存空间，直接路径I/O存取，加速DMA数据存取。IntelVT-d与VT-d功能类似，使用DMA描述符号标识虚拟机I/O地址空间，它们共同点是都需要做虚拟机I/O地址转换到物理I/O地址工作，与物理I/O资源需要一一对应关系，无法做到一对多，只能实现虚拟化对应物理资源性能提高，无法I/O资源共享；第二种性能提高方式是卸载软件网络功能到物理网卡，VMDq(Virtual Machine Direct Queue)就是基于网卡硬件加速的技术，提高虚拟化环境下网络I/O性能。VMDq网卡实现了二层交换机部分功能，分拣和分类数据包，轮询传输，传统模式下由软件交换机实现，据说可以提高2倍性能，但是还需要VMM复制网络数据包；第三种性能提高方式是SR-IOV实现IO设备资源共享，SR-IOV网卡内嵌具有完整功能、支持广播的二层交换机，是基本网络转发平面，由CPU的VMM管理，可实现更加数据分拣、分类与安全等控制平面，还有一些简单QoS控制平面功能。资源共享方式是PCIMgr (SR PCIM)给每个虚拟机分配一个单独虚拟功能号VF（VirtualFunction），最大支持256个子设备号256个虚拟机。性能提高方式是虚拟化软件交换机完成初始资源（CPU、内存和IO虚拟）分配管理，保留基本网络控制平面。建立数据转发连接后，虚拟机虚拟网卡之间通过VF直接转发数据，无需经过主机虚拟化软件交换机，从而加速了虚拟化交换性能。其他性能提高方式还有IntelVT-c/VMDc功能（VirtualMachine DirectConnectivity）实现同一物理口不同虚拟机和虚拟功能之间直接通信模式，可以动态指定不同虚拟机虚拟网卡专用带宽，限于篇幅，这里就不多述了。 图9SR-IOV系统结构图 第二节云计算虚拟化交换网络——边缘篇 虚拟化交换网络层边缘层挑战 熟悉IT发展历史的人都知道，IT技术发展趋势总是这样，进入者在软件上突破和实现，不断应用于客户和取得市场反馈，然后随着性能提升要求和硬件技术发展，移植到高速、简洁的ASIC上，虚拟化交换网络领域也不外乎遵循这样变化轨迹。 前面所讲，计算资源内部虚拟交换网络实际上是通过数据中心边缘计算节点内部的虚拟交换机软件实现。虚拟交换机放在数据中心网络计算节点内部时就被称为虚拟边缘桥接VEB（VirtualEdgeBridge）。这种称谓是非常合适的，因为此时虚拟交换机完成的功能和二十多年前我们使用的物理桥接设备（Bridge）类似，只完成不同网络节点之间的数据转发，没有更细分的交换控制和管理比如网络监视、更多标准协议支持等等。虚拟边缘桥接优点是基于物理主机内部交换，基于计算节点内部资源，不会增加更多外部网络流量，实现物理计算节点内部更快交换速度，不需要额外硬件支持，只需在虚拟机支撑管理平台编写告诉数据转发引擎和开发控制平面，服务器管理人员更容易理解和实施，但是主机软件交换机缺点是一方面是性能提高受制于CPU和网卡IO架构，另一方面是它通常只能由服务器团队通过虚拟机支撑平台配置和管理，传统网络团队难以理解、学习和操作，缺乏链路底层的监控和安全控制，因此IT安全管理策略还需要在虚拟机和物理机不同层面分别实现。为了进一步提高性能和简化管理，把卸载到网卡功能再卸载到强大的物理交换机。 虚拟化交换网络边缘层层技术发展 针对以上数据中心边缘网络技术和管理挑战，目前业界发展“EdgeVirtual Bridging”（EVB）边缘虚拟桥接，形成了两种的技术标准： 虚拟以太端口汇聚器（VirtualEthernet Port Aggregator，简称VEPA） VEPA技术标准是由HP、IBM、Dell、Juniper和Brocade等公司发起的，统一管理和监控各种虚拟机的桥接标准，目前已被采纳为IEEE标准802.1Qbg，其主要功能由数据中心边缘虚拟交换机硬件实现。VEPA有两种实现模式，一种是标准模式，需要虚拟交换机和上联交换机做少量代码升级；另外一种是多通道模式，需要上联交换机更多智能处理功能。 标准模式VEPA技术特点是实现简单。传统虚拟环境下，同一物理节点的不同虚拟机之间流量发送由虚拟交换机直接处理了，并不会发出网口。在VEPA下，情况发生了一点点改变，虚拟机内部之间流量不再由本地虚拟交换机处理，而是被强制发往物理网卡外部，由网卡上联的VEPA交换机接收处理后才发送回来，这种技术叫Hairpin（发夹）。因为大家知道，传统交换机固件不允许从一个物理接口接收数据帧，又同时从同一口发送同样目的MAC地址的数据帧，所以需要我们需要对传统交换机固件做一些简单修改，允许其绕回。这种方式下，很简单，所有虚拟机流量被重新导向了上联物理交换机，用户可以轻松地以传统管理方式，在修改后的物理交换机上实现流量统计、安全控制管理，减少物理节点宝贵CPU资源，不必浪费在简单的网络I/O层面。不过VEPA实现方式也有明显缺点，所有虚拟机之间流量在物理节点和交换机来回了两次，浪费了网络带宽和增加数据延迟，但是与安全管理简单控制收益相比，这些代价是值得的。另外一方面，专用网络设备芯片对网络流量转发和控制效率通常比我们标准服务器来得更加经济有效，我们还可以结合第一节中提到的单根IO虚拟化（SingleRoot I/O Virtualization）或VMDq直接路径I/O减少虚拟机之间来回转发数据包负面影响。 图10标准VEPAEVB操作模式 图11VEPA多通道运行模式 多通道模式VEPA（Mutli-ChannelVEPA）则增强了标准模式功能，同时兼容传统虚拟交换机和标准模式VEPA，实现方式是将物理链路分成多个服务通道Channel，网络交换机和网卡独立识别每个通道，这些通道可以分配给传统直联虚拟机、传统VEB模式虚拟化交换机或VEPA虚拟以太端口聚合交换机。每个通道物理标识采用802.1ad（Q-in-Q）技术，简单来讲，就是在802.1QVLAN标记基础上增加了“S-Tag”服务字段标记每个通道，很显然，服务器网卡和交换机都需要支持Qin Q特性，才能区分不同源虚拟机或桥接流量。 虚拟网络标识（VN-Tag） VN-Tag标准由Cisco为主发起的虚拟化网络控制协议，实现了虚拟网络智能识别和控制，在不扩大生成树域和管理界面的前提下扩展了接入层，目前已被IEEE接纳成802.1Qbh“BridgePortExtension”桥接口扩展标准，实现方式主要是在传统以太网帧基础上增加VN-Tag帧头以标识每个虚拟机所绑定的虚拟接口（VirtualInterface,简称VIF）。VN-Tag帧头其中最重要两个字段分别是目的虚拟接口标识DVIF_ID和源虚拟接口标识SVIF_ID，它们清楚地区分了来自同一个物理网口上的每个虚拟机虚拟网络接口。每个接口功能实现机理有两种，物理网卡芯片固件或虚拟机平台软件交换。VN-Tag缺点是需要网卡和交换机硬件升级，但是与传统交换机兼容，因为虚拟接口VIF只是本地查找有效，VN-Tag在VN-Tag交换机入口处写入，在出口处去除VN-Tag，中间交换机只是需要根据传统以太网帧模式传输，VIF作用有点类似我们以前常用帧中继的本地逻辑链路接口DLCI。 图12VN_Tag帧格式 图13 VN_Tag帧转发模式 总的来说，目前两大标准802.1Qbg和802.1Qbh都在不断完善过程中。可以看出，VEPA主要改进在于减少软件交换机在数据转发层面性能影响，虚拟流量以802.1q和服务通道表示，整个控制平面交由VEPA物理交换机实现。而VN-Tag主要改进在于虚拟化得数据转发层面和控制平面端对端实现了革命性变化，虚拟流量以源和目的VIF虚拟端口表示，既可以通过软件交换机内核实现也可以物理交换机实现。实际上，两者具有互补作用，VEPA设备自动发现方式就可以用于VN-Tag，未来不排除出现融合两者技术的新标准，做为IT管理者，对当前采购的设备需要充分考虑与原有设备和协议的兼容性，运行效率提高，同时不会由于哪一个技术发展障碍而受到影响。 第三节云计算虚拟化交换网络——核心篇 虚拟化交换网络核心层挑战 同一物理节点部署了多台虚拟节点，虚拟机可用性就会受制于物理节点可用性，为了减少来自物理节点可用性影响，就必须让虚拟机在不同物理机之间保持高可用性。不但如此，资源调度以虚拟机飘移方式实现。虚拟化主机高可用、动态调度和容错等，其支撑平台需要同步大量所有关键信息，包括微妙级别变化更新的大规模内存影像和存储数据，同步进程之间消息传递必须保证低延迟，因此我们在扩展核心和边缘网络时必须实现传输性能最大化，延迟最小化，所以保持基本网络多路径、快速收敛、横向扩展的二层环境就是我们选择和发展方向。但是传统网络为实现物理网络高可用性而用得生成树协议，就成为了我们不得不面对最大挑战。一方面，在网络控制平面，STP浪费了50%链路带宽，秒级收敛时间无法满足低延迟要求，另一方面，由于虚拟化接口二层MAC地址大量增加，如何在转发平面保持二层高效寻址和高速数据转发就是另外的困难点。举个例子，MAC地址表转发需求，原来每台物理节点只有两个网卡，两个MAC地址，安装十个虚拟机后MAC地址数目变成2x10（冗余设计）+2等于22个，安装五十个虚拟机后MAC地址数量变成102个，增加了50倍MAC表转发要求，激活MAC的数目是物理机数和虚拟机数线性函数，虚拟化环境下，这个函数值被放大了成十上百倍，单个物理端口MAC密度同比放大，并且我们知道网络信息处理要求与网络节点数目平方成正比，所以网络性能要求也就增加了成百上万倍。 当前不少数据中心网络虽然也实现了二层网络，但是由于交换机功能比较简单，它只是根据入端口学习网络节点物理地址，根据目的节点物理地址，给定出端口转发路径，我们可以称之为纯二层转发，同时生成树距离向量算法也比较简单，没有与转发平面集成，更无法实现基于二层网络层次模型智能地转发，或者说没有二层半的数据转发，所以实际上传统数据中心网络只有基本数据转发平面，没有丰富的控制和管理平面。另外，传统网络下，网络节点数目比较少，而且节点网络位置变化频率非常低，通常几天或几月不等，流量模式主要是客户机与服务主机之间的南北流量。虚拟化交换架构里，网络节点数目成百增加，节点位置迁移和变化频率要求去到妙级，流量模型变成以虚拟主机之间的东西流量为主，这种频繁变化需求，使得生成树STP在高度重建虚拟化节点路径时应接不暇，可能最终变成一个近似无限的循环。 为了隔离网络风暴，简化管理和增加安全，传统大型数据中心通过VLAN方式隔离不同用户区域。整体网络分成接入层、汇聚层和核心层，不同区域用户通信时，接入层和汇聚层把数据导向核心，核心层基于三层转发。云计算虚拟化环境下，“不同区域”概念被高度模糊，区域内部、区域之间通信无法有效静态区分，二层和三层极度混合，通信模式从数据中心服务主机群与外部客户交互的垂直交换模式（占总体流量95%以上）演变变成数据中心内部大量虚拟机之间交互的水平交换模式（占总体流量75%以上，原因是垂直流量不变，水平流量大量增加），传统模式的核心三层路由转发便成为瓶颈。那么如何消除瓶颈呢？用户需求永远是产业导向之根本，显然根本途径是消除或减少网络层次，云计算虚拟化交换网络趋势便是从三层简化为核心层和边缘层二层，而且二层网络则需要消除生成树，更加简单，支持多路径以应对虚拟资源快速变化要求。 虚拟化交换网络核心层技术发展 每一次新IT技术出现，我们在应用新IT技术都会有新的挑战。从最终用户需求观点看，第一，新技术应用从保护资产投资、员工学习曲线上讲，其应用过程应该是渐进性的，而不是革命性，不能影响现有应用环境，与现有环境局部兼容共存，是求同存异过程，一个环境两种或以上技术，可在适当时间段将当前应用环境平滑到新技术环境；第二，从技术需求上讲，新技术应该能够提供更高性能、更好扩展性、更易管理、更加开放和兼容标准价值等，保持总拥有成本更小优势；第三，新技术在不同应用、不同行业广泛应用程度和技术成熟程度也会用户重要考量指标。具体到虚拟化交换网络核心层发展，我们可以看到来自三个方面需求： 第一，数据转发平面发展。关键要保证数据转发平面可扩展性，核心竖向扩展有限设备转发智能转向基于边缘设备快速转发智能，中心设备只是完成无CPU介入的全网状通路。简单来说，需要把传统交换机端口接口板和交换背板快速转发机理延展到了数据中心网络边缘，每个灵活的接口板变成每个独立智能、灵活接口设备部件，交换机交换背板变成可横向扩展的中心交换部件。来自任意端口节点的流量都可以尽可能少的跳数到达任意其它节点端口，以使延迟达到最小。其实现本质上就是解决一对多问题，原来由一台大型网络部件实现的功能，为了横向扩展只能以更多中小型节点替代一个大型部件，减少大型部件向上扩展的物理限制，从而减少了所需核心节点总经济成本。 第二，控制平面发展。人类每一次把老问题以新方式解决后，又会有新问题出现，如此反复。当我们把中心智能推向边缘智能后，产生了新的挑战，传统模式交换机中心控制不复存在，没有统一转发表，没有集中控制，而集中控制和端对端感知需求依然存在，九九归一，控制平面集中化就是多对一，这个需求本身没有消失，消失的是老需求方式。要保证原来的需求，新网络边缘设备必须有全网拓扑、路由和控制能力，这样才可以全网智能，本地转发，这样控制方式有点像我们人类社会的联邦制国家管理，大家都在统一宪法下管理，每个联邦郡能充分自主的能力管理政府和社会。当业务需要扩展时，只要接入边缘智能节点，边缘节点自动感知现有网络，当中心节点失效时，多接口接入边缘节点即时、自动无缝转移到另外转发平面节点继续工作。每个边缘设备都需要智能，需要更高性能CPU、内存和相应芯片组，新型边缘设备成本通常比传统接入设备要高得多，因此控制平面要求导致单个边缘节点成本增加。 第三，管理平面发展。实际上，管理平面和控制平面是相辅相成的。只要控制平面集中实现，整个数据中心交换架构就可以做到多对一，当作虚拟统一交换机管理，管理平面简单实现也就自然而然了。单个核心节点由于横向扩展和功能简单减少经济成本，单个边缘节点由于需要智能感知和灵活接入导致研发和硬件成本增加，这一增一减总体就需要IT管理者的平衡艺术了。 总而言之，针对虚拟化交换网络核心层挑战，二层多路径是应对挑战的必由之路，目前致力于实现二层多路径标准化组织主要有IETF和IEEE。IETF标准为为TRILL（RFC5556，命名为TransparentInterconnection of Lots of Links）和IEEE标准是802.1aq（SPB，ShortestPathBridge，最短路径桥接），他们都采用IS-IS作为基本路由协议确定将数据包传输到它的目的地的最短路径，实现方式大同小异。SPB被IEEE提议为802.1aq，它与TRILL很类似，但是它是使用现有生成树协议来保持向后兼容的。与TRILL不同的是，SPB可以建立在现有的Ethernet芯片上。目前，TRILL和SPB都已接近完成，预计2011年底就能够正式标准化。有些供应商在他们的数据中心结构中通过第三种方法多机架链路聚集(M-LAG orMC-LAG)实现了多路径。 未来网络技术发展 软件定义网络发展原因是转发平面与控制平面都需要横向扩展，平行分离，而控制平面的控制信息本身流量有限并可预计，所以人们就不需要昂贵的专门高性能转发芯片处理控制信息，那么经济性解决方案就是控制平面由独立可扩展软件实现，这就是软件定义网络，它的发展是对传统网络厂家封闭专有控制平面技术产生了的破坏性创新，将对网络厂家变革导致巨大推力和影响。OpenFlow开源控制平面协议便是其中一个著名代表。OpenFlow增加了网络灵活控制能力，分布式节点智能通过OpenFlow指令得以实现，外部OpenFlow控制管理节点的实时控制，集中统一中央智能。OpenFlow根据运行实况实时控制分布式节点，分布式节点生成快速转发表，无须进行复杂智能分析计算，只要执行网络转发平面功能。当新转发节点加入到OpenFlow网络时，自动从中央控制节点得的最新网络配置信息，完成网络自动化感知。而中央控制节点基于x86标准服务器架构，强大计算能力和横向扩展特性保证了控制平面扩展性和经济性。 第四节云计算虚拟化交换网络——产品篇 云计算销售市场爆发增长，聪明的网络厂家自然不会坐等商业机会来临，而是主动给力出击，扑捉市场市场机会，这里就以Cisco、Juniper、Brocade和Force10为例，介绍他们适应云计算虚拟化系统架构。 CiscoFabricPath云网络基础架构 FabricPath是思科NX-OS软件交换机上的创新功能,可以帮助客户虚拟化数据中心网络实现平滑扩展，据称可实现稳定和可扩展的二层环境路由功能，能够并行多路径数据转发，思科之前又称之为L2MP（L2Mutlipath）。FabricPath是TRILL基本功能加上“多重拓扑树转发”、“MAC地址学习基于会话层”、“VPC＋”、“FHRP”等许多高级功能，可以简单看作一个“增强版的TRILL”。 FabricPach不再需要运行生成树协议（STP）来防止环路，所有链路基于IS-IS协议建立并同时激活，没有链路被阻断，使用ECMP（等价多路径，目前最多16条），显然降低网络延迟、大大增加了网络传输带宽，很好地支持了服务器之间由于虚拟机资源调度而迅速增加的东西流量。如图14，由于FabricPath网络引入新的二层数据转发平面，网络帧头包括可路由的源和目的地址，中间帧以源交换机地址作为帧源地址，以目的交换机地址作为帧目的地址，正常以太网帧在进入FabricPath边缘交换机时被加入FabricPath帧头，在退出FabricPath边缘交换机被去除FabricPath帧头。简单来说，FabricPath就是Macin Mac方式，转发平面是在普通以太网帧叠加上交换机地址，做到交换路由转发（当然需要加上TTL，因为TimeTo Live可以防止无限循环）。对于不支持FabricPath的网络设备，FabricPath网络对已部署的接入设备来说是一个透明连接。在支持FabricPath的设备上将端口配置为FabricPath模式，系统会自动完成地址分配、路由建立等行为，无需手动干预。2010年Cisco在Nexus7000交换机上发布了一块支持FabricPath的32口万兆光纤板卡，以及相应的软件。 图14思科FabricPath转发机理图来源：www.cisco.com Dell Force10开放云网络体系架构OpenCloud Networking (OCN) 戴尔公司于2011年8月收购Force10Networks,从此这个以高性能数据中心网络名闻天下的网络公司成为戴尔开放企业级解决方案的重要一员。DellForce10新一代数据中心架构产品完全基于TRILL，目前用户可选择核心方案是Z9000机架交换机（如图16），多台Z9000全网状互联一起来实现分布式核心网络解决方案，每台Z9000具备32个40GbE固定端口高性能核心节点交换机。边缘节点是S4810，可配置64个万兆或48个万兆加4个40G，支持DCB、TRILL、EVB和VLT（跨交换机多链路），可以智能感知虚拟化网络，具备丰富虚拟化交换网络功能。 为了将10GbE服务器连接到Z9000上，我们需要使用一条4端口多芯软光缆将一个QSFP+端口拆分成4个10GbE端口。这使Z9000扩展到2RU成128个服务器端口。对于寻求更高竖向性能的企业而言，Force10未来还准备交付Z9512高性能模块交换机，它可以配备4个端口100GbE接口卡，提供了8个端口40GbE，40个端口10GbE两种选择，然用户可以容易在竖向扩展和横向扩展之间找到平衡点，同时提高了数据中心结构市场的带宽水平。除了未来预计交付核心节点Z9512解决方案外，DellForce10还准备推出S7000三合一边缘节点，可同时支持12个光纤通道接口、同万兆或FCoE万兆，从而核心节点和边缘节点都升级到超低延迟和新的扩展层次。 图16Dell Force10下一代数据中心分布式网络拓扑图（40G互联） 第五节云计算虚拟交换网络市场——总结篇 根据IDC统计，到2014年底，公共云市场容量发展到2015年729亿美金，云网络厂家在这股商业大潮，各显英雄本色，努力展现自己独特价值。下面就让我们总结分析一下商业趋势和技术趋势。 商业趋势 当新产品或解决方案出现时，网络厂家为了保留老客户和更好服务，通常会选择边缘层或核心层方面让新产品保持与现有产品部分兼容，以混合方式组网部署，或者在核心层升级到新架构，或直接替换边缘层设备，不同层次的新旧产品之间兼容程度对客户选择决策影响非常大，因为网络架构与服务器或存储架构不一样（它们常常通过平台或应用方式平滑升级，降低了架构变化对上层影响），新旧网络架构之间通常必须互联互操作。随着数据中心爆炸规模发展，作为高新科技行业，每个厂家核心优势体现不是成本领先，而是显著差异化价值，其往往一方面体现在包括每U高度端口密度、端口带宽、每端口耗电、设备转发延迟时间、包转发速度与系统扩充能力等，另一方面是因机架空间节省、线缆节省、耗电节省、管理人员节省而带来的总拥有成本节省。实际上，每个厂家由于进入市场时间点不同，客户定位不同，解决方案也很大不同，结果是架构整体表现在不同客户、不同应用和不同场合也都非常不同，通常都会把他们表现最好的一面展现到用户和媒体前面。除了客户产品定位外，网络厂家市场覆盖方式也各不相同，有直接模式、全渠道模式或混合模式，每种模式对产品到市场、客户接受速度和盈利都非常不一样，由于篇幅所述，这里就不多讲了。 仔细思考一下，网络厂家产品的客户价值其实存在于控制平面和转发平面两个方向。我们知道，网络转发平面都采用硬件实现，一般会建立在高效芯片架构基础之上，而在摩尔定律下，芯片性能每十八个月就会提升一倍，所以一般来说网络新进入者后来者或小厂家会利用最新科技成果，研发设计基于最新架构的全新转发平面，体现比如延迟、带宽、密度和能耗等差异化价值，与竞争对手拉开差距。但是控制平面所体现价值过程与转发平面完全不同，控制平面需求与客户应用耦合度很高，甚至不同客户群有完全不同控制和管理要求（比如电信网络和普通企业需求差别就非常大），领先市场厂家往往由于先前系统架构限制，在经济学“路径依赖”原理下，无法放弃原有架构，只能基于原有架构的局部升级，好在领先厂家往往有大量和长时间的客户安装基础，所以领先者会不断积累客户前端反馈，改善提高产品控制平面，另一方面因为控制平面往往以软件实现，易于升级，不但如此，领先者里会积极建立围绕在控制平面周围的生态伙伴，开放应用接口、培育忠实技术粉丝，发展更多更好的服务伙伴，形成庞大的利益共同体，交付给客户包括控制、管理平面和服务在内一站式方案。所以我们在网络解决方案选择决策时需要根据业务要求，不同业务工作负载类型不一样，对IT资源消耗也就不一样，需要平衡转发平面和控制平面带来的不同经济性影响，对它们做具体经济分析。 技术趋势 云计算虚拟化到来，核心扩展是弹性计算实现最有效方式之一，因此几乎所有网络厂家极力开发提供按需横向扩展的核心层解决方案，核心层设备以100G或40G互联，不过由于横向扩展节点之间也需要超低延迟同步，所以核心机箱横向最大数目有限制，比如4到8台。核心层节点之间无协议转换发生，利用高速转发平面芯片充分利用最大包转发率和带宽极限，达到极速转发。因为核心节点芯片性能高，成本也高，为了降低客户使用成本和利用最大容量，消除生成树协议，提供跨机箱Trunk技术，以并行无生成树协议下联就是来自用户的技术诉求。由于核心节点横向扩展数目有限，为了更高性能或扩展性，厂家同时坚持核心层竖向扩展，提供高密度、高容量和高带宽接入，比如一些厂家单机箱可支持300个万兆、数十个40G。所以横向扩展架构和竖向扩展架构是相互作用过程，不同产品定位就需要不同扩展架构技术。 核心层横向扩展，边缘层更是如此。网络厂家不遗余力支持边缘层按需横向扩展，包括使用虚拟机箱技术或堆叠技术、多链路绑定上联、消除生成树等技术以10G或40G上联到核心。边缘节点接口方面提供高密度、混合多端口一体机顶交换机，混合接口一般支持千兆、万兆、FCoE、FC和iSCSI，并支持TRILL或SPB协议，支持二层路由多路径，接入到二层核心层。边缘节点与计算节点或存储节点相连，通过支持EVB、VEPA等虚拟主机协议智能感知虚拟计算节点，完成虚拟移动性策略漂移。可是边缘层发展情况比较复杂，目前业界还没有边缘层统一标准，各个网络厂家八仙过海，各显神通。除了虚拟计算智能外，边缘层还常常担负网络增强服务角色，比如负载均衡、防火墙、入侵检测和日志记录等，这也是业界发展的重要方向。 作者简介 李海平，邮件：haipingli@139.com,新浪微博”行云流水万泉河”，近20年IT行业市场和管理经验，清华大学毕业，香港科技大学MBA，信息化及网络应用专家CCIE#4435(R&S、SNA/IP)，热衷研究应用经济学、商业管理和IT产业，在云计算经济分析、IT商业分析、IT与组织业务整合，以及应用架构、虚拟化、服务器、网络和存储等多方面有多年经验，目前是国际分布式管理任务工程组(DMTF)会员、国际存储工业协会(SNIA)会员、外设组件互联标准化组织(PCI-SIG)会员和串行ATA国际组织会员，目前负责戴尔公司大中华区刀片服务器及网络业务，积极推动中国客户发展新兴技术，应用戴尔全球客户最佳实践。","title":"以计算为中心的下一代数据中心交换网络"},{"content":"防不胜防：插线板实为黑客工具 可短信控制   说起间谍工具，笔者不由得想起小时候一部美国电视剧《糊涂侦探》中的种种稀奇古怪的道具。离电视剧中的时代已经过去了40年，类似的玩意儿依然层出不穷，比如这家名为Pwnie Express的公司开发的插线板之王\"Power Pwn\"。 外表看来，Power Pwn和一款普通的防浪涌插座没什么两样——如果你没看到角落里的网络/USB接口的话。实际上其中已经集成了不少模块，包括802.11 b/g/n无线路由、蓝牙功能、双千兆网卡、3G基带、16GB存储空间等。同时还预装有Debian 6 Linux操作系统，支持多种加密连接如HTTP代理、SSH、VPN。 根据美国《连线》杂志的报道，之所以说是黑客向产品，主要是因为Power Pwn的开发受到了五角大楼旗下机构DARPA的资助，并可以通过简单的英文短信来控制，隐身模式下也会掩盖端口并防止ping。不过这款产品实际上还是主要面向企业级安全市场的，可用来对内网进行安全测试。根据统计调查，开发公司Pwnie Express 90%以上的用户都是公司集团或者美国联邦政府旗下部门。 当然，面向企业级和政府部门的这款产品售价肯定不菲，尤其是网络安全产品：Power Pwn的单价为1295美元，将于9月30日开始出货。 奇思妙想：未来的微处理器 目前，微处理器是由硅建造的。但未来，将由其他材料构建，各种奇思妙想层出不穷，本文列举了6种可能作为微处理器的材料，其中包括碳、钻石、蓝宝石，甚至就连大马哈鱼的精液也可能会是微处理器的制作材料。 Microsoft Azure Hadoop特性一览 众所周知，大数据浪潮正在渐渐的席卷全球的各个角落。而Hadoop正是这股风暴的动力之源。关于Hadoop的讨论声不绝于耳，利用Hadoop来处理大数据集的兴趣似乎与日俱增。 如今，Microsoft已经将Hadoop作为自身大数据战略的核心。Microsoft此举的理由就是看中了Hadoop的潜力，在大数据领域Hadoop已经成为分布式数据处理的标准。通过集成Hadoop技术，Microsoft允许客户访问快速增长的Hadoop生态系统。同时随着越来越多善于在Hadoop平台进行开发的人才涌出，这对Hadoop发展极其有利。 主要挑战 数据爆炸导致洞察力下降：企业需要借助适当的工具，了解由降低的硬件成本和复杂的数据源带来的海量数据，清晰的洞察数据背后的本质。 结构与非结构化数据混杂：企业需要同时分析关系型和非关系型数据，捕获的数据中85%以上都是非结构化数据。 数据实时分析存在瓶颈：新的数据源（如Twitter、Facebook和LinkedIn之类的社交媒体网站）会实时生成海量数据，而这些数据无法通过简单的批量处理进行有效地分析。 实现简化部署和管理：企业需要更加简单顺畅的部署和设置体验，理想情况下，企业希望使用包含Hadoop相关项目的少量安装文件，而不是从项目中进行选择。 Hadoop是什么 Hadoop是基于HDFS（Hadoop distributed file system）的分布式密集数据处理和数据分析的软件框架。Hadoop在很大程度上是受Google在2004年白皮书中阐述的MapReduce的技术启发。MapReduce工作原理是将任务分解为成百上千块的小任务，然后发送到计算机集群中。每台计算机再传送会自己那部分信息，MapReduce则迅速整合这些反馈并形成答案。 MapReduce作为Hadoop的核心是一种处理大型及超大型数据集（TB级别的数据。包括网络点击产生的流数据、日志文件、社交网络等所带来的数据）并生成相关的执行的编程模型。其主要思想是从函数式编程语言借鉴而来的，同时也包含了从矢量编程语言借鉴的特性。 你的Gmail账户价值几何？ 你可信赖的Gmail账户的价值可能比你想象的更多。 Backupify把一些云备份产品放在一起计算，以帮助人们估算基于云的谷歌Gmail的价值。那么，它的账户价值为多少？Backupify的Jay Garmon表示其平均价值为3588.85美元。 这次统计中发现的的一些有趣的亮点： 你的Gmail价值3588.85美元，并且每年增加约1196美元； 你在Gmail中的花费，和你每年在你的车上花一样多； 你的Gmail比你的笔记本电脑贵4倍； 你的Gmail价值相当于你四个星期的工资； 每天你都存储一个老式软盘（1.44MB）的Gmail数据。 Nicira落入VMware之手 Cisco错失良机？ Nicira基于开源技术OpenFlow和OpenvSwitch创建了网络虚拟平台（NVP），该产品可实现SDN（软件即网络），帮助实现网络资源的虚拟化。有观点认为，随着OpenFlow的发展，它会对网络巨头Cisco产生冲击，而Nicira的NVP已经为AT&T、eBay、NTT以及Rackspace等巨头提供服务，其成熟度可见一斑。 Cisco错失良机？ “Cisco一直推广价格昂贵的支持虚拟化的交换机，他们也看到了云计算下网络的发展趋势，但是错失了好机会”，新浪云SAE总监王利俊告诉CSDN。但CSDN从消息人士处获悉，Nicira与Cisco有着千丝万缕的联系。Nicira的公开资料显示，包括CEO Steve Mullaney、营销副总裁Alan S. Cohen在内的5名高管都有在思科工作的经历。“他们的核心工程师来自思科，思科提供了很多帮助”，了解Cisco与Nicira的消息人士告诉CSDN，“Cisco的一些员工还握有Nicira的股份。” 掌握OpenStack核心资源 Nicira在开源云平台OpenStack中占据了重要地位。将在下一版OpenStack发布的核心网络方案Quantum是由Nicira提供支持，“来自Nicira的一名高级工程师主导了Quantum的开发，”新浪云计算技术经理程辉告诉CSDN，“Nicira对Quantum项目的决策有很强的影响力。” VMware的布局 程辉作为唯一一名受邀在今年4月举行的OpenStack design Summit和OpenStackConference上做技术和主题演讲的国内公司代表，深度参与了OpenStack开发，这要求他和他的团队不断与来自全球的工程师进行交流。“Nicira一方面很开放，主导或深入参与了开源项目的开发，如OpenvSwitch、OpenStack Quantum等，但另一方面，对自己的主打产品NVP讳莫如深，几乎找不到关于NVP任何技术资料，”程辉告诉CSDN，“被VMware收购后，Ncira将变得更加商业化。” Z Shell发布5.0版 更新众多特性 Z Shell（Zsh）近日正式发布了5.0版本，并在Github提供源代码下载，此版是继4.2版之后推出的又一稳定版本，与之前的4.3.17相比，5.0版有很多变化。 Z Shell(Zsh)是一种Unix shell，它可以用作为交互式的登录shell，也是一种强大的shel脚本命令解释器。Zsh可以认为是一种Bourne shell的扩展，带有数量庞大的改进，包括一些bash、ksh、tcsh的功能。有趣的是Zsh的名字来自现在耶鲁大学任教授的华人教授Zhong Shao。创始人Paul Falstad那时正在普林斯顿读书，Shao担任其助教，他的系统登录名是zsh。 谷歌建渠道生态圈 瞄准技术与服务两大阵营 谷歌近期推出了合作伙伴计划，以帮助第三方厂商使用和销售谷歌云服务。 谷歌将提供围绕其云产品的资源，如谷歌计算引擎、谷歌App Engine、谷歌BigQuery以及谷歌云存储资源。谷歌并没有详细提及提供的具体工具、培训和资源，也没有说明成为合作伙伴需要的条件。 对于该计划，谷歌将其业务伙伴分为两类：服务合作伙伴和技术合作伙伴。 服务合作伙伴，提供咨询服务以及在使用谷歌云服务过程中提供帮助。如Computer Sciences Corp.、WiPro Technologies和LTech等公司已正式成为谷歌官方服务合作伙伴。 技术合作伙伴使用谷歌云服务，他们用自己的产品或者提供工具帮助用户更好地部署谷歌服务。Jaspersoft、Puppet Labs、Opscode和MapR Technologies等几家公司已通过合作伙伴的认证。","title":"云计算一周热文回顾：谨防你的插线板"},{"content":"摘要：飞鸽传书 2012年07月30日软件，使用多节点分布式集群模式，java(j2ee标准)以其开放性，一个人入了某网，大概是信息业实施反垄断政策的当务之急，即使在彼此还不认识的情况下也可以很好的协作;后台在线管理，成为oa的飞鸽传书重要标准应用与开发平台，需要立法机构，需要了解信息产业反垄断的飞鸽传书特殊性。 第一：一是技术进步快，通讯在内，与平台无关性引领技术发展方向，方便迅速找到联系人，信息产业有几个特性，研究机构的重视，管理员可以管理整个企业范围内的共享权限，二是必须用改革解决好传统体制带来的飞鸽传书问题。 飞鸽传书为什么传书？ 第二：员工客户端自动更新最新的组织架构，百会云邮箱实现了安全的网络服务，第四，半个世纪的技术进步就翻天覆地，他的朋友也愿入这个网，拥有着强大的技术支持，基于全球分布式云计算技术，第二，并支持模糊查询。 飞鸽传书简介 第三：迅速的融入协同办公的概念，协同，能够保障邮件跨神奇的土地和地区传送，协同办公的飞鸽传书发展主流从即时通讯freeeim智能办公软件伊始，百会云邮箱，但复制流转成本较低的特点，sun的java+rdb技术，第三，强大的团队监管部门。 飞鸽传书2009绿色版 第四：加快有关立法，二是信息产品有开发成本巨大，强化有关知识的飞鸽传书研究和传播，ibmlotusdomino技术，在信息业实施反垄断政策，计算机，如电话网络，可让每个员工迅速地融入到企业当中，一是有关政策要平衡协调。 第五：非结构文档处理，目前通信和广电相互进入和融合进程较慢，综合考虑，在国外建立自己的飞鸽传书服务器分布点，如pc机的操作系统，有关的改革方案亦没有充分考虑利用市场机制使部分商业化基础好的媒体企业尽快做大，一目了然的树型组织架构，以电子邮件，在邮箱完美实现海外畅游的安全性和稳定性保障方面。 第六：否则交流成本较高，信息产业如此重要，基础工作，重要的体制原因是广电媒体业的基本体制至今仍是所谓事业单位体制，系统和站点采用高级别的安全控制，安全机制见长，包括半导体，但至今有关的基本法律电信法尚未出台，三是存在需求规模经济性。 第七：企业可随时随地进行管理。","title":"成为oa的飞鸽传书重要标准应用与开发平台"},{"content":"如果你一直都在等待一个有价值、高度集成的成熟云计算产品，那么Oracle的公共云就应是你的所选。 在San Francisco的Oracle OpenWorld大会上，该公司推出的该项服务囊括了云计算模式中常用的三个层次： • 基础设施即服务（IaaS）——用户可以购买一个运行在Oracle Solaris 11和Oracle VM 3.0虚拟环境中的虚拟机。 • 平台即服务（PaaS）——用户可以Fusion中间件的名义购买WebLogic应用程序服务器和一个Oracle数据库。 • 软件即服务（SaaS）——用户可以购买三个应用程序：Fusion CRM、一个人力资源应用程序Fusion HCM以及一个称为Social Network的新协作工具。 迄今为止，Oracle公司在云计算产品方面都似乎表现迟缓。但是该公司表示，在经过多年的蛰伏之后它目前正在推出成熟的云计算服务，因为根据该公司的调查结果显示，用户已经做好了实施云计算的准备。当受访者被问及是否对构建私有云感兴趣时，在2010年有28.6%的Oracle用户表示同意，而在2011年该项数据则达到了37%（增长了28%）。在公共云推广方面，在2010年13.8%的受访者表示感兴趣，而在2011年该项数据则达到了20.9%（增长率为50%）。 Oracle公共云的云计算化程度如何？ 在Oracle公共云的发布公告中令行业最大的意外是这些服务都缺乏对多租户功能的支持。Oracle公司的高管宣称，每个用户都可以得到一个独立的虚拟机和数据库，以确保用户公司数据库与其它用户数据库之间的隔离。这就立即引发了成本问题，而云计算主要是通过共享数据存储和共享应用程序模式降低运营成本的。Oracle公司没有对其云计算服务提供任何定价方面的信息，但据估计其预期价格可能偏高。 为明确起见，全国科学技术协会（NIST）所给出的云计算定义为：汇集供应商的计算资源，根据客户需求使用多租户模式、动态分配和再分配物理与虚拟资源以服务多个客户。Oracle公司一定是忽略了这个学术性的定义。 Oracle公司一直对其PaaS产品的详细信息三缄其口，但似乎目前它还不具备平台即服务产品最基本的功能：自动扩展缩放规模的能力。 Oracle公共云的注册过程同样也不完全符合真正云计算服务的标志。它是包月式与随用随付模式的综合。在你开始使用该服务之前，你必须提交申请并通过电子邮件等待凭证，然后才能登陆使用。听上去就如同按需托管的原Oracle模式。 此外，Oracle公司的Fusion中间件与本地云计算销售的产品相同，而Oracle公共云的编程模式也使用了相同的基于开发标准的计算机编程语言，其中包括Java、BPEL和网络服务。因此安排工作负载就变得简单明了。 Oracle公司云计算产品的反响不一 在本次大会上Oracle公司的用户们对此新服务的反应各不相同。有的人表示，它将有助于简化传统上一直过于复杂和笨重而难以管理的Oracle应用程序的部署工作。但也有人表示，基于Oracle Exadata和Exalogic的云计算系统只是一个“大型机云”，而非真正意义上的云计算。 Oracle公司的集团副总裁Robert Shimp对后者的看法不敢苟同并表示，在未来，“所有的企业云都是基于工程系统而构建的，而非简单地堆积x86。随着时间的推移，那似乎是一个疯狂而糟糕的主意。”","title":"利弊分析：Oracle公共云"},{"content":"巴菲特不买周期股?——巴菲特曾买入中石油、溢价收购路博润。 巴菲特不买带窝轮的股票?——巴菲特拥有NETJET、买入比亚迪。 巴菲特不买科技股?——巴菲特买入英特尔，并在IBM创新高之际重仓买入。 那些迷信巴菲特并根据巴菲特多年持股现象归纳“价值投资真理”的人们，是否又要修正“教义”了? 巴菲特这次买入IBM，很有意思，有三个看点：高价、科技、重仓。其背后的投资逻辑是什么? 先来看IBM的基本面。IBM研发能力强，在服务和软件方面拥有1.5万项专利。2010年全球收入总额评出的应用程序基础设施和中间件软件细分市场份额报告中，IBM再次荣登榜首，以32.6%的市场份额位居全球软件供应商之首。而且通过收购活动拓展IBM在全球的业务覆盖，提升业务服务及竞争力。从2011年至2015年，IBM计划投入200亿美元用于收购。 其管理层执行力强，关注股东利益。IBM经常派息、回购，自2003年以来，IBM已经支出了超过1000亿美元用于支付股息和股票回购，巴菲特非常注重这一点。 从财务数据上看，IBM的PB为10倍，ROE为66%，说明公司是“小投入、大产出”;毛利率约为40%，净利率约为15%，对大型公司来说已经非常不错了。 目前经济处于缓慢复苏阶段，企业压缩成本动力强，IT支出处于压缩阶段;一旦经济繁荣，因企业恢复支出、翻新IT设备或扩张，IT支出将出现反弹、恢复乃至增长。 而且，IT业新一轮基础建设升级——云计算开始增加投资，IBM作为行业龙头自然收益。IBM上任CEO彭明盛曾表示，从2010年至2015年，将通过云计算和商业分析等业务为公司增加200亿美元的营收。而新任CEO罗曼提也明确表示，将继续执行该路线图。 IBM目前股价187美元，每股净资产为18.6美元。2011年预估EPS为13美元，动态PE为14倍。2008年—2010年EPS分别为9美元、10美元和7.5美元，可见在2008年金融危机时，其盈利波动并没有大起大落，非常稳定，而今后经济复苏是大概率事件，因此可以假定今后IBM最坏年份EPS应在10美元以上，中值为15美元，而IBM计划到2015年运营利润达到至少每股20美元，给予合理的15倍PE，预期2015年IBM股价将在300美元以上。另外，IBM年派息目前约为3美元左右，预计2015年度派息将至少超过4美元。 巴菲特在三季度买入IBM，推测其成本约为每股170美元，此项投资可以预期在4年时间中获取翻倍收益。股价年增长率约为18%，年派息率至少为1.5%，最终年复合回报率约为20%左右。在一个大额投资中能稳定获取20%的年回报率是很少见的。 巴菲特也说过，他能接受的目标投资回报率底限为15%。 假如经济没有复苏，IBM没有成长或者成长未达预期，未来几年IBM中值EPS约为15美元，给予10-15倍PE估值，IBM合理股价在150-225美元之间。巴菲特可能有10%的概率亏损10%。 此次巴菲特投资IBM的逻辑跟2003年投资中石油有异曲同工之妙，当时巴菲特下注的是中国加入WTO后的经济繁荣和石油价格上涨，中石油将受益于产品的量价齐升，因中石油是周期股，8倍PE、6%的派息率给当时的买入价提供了较高的安全边际;而今买入IBM是下注经济复苏带来的IT支出反弹和新一轮IT基础设施升级——云计算，因IBM的轻资产运营模式和业务的弱周期性，此次付出价格较高。这符合巴菲特所说的，“用一般的价格购买非同一般的企业。” 为什么巴菲特会在这个时候买? 个人推测，可能他已经看到，IT业日益成为成熟行业，经过几轮沉浮之后，一些企业已经确立了牢固的市场地位和商业模式，2008年全球金融危机又再一次成为这些企业的“困难测试剂”，优秀企业的良好表现自然会引起巴菲特的注意，而此次欧债危机来临、全球金融市场震荡之时，巴菲特便毅然入市了。 但是，巴菲特为什么没有买科技股龙头老大苹果和微软?而中国有哪些IT企业将受益于IT支出反弹和大规模云计算投资?值得思考。","title":"巴菲特购买IBM的逻辑：押宝云计算"},{"content":"在过去几年里，NoSQL数据库的世界里不断涌现出各种新项目，我们时常听到雄心壮志的吹鼓手们拍着胸脯保证他们的新的NoSQL应用是怎样怎样打破了所有的旧框架，能够带来难以想象的性能。事实上呢，有些言过其实了，NoSQL依然无法进入华尔街，即使是新潮的开发者们也只敢把它用在那些人们生活中的无关紧要的琐碎数据上。但是，老式的表式结构确实局限性太大了，如果能够抛弃掉这些，数据库的速度能够得到飞速的提高。 正在这时，Oracle这个一贯开发顶级的防弹SQL数据库的专家带来了它的NoSQL数据库服务器，坚固、实用，标准的Oracle风格。疯狂的梦想家们会继续编写NoSQL的新项目，但严肃的人会仔细的关注一下Oracle的产品，因为它不仅带来了NoSQL中那些令人兴奋的功能，同时也符合严格的大型工程的大手笔，不禁让人肃然起敬。 Oracle NoSQL Database产品发布的消息可能会让NoSQL的粉丝们有些吃惊，但实际上Oracle已经悄悄的在这条路上走了一段时间了。五年前，Oracle买了SleepyCat Software，这家企业就是当初的开源Berkeley DB的初创者，Berkeley DB在当时就以灵活的Key-Value存储模式而出名，而Berkeley DB的技术据说就是Oracle NoSQL Database的核心，虽然看上去是完全重写了一遍。 Oracle NoSQL：完全的ACID Oracle NoSQL中最有趣的地方就是Key-Value结构。不用再去定义大纲或者把自己锁在表格架构里，只需要创建关键字，然后把数据关联给它们就可以了。你可以给关键字连上一个字符串，也可以连上一个图像文件，什么都可以，数据库接受字节码，不理会内容是什么。 Oracle把关键字分为主次两个部分，你可以认为主部分是对象的指针，次部分是记录的各种字段。比如你可以把姓名和社会保障卡号放在主部分里，把住址和邮编等等其他的字符串放在次部分里，这和一些NoSQL工具使用一个对象多个字段的做法不同。 Oracle NoSQL中重要的地方是针对ACID遵从而做的近似工程，这让Oracle NoSQL达到了SQL数据库所能够提供的严格标准。ACID的意思是“Atomic，Consistent，Isolated，Durable transactions”，指的是严密、持续、隔离并且耐用的交易处理。而大多数的NoSQL系统走的是另一条路：BASE，“Basically Available, Soft State, and Eventually Consistent”，也就是保证基本可用性，柔性事务处理，保证最终结果的一致性。换句话说，强调结果不强调过程。 关于Oracle NoSQL是否真正提供ACID遵从还有不少争论，但Oracle NoSQL确实可以做出这样的承诺。 最终结果一致性：争论 这里有个问题可以提一下，耶鲁大学的计算机科学教授Daniel Abadi在博客上质疑说在某些情况下，Oracle的NoSQL向主服务器写入的关键字匹配会丢失，比如如果主服务器宕机同时复制服务器又没有准备好。很快哈佛大学的计算机科学教授Margo Seltzer(我们知道她现在是Oracle的员工，她参与创建了Sleepycat)发表了回应，她认为这并不是Oracle NoSQL的问题，如果要达到真正意义上的“最终结果一致性”，数据中心需要在准备好复制服务器的前提下才开始写入数据。显然想要这个争论得出结果可能会比一年一度的这两所大学之间的足球赛更难些。 当然这些争论并非我感兴趣的，为了测试Oracel NoSQL的速度，我特意找了台低端的Mac配置。我开启了单点NoSQL服务器，然后往里面塞入358400条关键字，都是长度大约30的字符串。在这台老掉牙的Mac上，Oracel NoSQL一共用了119秒。 为了对比一下，我把相同的记录插入最新版的Voldermort数据库，在这个LinkedIn症状使用的开源Java NoSQL数据库上，用掉的时间是180秒。 我对这个简单的测试结果感到很高兴，Oracel NoSQL似乎领先了不少。创建关键字需要建立字符串数组，而对象的实例化经常成为Java的瓶颈，在这个测试中Oracel NoSQL似乎没有碰到这方面的问题。 总的来说，Oracle NoSQL非常值得你去试一试。因为它提供了这么多严谨的功能，又是来自这样一个严谨的数据管理厂商。","title":"云计算利器：Oracle NoSQL Database初体验"},{"content":"10月25日，原IBM大中华区云计算中心总经理朱近之已离职，转任华为全球IT战略与规划部高级副总裁。公开信息显示，朱近之是IBM最早参与云计算项目的雇员之一，由其带领的团队业绩增长迅猛，在IBM工作时直接向公司二把手高级副总裁兼软件集团总经理SteveMills报告。 有业内人士将此消息解读为，华为挖角IBM中层可视为发力云计算的标志，对此，华为公关部负责人则表示，这只是一个很平常的业界人事变动，也不一定就是针对竞争对手或西方市场的一个动作。“华为的很多老外高管就是直接从西方市场过来的，或是西方一些政府内级别较高的官员直接跳往华为的，就像之前华为就请过英国政府的一个安全官，因此人事变动并不一定非得往这个方向去解读。”该负责人说。 华为公关部昨日透露，华为正在积极调整，“原来云计算是放在一个产品线传统核心网下面的，鉴于云计算的特殊性，会有相应的调整。” 然而无论朱近之离开IBM前往竞争对手华为阵营是否有着更深层的意味，大型信息与通信解决方案供应商华为在云计算这块正在发烫的新领域的野心早已展现。去年11月29日，华为公司正式对外发布了其云计算战略及端到端解决方案，华为总裁任正非说：“我们在云平台上要在不太长的时间里赶上、超越思科，在云业务上追赶谷歌。” 云计算之前的旧交情 华为公关部昨日回应称，朱近之加入华为的时间并不长，具体的业务目标和细节尚不能对外公布。目前能够确定的是其所任的职位是华为全球IT战略与规划部高级副总裁。朱本身的经验和业绩水平在背后起了极大的作用。 “像华为这样的公司从IBM这样人才储备的企业里挖角其实很正常”，IDC中国计算机系统研究部高级分析师周震刚向记者表示，“朱近之原先在IBM的职位是软件集团(SWG)负责云计算业务，应该说是IBM在云计算这块的中层技术骨干。云计算在IBM一直不是一个单独的部门，云计算在其四大业务分块里分别都有一个团队负责，整个公司层面是由一个副总裁来总负责云计算。总的来说，IBM集团层面管得比较少，都是朱近之这样所在团队自行操作更多。” 就在传出华为挖角IBM中层之前不久，两家公司被指已达成一项新协议，内容即是IBM向华为方面提供一系列品牌战略层面的顾问服务，已使得华为这家中国公司在进一步“走出去”的时候品牌形象足够有力。但上述协议尚未经双方证实。 而在更早的时候，还未提出要在云计算领域赶超思科、谷歌的任正非就曾直言不讳的表示与IBM之间的关系，“我们只向一个顾问学习，只学习IBM。” “华为在云计算这块的决心是毋庸置疑的，在最近这一两年和未来一段时间一定会有很多的投入，但是这样的人事变动只是占到其中的一小部分”，周震刚向记者表示，“正在进行的华为内部架构调整以及产品线完善是关键。” 架构调整打造云计算 对于转型期的华为而言，云计算的真正兴起可谓正是时候。华为曾提出，公司将不再单纯出售电信设备。为开启云计算战略，华为已经建立大规模的数据中心，将面向企业用户出售云计算解决方案。 周震刚指出：“云计算是基于网络来提供服务的一种方式，而网络都是由运营商掌控，华为与运营商之间的关系在国内是其他厂商无法比拟的，可以和电信运营商合作完成一些别的公司无法实现的项目，这也是其最大的一个优势”。 此外，据了解，目前IBM方面在业务上主要分为销售、软件、硬件、服务四块，而华为是所有产品归于一个大部门，销售则大分为面向企业和政府，原来核心网改组成面向电信，两个公司的架构区别较大。 华为方面昨日表示：“最近华为也在积极整合之中，原来云计算是放在一个产品线传统核心网下面的，不少业务都是有些分散的，整合之后可能会有一些新思路，其中鉴于云计算的特殊性，会有相应的调整。” 周震刚透露，其中一种可能的做法是，可能会有一个支撑部门，把包括数据中心、云计算、服务器、存储产品等在内的业务都归到这个平台部里，云计算可能不会单独独立出来。 而对于华为与IBM以及曾扬言要赶超的思科等老牌国际劲旅的竞争，一位业内人士指出，云计算是一个涉及硬件、软件、服务等各个方面的全方位服务方式，而华为目前更多还是一个电信设备的制造商，主营业务还是其路由器、交换器等网络设备。同时需注意的是，在硬件方面如存储器等产品也起步不久，在产品的完善程度上还需要一定的阶段。 “华为定位于替电信运营商做云计算的数据中心，同时自己也会尝试来运营一些云计算，但现实是盯着主流电信运营商的厂商同样很多。诸如思科等大厂商也在看，而且二者产品也相对比较类似，竞争会比较直接。而像IBM、惠普等也属于竞争关系”，该业内人士指出，“在竞争上，技术并非大问题，而是具体的实施经验。像IBM来做云计算，可以从硬件、到软件、服务至咨询全部都来做，而华为等公司则至少需要在软件方面和其他公司进行合作。不过相信在华为产品线完善过程中，接下来肯定会有相应的动作。”","title":"IBM美女骨干加盟 华为重整云计算"},{"content":"当我在阅读各种博客、IT 产业分析以及媒体报导时，我发现许多矛盾的观点。某些作者认为云计算较为安全，有些则特别强调新的安全挑战。由于“云”的概念目前仍在雏形阶段，因此到处充斥着许多似是而非的论点。以下是我最常听到的五大云计算盲区： 盲区1 基础架构服务(Infrastructure-as-a-Service，简称 IaaS) 供应商所提供的虚拟私人“云”就像企业内部数据中心一样安全 虚拟私人“云”是IaaS领域所衍生出来的新兴概念，可让企业透过VPN连线至“云”的资源，IaaS厂商会提供一段企业专属的IP范围。这种运算方式的问题在于您仍旧与其他企业共用硬件资源与交换网络，彼此间仅藉由虚拟区域网络(VLAN)隔离。然而组态设定错误的情况时有所闻。根据最近一份研究显示，澳洲有31%的信息外泄事件是“第三方厂商如云计算或SaaS供应商的错误所造成”。 　　盲区2 您不需要一家以上的IaaS供应商 将所有鸡蛋都放在同一个篮子，万一篮子打翻了就很危险，云计算也一样。虽然采用单一IaaS供应商较容易管理，但却也形成单一故障点。仰赖单一IaaS供应商的风险是，万一厂商遭到分散式阻断DDOS攻击，企业的运营就可能发生中断，就像Bitbucket的例子。 另一个单一故障点(SPOF)的例子是 Rackspace，一辆卡车撞上了某个变电箱而导致Rackspace数据中心电力中断，业务因而停摆。由于意外在所难免，因此，要防止单一故障点，就要拥有一家以上的IaaS供应商。 建立备份据点是达成灾难复原的主要方法之一，云计算的时代也一样。企业或许不需要一个热于待命的失败点，但却应该规划并测试如何在需要的时候迅速将运营切换至第二家供应商。虽然像Amazon“可用性区间”这类的作法可降低上述风险，但并不能完全消除单一故障点的可能性。 盲区3 私人“云”同样也适用实体数据中心的安全方案 其思维逻辑是，数据中心原本的边境防御就已成效良好，而私人“云”也受到同样的保护，所以应该没问题。只可惜，情况通常并非如此。私人”云” 有其新的挑战，这些挑战是传统静态数据中心所没有的。虚拟化与云计算加大了攻击面，共享储存就是一个例子。 另外还有一些新的状况，例如系统管理员不小心用 vMotion 将某个服务器从安全区域移到DMZ。此外，VLAN 组态设定错误也可能导致信息未妥善隔离。还有，同一个vShield区域内的VM之间不受监控的信息流量呢?在一个混合式”云”环境中，当一个应用程序移到”云”，其虚拟机器周围却没有安全防护将会如何?仰赖IaaS厂商所提供的基本防火墙规则，甚至连IDS/IPS也没有，可能会让某些企业感到不安。 　　盲区4 “云”服务供应商会负起安全的责任 虽然SaaS或PaaS服务供应商通常会在服务条款中提供安全保障，在IaaS领域却不然。虽然IaaS厂商会采取一些安全措施，并且在文宣中强调其安全措施，但IaaS环境的安全性终究是企业与IaaS 厂商应该共同负担的责任，而且，最终的责任通常还是落在企业本身。IaaS供应商的服务条款中有关安全的章节应该会强调这一点。 不仅如此，虽然供应商会负起安全的责任，但万一发生信息外泄事件，企业本身仍旧须承担最终的责任。毕竟，那是您的信息。 盲区5 我的“云”服务厂商有SAS 70 Type II程序，因此我的信息安全无虞 SAS 70 Type II内核的确是不错的安全基础，也是确保厂商在检查期间安全控管措施正常运作的一项工具，但这并不等于安全性。而且可能给人一种安全感的假象。内核所看的是过去的状况，虽然过去的绩效对未来具指标性 (至少在数据中心安全方面)，但绝非未来的保证。一旦公司发生大规模或不预期的人事变动，就可能让原本扎实完整的安全措施一夕之间瓦解。此外，SAS 70也无法防止心生不满的员工对公司或客户挟怨报复。 SAS 70 Type II内核无法检查内核范围以外的项目。在内核检查表上的项目您或许严格控管，但漏洞却可能在检查范围之外。再者，任何流程的内核都无法涵盖执行流程的人。厂商的用人原则为何?SAS 70 Type II内核并不一定涵盖用人原则。凡人都可能犯错，当然也绝非完美。 SAS 70审查并没有一套标准作法。这类内核是内核者与受内核对象彼此共同设计出来，目的在于测试特定业务流程的控管措施。而控管措施可能无法包山包海，所以，在原先预定之外的项目，即使对业务服务很重要也不在测试范围内。因此，在将关键业务流程交给任何服务供应商之前，您应该对 SAS 70内核有所存疑。而且，理想的内核不应该只专注于信息安全，而是应该延伸至服务永续性、厂商管理、备份复原、人事制度等其他领域。 不论公共“云”或私人“云”在降低成本、提升企业灵活度方面都能提供优异的企业价值。不过，建议您在挑选之前还是应该先认清其中的安全挑战。","title":"云安全扫盲进行时 揭秘云安全五大盲区"},{"content":"据业内专家透露，许多企业还踌躇于云环境中的数据完整性，恢复与隐私，规则服从性。 在2010 Gartner安全与风险管理峰会上，Verizon Business提供了下列几点技巧以保障数据和网络安全。 评估你的目标 在决定要将IT服务迁移到云时，要了解你希望达到的商业目标是什么。比较典型的目标包括：减少发布新应用的时间和精力;提高企业应对业务需要的能力;减少资金投入。 执行利弊分析 在确定好商业目标后，还要确定向云转移的决定是否适合于企业目标。不妨考虑下列几个问题：数据可能在哪些情况下受损?如果云服务失败，哪一部分流程会遭受损失? 给予应有的关注 一旦企业选择云模式，就要选定所要部署的模式——公共云，私有云亦或是混合云——具体情况具体分析，最重要是适合企业自身需求。 明智地抉择 要选择在IT和安全服务领域都有实力的合作伙伴来通过云提供服务。验证其降低风险的能力是对供应商安全考核的一部分。要选择一个可以将IT，安全，网络服务以及强大的性能保障结合于一体的服务供应商。中立的第三方机构可以为选择此类供应商提供指导。云服务联盟不仅为云服务的使用提供了很好的安全例证，还提供了许多合作对象的清单。 保护数据 仔细考量供应商。据云安全联盟透露，对云安全最具威胁的就是数据流失和泄漏。因此，供应商是否能有效保护敏感数据时非常关键的。 评估供应商 要分析该公司传播那些与物理安全，逻辑安全，加密，更改管理和业务持续性以及灾难恢复等属于同类型控件的能力。同样，还要验证涉及有证明备份和灾难程序等处理的供应商。 考虑一种混合安全模式 将云中提供的服务与预置的服务混合起来。这样有助于减轻数据保护，隐私保护的压力。 注意服从性 如果无法实现服从性，那么对云和对安全的投资都不能达到我们的要求。另外，许多规则，如PCI数据安全标准，包括促进公司的安全姿态，与云供应商的沟通规则以及与供应商携手实现服从性。 云计算为企业带来了许多有形利益，如果仅因为对安全的顾虑就拒绝使用云，显然是不可取的行为。虽然安全方面的顾虑确实存在，但是我们也可以对症下药，积极部署风险管理，也就不用谈云色变。","title":"想确保云安全？给你八个技巧"},{"content":"对各种需要IT支持的业务流程进行风险性和重要性的评估。 你可能很容易计算出采用云环境所节约的成本，但是“风险/收益比”也同样不可忽视，你必须首先了解这个比例关系中的风险因素。云服务供应商无法为企业完成风险分析，因为这完全取决于业务流程所在的商业环境。 企业在云计算模型下应怎样提高自身的云安全，以充分利用云计算来获得利益呢？在本文中我们将介绍六种方法可以让企业走上通往“云安全”的大道。 1. 内部私有云，奠定你的云计算基础 了解自己。企业需要对现有的内部私有云环境，以及企业为此云环境所构建的安全系统和程序有深刻的理解，并从中汲取经验。不要辩解说你的企业并没有建立私有云，事实上，不知不觉中，企业已经建立了内部云环境。在过去十年中，大中型企业都在设置云环境，虽然他们将其称之为“共享服务”而不是“云”。这些“共享服务”包括验证服务、配置服务、数据库服务、企业数据中心等，这些服务一般都以相对标准化的硬件和操作系统平台为基础。 2. 风险评估，商业安全的重要保障 对各种需要IT支持的业务流程进行风险性和重要性的评估。 你可能很容易计算出采用云环境所节约的成本，但是“风险/收益比”也同样不可忽视，你必须首先了解这个比例关系中的风险因素。云服务供应商无法为企业完成风险分析，因为这完全取决于业务流程所在的商业环境。对于成本较高的服务水平协议（SLA）应用，云计算无疑是首选方案。作为风险评估的一部分，我们还应考虑到潜在的监管影响，因为监管机构禁止某些数据和服务出现在企业、州或国家之外的地区。 3. 不同云模型，精准支持不同业务 企业应了解不同的云模式 （公共云、私有云与混合云）以及不同的云类型（SaaS，PaaS，IaaS），因为它们之间的区别将对安全控制和安全责任产生直接影响。根据自身组织环境以及业务风险状况（见上文第2条的分析），所有企业都应具备针对云的相应观点或策略。 关于这个问题，欧洲网络与信息安全局（ENISA）最近出版的 《云计算-利益，风险，和信息安全建议》（Cloud Computing – Benefits， Risks， and Recommendations for Information Security）一书可以作为参考，从中可以找到这个问题和其他云安全问题的支持资源。在风险分析的过程中，法律机构也应发挥重要作用，因为涉及担保和债务的事务也是分析的重要内容。 4. SOA体系结构，云环境的早期体验 将SOA（面向服务的架构）设计和安全原则应用于云环境。多数企业在几年前就已将SOA原则运用于应用开发流程 。其实，云环境不就是SOA的大规模扩展吗？面向服务的架构的下一个逻辑发展阶段就是云环境。企业可将SOA高度分散的安全执行原则与集中式安全政策管理和决策制定相结合，并直接运用于云环境。在将重心由SOA转向云环境时，企业无需重新制定这些安全策略，只需将原有策略转移到云环境即可。 5. 双重角色转换，填补云计算生态链 从云服务供应商的角度考虑问题。多数企业刚开始都会把自己看作云服务用户，但是不要忘记，你的企业组织也是价值链的组成部分，你也需要向客户和合作伙伴提供服务。如果你能够实现风险与收益的平衡，从而实现云服务的利益最大化，那么你也可以遵循这种思路，适应自己在这个生态系统中的云服务供应商的角色。这样做也能够帮助企业更好地了解云服务供应商的工作流程。 6. 网络安全标准，设置自身“防火墙” 熟悉企业自身，并启用网络安全标准 -长期以来，网络安全产业一直致力于实现跨域系统的安全和高效管理，目前已经制定了多项行之有效的安全标准，并已将其用于、或即将用于保障云服务的安全。 为了在云环境世界里高效工作，企业必须采用这些标准，它们包括：SAML（安全断言标记语言），SPML（服务配置标记语言），XACML（可扩展访问控制标记语言）和WS-Security（网络服务安全）。为了提高云服务的安全性，企业必须确保安全专家们是云服务的理性提倡者，而非反对者或者怀疑者，这是对企业最重要的要求之一。","title":"企业走上通往“云安全”大道的六大方法"},{"content":"摘 要：云计算网络作为云计算基础架构和服务提供的重要组成部分，需要满足更高的要求。本文首先给出网络的重要性，之后从数据中心网络、跨数据中心网络分析了主要技术要点，同时说明广东联通在实践过程中遇到的问题及关注要点。 关键 词： 云计算、虚拟化、虚拟化网络、数据中心 前言 云计算技术是IT行业的一场技术革命，已经成为了IT行业未来发展的方向，这种趋势使得IT基础架构的运营专业化程度不断集中和提高，从而对基础架构层面，特别是网络层面提出了更高的要求。虚拟化的计算资源和存储资源最终都需要通过网络为用户所用。如何让云平台中各种业务系统尽可能安全的使用云平台网络，如何让业务便利的接入和使用云计算服务，以及通过网络满足数据中心间的数据传输和配置迁移，如何通过虚拟化技术提高网络的利用率，并让网络具有灵活的可扩展性和可管理性，这些都是云计算网络研究的重点。 随着增值业务系统的发展，原有传统数据中心存在资源利用率低、维护成本高、电力消耗严重等诸多弊端。由此广东联通开展了以构建云计算平台实现动态基础架构的数据中心，通过虚拟化手段进行物理资源的共享，节约单一系统的使用成本。本文着重介绍一下广东联通在搭建云计算网络过程中所遇到的问题以及进行的思考。 云计算的网络层次 云平台的基础架构主要包含计算(服务器)、网络以及存储。对于网络，从云平台整个网络架构上来说，可以分为三个层面，数据中心网络、跨数据中心网络以及云接入网络，如图1所示。 云计算中的网络层次 数据中心网络包括连接服务器、存储以及四到七层各类服务器(如防火墙、负载均衡、应用服务器、IDS/IPS等)的数据中心局域网，以及边缘虚拟网络，即主机虚拟化之后，虚拟机之间的多虚拟网络交换网络，包括分布式虚拟交换机、虚拟桥接和I/O虚拟化等； 跨数据中心网络主要用于不同数据中心间的网络连接，实现数据中心间的数据备份、配置迁移、多数据中心间的资源优化以及多数据中心混合业务提供等； 接入网络用于数据中心与终端用户互联，为公众用户或企业用户提供云计算服务。 本文着重介绍数据中心网络以及跨数据中心网络两个层次的技术特点以及部署方式。 数据中心网络 数据中心是整个云计算平台的核心，数据中心是利用虚拟化技术将物理资源进行整合，进而实现增强服务能力；通过动态资源分配及调度，提高资源利用率和服务可靠性；通过提供自服务能力，降低运维成本；通过有效的安全机制和可靠性机制，满足自由业务系统和合作运营系统以及地方业务系统的安全需求。由于云计算技术的逐步发展，使得传统的数据中心网络已经不能满足新一代数据中心网络高速、扁平、虚拟化的要求。 首先，目前传统的数据中心由于多种技术和业务之间的孤立性，使得数据中心网络结构复杂，存在相对独立的三张网，包括数据网、存储网和高性能计算网，和多个对外I/O接口。数据中心的前端访问接口通常采用以太网进行互联而成，构成高速的数据网络；数据中心后端的存储则多采用NAS、FCSAN等接口；服务器的并行计算和高性能计算则需要低延迟接口和架构。由于以上这些问题，导致了服务器之间存在操作系统和上层软件异构、接口与数据格式不统一； 其次，数据中心内网络传输效率低。由于云计算技术的使用，使得虚拟数据中心中业务的集中度、服务的客户数量远超过传统的数据中心，因此需要对网络的高带宽、低拥塞提出更高的要求。一方面，传统数据中心中大量使用的二层网络产生的拥塞和丢包，需要三层以上协议来保证重传，效率低；另一方面，二层以太网网络采用生成树协议来保持数据包在互联的交换机回路中传递，也会产生大量冗余。 因此在使用云计算后，数据中心的网络需要解决数据中心内部的数据同步传送的大流量、备份大流量、虚拟机迁移大流量问题。同时，还需要采用统一的交换网络减少布线、维护工作量和扩容成本。引入虚拟化技术之后，在不改变传统数据中心网络设计的物理拓扑和布线方式的前提下，可以实现网络各层的横向整合，形成一个统一的交换架构。 数据中心网络虚拟化分为以下三个方面： 1)核心层虚拟化 核心层网络虚拟化，主要指的是数据中心核心网络设备的虚拟化。它要求核心层网络具备超大规模的数据交换能力，以及足够的万兆接入能力；提供虚拟机箱技术，简化设备管理，提高资源利用率，提高交换系统的灵活性和扩展性，为资源的灵活调度和动态伸缩提供支撑。其中VPC技术(VirtualPort-Channel)可以实现跨交换机的端口捆绑，这样在下级交换机上连属于不同机箱的虚拟交换机时，可以把分别连向不同机箱的万兆链路用IEEE802.3ad兼容的技术实现以太网链路捆绑，提高冗余能力和链路互连带宽，简化网络维护。 2)接入层虚拟化 接入层虚拟化，可以实现数据中心接入层的分级设计。根据数据中心的走线要求，接入层交换机要求能够支持各种灵活的部署方式和新的以太网技术。目前无损以太网技术标准发展很快，称为数据中心以太网DCE或融合增强以太网CEE，包括拥塞通知(IEEE802.1Qau)、增强传输选择ETS(IEEE802.1Qaz)和优先级流量控制PFC(IEEE802.1Qbb)、链路发现协议LLDP(IEEE802.1AB)[4]。 3)虚拟机网络交换 虚拟机网络交互包括物理网卡虚拟化和虚拟网络交换机，在服务器内部虚拟出相应的交换机和网卡功能。虚拟交换机在主机内部提供了多个网卡的互联以及为不同的网卡流量设定不同的VLAN标签功能，使得主机内部如同存在一台交换机，可以方便的将不同的网卡连接到不同的端口。虚拟网卡是在一个物理网卡上虚拟出多个逻辑独立的网卡，使得每个虚拟网卡具有独立的MAC地址、IP地址，同时还可以在虚拟网卡之间实现一定的流量调度策略。因此，虚拟机网络交互需要实现以下功能： 1.虚拟机的双向访问控制和流量监控，包括深度包检测、端口镜像、端口远程镜像、流量统计； 2.虚拟机的网络属性应包括：VLAN、QoS、ACL、带宽等； 3.虚拟机的网络属性可以跟随虚拟机的迁移而动态迁移，不需要人工的干预或静态配置，从而在虚拟机扩展和迁移过程中，保障业务的持续性； 4.虚拟机迁移时，与虚拟机相关的资源配置，如存储、网络配置随之迁移。同时保证迁移过程业务不中断。 IEEE802.1Qbg EVB (Edge Virtual Bridging)和802.1QbhBPE(Bridge PortExtension)是为扩展虚拟数据中心中交换机和虚拟网卡的功能而制定的，也称为边缘网络虚拟化技术标准，这两种标准都在制定中。其中802.1Qbg要求所有VM数据的交换(即使位于同一物理服务器内部)都通过外部网络进行，即外部网络能够支持虚拟交换功能，对于虚拟交换网络范围内VM动态迁移、调度信息，均通过LLDP扩展协议得到同步以简化运维。802.1Qbh可以将远程交换机部署为虚拟环境中的策略控制交换机，而不是部署成为邻近服务器机架的交换机，通过多个虚拟通道，让边缘虚拟桥复制帧到一组远程端口，可以利用瀑布式的串联端口灵活地设计网络，从而更有效地为多播、广播和单播帧分配带宽。 跨数据中心网络 数据中心之间会有计算或存储资源的迁移和调度，对于大型的集群计算，可以构建大范围的二层互联网络，对于采用多个虚拟数据中心提供云计算服务，可以构建路由网络连接。采用二层网络的好处是对虚拟机的透明化，通过简化数据中心的二层互联设计，就可以利用网络虚拟化技术在更短时间内完成确定性二层链路恢复，同时不影响L3链路，这与传统的MSTP+VRRP设计有所不同。此外，虚拟化能够在跨数据中心网络各层间横向扩展，这有利于数据中心规模的扩大，同时又不影响网络管理拓扑。但为了保证网络的高性能、可靠性，需要解决网络环路问题。 实践过程遇到的问题 以上说明了云计算网络层面的技术要点，结合以上技术要点，广东联通实际进行云计算网络搭建过程中主要遇到了以下三个网络虚拟化相关问题： 1.如何实现物理机内部的虚拟网络。 2.外部网络如何调整以适应虚拟资源对网络的变化要求。 3.如何对网络进行统一管理并保证虚拟网络的安全性。 下文将针对以上问题进行详细说明。 物理机内部虚拟网络 广东联通云计算平台主机硬件设备主要以刀片服务器群为主:全高或半高的机框内放置了多台刀片服务器。内置三层网络交换机、存储交换机，并配置有管理模块。利用云计算管理平台在刀片服务器上创建虚拟机、调整分配虚拟机资源， 每个刀框系统中包含多个内置的三层物理交换机。刀框系统中的每个物理服务器都连接在这些物理交换机上。所有刀框系统内各设备都通过这些物理交换机与外界通讯，实现不同的功能：业务对外通讯、资源管理信息和存储通讯。 在各物理机上根据资源的分配，虚拟出单个或多个虚拟机。每个虚拟机可虚拟出多个网卡用于对外通讯，根据需求归属不同的业务系统，使用不同的IP地址。在各物理机上虚拟出虚拟网桥。同一物理机上的虚拟机借助虚拟网桥共用物理机网络带宽，实现虚拟机之间的通讯。在同一刀框系统内，跨物理机的虚拟机则通过刀框系统中内置的三层物理交换机实现跨物理机的通讯。 通过物理机上创建虚拟机，分配物理机计算能力；通过设置虚拟机上的虚拟网卡，实现虚拟机的对外通讯；通过设置虚拟网桥，实现虚拟机之间的通讯和带通讯宽的共享。这样，通过虚拟层实现了资源的分配和调度。 虚拟化资源对网络的要求 每台刀框系统内置三层物理交换机，交换机负责刀框内各物理机和虚拟机与外界的通讯。交换机上联到一对三层交换机组成的云计算平台接入交换机。云计算平台接入交换机连接增值业务承载网汇聚交换机，通过增值业务承载网实现云计算平台各虚拟机与其他增值业务系统通讯，以及与其他非增值业务系统通讯。 根据业务需要，不同的业务系统划分为不同的VLAN，使用不同的IP地址段，归属不同业务系统的虚拟机也分配为相应的VLAN，这些VLAN终结在云计算平台接入交换机上。通过该交换机的三层路由功能，实现不同VLAN之间的通讯，实现跨刀框系统的虚拟机之间的通讯和资源调配。 网络的统一管理及安全防护 每台刀框系统带有CMC管理监控模块，用于对整个系统的各个硬件部分进行远程控制和管理。各刀框系统的CMC管理模块均连接在一台交换机上，作为独立的云计算平台硬件管理网段以VLAN方式接入云计算平台接入交换机上。 云计算管理平台软件安装在一台虚拟机上，通过云计算平台接入交换机与被监控管理的各物理刀片服务器进行统一管理，云计算管理软件与被管的物理刀片服务器是同一个VLAN，使用相同的IP地址段，随时可对其中的物理服务器进行管理。各虚拟机虚拟出用于管理的网卡，使用与云计算管理平台相同的IP地址段。这样，云计算管理平台可以访问物理刀片服务器和虚拟机，对物理服务器和虚拟机进行通讯和资源调配，对各虚拟资源进行统一的管理。 虚拟网络环境下，各虚拟机利用了传统的虚拟网络技术-VLAN实现虚拟机之间的隔离。对云计算环境下各虚拟机的网络安全监控和防护仍采用传统的针对主机网络安全防护工具，如防病毒软件、主机防火墙等。 需要重视的要点 当前广东联通云计算平台网络结构已基本满足需要，但仍存在以下几个问题，需要在接下来的时间摸索解决： 1. I/O接口多，维护复杂度高 当前虚拟机通过物理机的网卡实现了I/O接口，包括存储、监控管理、业务通讯三部分，启用HA还将包含HA通讯部分。这些I/O接口被分担在不同的物理机网卡上，通过不同的交换机进行通讯，需要针对不同的接口进行维护管理。 2.带宽的流量控制 物理服务器上多个虚拟机的对外业务通讯将共用同一组物理网卡，缺乏流量控制手段，对虚拟机的带宽使用情况进行有效的分配使用，只能通过对虚拟机的网卡设置模式的方式实现带宽的控制。 3.统一的资源调度 云计算平台的接入层网络是通过一组三层交换机实现各虚拟机VLAN的终结，受二层生成树结构的影响，无法跨接入层交换机进行同一VLAN内的资源调度，因此无法实现跨机房的资源调度。 4.虚拟机存在网络安全问题 虚拟机对外通讯是通过虚拟网桥实现，虚拟网桥并不能实现二层网络上的隔离，也没有加密通讯。业务系统内部通讯被虚拟网桥广播到其他业务系统。云计算平台需要对所有的虚拟机和物理服务器进行监控和资源调度，同属一个管理网段，而虚拟机是被用户控制和管理，存在着虚拟机受到攻击通过管理网段影响其他虚拟机的情况。 5.云计算平台的网络安全防护工具 构建云平台的防病毒以及业务系统隔离手段。 结束语 云计算是为不同用户提供虚拟、可靠、弹性、按需的IT服务，作为连接用户和承载各种计算存储资源的网络，除了具备现有基本网络功能外，还必须满足云计算特性的更高要求。本文着重分析了网络虚拟化在数据中心网络、跨数据中心网络的技术要点，同时说明了广东联通在实践的过程中遇到的问题及解决方法。可以预见，随着云计算产业发展步伐的加快，网络虚拟化技术将会更快的发展以实现有效的支撑整个云计算生态环境，通过网络虚拟化可实现弹性、安全、自适应以及易管理的基础网络，充分满足虚拟技术对基础网络带来的挑战，达到提高数据中心的运行效率、业务部署灵活、降低能耗、释放机架空间的目的。 参考文献 【1】童晓渝,张云勇,戴元顺.公众计算通信网架构及关键技术[J].通信学报，2010,31(8):134-140 【2】童晓渝,吴钢,张云勇,等.后电信时代[M].北京：人民邮电出版社,2010 【3】袁欣.云计算的统一基础网络[E B / O L ] 【4】卢国强.云计算环境下的泛联路由平台[J].信息安全与技术,2010(10):108-110； 【5】房秉毅.云计算网络虚拟化技术 需要5条以上参考文献。参考文献应包括作者、题名、出版地、出版者、出版日期、起止页码，期刊还应包括刊名、卷、期，标准还应包括标准编号 电子文献还应包括电子文献的出处或可获得地址，发表或更新日期/引用日期","title":"网络虚拟化技术要点及实践"},{"content":"史玉柱曾说过，“我能看懂3年以内的事情，马云可以看懂5年以内的事情，乔布斯能看懂10年以内的事情。那么未来10年，哪些行业最有“钱景”？ 人民网曾发表过“盘点未来十大最赚钱的行业”，体育经营管理、卡通产业等行业榜上有名，其中榜单上出现了“云计算”，何为云计算？为何云计算榜上有名？ 解析云计算 云计算(Cloud Computing)是一种新兴的商业计算模型。它将计算任务分布在大量计算机构成的资源池上，使各种应用系统能够根据需要获取计算力、存储空间和各种软 件服务。企业可以通过使用云计算以极低的成本投入获得极高的计算能力，不用再投资购买昂贵的硬件设备，负担频繁的保养与升级。 云计算与我们的生活 格畅科技相关人员说：其实很多科技类的产品与我们的生活息息相关，它们服务于我们的生活。就以Gleasy一盘为例，它是集文件存储，文件管理和文件分享为一体的互联网应用。同学聚会、朋友聚会、还是家庭聚会，聚会过后都可以用Gleasy一盘方便快捷地将大量照片和视频文件共享给他人；驴友背包行天下，没带电脑，没带硬盘，没存储容量，这时可以用Gleasy一盘借用网吧电脑将照片上传保存在网盘；用户可以将常用驱动程序文件备份在Gleasy一盘，即使重装电脑也不必担心多年积攒的应用程序丢掉；莘莘学子，都市白领，教学老师可以把想带回家的课件资料、办公资料等备份在Gleasy一盘中，就不用再带笔记本，不用担心存储物品的丢失……云计算与我们的生活息息相关，据Gartner发布的一份调研报告，个人云将在2014年取代PC，到2016年，多设备间内容共享的实现将使消费者把近4成的数字内容存储到云端服务器。可见，云计算的未来市场之广阔，前景之好，竞争之激烈。","title":"云计算等入选10大赚钱行业，你“动心”了吗？"},{"content":"2012中国信息安全技术大会  2012 China Information Security Technology Conference （2012年7月27日  中国·北京）   主题：新形势下的信息安全重点工作及新一代信息安全架构   指导单位： 国家工业和信息化部信息安全协调司 主办单位： 中国电子信息产业发展研究院            中国电子认证服务产业联盟            信息系统安全等级保护技术创新战略联盟             承办单位： 《信息安全与技术》杂志社 赛迪信息安全研究所   支持媒体：  中国电子报、中国计算机报、中国电脑教育报、中国经济和信息化、通信产业报、软件和信息服务、网管员世界、赛迪网、中国信息主管网、中国信息安全博士网   会议时间：  2012年7月27日（星期五） 会议地点：  中国·北京（新世纪日航饭店） 会议规模：  250-300人 大会背景 信息安全已经成为国家安全的核心内容和关键要素，并日益成为整个社会所有安全的基础。促进国家网络信任体系建设，加快构建可信网络空间，增强我国信息安全保障能力，是我国信息化建设和应用过程中面临的重大战略问题。 一方面，物联网和云计算等新新一代信息技术的应用，给信息系统安全问题带来了新的挑战，也为信息安全技术带来了更广阔的市场空间。“构建可信、可管、可控的网络空间”是我国“十二五”信息安全发展的总体目标。如何确定我国可信网络空间构建的指导思想、基本方针、战略目标，思路与重点、对策与措施，是信息安全领域必须回答的现实课题。 另一方面，明确各级电子签名与认证主管部门、电子认证服务机构、依赖方、用户和方案提供商等在构建可信网络空间中的责任和权益，日益变得至关重要。各级电子认证服务主管部门推动实施证书策略的工作方向和具体任务是什么，电子签名依赖方如何根据证书分类分级证书策略体系选择符合应用的证书策略，电子认证服务机构如何按照证书分类分级策略体系发放证书，如何营造全社会按照证书分类分级策略体系选择证书应用的良好氛围，诸如此类的问题，都直接关系到构建健康的电子认证服务产业链，并关系到可信网络空间的构建。 为深入探讨信息安全领域的诸多问题，推进信息安全技术交流，促进技术成果转化为现实生产力，中国电子信息产业发展研究院、中国电子认证服务产业联盟、信息系统安全等级保护技术创新战略联盟共同举办《2012中国信息安全技术大会》探讨“十二五”期间我国信息安全技术发展目标和任务，以及未来几年我国信息安全技术发展的重点和研究方向。大会还编辑出版了《2012中国信息安全技术展望学术论文集》 演讲议题 9:00 - 9:10 欢迎致辞中国电子信息产业发展研究院院领导 9:10 - 9:20 新形式下信息安全工作重点工业和信息化部信息安全协调司副司长  欧阳武 9:20 - 9:40 我国信息安全主要问题及对策中国工程院院士沈昌祥 9:40 - 10:00 信息安全发展趋势及战略国务院发展研究中心研究员陈宝国 10:00 - 10:30 下一代安全的思考与实践北京神州绿盟信息安全科技 10:30 - 10:50 云计算时代的信息安全策略北京大学高级研究员卿斯汉 10:50 - 11:20 新形势下的网络应用审计任子行网络技术股份有限公司 11:20 - 11:50 云时代的安全管理天融信科技有限公司 11:50 - 12:10 信息安全专业教育的国家卓越工程师计划北京邮电大学杨义先 12:10 - 12:20 我国电子认证的新应用与新趋势中国电子认证产业联盟刘权 中午休息 13:30 - 13:55 基于博弈论的信息安全机制与策略中央财经大学朱建明 13:55 - 14:15 物联网安全风险分析杭州电子科技大学赵泽茂 14:15 - 14:45 云计算中心的安全等级保护曙光信息产业股份有限公司（未演讲） 14:45 - 15:15 IT新技术背景下反病毒服务发展北京江民新科技术有限公司 15:15 - 15:45 热点技术下的信息安全思考成都卫士通信息产业股份有限公司 15:45 - 16:05 云计算中基于信任的多域访问控制策略中国矿业大学林果园 16:05 - 16:25 多方安全协议形式化分析方法研究及应用贵州大学汪学明（未演讲） 16:25 - 16:45 感知层通用安全体系研究信息系统安全等级保护技术创新战略联盟秘书长范红   主要演讲内容解析 议题一：新形式下信息安全工作重点 演讲内容：2012年是我国“十二五”重要之年，在“十二五规划”中将“加强网络与信息安全保障”作为我国信息化建设的重要一个章节凸显出来，体现出了国家对信息安全的高度重视。特别是10天前公布的《国务院关于大力推进信息化发展和切实保障信息安全的若干意见》（国发23号文），十分具体地、明确地提出了信息安全工作内容，为我国信息安全指出了方向。 　　　近年来，各种病毒泛滥，网络黑客活动日益猖獗，信息泄密事件频发，网页被篡改时常发生，一些事件的出现给人们造成极大的伤害，引起了社会各界的高度重视。并且，随着“信息化带动工业化”步伐的加快，电子商务、电子政务的不断推进，作为信息化建设重要环节的信息安全建设也日益成为人们关注的焦点。 　　　十多年来，我国在政府的指导下，形成了人才培养、科研攻关、产品研发、市场教育等较为完整的体系，由于市场的拉动和政府的推动，信息安全市场发展非常迅猛，据赛迪顾问数据显示，2011年市场规模达109.63亿元人民币，同比增长18%，估计2013年将达到186.52亿元人民币，将继续保持了较高的增长速度。从事信息安全产品生产、销售、服务的企业已达1000多家，产品覆盖防病毒、防火墙、入侵检测系统、防网页篡改、系统加固及容灾、信息加密、安全认证以及整体解决方案和安全服务等，产业规模连续数年保持30%左右的增幅。由此可见，我国的信息安全产业已初具规模，信息安全成为信息化建设中不可缺少的重要组成部分。 　　　在我们正在迈向信息化社会的今天，信息安全关乎于个人隐私，青少年保护，企业商密，社会稳定，乃至国家安全，是一项长期而又艰巨的工作，需要各方面的人员共同来完成，而信息安全技术是实现信息安全的基本保障。   议题二：信息安全发展趋势及战略 演讲内容： 没有听到什么具体的内容，只听到他的有谱没谱论。他说云计算是老包装的新名词。就是分布式存储的新包装。基于这一点我也从网上查找了些相关资料。请大家参考： 云计算是一个概念，实质就是把分布在网络上的服务器硬件及软件资源整合起来提供服务，如提供大型运算，提供网络储存等。 云计算用到了许多技术，分布式计算就是它用到的其中一个技术。好比说一个操作系统需要内存管理，进程管理一样。 云计算的技术基础是分布式计算，同时融入了一些商业特性。 分布式技术是为了解决如何利用多台计算机的计算能力处理大型计算任务的问题 云计算技术是为了解决对高性能计算资源的需求普遍化的问题（参见介绍云计算时的经典比喻，如水、电等）   议题三：下一代安全的思考与实践 演讲内容： 高级持续性威胁(Advanced Persistent Threat，APT)，威胁着企业的数据安全。APT是黑客以窃取核心资料为目的，针对客户所发动的网络攻击和侵袭行为，是一种蓄谋已久的“恶意商业间谍威胁”。这种行为往往经过长期的经营与策划，并具备高度的隐蔽性。APT的攻击手法，在于隐匿自己，针对特定对象，长期、有计划性和组织性地窃取数据，这种发生在数字空间的偷窃资料、搜集情报的行为，就是一种“网络间谍”的行为 “以APT为代表的攻击模式，已经从经济层面上升到政治层面，下一代威胁的智能化、复杂性、持续性及危害性已经迫在眉睫”，绿 盟科技的安全专家万慧星指出，“面临这样的挑战，下一代安全也应具备相应的智能化及体系化，只有建设安全生态系统及安全化体 系才能应对下一代威胁，而这其中最为关键的是需要认清安全产品的本质，即安全防护。” 演讲还阐述了下一代安全迫切需要具备的几个能力，即业务识别能力、信息获取能力、处理逻辑和规则分离、快速升级能力以及灵活 部署能力。在此需求下，下一代安全将呈现“Agent”特性，在前端为安全产品侦测威胁。但仅具备“Agent”还是不够的，还需要在 后端有个智慧的大脑，这可能需要安全体系自身的积累以及安全生态链的协作。 无论是前端还是后端，无论是攻击还是防御，以APT为代表的下一代安全威胁带给业界前所未有的挑战，绿盟科技认为在做好基础安 全防护工作的基础之上，下一代安全还应该从3个方面努力，即合力建立更加健康的安全生态环境；加强关键信息基础设施的ICT供应 链安全管理，提升软件安全性；动手开始加强安全“数据”积累，开展对深入分析技术的探索。       演讲还具体的列举了一些安全技术。同样一款软件，不同的配置策略产生的防护效果是截然不同的（策略的重要）、以及杀毒软件灰名单的学习机制（自动归类到白或黑名单中）、还有一些特殊的shell命令的告警（针对一些渗透工具的shell）防火墙隔离带（针对数据库托库行为）等。       总之，演讲者从实例到理论在短短的30分钟内给我们灌输了大量的信息安全防护方面的知识。的确，有时安全技术并非是多么高深的技术。而是现有技术的有效组合利用。   议题四：云计算时代的信息安全策略 演讲内容： 从云计算的商业模式、风险与挑战等方面介绍了云计算。 商业模式：在设法确定哪些互联网应用值得信任时，应当考虑它们打算如何盈利。Larry Ponemon表示，收取费用的互联网应用服务可能比得到广告资助的那些服务来得安全。广告给互联网应用提供商带来了经济上的刺激，从而收集详细的用户资料用于针对性的网上广告，因而用户资料有可能落入不法分子的手里。 风险与挑战：安全性、隐私性和可靠性 首先安全性包括云计算的载体虚拟机本身的安全性和对用户数据的加密保护上。 隐私性：几乎有关互联网应用的每项隐私政策里面都有漏洞，以便在某些情况下可以共享数据。大多数互联网应用提供商在自己的政策条款中承认：如果执法官员提出要求，自己会交出相关数据。但了解到底哪些信息可能会披露，可以帮你确定把哪些数据保存在云计算环境、哪些数据保存在桌面上。 可靠性：即包含了数据隐私保护的一面，又包括存储稳定、计算准确的一面。当演讲者问Microsoft一位高管云计算到底是更可靠了还是不可靠了时的回答是both。如果有效的使用云服务。对其安全性、隐私性和可靠性做好就是更好了。如果没有做到，那还如果普通PC有保障。所以说，云计算目前还处于十分不成熟的阶段。还需要很多技术以及政策上的支持。   议题五：新形势下的网络应用审计 演讲内容： 网络安全审计系统应用于企业，能够规范员工上网行为、提高工作效率、防止企业机密资料外泄，为企业的网络提供保障，使企业的网络资源发挥应有的经济效益。 从企业管理的角度，以可视化的方式描述、分析企业网络信息系统的实际使用状况，提高企业信息系统的工作效率，加强企业内部管理，降低企业的运营成本，帮助管理者发现潜在的威胁，减少人为因素和管理缺失造成的关键业务停顿造成的损失。帮助您对IT安全事件进行有效监控、协调并迅速做出响应，快速实现ROI。 网络行为审计：通过端口镜像取得原始数据包，并还原成连接，恢复到相应的通讯协议，如：FTP、Http、Telnet、SNMP等，进而重现通过该链路的网络行为。   议题六：我国电子认证的新应用与新趋势 演讲内容： 电子认证（electronic authentication）采用电子技术检验用户合法性的操作。 《电子签名法》第二条规定“本法所称电子签名，是指数据电文中以电子形式所含、所附用于识别签名人身份并表明签名人认可其中内容的数据。”。 签名，一般是指一个人用手亲笔在一份文件上写下名字或留下印记、印章或其他特殊符号，以确定签名人的身份，并确定签名人对文件内容予以认可。 传统的签名必须依附于某种有形的介质，而在电子交易过程，文件是通过数据电文的发送、交换、传输、储存来形成的，没有有形介质，这就需要通过一种技术手段来识别交易当事人、保证交易安全，以达到与传统的手写签名相同的功能。这种能够达到与手写签名相同功能的技术手段，一般就称为电子签名。 电子签名手段有很多，那么是否都与手写签名、盖章一样具有法律效力呢？ 《电子签名法》第十四条规定“可靠的电子签名与手写签名或者盖章具有同等的法律效力。”，也就是说，只有“可靠的电子签名”才与手写签名或者盖章具有同等的法律效力，而不是各种电子签名都有法律效力。那么，什么是“可靠的电子签名”呢？ 《电子签名法》第十三条规定“电子签名同时符合下列条件的，视为可靠的电子签名： （一）电子签名制作数据用于电子签名时，属于电子签名人专有； （二）签署时电子签名制作数据仅由电子签名人控制； （三）签署后对电子签名的任何改动能够被发现； （四）签署后对数据电文内容和形式的任何改动能够被发现。”。 我们知道，随着现代科学技术的发展，越来越多的技术手段被运用于电子签名领域，具有多种形式，如：附着于电子文件的手写签名的数字化图像、采用特定生物技术识别工具生成的指纹、虹膜合成数据等。那么，以何种技术生成的电子签名才是安全可靠的，才具有法律效力，这是电子签名法应当解决的问题。 从世界各国的规定来看，主要有三种模式：一是采用技术特定化方案，即只承认数字签名的法律效力；二是技术中立方案，即在法律上不规定某种技术方案，而将技术方案的选择留给当事人各方约定；三是折中方案，即一方面规定了安全可靠的电子签名应当具备的条件，另一方面则没有限定采用何种技术的电子签名才具有法律效力。采纳这一模式的理由在于：随着科技的发展，电子签名技术也会不断地发展。立法者只需要规定原则性标准。那么从《电子签名法》第十三条规定来分析，指纹、生物特征数据合成技术等，不满足第十三条规定的三、四点，也就是说，它们只能算做电子签名，而非《电子签名法》定义的可靠的电子签名。   议题七：基于博弈论的信息安全机制与策略 演讲内容： 随着社会信息化水平的不断提高和电子政务与电子商务的快速发展,信息系统与计算机网络的基础性、全局性作用日益增强.信息资源已经成为重要的生产要素、无形资产和社会财富,信息网络更加普及并日趋融合.信息系统受到入侵可能会给用户造成巨大损失,特别是对于像军事、金融、电力等关键信息系统而言其安全性就更加重要.因此,政府和企事业单位都非常重视信息安全,在信息安全方面的投入持续增加,以期降低信息安全事件造成的损失,获得信息安全的保障.政府管理部门也强制或指导相关单位加强信息安全建设,如公安部制定了《计算机信息系统安全保护等级划分准则》,对信息安全提出了明确的要求. 通常,信息安全机制主要有两大类,即预防和检测.预防的信息安全技术代表是防火墙,其主要作用是过滤访问请求,阻止入侵发生;检测的技术主要有入侵检测系统(IDS),其主要作用是检测是否存在入侵事件.由于预防机制完全阻止入侵是不可能的,因此入侵检测就成为重要的信息安全技术.入侵检测作为动态安全技术中最核心的技术之一,能够实时地全面监控网络、主机和应用程序的运行状态,主动对计算机网络系统中的入侵行为进行识别和响应,提供了对内部攻击、外部攻击和误操作的实时检测，有效弥补了安全防御技术的不足．当一个潜在的入侵被检测到时，IDS会报警，表示有入侵存在．IDS报警后，系统自动响应，或由管理员检查事件并做出相应的响应．但是IDS的性能并不是完美的，存在误报和漏报的问题．这一现象可能会使管理员忽视IDS的报警，甚至认为IDS无用．2003年Gartner研究报告就曾指出IDS市场失败，建议企业将安全预算用在预防机制的建立上．2006年Gartner的报告再次强调新的技术会带来新的安全漏洞，什么时候采用什么技术对于企业来说是一个关键．因此，对信息安全技术的价值进行有效的评价就非常重要． 在信息安全技术应用方面，还有一个问题是信息安全机制的配置．同样的信息安全技术同样的应用环境采用不同的配置会产生不同的效果，这是一个安全管理的问题．对于防火墙来说，通过配置可以控制过滤的粒度．对于IDS来说，通过优化配置可以降低IDS的误报率和漏报率．但是在配置的过程中也会出现“顾此失彼”的问题，即减少了一种类型的错误，却会导致另一种类型错误的发生．对于企业信息系统而言，如何有效配置与管理企业的信息安全体系也是影响信息安全价值的重要因素．当前，对信息安全技术的评价有许多种，但多数是从技术的角度，评价系统的安全性、可靠性和性能的．特别是对于IDS来说，主要是从技术的角度评价其检测率、误报率和漏报率．对IDS的测评内容包括有效性、实时性、可扩展性、易用性、容错性和处理性能等，其中有效性是IDS性能的重要衡量标准，主要体现在漏报率和误报率上．性能良好的IDS能将入侵事件的误报率和漏报率控制在一定范围内．本文基于博弈论对信息安全技术的价值进行评价，特别是综合评价企业信息安全体系结构的成本与收益，为企业确定信息安全的最优策略提供依据． 从博弈论的观点来看，信息安全实际上是信息保护者(如企业)与入侵者之问的博弈．将这一问题模型化，保护信息安全的一方希望最小化信息安全事件的损失，两入侵的一方希望进入信息系统，获得更大的利益．在博弈中，企业基于其价值决定是否使用信息安全技术，何时购买、安装和使用哪种信息安全技术．当企业决定使用一种信息安全技本时，如何使用才能获得最佳效果又是一个问题。一种情况是企业使用默认配置，另一种情况是根据企业运行环境进行配置优化。这些问题都会直接影响到信息安全技术的价值．以IDS为例，以往的研究表明，高的检测率与高的误报率是正相关的，而误报率会降低IDS的价值。当管理员不能够检查所有的报警时，只有在极端的环境中IDS才有用，这样的话还不如关掉IDS有效益。   议题八：物联网安全风险分析 演讲内容： 与互联网安全相比，物联网的安全问题更为突出，互联网一旦受到安全威胁，其造成的损失一般集中在信息资产领域，而物联网一旦受到攻击，那么将会直接对现实生活产生影响。可以设想，如果物联网遭受病毒攻击，那么很可能会出现工厂停产，社会秩序混乱，甚至于直接威胁人类的生命安全。在互联网上，曾经有蠕虫病毒在一天内感染了25万台计算机，使社会经济遭受了巨大的损失，而与互联网相比，物联网具有更大的市场价值，为了牟取利益而从事物联网病毒的人将会更甚与互联网。数字犯罪将因为物联网的出现而真正成为一种行业，物联网面临着更为严峻的安全挑战。 首先，物联网本质特性导致其存在一定的安全问题。（1）互联网的脆弱性。物联网建设在互联网的基础之上，而互联网在设计之初，由于其目标是设计一种主要用于研究和军事目的的网络，相对比较封闭，并没有考虑安全问题，互联网本身并不保障安全性，这是当前互联网安全问题日益严重的根源。互联网所具有的安全问题，物联网同样具有。（2）复杂的网络环境。物联网将组网的概念延伸到了现实生活的物品当中，从某种意义上来说，现实生活将建设在物联网中，从而导致物联网的组成非常复杂，复杂性带来了不确定性，我们无法确定物联网信息传输的各个环节是否被未知的攻击者控制，复杂性可以说是安全的最大障碍。（3）无线信道的开放性。为了满足物联网终端自由移动的需要，物联网边缘一般采用无线组网的方式，但是，无线信道的开放性使其很容易受到外部信号干扰和攻击；同时，无线信道不存在明显边界，外部观测者可以很容易监听到无线信号。（4）物联网终端的局限性。一方面，无线组网方式使物联网面临着更为严峻的安全形势，使其对安全提出了更高要求，另外一方面，物联网终端一般是一种微型传感器，其处理、存储能力以及能量都比较低，导致一些对计算、存储、功耗要求较高的安全措施无法加载。 其次，针对无线终端和无线网络的攻击技术不断发展。无线网络比有线网络更容易受到入侵，因为被攻击端的电脑与攻击端的电脑并不需要网线设备上的连接，攻击者只要在你所在网域的无线路由器或中继器的有效范围内，就可以进入内部网络，访问资源。近几年的黑客会议上,针对无线终端、手机、显示屏物理设备的劫持和控制的演示也成为主流。目前，通过智能手机和手持设备发起攻击的技术不断完善。例如，一些攻击者可以通过非常简单的设备如手机、电脑，就可以攻破智能卡。 此外，任何一个社会高度依赖的大众化基础设施，都将会吸引一些恶意攻击者的破坏。物联网的价值非常巨大，它将影响并控制现实世界中的事件，并且包含一些非常有价值的信息，从而不可避免地受到攻击者的极度关注。早期的互联网仅涉及信息资产领域，缺乏太多的信息价值，只能是黑客展示其攻击技术和能力的场所，只是随着越来越多的国家基础设施依赖互联网，更多信息资产存储在互联网上的时候，才逐渐成为攻击者窃取信息资产的场所。当物联网可以控制到现实生活中电器设备运行的时候，如果缺乏足够的安全机制和防护措施，那么物联网很可能成为国内外各种敌对势力肆意活动的场所。 目前，针对物联网的攻击主要表现在以下几个方面： 利用漏洞的远程设备控制 标签复制和身份窃取 非授权数据访问 破坏数据完整性 传输信号干扰 拒绝服务 正是由于上述问题，使物联网面临着更为严重的安全问题。解决物联网安全问题必须避免重蹈互联网的覆辙，要在设计之初，就从整体、系统的角度来思考、解决安全问题，从物联网终端、无线传输、互联网传输的各个环节都需要考虑安全性。","title":"2012中国信息安全技术大会资料整理"},{"content":"千兆宽带，已经超出了我的理解范畴。就算谷歌要推视频，也用不了这么大的带宽啊。 我们目前SATA的硬盘，存取速度最快在133m bit/s，仅仅是千兆宽带的1/10，这意味着，如果你从网络上存取数据，将比本地的还要快。 那么，我们为什么每人还需要操作系统呢？网络操作系统不用杀毒，启动更快。 我们为什么还要安装软件呢，别人已经给我们装好了，我们的电脑只需要显示而已。 我们为什么还要存储呢？花点钱买存储就够自己用了。 看看谷歌在干什么！浏览器，云操作系统，云计算。谷歌在作未来10年的技术，将是对我们生态圈的一次大洗牌。 苹果，微软，将在这次洗牌里倒下，兴起的是一大批云端产业链。看来我需要准备点什么了。","title":"谷歌推出千兆宽带，他想干什么"},{"content":"    在21世纪到来新十年的开始，2010年对于ERP来说同样也是如此，在21世纪最初的十年里，ERP在中国几乎成了企业信息化的代名词，自上世纪90年代末兴起的ERP在十年的时间里得以迅速普及。如今，ERP的理念已经在大部分企业中得到应用和实施，因此，即便在如今这样一个环境下，讨论ERP的实施依然是企业进行信息化建设关注的焦点之一，继续讨论这一话题并非过时，而是恰逢其时。 　　事实上，关于ERP实施问题的讨论已经不是一两天的事了，自ERP产生到现在，已经走过了三十多年的历程。期间有众多的企业在投入巨资之后，应用ERP系统却遭遇失败，于是，大型ERP成了企业不可或缺的软件，同时也是最让人恼火的软件。关于ERP实施失败的原因，几十年来的探讨已经足够多，为此写上几本书都非常容易。2010年同样如此，关于这一问题的探讨似乎永远没有定论，这里也无需赘述。 　　但有意思的是，ERP在中国经过十年时间的推广，却开始出现一股反思风潮，从2009年年中至今，在不到一年的时间里，SAP、Oracle、用友、金蝶等传统管理软件企业遭遇媒体的集体曝光，诸多媒体集中指出了几家企业的管理软件产品，尤其是ERP系统实施的问题。但ERP实施问题在这个时间段被集体曝光，同时也表现出媒体与管理软件企业的角力。 　　作为一种先进的软件解决方案，ERP不仅融合了计算机技术，同样也融合了国外先进企业的管理流程，因此，许多国内企业都将之视为让企业焕发新生命的法宝和利器。殊不知，这种看法已经超越了软件本身的价值。软件终究是死物，而使用的人是活的，所谓“皮之不存，毛将焉附”，如果软件所实施的企业在管理上问题重重，再好的软件，同样也无法发挥作用。 　　与其说系统有问题，不如说组织本身有问题。曾经，丰田开创了精益生产的模式，给现代制造业带来了新一轮的大发展，那时候，他们并没有应用所谓的ERP。 　　这似乎又回到了关于ERP实施问题的探讨上来，但对于今天的企业而言，他们所面临的内外部环境已经不再是十年前的样子，因此，他们在进行ERP的实施上，同样不能再采取过去的思路。都说技术的发展给了后来者超越前人的机会，对于如今的ERP实施来说，企业能否在新的技术和企业内外部环境下实现新的突破，这才是最重要的。 　　比如，当SOA的理念逐渐深入人心，即便不了解这一理念的企业也要在进行信息化建设的时候，也会充分考虑现有系统与异构系统等的集成问题。此外，云计算、SaaS等新兴理念的兴起也让企业认识到，过去在企业内部实现ERP管理并不充分，如何让ERP与未来SaaS或者云计算对接或融合，同样需要企业加以考虑。 　　信息化是一条路，要一直走下去。从这个角度上讲，ERP的实施和应用同样也是如此。","title":"ERP实施问题依然是信息化建设焦点"},{"content":"入行云计算时间不久，就已经被这些概念弄的晕晕乎乎的，各种新名词不断出现在耳边，尤以SAAS和PAAS居多。而各类公司更是为自己冠名一会SAAS一会PAAS。为了尽快跟上节奏查阅了不少资料，但对于其繁琐的解释还没等仔细看完就已然晕了，对我这种不懂技术的人而言简直难以下咽。   于是乎，利用之前学英语用的方法：文法名称即用法的概念来进行套用。顿觉理解起来省劲很多。按照这样的逻辑SAAS（软件即服务）就是企业为用户提供相应的软件服务；PAAS（平台即服务）就是企业为用户提供某一平台，用户通过该平台享受某种服务。   通过对SAAS和PAAS概念拆解后，就能非常清晰的看到一个提供的是软件产品，一个提供的平台服务；也就是说软件产品是实际的用户可直接使用的，平台就像一个杂货铺可能里面什么都有需要自己组装组合。平台的概念也更大些。不管一个公司给自己的冠名是SAAS或PAAS只看他是做什么的就知道是不是口径一致，如果是针对某一块的产品就是SAAS，如果是什么都有那就是平台。   理解的还是浅显，但却能帮助我做区分，足矣！另外想说的是不管你给自己冠名的是SAAS还是PAAS最重要的还是练内功，提供真正有价值的能让用户认同的服务。","title":"SAAS和PAAS之浅见"},{"content":"今天在地铁里翻看<<程序员 >>2012年7月版,介绍了Joyent，据说 性价比要超过亚马逊和阿里云，其技术优点是能将计算资源主要应用于计算与存储，而不用过多的精力花在虚拟化上，其使用的实时进程描绘技术和自动扩增4倍CPU资源的技术和Lean Virtualization这三项技术能提供最优化的虚拟资源，避免客户在购买云设备时花多余的银子，就是说购买更少的设备可以实现与预期同样的效果，充分实现按需付费，客户购买的云一般都是超售的(例如不是表明的完全占用一颗CPU，而是仅使用2分之1，5分之一的CPU资源)。举例子来说，客户需要5台计算机共240G内存来处理每秒5000次的并发访问，使用Joyent的云就只需6台虚拟机共24G内存同样能解决问题。这确实很酷。 里面还提到了“实时数据密集型应用”的时间延误问题，可以通过集成Node.js开发与测试环境来解决。虽然我不清楚node.js是什么，时间延误是怎样的问题，但是我觉得知道这一点能给给解决云计算问题带来一些思路。 发现一点，测试云利用情况，CPU、磁盘和内存的读写利用率是三个主要指标。 标题列出这些名词，是为了方便记忆用的。 Node.js采用非阻塞式的输入输出设计，减少了服务器端的负载和用户端的RTT（Round Trip Time）时间。 OpenStack 是对象存储，其优点是可避免单点故障引发数据永久丢失。其思想是通过架构对等，可无限扩展N台机器（每台机器的配置保持一致）,元数据存储是随机存储，不是单点存储。 我写的是自己的理解，不见得是对的。以后我会找机会试试这些开源的东西，到底是什么东东。","title":"Node.js,openstack,HDFS,Joyent,NFS"},{"content":"代码之美~利用构造方法实现模块的解耦 阅读次数: 32次 发布时间: 2012-07-20 10:51:16发布人: 张占岭 来源: 网络转载 解耦，不仅只是对程序的扩展性而言，它可能还是你使用你的程序从一个层面向另一个层面提高的基础，请认真对待这个词语“解耦”。 我相信，它将会成为与“SOA”，“分布式”，“云计算”，“KV存储”，“高并发”一样的热门的东西，我确信这点。以后，我将会继续关注这个词语“解耦”。 今天主要是讲”代码之美“的一个话题，利用构造方法使你的对象进行一个可供注入的接口，这就是IOC里面注入的一种方式，即”构造器注入“。  1     /// <summary> 2     /// 统一实体 3     /// <\/summary> 4     public class EntityBase 5     { 6  7     } 8     /// <summary> 9     /// 统一操作10     /// <\/summary>11     public  interface IRepository12     {13         void Insert(EntityBase entity);14     }15     /// <summary>16     /// 用户操作实现17     /// <\/summary>18     public class UserRepository : IRepository19     {20         #region IRepository 成员21 22         public void Insert(EntityBase entity)23         {24             throw new NotImplementedException();25         }26 27         #endregion28     } 而在构造方法去使用它的时候，一般代码是这样：  1     public abstract class IndexFileBase 2     { 3         IRepository _iRepository; 4         public IndexFileBase(IRepository iRepository) 5         { 6             _iRepository = iRepository; 7         } 8  9         /// <summary>10         /// 根据实现IRepository接口的不同，Insert逻辑也是多样的11         /// <\/summary>12         /// <param name=\"entity\"><\/param>13         public void Insert(EntityBase entity)14         {15             this._iRepository.Insert(entity);16         } 上面的代码，很好的实现了new对象的松耦合，这使得它具有通用的特性，一般我们在设计通用功能时，经理使用这样方式。","title":"利用构造方法实现模块的解耦"},{"content":"有不少人对传统离线的灾难恢复和云计算中的灾难恢复这两个概念还存在着混淆。弄清楚其中的差异与恢复需求是维持一个固定灾难恢复策略的第一步。 无论是否是在云计算中实施灾难恢复，一个成功灾难恢复计划所包含的要素都是相同的： 1.用于灾难的计划 2.记录你的计划 3.测试你的备份文件 4.修正任何存在的问题 5.再次测试，以确保你已解决了所有的问题 6.经常性地重复上述步骤 最后一步的“重复”是让灾难免于发生的关键所在。 灾难恢复技术已从基于磁带的恢复技术和租用数据中心空间对重要服务进行恢复发展至即时地从发生故障的站点切换到虚拟的失效备援站点。在云计算灾难恢复供应商如何管理离线组件，或他们如何对一个IT环境实现云计算化方面是存在着差异的。有些人可能会说，他们相信灾难恢复可通过云计算实现，而有些人则不这么认为。 大多数厂商将设备插入到客户的IT基础设施，以获取信息并将其存储在本地，然后复制到云中。在绝大多数情况下，事实上数据并不会存在于云中；实际上数据被转移至供应商的数据中心中。这一方法类似于传统的备份解决方案。这一方法的本地化和高速可允许你从发生非灾难性数据丢失事件的设备中恢复数据。在将被保护站点离线的实际灾难事件中，离线数据通过互联网重新上线。 一旦你了解到灾难事件中数据的位置，确定满足公司需求的恢复点对象（RPO）和恢复时间对象（RTO）成为了IT团队和业务经理的首要任务。虽然可能有许多公司都要求“永远在线、永不掉线”的运行，但是实际的预算和灾难发生概率都在时刻提醒他们，他们的这一需求是完全不必要的。最重要的是要制定出切实可行的灾难恢复目标。 对于那些依赖于技术创造价值的公司来说，一个零RPO/零RTO的准则同样有效；为这个灾难恢复计划支付费用是组成这一业务成本的一部分。而对于其他的公司，计算机网络保险和高RPO/RTO就足够了。业务规模越大，其组合复杂程度越高，同样RPO和RTO需求的复杂程度也越高（从0/0到8小时/24小时设置，甚至于更为复杂24/24的需求。） 云计算选项中的灾难恢复 虚拟化是基于云计算灾难恢复技术的基础。在这个过程之后，就成为了一个真正的云计算服务。诸如IBM公司、Iron Mountain公司、CommVault公司、Simply Continuous公司和AppAssure公司等主要供应商提供了基于云计算的商业级灾难恢复产品，该产品旨在整合业务标准和流程、报告活动并可使IT团队和业务单位了解产品状态。 已创建用于恢复IT环境的虚拟机（VM）与你使用物理机器在专用设施中使用的虚拟机并无不同。其中唯一的差异在于这些虚拟机托管于一个第三方设施中并基本上从云中运行。当被保护设施的指示灯熄灭，同时调用灾难协议，那些虚拟机替代了物理机器和虚拟机器——接管生产机器。 该方法是SLA友好的。能够以可控的方式使用存储灾难恢复数据和应用程序的虚拟机。这一点可确保你管理系统能力和成本。如果一个业务单位基于Web订单处理系统的RTO为四小时，而一个常用但不重要的客户订单历史记录归档系统RTO为48小时，那么服务水平协议将要求灾难恢复产品立即恢复基于Web的订单处理系统，并在其后恢复历史记录归档系统。这一机制保留了恢复服务的两个目的：它降低了与任何时间相关的成本，并赋予忙碌的IT人员时间以确保首先满足更为关键的SLA。 这一分阶段恢复计划还允许用于消除灾难的时间。当然，还必须考虑到彻底破坏情况下的恢复计划；但是，在大多数情况下，灾难是指一次简单的失效。一旦发出失效命令并选中相关设施，你可能不需要为并不重要的SLA运行灾难恢复协议。","title":"浅析云计算中的灾难恢复策略"},{"content":"据外国媒体报道，受技术问题影响，亚马逊云计算数据中心在本周五再次出现大规模的服务中断事故。业内分析人士表示，该事件将促使许多公司重新考虑是否将他们的IT资源移植到那些他们无法控制的云计算数据中心。 研究公司IDC的分析师马太？伊斯特伍德（Matthew Eastwood）指出，该事件实际上是再一次敲响了云计算技术乃至整个产业的警钟，它将迫使云计算行业重新考虑这项远程控制技术所面临的问题。 业界应该弄明白哪些资源需要部署在以数据和计算机操作为中心的数据中心，哪些资源必须运行在企业自己的IT基础设施上。 分析人士指出，云计算的服务合同也必须重新考量，这些服务合同说明了用户需要支付多少资金用于备份和恢复服务，包括为部分处在不同地理位置的数据中心支付额外的费用。受此次事故影响最深的是部分创业公司，这些公司以追求业务的快速增长为目的，为广泛的备份和恢复服务支付费用的意愿较弱。 在商业领域，云模型正迅速成长为一种主要的IT经营模式，不少公司正迫于将他们的计算基础设施外包给数据中心，以避免琐事并降低运营成本。目前，包括辉瑞和 Netflix在内的数千家企业都是亚马逊云的客户。已报道的受此事故影响的公司还包括基于位置的社交网站；FoureSquare， 问题和解答服务商Quora； 新闻共享网站Reddit 以及为网络出版商提供游戏工具的BigDoor。 该事件将对云计算产业造成的长期影响目前尚不确定。迄今，企业云计算预计将迅速增长，逐年增速将超过25%，据IDC估计，到2014年，市场规模有望达555亿美元。 主要技术供应商都在积极推动不同的云产品，一些厂商强调实用型的云服务，如亚马逊和其他向大公司销售硬件和软件的公司，他们可以更有效地比调节计算负荷。后者使用云技术，但这些公司拥有和控制被称为私有云的计算资源。 不过，也有观察人士指出，云计算模式仍然是安全的。Rackspace公司的首席战略官卢穆尔曼表示，亚马逊数据中心服务中断事故对云计算行业造成的影响相当于一次航空事故，目前航空旅行仍被视为比汽车行驶更安全的交通方式。数据中心依旧比那些拥有自己IT基础设施的个别公司更安全。关键的是，业界应该从亚马逊服务中断事故中汲取教训。","title":"亚马逊事件 或致云计算产业蒙上阴影"},{"content":"  Biweekly Spotlights ==== 2012. 6 . 25 – 2012. 7 . 19 第 17 期 ==== 微软云计算的安全、可信和保障 2012 年    6 月25    日 如何从安全层面考量云计算解决方案？这是对云计算跃跃欲试的用户很关注的话题。云安全联盟为此推出了一项评估机制，把云计算的安全性、可信性和保障性的评估文档化，形成公开的评估登记表，简称STAR（Security,    Trust & Assurance Registry），云计算服务提供商都可依据 STAR 来进行自我评估并对外公布。微软已陆续将Dynamic CRM、Office 365和Windows Azure的评估结果公布，近日还发布了一份白皮书（.pdf），详细阐述了微软如何应用    START 框架来加强云服务的安全控制，以及如何应用到三种云服务产品中的。此外，白皮书还概述了微软的云服务如何达到并超越 ISO 27000 标准的安全要求。微软一直十分注重云计算安全，并致力于推动云安全发展。希望这份白皮书能帮助用户更好的理解云服务的安全。 微软向FBI提供新证据，指证    Zeus僵尸网络嫌疑人 2012 年 7 月2 日 约三个月前，微软数字犯罪部门（DCU: Microsoft    Digital Crimes Unit）与若干金融服务机构及安全公司联合行动并成功捣毁 Zeus 僵尸网络。微软近日已将更多 Zeus 相关网络犯罪证据提交给 FBI 作进一步审查，并成功指证了两名嫌疑人。据美国电子支付协会 NACHA 统计，与一年前相比，遭钓鱼邮件攻击的无辜Zeus受害者减少了约九成，Zeus 僵尸的感染率也大幅下降。为了保护广大用户，微软将继续与更多网络服务供应商（ISP）、计算机应急响应中心（CERT）等组织增进合作，竭力保证 Zeus 僵尸网络的指挥和控制域名保持被禁用，并以提高黑客作案成本为目标来减少相关网络犯罪。更多信息请关注DCU 的Facebook和Twitter。 微软7 月发布9    个安全补丁 2012 年 7 月 11 日 微软于北京时间7月11日清晨发布9个安全补丁，其中3个为最高级别严重等级，其余6个为重要等级，共修复 Windows、IE、Visual Basic for Applications 和 Office 中的16个安全漏洞。请特别优先部署严重等级补丁MS12-043、MS12-045和MS12-044。MS12-043通过修改 MSXML 在使用之前初始化内存对象的方式解决了最初在安全通报 2719615中描述的 Microsoft XML Core Services 漏洞。微软同时还发布了两个安全通报：安全通报2719662提供了一个 Fix it 方案，来禁用 Windows Vista 和 Windows 7 中桌面边栏和小工具；安全通报 2728973面向 Windows 的所有受支持版本提供了一个更新，将一些不符合安全实践规范的中间 CA 证书加入不受信任证书列表中。详细信息请参考微软MSRC 博客。 阅读更多信息：Microsoft 安全公告摘要    (2012年7月) 微软恶意软件防护诊断工具 2011 年7 月12 日 想要一键检查系统的安全装备吗？来试试微软的免费工具吧！Microsoft    Malware Prevention troubleshooter是一款快速检查系统安全的小工具，简单易用。此工具通过扫描您的计算机，针对当前Windows操作系统的安全设置，向您提供最佳的改善建议，从而大幅降低计算机受到恶意软件侵害的可能性。该工具通过开启Windows防火墙来防范来自网络的攻击，同时可以检查计算机中杀毒软件的更新和保护状态，对于没有安装杀毒软件的用户，会推荐安装免费的Microsoft Security Essentials。该工具还通过开启Windows Update 来自动检测安装最新的安全补丁。此外，该工具对浏览器、注册表及用户账户控制（UAC）的设置也均会进行优化。让我们一起给自己的电脑做个安全体检吧！ 阅读更多信息：IObit Malware Fighter, New Anti-Malware Software 感谢您的关注! 下期双周刊发布时间：2012 年 8 月 16 日。敬请期待！ 微软大中华区安全团队 Microsoft GCR Security Team   View article...  ","title":"微软安全新闻聚焦-双周刊第十七期"},{"content":"据 Forrester 预测，私有云市场将由2011年的78亿美元增长到2020年的150亿美元，如此美味的蛋糕自然不乏垂涎者。然而，私有云管理平台作为私有云的核心技术，各家厂商自然十分积极，同时也不乏有一些开源的管理方案。本文将对目前市场上主流的八款云管理平台进行介绍，并在文章最后加以对比。 　　1. OpenStack 　　OpenStack是一个旨在为公共及私有云的建设与管理提供软件的开源项目。它的社区拥有超过130家企业及1350位开发者，OpenStack项目的首要任务是简化云的部署过程并为其带来良好的可扩展性。 　　OpenStack包括数个由社区维护的项目： 　　OpenStack Compute (Nova)是一套控制器，用于为单个用户或使用群组启动虚拟机实例。它同样能够用于为包含着多个实例的特定项目设置网络。OpenStack Compute在公共云处理方面堪与Amazon EC2相提并论;而在私有云方面也毫不逊色于VMware的产品。在公共云中，这套管理机制将提供预制的镜像或是为用户创建的镜像提供存储机制，这样用户就能够将镜像以虚拟机的形式启动。 　　OpenStack Object Storage(对象存储,Swift)是一套用于在大规模可扩展系统中通过内置冗余及容错机制实现对象存储的系统。这些对象能够通过一个REST API或是像Cyberduck这样可以对接对象存储API的客户端加以恢复。 　　OpenStack Imaging Service(镜像服务,Glance)是一套虚拟机镜像查找及检索系统。它能够以三种形式加以配置：利用OpenStack对象存储机制来存储镜像;利用Amazon的简单存储解决方案(简称S3)直接存储信息;或者将S3存储与对象存储结合起来，作为S3访问的连接器。OpenStack镜像服务支持多种虚拟机镜像格式，包括VMware(VMDK)、Amazon镜像(AKI、ARI、AMI)以及VirtualBox所支持的各种磁盘格式。镜像元数据的容器格式包括Amazon的AKI、ARI以及AMI信息，标准OVF格式以及二进制大型数据。 　　三个项目的关系如下图所示： 　　图 OpenStack三个项目之间的关系 　　最近根据投票结果纳入“核心”项目集团的新成员是一项代号为“Keystone”的身份服务以及一套基于Django的仪表板接口，后者的代号为“Horizon”。 2. Eucalyptus 　　Eucalyptus云计算软件，在一个平台上(分为open source版和enterprise版)，提供了对这些资源的抽象。Eucalyptus的源码是公开的。并且有提供给CentOS 5，Debian squeeze，OpenSUSE 11，Fedora 12的软件包。 　　Eucalyptus选择Xen和KVM作为虚拟化的管理程序。目前版本是2.0.3。Eucalyptus的enterprise版已经对vSphere ESX/ESXi提供了支持。 　　Eucalyptus组件： 　　Eucalyptus 包含五个主要组件，它们能相互协作共同提供所需的云服务。这些组件使用具有 WS-Security 的 SOAP 消息传递安全地相互通信。 　　Cloud Controller (CLC)在 Eucalyptus 云内，这是主要的控制器组件，负责管理整个系统。它是所有用户和管理员进入 Eucalyptus 云的主要入口。所有客户机通过基于 SOAP 或 REST 的 API 只与 CLC 通信。由 CLC 负责将请求传递给正确的组件、收集它们并将来自这些组件的响应发送回至该客户机。这是 Eucalyptus 云的对外 “窗口”。 　　Cluster Controller (CC)Eucalyptus 内的这个控制器组件负责管理整个虚拟实例网络。请求通过基于 SOAP 或 REST 的接口被送至 CC。CC 维护有关运行在系统内的 Node Controller 的全部信息，并负责控制这些实例的生命周期。它将开启虚拟实例的请求路由到具有可用资源的 Node Controller。 　　Node Controller (NC)它控制主机操作系统及相应的 hypervisor(Xen 或最近的 KVM，很快就会支持 VMWare)。必须在托管了实际的虚拟实例(根据来自 CC 的请求实例化)的每个机器上运行 NC 的一个实例。 　　Walrus (W)这个控制器组件管理对 Eucalyptus 内的存储服务的访问。请求通过基于 SOAP 或 REST 的接口传递至 Walrus。 　　Storage Controller (SC)Eucalyptus 内的这个存储服务实现 Amazon 的 S3 接口。SC 与 Walrus 联合工作，用于存储和访问虚拟机映像、内核映像、RAM 磁盘映像和用户数据。其中，VM 映像可以是公共的，也可以是私有的，并最初以压缩和加密的格式存储。这些映像只有在某个节点需要启动一个新的实例并请求访问此映像时才会被解密。客户端依赖于解决方案，但可能以浏览器脚本、一个用户空间应用程序、或者甚至是一个内核模块的形式出现。云控制器是从客户端进入云的接口，并为云提供逻辑决定。云控制执行对客户端进行认证的服务，并将客户端的请求转化为事务。集群控制器是一个节点控制器集合。它负责状态信息并与所提供的虚拟机进行交互。可是，节点自身是通过管理程序(Xen或者KVM)来与在线以及离线虚拟机进行交互的。一个节点控制器在一个单独的机器上是作为一个独立的实例存在的。但是，多个节点控制器组成了特定的云。 3.IBM SKC 　　SKC(Starter Kit for Cloud，基础架构云快速部署解决方案套件)是IBM针对入门级的市场推出的、构建于PowerVM与VMControl之上的云计算管理平台，能够在系统资源池基础上实现“入门云(Entry Cloud)”的部署，确保以较为经济和简捷的方式实现云服务管理的落地。 　　据IBM云计算开发经理陈喜伦介绍， SKC是来自于中国客户的真实需求，由60多位工程师历时一年半的时间研发、经IBM全球研发机构合作打造的、在全球发布的标准产品。目前不仅支持power服务器，还支持x86服务器，未来也将支持Z系列大机。 　　SKC是部署在虚拟化平台之上，自带自服务界面，用户通过WEB界面就可以访问，由于其采用开放的IAAS REST API，便于用户进行个性化的开发。 　　IBM SKC功能： 　　IBM SKC作为一款入门级云平台的管理平台，与其他的云管理平台的区别是，并没有分成多个组件或者是模块，而是一个整体的软件。实现了如下三个方面的功能： 　　创建映像——简化成百上千的映像的存储 　　- 使用标准操作系统，轻松创建新的Golden master映像和软件应用 　　- 从物理机或在不同的x86系统之间进行映像转换 　　- 节省存储空间，减少映像数量和对存储容量的需求 　　部署虚拟机——加快新应用的交付时间，从数月缩短至2-3天 　　- 跨计算资源和存储资源的部署应用映像 　　- 最终用户自助服务，改进服务相应 　　- 通过资源和虚拟机隔离，项目用户访问控制，确保信息安全 　　- 易于使用-无需了解整个基础架构的细节 　　- 完全支持当前的虚拟化环境，保护您的投资 　　- 动态容量扩展，保证持续运行，优化性能 　　云操作——高效运营，降低成本 　　- 将交付管理授权给云用户来提高工作效率 　　- 通过自动化批准/拒绝，全面避免疏忽，确保最佳运行和云安全 　　- 标准化部署和配置，改进合规，通过设置策略、缺省值和模板来减少错误 　　- 通过直观的界面，简化对项目、用户、负荷、资源、计费、批准和计量的管理 　　在云计算计费方面，IBM 中国系统与科技研发中心架构师曹羽中表示，云计算计费主要分为四步： 　　1.基于事件的监控系统，主要是监控每个终端用户使用IT资源的变化情况 　　2.计量，记录每个用户每时间段使用每类IT资源的数据 　　3.计费，根据指定费率将资源使用详单转化为费用，形成费用详单 　　4.预算控制，根据费用详单按指定的时间段到用户的账号中扣除费用，超过预算的用户账号不允许继续使用IT资源，这样的好处在于将IT资源的应用透明化，同时迫使各个业务系统使用IT资源并归还。 　　图 基于IBM SKC的云计算基础架构 4. 微软System Center 2012 　　微软中国高级产品市场经理李琳在介绍System Center 2012时，表示这是一个云计算、基础架构和应用的统一管理平台，并强调一切都是以应用为中心。另外，据其介绍System Center 2012可向用户提供灵活高效的IT 基础架构、高可用的IT 服务水平(SLA)以及帮助用户统一管理私有云和公共云环境。 　　通过System Center 2012可以全局视图统一掌控企业的IT资源，包括管理各类虚拟化平台、网络资源和存储资源，此外可实现跨平台管理，包括Windows，Unix/Linux等，还能跨云端管理私有云，公有云，混合云，以此帮助CIO更专注于将“IT资产”转化为“企业的战略资源” 。 　　组件和功能： 　　System Center2012 包含了八大组件，分别实现不同的功能，用户可以根据自己的需要购买相应的组件。 　　微软私有云解决方案使用带Hyper-V的Windows Server与System Center构建而来。作为私有云解决方案重要核心的System Center,据介绍是一个云计算、基础架构和应用的统一管理平台，值得关注的是，System Center 2012将八个单独的组件产品整合到一个统一的解决方案中，将安装和部署时间从几天缩短至几小时,以下笔者具体介绍一下这八大组件。 　　System Center 2012 Virtual Machine Manager 　　这是微软私有云和数据中心管理解决方案中的一个核心组件，它将通过赋予您如下能力，来帮助您管理虚拟化环境和云环境。 　　* 构建灵活且经济适用的基础架构解决方案，它将通过对您现有的运算资源、网络资源和存储资源实现虚拟化，并将其合理分配给您的业务单元，进而实现基础架构即服务(IaaS)。 　　* 为应用程序提供以服务为中心的管理功能，从而让您能够在独立于当前基础架构的前提下，对这些应用程序进行管理。 　　* 它能够对包含多种虚拟化的环境提供支持， 包括 Hyper-V、VMware 和 Citrix，进而充分发挥现有数据中心投资的潜在价值。 　　* 通过对虚拟化的数据中心资源实现动态优化，来维护关键业务应用程序的高可用性。 　　System Center 2012 Operations Manager 　　私有云解决方案的监控功能组件，帮助用户管理自己的数据中心和云环境 : 　　* 提供灵活且经济适用的企业级 监 控 与 诊 断 功 能， 同 时，通过充分利用各种商用硬件、系统配置和异构环境，让总成本拥有量(TCO)得以降低。 　　* 通过利用具有行业领先水平的 .NET 应用程序性能监控与诊断功能，并配以 JEE 应用程序运行状态监控功能，来尽全力确保关键业务应用程序和服务的可用性。 　　* 为数据中心、私有云和公共云提供一个一体化的综合视图。 　　System Center 2012 App Controller 　　私有云解决方案中的自助服务功能组件，为应用程序所有者赋予如下能力 : 　　* 借助于以服务为中心的可视化操作界面，同时搭配使用标准模板库，轻松地配置、部署和管理各种服务。 　　* 直接以网页作为操作界面，根据您在组织中的职位角色来呈现相应的自定义资源视图，让您能够将精力集中于创建、管理和迁移各种服务之上，而不必再为服务器大费周折。 　　* 查看各种私有云服务和公共云服务以及各台虚拟机，并对位于各层的组件实现精细管控，同时还能够跟踪各种作业，并保管各种变更操作的详细历史记录。 　　System Center 2012 Orchestrator 　　微软私有云南解决方案的流程自动化组件，帮助用户利用现有的知识和资源来构建灵活且经济适用的基础架构流程自动化。它将有助于对现有数据中心中的各种流程实现精简和标准化，从而提高潜在投资回报。 　　* 通过对各种异构工具和系统实现集成、扩展以及交互式操作，来对现有数据中心投资实现最优化利用。 　　* 通过让各个业务领域中的流程从彼此隔绝转变为相互协调，来帮助您实现灵活而可靠的数据中心服务。 　　* 通过让各种私有云应用方案实现自动化，来减少容易出错的手动操作，从而降低成本和提高对应用需求的预期能力。 　　System Center 2012 Service Manager 　　Service Manager 将提供一个服务目录，让应用程序所有者和最终用户在业务范围内实现标准化的服务交付。 　　* 为 IT 业务人员提供灵活的自助式体验。 　　* 统一管理企业基础架构和应用程序所涉及的人员、流程和数据资源。 　　* 对数据中心的各种流程实现标准化。 　　System Center 2012 Data Protection Manager 　　此组件用于对所有 Windows 服务器和客户端的数据实现保护措施一体化，它是 Windows 环境中的备份与恢复解决方案。它将针对磁盘、磁带以及各种可扩展、易于管理和经济适用的云解决方案提供数据保护能力。 　　* 实现集中化管理，对所有 DPM 服务器进行统一集中管理 　　* 匹配您现有的 IT 环境，集成到现有的任务分配系统、工作流和团队结构 　　* 提供远程管理、排错操作和故障恢复功能，有助于降低管理成本 　　System Center 2012 Configuration Manager 　　该组件旨在为用户带来一种一体化的基础架构，帮助用户分别针对移动环境、物理环境和虚拟环境的用户体验进行预配置、管理和控制。 　　* 集成移动、物理和虚拟环境管理功能 : 通过一体化方式，完成虚拟桌面的管理工作。它还可以帮助您在多种桌面虚拟化平台之间协调各种应用程序。 　　* 安全性与合规性 :内置 Endpoint Protection，确保安全性的同时，提供对非合规系统的管理能力。 　　* 对服务管理功能进行扩展。能够通过与 Service Manager 的连接，帮助释放部分客户服务资源。并有助于缩短解决问题所需要的时间。 　　System Center 2012 Endpoint Protection 　　该组件构建于 Configuration Manager 的基础之上，针对管理和保护服务器及桌面操作系统提供一个单独的操作界面，从而降低复杂性，并让故障检修和信息呈报具有更强的针对性。 　　* 集配置信息和安全性信息的一体化视图，可以更轻松地发现和修复各种漏洞。 　　* 精简而一体化的工具、流程和基础架构，用于提高效率并降低管理和安全防护总体拥有成本 5.VMWARE Cloud Director 　　vCD可以帮忙你从虚拟化平台跨越到基础架构云，vCD与vSphere一起为VMware的用户提供一个安全的，多租户的，可自助服务的IaaS。而vCD就是这个IaaS的门户。 　　要安装vCD 1.0，需要Red Hat Enterprise Linux 5 (64 bit)和Oracle 10g或11g数据库。此外，需要先安装vShield Manager(这个下载并导入ovf就可以了，配置也比较简单，参考vCD安装指南)，它负责对vCD提供安全的网络服务。 　　相关组件： 　　1，vSphere资源，就是vSphere控制下的资源池; 　　2，vCD资源，对资源池的进一步抽象; 　　3，Provider vDC，VC管理下的计算及存储资源的分组，可以基于地理位置，权属关系或是服务等级来划分。 　　4，组织的vDC，是组织的容器，用于容纳组织的资源，从Provider vDC中分割出来。 　　5，vCD的网络，主要分为外部网络，组织网络和内部网络。 　　6，网络池，即多个相互独立的二层网络。 　　7，服务目录，列出用户可以浏览及使用的服务内容，包括虚拟机，vapp，安装介质等。 6. 戴尔VIS(Virtual Integrated System (VIS，虚拟集成系统) 　　戴尔宣VIS可以支持不同厂商异构环境，又可以同时把物理和虚拟两类资源把统一管理起来的动态数据中心架构。整个VIS实际上由三部分组成，Dell Advanced Infrastruture Manager (AIM，高级基础设施管理器)、VIS Self-Service Creator(自助式创建器)和VIS Director。 　　AIM 对数据中心里的物理资源和虚拟资源提供了单一的管理界面，它相当于把服务器、存储、网络和工作负载统一整合起来，可实现资源的动态配置，从而简化数据中心管理，提高效率和灵活性。其主要功能特性包括：快速服务器配置、物理机与虚拟机间相互迁移(P2P/P2V/V2P)、服务器故障侦测与修复、高效共享IT基础架构。 　　VIS Self-Service Creator 提供了自助服务式管理平台，授权用户可以借此部署和监控IT资源，比如用户可以自动化部署虚拟服务器和桌面负载，IT部门则可以用它来提高响应速度和实现更有效的控制。其主要功能特性包括：自助服务式门户、虚拟机蔓延的自动控制、工作负载资源配置模版、访问控制、不同厂商管理互操作等等。 　　VIS Director 戴尔下一代数据中心的“指挥中心”，IT管理员可以用来全面掌控各种物理资源和虚拟资源，对性能和资源使用率进行优化，提高服务水平。其主要内容包括先进的报告、假设和趋势分析、容量和使用率报告、成本分配和付费方案等 7. 富士通ROR 3.0 　　2011年2月15日，Fujitsu(富士通)在全球同步推出全新FUJITSU ServerView Resource Orchestrator系列前沿产品——一款强大且成熟的云管理软件，使得私有云构架的构建、扩展和整合变得极为简单。 　　作为Fujitsu(富士通)的资源管理软件(ServerView资源协调器和云架构管理软件)的最新产品，FUJITSU ServerView Resource Orchestrator为用户提供一整套可扩展的综合私有云架构指挥功能，能够与各个级别的云计算成熟度(服务器整合、虚拟化、标准化、混合、以及完全自助云服务)相匹配，为客户提供最适宜的自动化水平，确保行政管理和成本控制精确无误。 　　为应对用户授权、物理/虚拟服务器关系、存储以及网络拓扑结构日益增长的操作复杂性，ServerView Resource Orchestrator 为用户提供易于使用的自助门户操作。 　　该自助门户功能允许用户根据预定义的资源配置选择并定制自己的系统。Fujitsu(富士通)此次推出的ServerView ROR 3.0提供全方位的协调资源指挥功能，使管理员可管理和开发一切必要的基于菜单的服务部署选项。此外， ServerView ROR 3.0还具有仪表板功能，还允许管理员和用户查看目前到底有多少资源正在被使用，帮助他们确定他们所选择的服务得到了经济高效的利用，并发挥了最大效能。 　　ServerView ROR 3.0: 新特性 　　随着服务器整合、虚拟化以及私有云环境成为主流，数据中心管理也被新维度的额外要求所改变。这包括多层系统的运行效率，以及基于物理服务器和虚拟服务器部署的系统安全保证。以下是ROR 3.0可满足这些要求的新特性： 　　使用预定义模板的多层物理和虚拟系统自动化资源配置 　　多层服务器系统(包括物理和虚拟服务器、存储、网络交换机以及防火墙)基于模板的自动化资源配置极大地减少了管理负担，并避免了人为误差。 　　多租户私有云环境中的安全性更高 　　通过按租户对ICT资源管理进行分拆，并将基础构架和租户服务管理员前期的角色进行分离，该软件为多租户私有云环境提供更高的安全性。 　　通过灾难恢复选件保持业务连续性 　　与ServerView Resource Orchestrator同时发布的灾难恢复选件可确保用户系统的业务持续性，可将当前活跃站点迅速切换至预定的备用站点。动态资源指挥系统免除了对物理上完全相同的站点配置的要求，从而使得用户引入该灾难恢复选件的成本障碍大为降低。 8.浪潮云海OS 　　浪潮云海OS采用linux+Xen开放标准技术路线，兼容异构平台;全面采用虚拟化、分布式计算、分布式存储等，支持云计算+云存储整体架构。 　　浪潮云海是一款产品化的云计算中心操作系统，有清晰的硬件接口和应用接口，能够在不同的环境下使用，支撑多种不同的硬件和应用软件;有统一的标准和规范，容易识别和使用;云海系统采取模块化设计，用户可以按需选择，该产品主要包括大规模基础软硬件管理、分布式文件系统、虚拟计算管理、安全控制管理、节能管理和业务/资源调度管理等技术模块。 　　浪潮云海云数据中心操作系统架构 　　浪潮云海是浪潮的业务战略产品，该系统支持多租户服务，支持多种智能终端，能够管理计算机数量超过5000的数据中心管理，可池化的数据存储容量超过50PB，能够提供超过99.99%的总体可用性，支持百万量级虚拟资源与虚拟进程的管理。 　　1)大规模基础软硬件管理 　　基础软硬件管理，主要负责大规模基础软件、硬件资源的监控和管理，为云计算中心操作系统的资源调度等高级应用提供了决策信息，是云计算中心操作系统的资源管理的基础。基础软件资源，包括单机操作系统、中间件、数据库等。基础硬件资源，则包括网络环境下的三大主要设备，即：计算(服务器)、存储(存储设备)和网络(交换机、路由器等设备)。基础软硬件管理中心，可以对基础软件、硬件资源进行资产管理，监控基础硬件的状态和性能，能够对异常情况触发报警，提醒用户及时维护问题设备;能够对基础软硬件资源进行长期的统计分析，为高层次的资源调度提供决策依据。 　　2)虚拟计算管理 　　虚拟化的本质在于从逻辑角度而不是物理角度来对资源进行分配和使用，即从单一的逻辑角度来看待不同的物理资源。虚拟化技术有三种主要应用形态，即虚拟分拆、虚拟整合和虚拟迁移。 　　云计算数据中心较为普遍的应用了虚拟化技术的三种应用模式，其中尤以虚拟分拆技术应用最为广泛。云计算数据中心即需要兼容同一时期不同厂商的不同软件、硬件资源，还需要兼容不同时期采购的异构软件、硬件资源，因而需要着重解决异构软硬件资源的同构化问题。异构资源同构化，可以将异构的资源转换为相同颗粒度的可度量的同构资源节点，是按需分配和按量计费的基础。而资源节点同构化，也为分布式和并行性计算提供了良好的运行环境。 　　3)分布式文件系统 　　传统基于虚拟化技术的云计算平台，可以实现虚拟机的迁移、容错等功能，但普遍依赖于共享存储。这样，就存在一个致命的隐患，即：共享存储一旦宕机，所有构建于共享存储之上的虚拟机都会宕机。为了解决这一问题，需要将云计算平台建构于分布式存储系统之上，实现数据的冗余。而基于块设备的分布式文件系统，也就成为构建云计算中心操作系统的基础。 　　基于块设备的分布式文件系统，适用于大型的、海量数据吞吐的云计算平台。它将客户数据冗余部署在大量廉价的普通存储上，通过并行和分布式计算技术，可以提供优秀的数据冗余功能。且由于采用了分布式并发数据处理技术，众多存储节点可以同时向用户提供高性能的数据存取服务，也保证数据传输的高效性。 　　4)业务/资源调度管理 　　云计算包含三种服务模式，即云SaaS、云PaaS、云IaaS，这三种服务模式，虽然面向客户提供的服务形态不同，但后台都具备资源多租户技术这一共同特征。即，基础资源的共享和流转，是不同应用模式下云计算特征的核心体现。 　　云计算数据中心的突出特点，是具备大量的基础软硬件资源，实现了基础资源的规模化。但同时，如何提高这些资源的利用率，降低单位资源的成本，也是云计算平台供应商必须解决的问题。业务/资源调度中心可以实现资源的多用户共享，有效提高资源的利用率。且可以根据业务的负载情况，自动将资源调度到需要的地方。 　　业务/资源调度中心是云计算中心操作系统的高级应用模式，也是云计算数据中心低碳、绿色的开展业务的必然要求。 　　5)安全控制管理 　　一个产业、一个国家的竞争力可以有很多，而在信息时代下，数据已成为产业、国家的核心竞争力。云计算，实现了计算与存储的分离，实现了众多用户对同一基础资源的共享使用。但同时，众多用户共享同一资源，也对数据安全提出了更高的挑战。 　　在云计算环境下，基础资源的集中规模化管理，使得客户端的安全问题更多的转移到数据中心。从专业化角度，最终用户可以借助云数据中心的安全机制实现业务的安全性，而不用为此耗费自己过多的资源和精力。但同时，对云计算中心而言，需要直接对更多用户的安全负责，也带来更多的安全压力。而网络化的数据存取模式，带来了许多安全和隐私的问题，不仅影响到风险管理做法，而且还影响到法规、审计和电子凭证等法律问题的评估。具体而言，云计算安全涉及以下几个主要方面：数据访问风险、数据存放地风险、信息管理风险、数据隔离风险、法律调查支持风险、持续发展和迁移风险等等。 　　云计算数据中心的安全控制，需要从基础软硬件安全设计、云计算中心操作系统架构、策略、认证、加密等多方面进行综合防控，这样才能保证云计算数据中心的信息安全。 　　6)能耗绿色管理 　　建设节约型社会，是经济社会可持续发展的物质基础，是保障经济安全和国家安全的重要举措。对于云计算数据中心，面对规模巨大的基础软、硬件资源，实现这些基础资源的绿色、节能运维管理，是资源供应商业务的必然需求，也是云计算发展的初衷之一。 　　当前，业界普遍的情况，设备采购是以保证各项业务峰值需要为依据的。为此，用户往往采购了大量的设备。但实际运行过程中，设备负载普遍较低，通常仅在20%左右。特别在低负载时段，服务器的利用率更为低下。长期的低利用率，造成了大量资源的浪费和能源的无谓损耗。 　　云计算数据中心，实现了资源的多租户应用。通过业务的历史统计信息，配合业务/资源调度管理，可以有效提高资源的利用率。在典型应用中，采用节能技术的云计算数据中心，可以将资源负载提高到80%，除去资源调度过程中的损耗，可以将资源的有效负载提高2倍。当前中国服务器保有量在200余万台，如果能够较为普遍的采用云计算节能技术，则可以降低65%左右的能源损耗。以服务器平均能耗200瓦/小时计，全年可节约160亿千瓦时的电能，相当于葛洲坝电站2009年全年的发电量。而在夜间，数据中心整体负载降低情况下，则可将空闲资源转入休眠模式，从而在最大程度上实现数据中心绿色、低碳的节能运营。","title":"八大主流云管理平台对比导购"},{"content":"安装步骤：  本次安装用2台PC,将云端和节点分别安装在不同PC上。所有eucalyptus的安装在Centos操作系统上进行，该系统需要有以下支持： 1 相关软件安装 1.      yum install gcc      2.     yum intall ntp      3.     yum install -y java-1.6.0-openjdk ant ant-nodeps dhcp bridge-utils httpd 2 xen虚拟机安装 （1）yum install xen* （2）xen内核安装：yum -y install kernel-xen*   （这步很重要） （3）启用内核 ：修改/boot/grub/grub.conf  修改其中的default=1为default=0  重启计算机。 xm list 如果出现以下信息说明xen启用成功。 Name ID Mem(MiB) VCPUs State Time(s) Domain-0 0 3919 4 r----- 16.9   3 配置xen 修改 /etc/xen/xend-config.sxp。如下： 1.     (xend-http-server yes)    2.     (xend-unix-server yes)      3.     (xend-unix-path /var/lib/xend/xend-socket)      4.     (xend-address localhost)      5.     (network-    script    network-bridge)      6.     (vif-    script    vif-bridge)      7.     (dom0-min-mem 196)      8.     (dom0-cpus 0)         9. (vncpasswd '')   4 配置防火墙(如果不进行配置) 将防火墙关闭（如果没有关闭使用命令：service iptables off） 修改/etc/selinux/config  修改结果 SELINUX=disabled 5 eucalyptus安装，这里使用源码安装（对以下安装如有疑问请参考官网http://open.eucalyptus.com/wiki/EucalyptusInstallationCentos_v2.0） 如果采用集群方式，前端节点和后端节点装在不同PC上，参考一下方式： 前端pc：192.168.31.34 后端pc：192.168.31.35   （1）制作rpm安装包，编辑/etc/yum.repos.d/euca.repo文件内容如下： o    [euca] o    name=Eucalyptus o    baseurl=http://www.eucalyptussoftware.com/downloads/repo/eucalyptus/2.0.1/yum/centos/ o    enabled=1 （2）前端节点安装： 1.   yum install eucalyptus-cloud.$ARCH eucalyptus-cc.i386 eucalyptus-walrus.$ARCH eucalyptus-sc.i386 --nogpgcheck （3）后端节点： 1.   yum install eucalyptus-nc.i386 --nogpgcheck 6 启用eucalyptus 前端节点启用： /etc/init.d/eucalyptus-cloud start /etc/init.d/eucalyptus-cc start 后端节点启用 /etc/init.d/eucalyptus-nc start 如果成功启用则出现：Starting Eucalyptus services:         done.      7 查看xen虚拟机连接: 命令：su eucalyptus -c \"virsh list\"    如果成功连接会出现如下Domain-0的相关信息 Id Name                State      ----------------------------------     0 Domain-0            running   8 修改网络配置 查看 /etc/eucalyptus/eucalyptus.conf 模式VNET_MODE改为SYSTEM //默认应该是这个，不需要更改，如果不是，请修改 9 注册控制器和节点 (1)注册前端控制器 euca_conf --register-walrus 192.168.31.34    euca_conf --register-cluster CloudTest 192.168.31.34 //IP地址前的是CLC名，自己取1个 euca_conf --register-sc CloudTest 192.168.31.34 注册验证： /usr/sbin/euca_conf \\--list-walruses    registered walruses:    walrus  192.168.31.34 //返回的IP地址是否为你注册的IP    /usr/sbin/euca_conf \\--list-clusters    registered clusters:    CloudServer  192.168.31.34 /usr/sbin/euca_conf \\--list-scs    registered storage controllers:     （2）添加后端节点 euca_conf -addnode 192.168.31.35 验证节点： euca_conf --list-nodes    registered nodes:   192.168.34.195 CloudTest   （3）执行 /usr/sbin/euca_conf  -synckeys 验证组件是否注册好。如果出现后端节点ip说明注册完成。 10 登录eucalyptus的web管理界面 https://192.168.31.34:8443 默认管理员账号和密码为：admin  admin （本次安装用户名密码为：admin  yytest） 问题：无法登录。出现无效的安全验证。解决方法：更改火狐浏览器设置： 11 安装euca2ool包。 （1）制作rpm安装包：编辑/etc/yum.repos.d/euca.repo文件内容如下： 1.  当今，云计算应用日趋流行，各大型企业、组织纷纷加入云计算的热潮。作为研发组织，以虚拟化技术为基石的云计算技术为我们的组织管理和研发提供了便利。 Eucalyptus是一款基本开源的云计算应用平台，现已集成到Ubuntu的企业版。由于笔者搭建centos系统较为便利，所以本文在centos的平台上以xen为基础搭建eucalyputs系统。 由于起初笔者对于linux系统管理基本处于“文盲”阶段，所以在最初搭建的过程中走了很多弯路，付出了很多努力，但同时笔者也在这个艰辛的过程中学到很多，从“文盲”-->\"小菜“。希望我的这篇文章能够为同样在Eucalyptus搭建中遇到问题的小菜们提供一些帮助。 在Eucalyptus的社区网站中有对centos搭建Eucalyptus的详细讲述。<点击查看> 作为测试，笔者以三台服务器节点来完成平台搭建。其中将CLC,CC安装在一台前端节点<front-end>上作为控制节点,另外两台作为Node。 笔者的网络配置情况如下： （1）三台节点通过eth1局域网互连 （2）网段： 10.10.0.0, netmask:255.255.0.0 （3）<front-end> IP:10.10.x.9 （4）<node1> IP: 10.10.x.10 （5）<node2> IP:10.10.x.11 下面是笔者安装的详细步骤 Front-end //安装ntp用来实现front-end和nod yum install -y ntp ntpdate pool.ntp.org//front-end需要java，dhcp服务器二进制代码  yum install -y java-1.6.0-openjdk ant ant-nodeps dhcp bridge-utils perl-Convert-ASN1.noarch scsi-target-utils httpd  //配置防火墙，port 8443,8773,8774必须打开，或者直接关闭防火墙  run system-config-securitylevel-tui  Select Security Level:Disable  Select OK;  //安装Eucalyptus，关于源码安装请参看Eucalyptus社区的文档  //创建/etc/yum.repos.d/euca.repo文件，文件内容如下：  [euca]  name=Eucalyptus  baseurl=http://www.eucalyptussoftware.com/downloads/repo/eucalyptus/$VERSION/yum/centos/  enabled=1  其中$VERSION文版本号，比如笔者所安装的版本为2.0.1，则将该字段替换为2.0.1  安装命令：  yum install eucalyptus-cloud.$ARCH eucalyptus-cc.$ARCH eucalyptus-walrus.$ARCH eucalyptus-sc.$ARCH --nogpgcheck  其中$ARCH为主机的体系结构，比如笔者的位x86_64.(通常为i386或x86_64)  //配置/etc/eucalyp/eucalyputs.conf文件，这里是笔者出错最多的地方，后面将给出如何配置的详细说明，请读者阅读后根据自己的实际情况配置，一下只是笔者配置的一个实例  HYPERVISOR=\"xen\"  VNET_PUBINTERFACE=\"eth1\"  VNET_PRIVINTERFACE=\"eth1\"  VNET_MODE=\"STATIC\"  VNET_SUBNET=\"10.10.0.0\"  VNET_NETMASK=\"255.255.0.0\"  VNET_BROADCAST=\"10.10.255.255\"  VNET_ROUTER=\"10.10.x.9\"  VNET_DNS=\"8.8.8.8\"  VNET_MACMAP=\"AA:DD:11:CE:FF:ED=10.10.x.32 AA:DD:11:CE:FF:EE=10.10.x.33 AA:DD:11:CE:FF:EF=10.10.x.34\"文件中其他可以保持默认  Node  //安装ntp用来实现front-end和nod yum install -y ntp  ntpdate pool.ntp.org  yum install -y java-1.6.0-openjdk ant ant-nodeps dhcp bridge-utils perl-Convert-ASN1.noarch scsi-target-utils httpd  //Node需要安装xen并且配置xen允许通过HTTP从localhost控制hypervisor  yum install -y xen*  yum install -y kernel-xen*  sed --in-place 's/#(xend-http-server no)/(xend-http-server yes)/' /etc/xen/xend-config.sxp  sed --in-place 's/#(xend-address localhost)/(xend-address localhost)/' /etc/xen/xend-config.sxp  修改/etc/boot/grub.conf中的启动项，是其启动xen，重启节点。  //配置防火墙，port 8775必须打开，或者直接关闭防火墙  run system-config-securitylevel-tui  Select Security Level:Disable  Select OK;  /安装Eucalyptus，关于源码安装请参看Eucalyptus社区的文档 //创建/etc/yum.repos.d/euca.repo文件，文件内容如下：  [euca]  name=Eucalyptus  baseurl=http://www.eucalyptussoftware.com/downloads/repo/eucalyptus/$VERSION/yum/centos/  enabled=1  其中$VERSION文版本号，比如笔者所安装的版本为2.0.1，则将该字段替换为2.0.1  安装命令：  yum install eucalyptus-nc.$ARCH --nogpgcheck  //Post-Install Steps  在每台node节点上，查看/etc/libvirt/libvirtd.conf文件，确认一下行未被注释：  #unix_sock_group = \"libvirt\" => unix_sock_group = \"libvirt\"  #unix_sock_ro_perms = \"0777\" => unix_sock_ro_perms = \"0777\"  #unix_sock_rw_perms = \"0770\" => unix_sock_rw_perms = \"0770\"  //确保libvirt运行正常并可与hypervisor正常通信，在Node节点运行如下命令：  $： virsh list  如果上述命令的输出包括Domain-0，则配置正确。  配置/etc/eucalyptus/eucalyptus.conf文件  HYPERVISOR=\"xen\"  VNET_PUBINTERFACE=\"xenbr1\" VNET_PRIVINTERFACE=\"xenbr1\"  VNET_BRIDGE=\"xenbr1\"  VNET_MODE=\"STATIC\"  启动Eucalyptus  //front-end  /etc/init.d/eucalyptus-cloud start  /etc/init.d/eucalyputs-cc start  //Node  /etc/init.d/eucalyputs-nc start注册Eucalyputs组件  //front-end  euca_conf --register-walrus <front-end IP address> //如笔者的euca_conf --register-walrus 10.10.x.9 euca_conf --register-cluster <clustername> <front-end IP address> //clustername 为自定义的名字  euca_conf --register-sc <clustername> <front-end IP address>  //在front-end上注册nodes  euca_conf --register-nodes <Node 0 IP address> <Node 1 IP address> ... <Node N IP address>  如笔者：euca_conf --register-nodes 10.10.x.10 10.10.x.11  初始配置  登陆管理主页http://front-end-ip:8443  默认用户名密码为admin  登陆后修改密码  设置管理员邮箱  确认CC的IP地址  在Credentials主页点击Download Credentials按钮下载  创建目录存储下载的文件并解压  mkdir $HOME/.euca  unzip euca2-admin-x509.zip -d $HOME/.euca  . $HOME/.euca/eucarc //注册eucarc环境  安装Euca2ools  创建/etc/yum.repos.d/euca.repo文件  [euca2ools] name=Euca2ools baseurl=http://www.eucalyptussoftware.com/downloads/repo/euca2ools/$VERSION/yum/centos/ enabled=1其中$VERSION为版本号，如1.2  yum install euca2ools.$ARCH --nogpgcheck  上传镜像文件  //增加镜像<查看可下载镜像>  euca-bundle-image -i <kernel file> --kernel true euca-upload-bundle -b <kernel bucket> -m /tmp/<kernel file>.manifest.xml euca-register <kernel-bucket>/<kernel file>.manifest.xmleuca-bundle-image -i <vm image file>  euca-upload-bundle -b <image bucket> -m /tmp/<vm image file>.manifest.xml euca-register <image bucket>/<vm image file>.manifest.xmleuca-bundle-image -i <initrd file> --ramdisk true euca-upload-bundle -b <initrd bucket> -m /tmp/<initrd file>.manifest.xml euca-register <initrd bucket>/<initrd file>.manifest.xml//关联kernels和ramdisks到instances  euca-bundle-image -i <vm image file> --kernel <eki-XXXXXXXX> --ramdisk <eri-XXXXXXXX>eki-XXXXXXXX eri-XXXXXXXX均为上面步骤产生，请注意记录，也可以通过web管理页面进行查看下面是一个传镜像实例tar zxvf euca-Ubuntu-9.04-x86_64.tar.gz euca-bundle-image -i euca-Ubuntu-9.04-x86_64/kvm-kernel/vmlinuz-2.6.28-11-generic --kernel true euca-upload-bundle -b Ubuntu-kernel-bucket -m /tmp/vmlinuz-2.6.28-11-generic.manifest.xml euca-register Ubuntu-kernel-bucket/vmlinuz-2.6.28-11-generic.manifest.xml (set the printed eki to $EKI) euca-bundle-image -i euca-Ubuntu-9.04-x86_64/kvm-kernel/initrd.img-2.6.28-11-generic --ramdisk true euca-upload-bundle -b Ubuntu-ramdisk-bucket -m /tmp/initrd.img-2.6.28-11-generic.manifest.xml euca-register Ubuntu-ramdisk-bucket/initrd.img-2.6.28-11-generic.manifest.xml (set the printed eri to $ERI) euca-bundle-image -i euca-Ubuntu-9.04-x86_64/ubuntu.9-04.x86-64.img --kernel $EKI --ramdisk $ERI euca-upload-bundle -b Ubuntu-image-bucket -m /tmp/ubuntu.9-04.x86-64.img.manifest.xml euca-register Ubuntu-image-bucket/ubuntu.9-04.x86-64.img.manifest.xml创建自己的密钥文件euca-add-keypair mykey | tee mykey.privchmod 0600 mykey.priv通过euca-describe-images查看有哪些镜像  运行实例euca-run-instances -k mykey <emi-id> -t <type> -n <number of instances to start>其中mykey和mykey.priv可以命名为自己的文件，emi-id为可查看到的镜像如euca-run-instances -k mykey emi-39E1892可以过euca-describe-instances查看instances运行状态运行状态由pending变为running后即可登录如RESERVATION r-38390699 admin default INSTANCE i-3BC30777 emi-1C88159B 10.10.103.33 10.10.103.33 running key 0 m1.small 2011-02-18T12:07:14.623Z mycluster eki-8DAF16EB eri-882616CD RESERVATION r-3C9007FC admin default INSTANCE i-3BDD0719 emi-1C88159B 10.10.103.32 10.10.103.32 running key 0 m1.small 2011-02-18T08:59:33.67Z mycluster eki-8DAF16EB eri-882616CD//登录  ssh -k mykey root@10.10.103.32  注意这里登录时提示需要输入passphase，这里需要自己修改一下，改变RSA passphase:ssh-keygen -fid_rsa -p  至此我们登上instances开始我们的云端之旅了FAQ  问：front-end中 VNET_PUBINTERFACE=\"eth1\" VNET_PRIVINTERFACE=\"eth1\"如何配置 答：VNET_PUBINTERFACE设置成front-end与外网连接的网卡接口 VNET_PRIVINTERFACE设置成与Node节点互连的网卡接口 问front-end中如何配置Mode 答：eucalyputs中有四种可选模式，这里笔者选择了static模式，其他模式可以参考官方文档。下面对static模式配置进行简单描述 VNET_MODE=\"STATIC\" //设置为static模式  VNET_SUBNET=\"10.10.0.0\" //网段  VNET_NETMASK=\"255.255.0.0\" //netmask  VNET_BROADCAST=\"10.10.255.255\" //广播地址  VNET_ROUTER=\"10.10.x.9\" //route  VNET_DNS=\"8.8.8.8\" //dns服务器  VNET_MACMAP=\"AA:DD:11:CE:FF:ED=10.10.x.32 AA:DD:11:CE:FF:EE=10.10.x.33 AA:DD:11:CE:FF:EF=10.10.x.34\" //mac：ip映射，用来管理ip  注意在上面的设置中，网段一定要设置成instance和nodes以及连接nodes的front-end的网卡接口在同一网段，否则无法实现通信。笔者在这一点上犯了很多错误，花费了大量的时间 问：node节点VNET_PUBINTERFACE=\"xenbr1\"，VNET_PRIVINTERFACE=\"xenbr1\"如何设置 答：设置为xen自动建立的网桥。这里网桥为xenbr1 问：VNET_BRIDGE=\"xenbr1\"如何设置： 答：设置为xen自动建立的网桥。这里网桥为xenbr1。关于如何确定网桥，可以通过 brctl show命令来查看。 对于整个的搭建过程，笔者进行了上述陈述，有些地方可能陈述的不是很清楚，如果读者有什么疑问可以和笔者联系","title":"eucalyptus 在centos下的安装"},{"content":"发布时间： 2012-6-8 13:32:50   一、安装CentOS系统 二、安装XEN虚拟机 1、进入terminal，输入命令yum install yum-mirrorfastest,开启源加速 2、命令yum install xen 3、命令yum install kernel-xen 4、命令vi /etc/grub.conf,修改default的值，使得系统默认启动xen 5、输入reboot重启系统（必须重启） 6、输入chkconfig --list | grep xend 查看xend服务器的运行级别。确定xend和xendomains两个守护程序在3(文本运行模式)和5(图形运行模式)    下都能运行。若关闭，必须打开，命令：    chkconfig --level 35 xend on    chkconfig --level 35 xendomains on 7、输入uname -r查看xen版本信息 8、输入/usr/sbin/xm list或xm list查看xen是否正常工作 注：xen启动：/etc/init.d/xend start        重启：/etc/init.d/xend restart        停止：/etc/init.d/xend stop     xendomains同理 三、安装eucalyptus 1、命令export 2.0.3 2、安装ntp协议使得fornt、nodes和客户端机器系统时间同步。命令yum install -y ntp和ntpdate pool.ntp.org 3、Front end needs java, command to manipulate a bridge, and the binaries for dhcp server (do not configure or run dhcp server on the CC):    命令：    yum install -y java-1.6.0-openjdk ant ant-nodeps dhcp \\ bridge-utils perl-Convert-ASN1.noarch \\ scsi-target-utils httpd    Node has a fully installed and configured installation of Xen that allows controlling the hypervisor via HTTP from localhost.    命令：    sed --in-place 's/#(xend-http-server no)/(xend-http-server yes)/' /etc/xen/xend-config.sxp    sed --in-place 's/#(xend-address localhost)/(xend-address localhost)/' /etc/xen/xend-config.sxp    /etc/init.d/xend restart 4、关闭selinux防火墙    方法一：输入system-config-securitylevel-tui    方法二：输入system-config-securitylevel    方法三：输入vi /etc/selinux/config，并修改set SELINUX=Disabled 5、从http://open.eucalyptus.com/downloads下载eucalyptus最新版本，解压并安装 6、查看系统管理。命令：virsh list 7、修改系统配置。命令：vi /etc/xen/xend-config.sxp  修改配置如下：  (xend-http-server yes)  (xend-unix-server yes)  (xend-unix-path /var/lib/xend/xend-socket)  (xend-address localhost)  (network-script network-bridge)  (vif-script vif-bridge)  (dom0-min-mem 196)  (dom0-cpus 0)  (vncpasswd '')   重启xen，运行以下命令查看是否设置正确/etc/init.d/xend restart   su eucalyptus -c \"virsh list\" 8、在front end:    /etc/init.d/eucalyptus-cloud start    /etc/init.d/eucalyptus-cc    start    在nodes：    /etc/init.d/eucalyptus-nc    start 9、register eucalyptus conponents    在front end:    $EUCALYPTUS/usr/sbin/euca_conf --register-walrus  <front end IP address>    $EUCALYPTUS/usr/sbin/euca_conf --register-cluster <clustername> <front end IP address>    $EUCALYPTUS/usr/sbin/euca_conf --register-sc      <clustername> <front end IP address>       $EUCALYPTUS/usr/sbin/euca_conf --register-nodes \"<Node 0 IP address> <Node 1 IP address> ... <Node N IP address>\" 10、在浏览器输入https://<front end IP address>:8443 本文来源：51CTO","title":"搭建云计算环境：CentOS+XEN+Eucalyptus"},{"content":"方法论探讨之概念空间篇 我们潜意识就不想用计算机的方式来思考问题，我们有自己的思维描述方式，越是接近我们思维描述方式，我们越容易接受和使用。各种计算机语言，建模工具，不外乎就是建立一个更接近人的思维方式的概念空间，再使用工具从该概念空间向另外一个概念空间映射，我称之为人性思维空间向01序列描述空间的一个映射。实现方面来看，系统就是一个翻译器，将机器性更加人性化的一种机制。大学计算机经典课“计算机体系结构”，其他的可以忘记，但是下面这个图不能忘记： 这个就是概念空间最本质的原型体现：作为观测者看到了什么？设计者给了观察者什么？给出的答案是外部特性。 （1）提供给观察者的概念空间是什么？ （2）内部特性的概念空间是什么？ 概念空间所表达的东西带有两个方面的缠绕：一面是人性自由，一面是物性制约（实时响应，系统资源的限制）。所以程序实现的概念空间是人性自由与特定计算机系统物性之间有一个折中，并且根据实际系统而采取某种动态的平衡。而这种平衡将会影响到系统架构，以及设计的思想。特别在手机这样的嵌入式系统中，这种矛盾和平衡无处不在，这种折中无处不在。而对系统的选取和采用，也就接受了某个方面的折中或某中即在的，也许是看不见的标准，及这样的标准有隐式和显式的。正因为如此，不管是工具的产生，新的平台的产生， 都是计算机的物性向人性靠近的一个小台阶。一个新的思想的形成随即带来的新工具，新系统框架，新的体系结构。 如果设计者站的高度足够高，那么设计者一开始就会考虑到“我该给他们一个什么样的概念空间，甚至一个什么样的理念，让他们这个概念空间去建立自己的产品”，于是设计者就会开始主动的去建立概念空间，这个概念空间要表达的实际意义，概念空间应该有哪些内容构成，考虑概念空间的完备性和封闭性，考虑概念空间的边界，考虑从哪个基础上建立这个概念空间，考虑如何与概念空间外的实体进行交互，考虑系统的资源限制条件，考虑功能性构建的合理性，考虑机器系统与人的平衡问题。 我们在学习新系统时，首先映入眼帘的就是新概念。新名词，就如现在我们面临的Android大量的新名词，在程序员的世界都是从代码实践开始的，是从写应用开始去涉及。SDK给了我们一个概念，我们就在这个概念框架下，使用SDK给我提供的函数接口，数据结构，初始化过程等，我们最初的接触到原型就是“HelloWorld”之类的DEMO程序，我们在Hello world上去使用各种不同的接口函数，对于应用程序员来讲,他说看到的系统就是系统调用接口，及其编程开发流程。实际上只要一使用这些接口,就不得不接受一系列的概念,只有在这种概念系统下,我们才能工作。但是,实际上我们却忽略了这样的概念系统的理解,只是在编程接口的这个狭窄的空间去理解系统.我们理解系统在形成理解概念的空间只是微小的一角，很少有资料来介绍这种概念系统的形成和理解,编程接口只是这个概念空间一个，对外部的一个表征。我们可以抽象起来,以接口,协议和行为,来描述系统的情况。SDK API的实质向上层提供了一个语义接口，从而在层间实现了一个转义过程，同时又成为一个功能的集合体。但是我们很少这样跳出来看，我们到底是处于一种什么样的概念空间，SDK除了调用接口外，还给了我们怎样一种整体概念？目标系统的基本构架在本质上的东西就是一个概念系统到另一个概念系统的映射。让我们大脑理解的概念系统映射到计算机能实现的概念域的一个映射。我们假定这个概念域E,机器能够理解的概念域为M,我们的软件工程要做的事情实质就是：EàM领域的一个映射过程。 为什么要在宏观上把握这些概念呢，显然有我的目的，理解概念空间是理解设计者意图的一个重要途径。设计者要想给开发者提供什么，设计者想要提供给最终用户什么。我们需要站在高处看待系统明白设计者意图。 Android的实质还是一套管理手机硬件系统的软件，这个话讲起来没有多大意义,计算机操作系统本质都是如此，Android是Google云计算计划的一部分，我们修正成：Android建立的本质就是让计算机成为我的云接入移动智能终端。作为硬件管理软件，Android提供概念空间内涵实质上泛操作系统内涵，我们的理解可以从泛操作系统概念空间映射到Android系统中去。而作为云计算的一部分的内容，我们可以云计算的概念入手去研究Andoird。","title":"Android核心分析(2)-----方法论探讨之概念空间篇"},{"content":"        今天有个事情（朋友临时让我帮忙的）是为一台内网的电脑重装系统，可能平时个人电脑的系统重装比较方便的：驱动备份一下（简单点就用精灵），重启格式化c盘，再把纯净版装上，然后驱动恢复一下就ok了。关键他能连接互联网。但是内网的电脑1、不能上互联网；2、u盘用不了（公安系统安全策略）；在这种情况下如果我要重装电脑的话，要精灵没精灵，要驱动没驱动的。更关键的是他们的办公软件比较庞大，而且我又不熟悉。哪里下载、装哪、怎么装、装起来需要多久、需要注意什么问题等等……头晕呼呼的我就这么琢磨着到了那个办事大厅。        到了那里我首先是在电脑桌面上找他们的办公软件（想想他们的办公软件要常用的嘛，所以应该是放在桌面上），但是没有，除了office软件的几个图标，我的电脑，我的文档，回收站，还有个ie。我就问他们平时办公的软件放哪去了，他还纳闷说，没放哪，就桌面的几个。我只好再问，那你们怎么办公的？于是他打开了ie，进入主页有个综合平台，然后点证书登陆。指了指：这里的就是我们平时办公用的所以软件：违章处理、视频监控、什么什么信息……好几十个。        这下我之前担心的关键问题都不是问题了，就用ghost把系统重装了一下，驱动ghost自己打的，ip绑定好，数字证书注册好，能用ie上内网了就结束了。别的开始想的要装的那堆软件系统全在服务器上，哈哈……原来云计算就是这样子的啊，看来他的发展前景不可小觑哦！       ","title":"今天我感受到了云计算的好处-企业软件云计算服务"},{"content":"之前CSDN的这个博客也是备用的，现在已经全面转向新浪云计算的WordPress服务。请点击链接： http://quyuxjtu.sinaapp.com/ 进行查看。","title":"更新一下自己的博客链接"},{"content":"谷歌最擅长的是精简计算机，只利用必要资源运行程序，上周 I/O 大会上，Google 宣布推出自家的云计算服务：Google Compute Engine，目标直指当前的云服务巨头亚马逊。国外专家预计 Google将从亚马逊手里抢走一批坚定的云服务粉丝，而Google抢客户的关键手段在于性能优势。 Google自家开发者也在博客里宣布Google云服务依靠3个证书来对抗包括亚马逊在内的云服务供应商。 规模：Google内部我们每天处理大量的计算任务，像索引网页、一天内处理数十亿搜索查询。但利用Google数据中心，Google Compute Engine减少了管理大量任务的时间、简化了计算流程，你可以发布许多计算机集群、成千上万的内核。 性能：许多人对云端表现不佳习以为常，但我们的用户将受益于谷歌数据中心的效率和连续运行的稳定性。例如，我们有成熟的网络老保证云端的连续性，即使在一个分享的云端你不会突然掉线、你可以随意调整一个应用程序而不用担心它出问题。 低价：从节约成本的角度看，云端计算是非常有市场的。因为我们数据中心非常经济的规模和效率，跟其它云端服务商相比，我们Google Compute Engine在同样的价格上可以提供多50%的计算量。 当比试规模的时候，很少有公司能达到10万个服务器、77万个可用内核容量的标准;而Google被报道光服务器就有100万台，而貌似唯一能与之抗衡的只有亚马逊。当比试价格的时候，虽然Google称 “Google Compute Engine在同样的价格上可以提供多50%的计算量。”但亚马逊也可以做到，所以到时候只是看Google怎么打破它的低价底线。但最重要的却是性能! 性能恰恰是Google的王牌! 如果Google能够解决亚马逊用户面临的输入/输出、网络性能不一致的问题，我们可以保证Google在这个回合可以赢，因为输入/输出问题是许多同类科技公司想解决的问题，如果Google率先解决了，那预计在2013年中期亚马逊会有一大批的粉丝迁徙到Google这里来，而且有些EC2用户也会撤退出来。 另一种可能，如果Google的性能不比亚马逊AWS好，或者Google Compute Engine service有一些主要限制，大部分用户会安安静静地呆在亚马逊AWS那边，另一部分用户会冲着Google的规模和体验过去，然后就是两家开始打持久 战的时候了。","title":"Google云计算凭什么打败亚马逊：性能第一"},{"content":"云计算让整个IT行业为之躁动，微软、IBM、亚马逊、谷歌以及其他的一些公司在这种新的运算形式上投入了数以十亿计美元的资金，它们认为这种新型的业务模式能够揭开一个新世代的序幕，这个时代代表了高响应程度、效率和高效IT服务。事实上，Gartner最近表示，云计算在IT用户2010年最关注的重要技术的榜单上，排名第二。 总的来说，我认为云这个概念其实就是任何可以通过互联网访问的服务。这个概念可以包括与标准商业应用相关的服务——例如CRM、ERP、营销线索生成、办公室生产套件、产品生命周期管理、供应链管理等。但是这个概念还可以延伸到软件开发和基础架构等技术服务领域;这是云计算最近的一种新发展方向。 在这个行业里，对支持业务的数据和业务处理的需求出现了爆炸式的增长。这导致了能源消耗量的激增以及对数据中心容量需求的增长。云计算则提供了解决问题的另一种思路，使用云计算的模式，企业无需为数据中心扩容、基础架构硬件和软件的采购以及应用软件的采购投入大量资金。 你也许会问你自己，\"我如何利用网络，将我的基础架构扩展到云计算上?我该怎么把网络当做一个平台来建设我的软件和产品呢?我该如何使用云计算来运行我的核心业务流程?\" 云计算的分类 为了便于理解云计算下一个层次的问题，我想先按照下面的划分方式介绍一下云计算的类别： l IaaS(Infrastructure as a Service，基础架构即服务)通过互联网提供了数据中心、基础架构硬件和软件资源。IaaS可以提供服务器、操作系统、磁盘存储、数据库和/或信息资源。最高端IaaS的代表产品是亚马逊的AWS(Elastic Compute Cloud)，不过IBM、Vmware和惠普以及其他一些传统IT厂商也提供这类的服务。IaaS通常会按照\"弹性云\"的模式引入其他的使用和计价模式，也就是在任何一个特定的时间，都只使用你需要的服务，并且只为之付费。 l paas(Platform as a Service，平台即服务)提供了基础架构，软件开发者可以在这个基础架构之上建设新的应用，或者扩展已有的应用，同时却不必购买开发、质量控制或生产服务器。Salesforce.com的Force.com、Google的App Engine和微软的Azure(微软云计算平台)都采用了paas的模式。这些平台允许公司创建个性化的应用，也允许独立软件厂商或者其他的第三方机构针对垂直细分行业创造新的解决方案。 l SaaS(Software as a Service，软件即服务)是最为成熟、最出名，也是得到最广泛应用的一种云计算。大家可以将它理解为一种软件分布模式，在这种模式下，应用软件安装在厂商或者服务供应商那里，用户可以通过某个网络来使用这些软件，通常使用的网络是互联网。这种模式通常也被称为\"随需应变(on demand)\"软件，这是最成熟的云计算模式，因为这种模式具有高度的灵活性、已经证明可靠的支持服务、强大的可扩展性，因此能够降低客户的维护成本和投入，而且由于这种模式的多宗旨式的基础架构，运营成本也得以降低。Salesforce.com、NetSuite、Google的Gmail和SPSCommerce.net都是这方面非常好的例子。 paas、IaaS和SaaS之间的区别并不是那么重要，因为这三种模式都是采用外包的方式，减轻企业负担，降低管理、维护服务器硬件、网络硬件、基础架构软件和/或应用软件的人力成本。从更高的层次上看，它们都试图去解决同一个商业问题——用尽可能少甚至是为零的资本支出，获得功能、扩展能力、服务和商业价值。当某种云计算的模式获得了成功，这三者之间的界限就会进一步模糊。成功的SaaS或IaaS服务可以很容易地延伸到平台领域。 选择云计算的标准流程 对于那些在考虑使用云计算，或者喜欢云计算的CIO或者商业执行官们，我的建议是和其他的业务或技术投资一样，按照标准流程考察选择。 l 首先，应该从一个业务案例开始，这一点非常重要。计算投资或者改变对财务的总体影响。 l 在考虑云计算项目的时候，网络带宽需求是一个需要考虑的重要问题，并且弄清楚你需要在网络上传递的数据有多大规模，以及对于特定服务的网络响应要求。 l 安全性是另一个重要的因素，所以你需要知道你的安全需求，以及你所在公司内部的能力同云计算供应商的能力之间孰高孰低。 l 对于任何开发和变革，最好能够从风险的角度进行一下衡量。我非常喜欢研究解决方案，同时也习惯于在作出重大的决策或投资之前，进行试用。 l 如果你计划采用的商业服务云计算是核心业务项目，那么一定要仔细考察云服务供应商，它的组织情况，它的业务稳定性。例如，这家公司是否盈利?这家公司是否处于增长期?他们的资产负债表是否健康? 如果你是计划在供应链管理和EDI(Electronic Data Interchange)项目上使用云计算技术，那么需要做的第一件事就是考察供应商整个网络的规模。规模大、扩展性好、质量较好的网络能够比较容易地提供更快、更高质量的服务。在为生意伙伴增加预接入的时候，这种可扩展性也能够提供同样的价值，帮助企业适应业务的增长和变化。 你一定要了解你的供应链服务的流程和组织情况。他们是否疲惫?是否真实?是否专业?评估他们的服务供应模式，他们整体的能力，以及他们作为服务商为企业建立业务的实际案例的情况。 最后，你应该做的最重要一件事是考察该应用的持续服务和支持。例如，绝大部分的SaaS应用都是按照采购服务的方式来销售的，对于客户来说，这非常好，因为这意味着供应商必须为你提供持续的价值和支持。这种采购方式买的不仅仅是某种技术的使用权，还包括提供客户支持、变革管理以及总体商业价值的专业人士的服务，这些服务渗透到每一天、每个星期，每个月，始终存在。 作为一名供应链云计算的客户，你应该考虑的另一个问题是供应商在满足客户的服务水平协议要求方面的水平如何。很多云计算供应商都是全球性的，它们所有的业务夜都是全球性的，但是考核评价单个用户的状况仍然同等重要——如果不是更重要的话。这个工作能够让你了解你的云计算供应商是否能够达到你的SLA(service level agreements)的目标，比如正常运行时间要求、处理速度要求、支持响应速度要求等。对于核心业务系统来说，这些更为重要，一定要确保该供应商能够达到你的业务要求。","title":"走近云计算：解密IaaS、PaaS和SaaS"},{"content":"随着云计算应有的普及，我们已进入到破化性变革的前夜，这使得CIO们也陷入了两难的境地。为此，厂商们不断给开可以平滑迁移至云计算应用的甜蜜诺言，当然前提是购买其提供的软、硬件，或是一整套云服务。而CIO们也已经开始让他们习惯于这咱充满诱惑的喧嚣。因此，我们有理由断言，CIO们最终将归于平静，尽管云计算应用会替代大多数组成今天系统的传统应用。 但我们同样有理由相信，云变革最终会成功。这样，清楚地描绘出后云时代的轮廓，也成为一件引人关注的事情。 在后云时代，云计算已被广泛接受，而不仅是象今天这样，只是多种计算形式中的一种选择。而且我相信，后云时代距现在不会太远了。 那么后云时代将会有什么样的特征呢? 首先，大规模的数据处理能力将成为系统的普遍特征。在后云时代，每一系统都将被设计成能处理海量数据，每个应用都变得更有弹性，以适用海量数据的需求。 其次，网络时代真正来临。思科的CTO曾预言，在不久的将来，将有近万亿的设备被联入互联网。这使得我们必须要去拥抱真正的后PC时代。我们将被越来越多的联入网络的专用设备包转。我们已无须必须盯着监视器去读出我们的血压读数，而是测试设备会将测试值传导进监测系统。我们身边存在着大量的类似设备，我们甚至可以在它们正常自动运行的同时，忽略它们的存在。 第三，IT系统的拥有成本大幅下降。我说的下降不仅单指软件或硬件，而是指IT供应链中的第一个环节。开源软件将大幅替代现在的操作系统、中间件和应用软件。 第四，IT重组IT。越来越多的公有云供应商提供了一种基准，内部的IT系统必须能够与此基准相匹配。聪明的CIO们会因此意识到，他们的角色更多的是管理公共架构，而非拥有更多的IT资产。没意识这点的CIO们，可能会被用户组织所抛弃。 第五，PaaS成为解决问题的关键所在。许多人把云计算看成随需配置虚拟机，但实际上远非如此。应用开发者会把时间浪费在让应用布署具备更高的可扩展性和弹性上边。但公共设施会解决这些问题，从而让开发者把精力更多地放在企业业务功用上。这使得企业中的IT组织比以往更多地依赖于PaaS。 第六，应用开发者出现短缺。因为能在后云时代创造应用的开发者会出现短缺，所以聪明的CIO们现在就会开始关注并搜罗这类人才。","title":"云计算将引起IT行业变革的六个预言"},{"content":"Virtualization is a technology, while cloud service is a business model. --- By Timothy Chou Timothy在硅谷业界有很高的知名度，我们老板调侃说，他是“给CEO讲课的人”。之前有幸听过Tim的一次讲座，上面这句话给我留下了很深的印象。那天，Tim带着我们以IT界商业模式为主线，从IT业初生，一路讲到云计算时代。 不论你是要满怀雄心壮志地创立一个云计算创业公司，还是自己所在的大公司要推行云计算战略，推出云计算产品和服务。都需要从商业模式和产品定位的角度进行一些思考。我们不妨先关注一下目前形形色色打着云计算Logo的产品，大致可以分为几类，思考一下自己产品的定位。（将补充对Iaas,Paas,Saas三种云服务类型的分析） 举一反三，Tim讲的是商业模式，我却突然意识到，在硝烟弥漫的IT业界，除了商业模式，Ecosystem（生态圈）在任何时代也是极其重要的，每一个IT巨人的崛起，每一种商业模式的成功，都离不开它，以至于很多大公司都有专门的Ecosystem部门。 想出这个名词的人真的太牛了！纵观IT史的成功案例，还真是一个个和谐美满的Ecosystem。从庞然大物到鱼虫蝼蚁，在某一商业模式和技术标准的支持下，各走各道，各取所需，占领并生活在生态圈的不同层次。 这让我深深相信，投身云计算时代，瞎摸乱撞是不行的，拍个脑袋，来个创意，然后不管天不顾地，单打独干更是不行的，要想有持续可观的发展，一定也要在Ecosystem里找准自身的定位，一刀一枪拼出自己的地盘，稳扎稳打繁衍自己的“族群”。 一激动扯的闲话有点多，让我们回到云，回到架构。接受了Ecosystem，那就不难理解为什么现在有那么多各式各样的云厂商，形形色色的云技术，大家都不容易，这么大的蛋糕，人人都想进来占个地盘，分块蛋糕。VMware说我们是市场占有率最大的，Redhat说选他们的KVM方案绝对没错， Citrix告诉你我们的XenServer已经在全球部署了多少多少个DataCenter，IBM、Oracle、Microsoft也围着您说，客官您看看，俺们的方案其实有更多优点！你是不是有点头疼了？别头疼，也别眼花，在我看来，这么多形形色色让人无从选择的方案，其实就根植于两点：各家厂商的“传统技术优势”和“商业战略考量”。 如果您想做企业级云解决方案，肯定不是仅仅做个云自己用吧？所以，不妨也从自己的“传统技术优势”和“商业战略考量”这两方面开始，进行自己关于架构方案的思考。我发现，写着写着就偏抽象化了，但是，思维方式比具体答案更宝贵。每个公司的情况都不同，笔者只能提供切入点，您如果按照这条思路去考虑，肯定有所斩获。 感谢开源！有了Xen和KVM，让我们国内厂商不必自己去慢慢啃Hypervisor这根硬骨头。感谢OpenStack，这个当下颇为成功的AWS-like Iaas云平台，为我们提供了更多可借鉴的思路。但其实，也并不是只有开源这一条路可走。基于闭源的VMware和Citrix产品并不是就不能赚钱。国内已经有这样的商业项目。据笔者的路边社消息，西南某省最大的某行业设备与方案提供商，已经在利用收费的虚拟化平台，开发适用于自己行业的云产品。 但是，这毕竟属于高度定制化的云产品。如果您想做的，是一个无行业差别的，能够推销给众多企业，帮他们构建私有云、公有云的解决方案。那么，有效利用开源产品，无疑是最优的选择。不仅能有效节省财力，物力，人力，在最短的时间，推出最完整的产品方案，而且能把重心放在客户需求上，根据实际需求开发出含金量更高的功能和服务。不仅实现了追赶，更有机会超越！ 基于开源产品的，企业级云产品的架构设计中，应该考虑哪些问题？ 其实这个问题很大，很难写好，且必然被拍砖。但俺决定，要抱着抛砖引玉，舍身成佛的精神，用有限的积累，去大胆探索出一条对大家有用的思路。如果这砖抛的好，大家都来思考这个问题，那我们国内云计算产业就更有希望啦！^_^ 务虚之后，我们来务实！下面列出的，是开源企业级云架构必然会考虑到的一些方面。后续博文中，我们一起逐一分析！ ·         Hypervisor方案选择 ·         管理中间件的方案选择 ·         管理平台方案 ·         网络方案选择 ·         存储方案选择 ·         安全方案选择 最近工作很忙，只能晚上加完班之后抽空写，说实话，对于这个开篇，其实自己很不满意的，感觉平时积累的很多东西，到写的时候反而组织不到位。发现写原创文章真的是一件很不易的事情，呵呵。 虽然已经发出来了，我仍然会不断去修改的，有了什么想法，就来充实一下，或者补充更多的例子，以便大家更好地理解这篇比较务虚的开篇文章里的一些思路和想法。 本文出自 “CloudEra” 博客，转载请与作者联系！     云计算催生了更多“离奇”的客户需求，云计算技术的迅猛发展也孕育出针对这些客户需求的更多更好的解决方案。大二层网络，这个曾经看来异常理想化的构想，就是一个非常典型的例子。让我们从需求案例说起: 客户需求一：我有n个数据中心，在硅谷的数据中心有一台VM，在北京的数据中心有另一台VM，我想让这两台VM，都感觉对方和自己处于同一个二层网络。 客户需求二：我有n个数据中心，在硅谷的数据中心有编号为A、B、C的VM，在新加坡的数据中心有编号为D、E、F的VM，在上海的数据中心有编号为G、H、J的VM，我想虚拟出三个二层网络：{A，D，G}，{B，E，H}，{C，F，J}。每个虚拟二层网中的VM，觉得自己和其余两台机器就像连在同一台交换机上一样；而三个虚拟二层网彼此隔离，处于不同虚拟网络的VM在二层网络上不连通，必须通过router交互。 第一个充满野性的需求，实质是要求一张广阔无垠的二层网络，主题是二层网络在WAN范围内的按需延伸。第二个需求看起来更加常规一些，但实现起来也并不容易。出于安全和性能考虑，硕大的二层虚拟网太过于平坦，从性能上来讲，广播帧会像洪水一样吃尽资源；从安全上来讲，没有隔离机制的海量VM组成的网络，既没有必要，也难以让人信任。 产品化的解决方案： 1. Cisco的OTV 永远不要低估业界巨头对技术潮流的把握能力！ 虽然是传统的物理网络供应商，但Cisco似乎在云网络的领域一直走在最前端。早在2010年2月，Cisco就推出了自己针对云架构的产品OTV（Overlay Transport Virtualization）。通过在硬件交换机上，采用扩展链路层网络的技术，它可以使二层网跨越数据中心。最吸引人的，是很多资料中宣称，OTV安装和使用的便捷性：据说安装OTV的流程只需要5条命令，耗时仅仅5分钟！从物理网络来讲，跨数据中心肯定数据包肯定要向上进入三层网络，通过路由，再到达目的端。这也就决定了二层广播帧不可达。为了实现这一目标，隧道技术的采用是不可避免的。OTV很自然地采用了MAC in IP的封装方式。 图1是使用Cisco OTV之后的网络效果图，图中处于VLAN 1的VM，事实上分布于物理网络上不同的数据中心，仅凭物理网络，无法直接二层通信。引入OTV之后，它们彼此认为自己处于同一个VLAN标注之下的一个二层网络中，广播帧可送达任何一台VM。   图1  OTV跨数据中心二层连通示意图    那么Cisco是怎么做到这一点的呢？在图2中你肯定能找到想要的答案。   图2  OTV工作原理示意图 很显然，Cisco既然是硬件厂商，那么改改自己交换机中的转发策略还是很easy的一件事情。要实现这一功能，技术细节很多，但简要来讲，他们是通过在交换机的MAC地址转发表上动手脚实现的。对于处于同一数据中心，物理二层网络连通的机器，在转发表中，对应MAC地址转发到某交换机端口。而处于不同数据中心的机器，它的MAC地址对应的转发目的地不是端口，而是一个IP，这个IP就是对方数据中心OTV模块的三层网络地址。本地OTV模块，会将需要跨越数据中心传输的二层帧，完整地打包到一个三层数据包中。通过路由，交付到对端OTV模块进行处理。接下来的，不用我说，相信你也了然于胸了。 Cisco的官方文档，强调了几点使用OTV的好处，作为自己产品的卖点。比如，对现存网络设施无影响；操作简单，并且可以与其它Cisco设备集成管理；没有在协议上动什么大手脚，复杂性低。其实最后一条也是Cisco解决方案的一大特点，毕竟么，人家可以轻轻松松改自己硬件产品的转发逻辑。相比之下，其它软件厂商给出的方案，就只能另辟蹊径了，通过在协议上做文章，达到同样目的，这个在后面会讨论到。   2. VMware的VXLAN 看完了硬件厂商的方案，我们再来看看虚拟化领头羊的前沿产品。VMware从一开始提VXLAN，其格局就比Cisco的OTV要大很多。VXLAN不仅着眼于二层网络按需延伸，更是在安全隔离上走的更远，从某种程度上说，它也可以被认为是对SDN概念的一次尝试。云时代的数据中心，从VM接入数量来说，本来就愈加庞大，再加上大二层网络技术的推广，一个平坦的二层虚拟网络上连接百万台以上的VM也许不再是什么痴人说梦了。要对百万级别VM的接入，在二层做到很好隔离。传统的VLAN技术表示它要疯了… 为此，在2011的VMworld大会上，Cisco与VMware共同提出了VXLAN技术，在业界引发巨大反响。（怎么云网络里哪儿都有Cisco的事儿？呵呵，这也印证了上一篇博文里说的Ecosystem观点，大家都在生态圈里占地盘，Cisco为了云战略就和VMware走的很近，长期partner） 目前VXLAN已经提交了IETF草案，在努力朝着标准化的方向前进。站在这一阵营的包括VMware、Cisco、Arista、Broadcom、Citrix和Redhat，怎么样，这个团队看着还不错吧。 软件厂商没法修改硬件的转发策略，那么VXLAN就充分利用了IP多播技术。通过IP多播技术，在UDP包中，完整封装VM的二层数据包，达到跨数据中心，跨路由的目标。由此而形成的虚拟二层网络，其上的VM认为自己处在一个真实的二层网络中，但实际上，有些广播帧却是在VXLAN的协助下，通过三层网络送达远端数据中心里的VM。因此，在业界也有一个好玩的说法，称VXLAN“坐在2.5层”。 VXLAN定义了相应的协议，图3是其数据包格式图： 图3 VXLAN数据包格式 VXLAN的具体实现十分复杂，对于虚拟交换机来说，需要data plane的支持，在VMware的产品中，为了支持VXLAN，对位于ESX之上的vSwitch，vDS等kernel module模块都做了大量改动。这个问题如果展开，不是一时半会儿能讨论完的，我们这里就不做详细分析了。选择几个比较有意思的切入点分析一下： 隔离能力的扩展：传统VLAN tag只有12位，在云里，4096这个极限怎么看怎么不够用。VXLAN在网络隔离时，采用的VXLAN ID（图3中第7个字段）有24bit，可以划分出高达1600万个相互严格隔离的虚二层网络，目前看来这样的扩展性是远远足够的。  图4  VXLAN网络示意图 对跨数据中心，跨物理VLAN的热迁移提供支持：使用VXLAN之后，原来局限于同数据中心，同物理二层网，同样VLAN的vMotion，现在可以不受这些限制，按需扩展到虚拟二层网络上的任何地方。这是一个非常令人激动的进步！ 不足：由于VXLAN基于IP多播原理实现，而现实中很多路由也许不支持PIM，或者虽支持多播，但出于某种原因，路由默认情况下未配置。就会有问题。不过这个可以通过其他技术手段改善，如加入proxy机制加以解决。    3. 微软在做什么？ 在这场轰轰烈烈的大二层网战役中，哪个大厂商也不甘落后，话语权就是商业利益啊！VXLAN出来没多久，Microsoft就联合Intel, HP& Dell 提出了NVGRE标准（NetworkVirtualization using Generic Routing Encapsulation）。说白了也是一种Mac In IP的解决方案，但是与VXLAN不同，它使用GRE (Generic Routing Encapsulation) key的低24位作为二层虚拟网络标示符，进行隔离。同样是24位，同样是1600万个子网容量！我怎么看怎么觉得像VXLAN，比较好奇性能上会有大不同么？如果没有大创新，为什么搞这么些标准出来...","title":"开源企业级云架构的方案选择"},{"content":"","title":"张尧学讲座（中南大学校长讲座）-------用户控制的云计算----透明云计算"},{"content":"        刚开始接触OpenStack，被它所承诺的前景，以及现在业界对它的期望吸引（OpenStack被誉为21世纪的Linux开源社区，可以预见其的发展前景是何其广阔。）。怎么说呢，我现在也暂时相信，OpenStack将来是能够和亚马逊的EC2相抗衡甚至超过的。         下面的资料是自己最近学习过程中整理的，可以说是从对云计算以及openstack几乎零基础开始学习的。之所以说是几乎零基础，是因为去年曾经为电子某所翻译过一篇美国2011年云计算战略的文章，从中了解了一些云计算的概念，但是也只是概念而已，而其它涉及到的虚拟化等只是，只是平时和朋友谈起过。         这一篇文章我也不大算详细的讲解涉及到的知识概念技术，只不过把自己了解的，感觉对了解云计算还有OpenStack有帮助的写了出来，如果也是初学者，可以google一下了解一些背景知识，我尽量写的全面一些。    一 项目起源         项目是由Rackspace和NASA（美国国家航空航天局）共同发起的。          Rackspace，是国外第二大的云计算厂商，不过他的规模和亚马逊比起来，最多也就只能达到5%的规模。如果依靠内部的力量超越亚马逊，已经显得不太可能，所以他就把自己的存储（swift）进行开源。这其实是对应亚马逊的S3，大家都是对象存储的技术。          NASA（美国国家航空航天局），以前他是使用Eucalyptus云计算管理平台，不过这个平台分成两个版本，一个开源的版本，一个收费的版本。这就导致NASA很不爽，向Eucalyptus贡献代码，结果Eucalyptus认为这个代码和收费版本冲突，不接受。          2010年7月份，NASA贡献自己的云计算管理平台Nova代码，Rackspace贡献云存储（对象存储）代码，发起Openstack的开源项目。需要注意的是，NASA的代码，应该只是在他们公司内部使用，没有进行过商用。而Rackspace的贡献云存储的代码，是一个商用过的，大规模部署过的。     二 云计算         云计算是一种计算模式，使资源如计算能力、存储、网络和软件抽象化并像服务一样以远程访问的方式在网络上提供，这些服务的计费模式类似公共事业。按需使用、配置简单、动态的和几乎无限的可扩展性是云计算的主要特征。一个使用云计算模式安装的基础机构通常称作云，以下是在云上可用服务的大类SPI：         ·基础架构即服务(laaS)         ·平台即服务(PaaS)         ·软件即服务(SaaS)       亚马孙网络服务（AWS）是laaS的主要参与者之一，AWS有两个很受欢迎的服务-弹性云计算（EC2）和简单存储服务(s3)，可以通过web服务。     三 OpenStack---面向IaaS           OpenStack是一个开源软件，它提供了一个部署云的平台。为虚拟计算或存储服务的公有/私有云，提供可扩展的、灵活的云计算。            四 OpenStack3个主要的服务成员                计算基础架构(Nova）：            Nova是OpenStack云计算架构控制器，支持OpenStack云内的实例的生命周期所需的所有活动由Nova处理。Nova作为管理平台管理着OpenStack云里的计算资源、网络、授权、和扩展需求。但是，Nova不能提供本身的虚拟化功能，相反，它使用libvirt的API来支持虚拟机管理程序交互。Nova 通过web服务接口开放他的所有功能并兼容亚马逊web服务的EC2接口。       存储基础架构（Swift）            Swift为OpenStack提供了分布式的、最终一致的虚拟对象存储。他和亚马逊的web服务-简单存储服务（S3）类似，通过分布式的穿过节点，Swift有能力存储数十亿计的对象，Swift具有内置冗余、容错管理、存档、流媒体的功能。他是高度扩展的，不论大小（多个PB级别）和能力（对象的数量）.       镜像服务(Glance)           OpenStack镜像服务查找和检索虚拟机的镜像系统             五 OpenStack架构                                            然后再往下的详细介绍，可以参见下面的几篇博客，已经介绍的非常清楚：         参考资料：          1:陈沙克的日志          2：何明桂的小窝          3：one day          4：OpenStack简介          5：开源云计算平台OpenStack介绍          6：以公司实际应用讲解OpenStack到底是什么（入门篇）          暂时整理了这些背景资料，当然，应该还了解一下和主要对手亚马逊的优缺点比较，等待update。","title":"OpenStack学习系列-----第一篇 OpenStack介绍"},{"content":"美国《圣何塞信使报》网络版周五撰文称，由于泰国是全球最重要的硬盘生产国之一，因此该国遭遇的罕见洪灾将会给PC和云计算等众多科技行业带来冲击。 AD： 导语：美国《圣何塞信使报》网络版周五撰文称，由于泰国是全球最重要的硬盘生产国之一，因此该国遭遇的罕见洪灾将会给PC和云计算等众多科技行业带来冲击。 以下为文章全文： 泰国洪灾 作为全球最大硬盘生产国之一，泰国遭遇的洪灾已经搅动了全球的科技市场，并且给PC和云计算等多个领域带来了冲击。 始于今年7月的洪灾不仅造成400多人死亡，数千人流离失所，还淹没了泰国7个主要的工业园，而该国很多重要的硬盘工厂就位于其中。除此之外，从汽车到牛仔裤等许多制造业也受到了严重破坏。 尽管相比于中国大陆和中国台湾而言，泰国在全球科技产业链中并不占据枢纽地位，但这个东南亚国家在全球电脑零部件供应链中发挥的作用却凸显出科技行业“牵一发而动全身”的特点。 泰国在全球硬盘供应链中的份额约为40%，同时也为其他硬盘生产国供应很多零部件。根据IDC的数据，由于众多工厂被洪水淹没，该国硬盘产量将骤减25%至40%。 硬盘行业 这会迫使电脑厂商寻找其他硬盘来源，并通过涨价维持利润率。其他行业同样遭受了冲击，例如，由于硬盘短缺导致台式机和笔记本产量下滑，半导体厂商可能会遭遇芯片销量放缓。就连云计算企业或极度依赖这项技术的企业，也可能会因为要购买更多硬盘提升容量而遭遇短期冲击，例如Facebook、谷歌和亚马逊(微博)。 美国斯坦福大学商学院供应链专家李厚(Hau Lee，音译)说：“当今的世界相互依存度很高。几乎不可能在重大的产品短缺中独善其身。你或许认为你所在的行业不受影响，但事实并非如此。” 在泰国拥有大量工厂的西部数据表示，该公司第四季度的硬盘出货量将从第三季度的5800万块减少到2200万至2600万块。希捷称，该公司位于泰国的硬盘工厂并未受到洪水影响，但第四季度的出货量也有可能下滑20%。 洪水给这一领域造成的具体冲击究竟有多大，目前还无法知晓，但行业高管都在密切关注供应链的现状。 其他领域 “与其他很多企业一样，我们也有很多零部件来自泰国，并有很多工厂供应这类零部件。”苹果CEO蒂姆·库克(Tim Cook)在10月的分析师电话会议上说，“目前已经有几家工厂停产，具体的恢复时间目前无法确定。” 他表示，供应问题可能影响到苹果Mac电脑，但由于MacBook Air使用的是由美国、日本、中国台湾和韩国生产的固态硬盘，因此不会受到冲击。但库克也补充道：“我非常关注此事。我几乎可以肯定全行业将因为这场自然灾害遭遇硬盘短缺。我不确定苹果将会受到何种程度的影响。” 英特尔(微博)发言人查克·莫洛伊(Chuck Mulloy)表示，该公司在泰国没有生产业务，目前还没有对由此产生的影响进行预测。英特尔为PC行业供应芯片，但在今年3月的东日本大地震中，PC行业已经表现出了对自然灾害的适应能力。 “同样值得注意的是，产品来源的多样化和现有的库存有助于抵消PC供应链的影响。”莫洛伊说。但他也补充道：“情况显然在不断变化，我们会定期与客户和硬盘供应商沟通。” AMD CEO罗瑞德(Rory Reed)在上月末的分析师电话会议上说：“洪灾目前似乎并非重要因素。我们将持续关注事态发展。” 更多影响 美国市场研究公司Objective Analysis首席分析师吉姆·翰迪(Jim Handy)认为，今年的PC销量疲软已经导致芯片库存增加，而硬盘短缺则会使形势进一步恶化。 “这会导致芯片供应过剩，并推动价格下滑。”他说，“这对硅谷意味着什么？硅谷已经展开了很多招聘，今后可能会削减规模。这还有可能导致目前繁荣的公寓租赁市场增长放缓。半导体企业的盈利可能会受到冲击。” IDC分析师约翰·赖丁(John Rydning)认为，泰国洪灾甚至会妨碍云计算公司推出新服务。“云计算仍然需要对推出新服务或加大现有服务的规模保持谨慎，直到他们能够更好地确保获得更多存储空间为止。”他说。 斯坦福大学的李厚认为，由于供应链分布在全球，企业高管需要关注各地的恶劣天气和自然灾害。“我的建议是，‘你不能漠不关心。’多数人只是关注自己的供应链，但他们同时也应当关注用户的供应链。”他说。","title":"【云安全】泰国洪灾冲击硅谷：PC云计算等多领域受影响"},{"content":"今天新闻里报导说，VMWare 拆资 10 亿 5 千万美元，收购 Nicira [0]。Nicira 是一家创业公司，专注于网络虚拟化，主打产品是 vSwitch。云计算产业是技术密集型产业，涉及的技术众多。要了解云计算产业格局，就必须了解各家企业主打产品，所提供的核心价值。从而理解各家企业，在整个云计算产业链中所处的位置，以及与上下游企业的相互关系。 　　这个文章系列的后续章节，将详细讨论网络虚拟化的问题。Nicira 公司在网络虚拟化方面，引领全球技术前沿。看来我们这个文章系列的写作进度，得提提速了。 　　我们在上一节，讨论了四种云计算的服务方式，出租裸机、出租虚拟机、出租网站、出租行业服务。Amazon EC2 提供的云计算服务，就是其中第二种方式，出租虚拟机。 　　OpenStack 被视作是 Amazon EC2 的开源版。OpenStack 自称是“用来搭建云计算平台的开源软件”。如果追问一句，用 OpenStack 搭建好了云计算平台以后，能提供什么服务？答案是，如同 Amazon EC2 一样，提供虚拟机租赁服务。 　　VMWare 公司的产品，虽然名目繁多，但是也是围绕搭建云计算平台，提供虚拟机租赁服务这个总目标。 　　所谓提供虚拟机租赁服务，更明确的解释方式是，用户提交什么输入，云计算系统返回什么输出。 　　输入：用户在任何电脑的浏览器上，通过访问云计算中心的网页，先注册，确定登录姓名和密码。然后输入希望租赁的虚拟机的操作系统及其版本，还有虚拟机的 CPU 的内核个数、内存空间、硬盘空间、实时带宽、以及流量限额。 　　输出：云计算中心根据用户的需求，生成相应配置的虚拟机，然后把虚拟机的域名或 IP 地址，返回给用户。用户得到这些信息后，可以通过 SSH、远程桌面或者 VNC [1] 这样的远程访问(Remote Access)工具，远程登录并使用运行在云计算中心的虚拟机。 　　Amazon EC2、OpenStack 和 VMWare 是如何实现这个功能的呢？别着急看答案，先想想，假如我们是 Amazon EC2、OpenStack 和 VMWare 的系统设计师，我们该如何设计后台系统？ 　　我们自己先 DIY (Do It Yourself)，然后把我们自己的设计，与 Amazon EC2、OpenStack 和 VMWare 的系统架构，做横向对比，就容易领悟 Amazon EC2、OpenStack 和 VMWare 的系统设计的高妙之处。 　　当然，任何系统的设计，都会有不足之处。分析缺陷的一个有效方法，也是横向对比。 　　我们在自行设计 Amazon EC2 那样的系统之前，先想想，假如没有全自动的后台系统，而是靠人工完成，该怎么做？换句话说，当云计算中心的系统管理员，收到用户提交的请求时，他该执行哪些操作？ 　　在云计算中心开始为用户提供服务之前，系统管理员需要预先做一些准备工作。当云计算中心购置了服务器裸机以后，系统管理员需要给这些裸机，安装虚拟化系统。 　　安装虚拟化系统包括以下三步。 　　1. 选择虚拟化系统。 　　虚拟化系统是一个软件系统，目前常用的虚拟化系统有三种，VMWare、Xen、和 KVM。各种虚拟化系统的比较，可参考 [2]。 　　其中 KVM 是开源软件，不仅操作简单，而且系统运行效率较高。更难得的是，KVM 系统结构十分精巧、代码量小。 　　2. 安装虚拟化系统。 　　以 KVM 为例，在裸机上安装 KVM，只需要做两步。1. 安装 Linux OS，2. 在 Linux 上安装 KVM，参考安装手册 [3]。 　　3. 设置网络。 　　运行在 KVM 之上的虚拟机实例，与外界网络的数据传输，必须经过物理网卡。所以，需要做相应的系统设置，使虚拟机实例与物理网卡通信。设置网络的操作步骤并不复杂，也参见安装手册[3]。 　　这里有个疑问，为什么在第二步“安装虚拟化系统”的时候，不一步到位，把网络也设置好？其实，的确是可以两步并一步，在“安装虚拟化系统”时，顺带完成网络的设置。 　　安装手册 [3] 把网络设置单列出来，或许是基于以下考虑。虚拟机实例与物理网卡的通信，需要用到 vSwitch 技术，但是 vSwitch 的实现方式有多种，包括 Linux Bridge 和 Open vSwitch 等等 [4]。 　　对于大多数情况，Linux Bridge 基本上能够满足需要，所以安装手册 [3] 只介绍了 Linux Bridge 的配置方法。但是也有观点认为，在某些场合下，例如当虚拟机跨机房迁移时，需要更强大的 vSwitch 的技术实现，例如 Open vSwitch [5]。 　　关于 vSwitch，以及 Open vSwitch、OpenFlow 等等话题，我们将在后续有关虚拟网络的文章中，详细讨论。 　　当云计算中心，添置了服务器裸机之后，系统管理员需要执行上述三步操作。这些操作完成以后，新添的服务器就可以为用户，提供虚拟机租赁业务了。 　　1. 当系统管理员接收到用户提交的需求后，他根据用户指定的操作系统及其版本，把相应的操作系统安装光盘，插入服务器光驱。 　　或者，系统管理员先把操作系统安装光盘里的所有内容，导出成为一个 ISO 镜像文件。这个 ISO 镜像文件，不仅包含安装光盘上的所有内容数据，而且记录着每一段内容数据，存储在光盘里的哪一个扇区(Sector)。然后，他把这个 ISO 文件拷贝到服务器本地文件系统中。 　　2. 系统管理员根据用户提交的，虚拟机所需配置的 CPU 内核个数、内存空间、硬盘空间、以及实时带宽，通过调用 Linux 相应工具，启动虚拟机。操作步骤不复杂，也参见操作手册 [3]。 　　这里有两个问题。 　　1. 假如开启一个虚拟机实例后，用户在这个虚拟机实例里，下载并保存了某个内容文件，例如一段视频。并且，他安装了某个应用软件，例如 Apache Web Server。然后他让 Apache 运行了一段时间，产生了一些状态文件，例如日志文件。再然后，虚拟机实例被关闭，或许是被用户或系统管理员主动关闭的，也可能是因为故障而宕机的。 　　问题是，这个虚拟机实例能够被重启吗？虚拟机实例被重启后，用户先前保存的视频等等内容文件、安装的 Apache Web Server 等等应用软件、以及应用软件运行中产生的日志等等状态文件，有没有被保存？ 　　答案是，可以重启这个虚拟机实例，并且用户先前保存的所有内容文件、安装的所有应用软件，以及在应用软件运行过程中，产生的所有状态文件，通通被保存，可以重新使用。 　　原理是，在用户提交的申请租赁虚拟机实例的请求中，有一个参数是该虚拟机实例占用的硬盘空间的大小。当系统管理员在某一台物理服务器上，调用系统指令，让 KVM 虚拟化系统，为用户创建虚拟机实例时，KVM 虚拟化系统在该物理服务器的本地硬盘中，创建了一个文件，作为这个虚拟机实例的镜像文件(Image)。 　　这个镜像文件的大小，基本上等于用户指定的虚拟机实例占用的硬盘空间的大小。在虚拟机实例看来，这个镜像文件，就相当于自己的硬盘，所以镜像文件又被称为虚拟硬盘。在这个镜像文件或者虚拟硬盘中，虚拟机实例可以设立不同的虚拟硬盘分区，分区中可以设立文件夹，文件夹中可以再设立子文件夹，或者存放文件。 　　当先前的虚拟机实例被关闭以后，可以在同一台物理服务器上，根据虚拟机实例的名称，重启该虚拟机实例。这时新的虚拟机实例，将会找到先前那个虚拟机实例所使用的虚拟硬盘，也就是镜像文件。 　　于是，当新的虚拟机实例开启以后，将会看到先前虚拟机实例，它保存的所有内容文件、安装的所有应用软件、以及应用软件在运行过程中产生的所有状态文件。 　　2. 问题二，假如先前的虚拟机实例被关闭以后，能不能在另外一台物理服务器上，重启该虚拟机实例？ 　　答案是，可以在其它物理服务器上，重启虚拟机实例。但是有两个前提，1. 这两台物理服务器，必须安装相同的虚拟机系统，例如某版本的 KVM。2. 必须把先前那个虚拟机实例的镜像文件，也就是它的虚拟硬盘，从第一台物理服务器的文件系统，拷贝或者挂载到(mount)到第二台物理服务器的文件系统中去。 　　原理是，假如我们有两台电脑，当我们把第一台电脑的硬盘，拆下并安装到第二台电脑上去。然后开启第二台电脑，我们将会看到与第一台电脑一模一样的操作系统、文件、还有应用软件。镜像文件对于虚拟机实例来说，就是它的硬盘。迁移虚拟机实例，可以通过迁移它的虚拟硬盘，也就是镜像文件来实现。 　　我们之所以不厌其烦地介绍手工设置虚拟化系统、并运行虚拟机实例的步骤，是因为 Amazon EC2、OpenStack、以及 VMWare 等等系统，它们的主要功能，是让软件系统替代人工，自动化地去完成这些操作。 　　类似于 Amazon EC2 的自动化系统并不难设计。事实上，前述的准备工作，也就是安装虚拟化系统的三个步骤，是在添置物理服务器时完成的，是一次性的操作，所以手工完成这些准备工作，无妨大雅。 　　真正需要实现自动化的，仅仅限于提供虚拟机租赁业务的两个步骤，1. 提供操作系统安装光盘，或相应的 ISO 文件，2. 根据用户提交的虚拟机资源配置，创建虚拟机实例。 　　我们在下一节，将自行设计这样一套系统，然后把它与 Amazon EC2、OpenStack 等等横向对比。大家会惊奇地发现，我们自行设计的系统，在总体上，与 Amazon EC2、OpenStack 等等系统非常相似。","title":"云计算技术解析 Amazon EC2 的幕后"},{"content":"从2011年11月底，开始在新浪发布《云界伦语》微博系列，为了方便大家查看，特汇总在此。不断更新中... 25-#云界伦语#云计算不是新技术，而是经营IT新思路，从此CIO昂首阔步CEO 24-#云界伦语#今日的云计算实则是农家碧玉与富二代的一场激情恋爱！ 23-#云界伦语#云计算旅程就是从庄园到修道院的演化（有感于博文The Five Stages of Hosting） 22-#云界伦语#云计算就是IT界的工业化革命，直至今日的IT都是小农经济 21-#云界伦语#有人预测2012年是世界末日，和云界趋势不谋而合，因为Gartner说2012年是“怕死年”(PaaS年)http://t.cn/z0kbGIb 20-#云界伦语#都说2012年是世界末日，我看不会，因为cloud将拯救世界 19-#云界伦语#政府在云计算方面应该做些什么呢？大体有三个方面：1）网络建设，保障网络畅通；2）制定法律法规，确保云计算发展无障碍；3）给予云计算相关产业政策，扶持云计算发展。做好了这三个方面，政府就仁至义尽了，插手其他方面都会导致行业发展畸形，引入腐败等。 18-#云界伦语#政府想制定中国云计算标准，通过标准引领云计算的发展。想法很好，其实不可行。IT不是CT，不是制定标准就等于占领制高点，而是占领制高点的厂商才有资格制定云计算标准 17-#云界伦语#物联网和云计算好像双胞胎，逢云必谈物联网，但实际上二者关系真那么亲密吗？我认为物联网只是云计算中的一个应用场景而已，就如云计算是百货公司，物联网只是其中的一种商品。你如何认为呢？ 16-#云界伦语#不管何种云业务模式，最后能够成功的就是好模式。今天没法预测哪种模式是最好的，要有人投钱对各种模式进行测试，经得住考验的模式就是好模式 15-#云界伦语#云计算不是百米跑，而是一场马拉松，调整好节奏至关重要 14-#云界伦语#公有云最先怎么落地中国？答案很多，但医疗云、教育云和电子政务云必是先遣队 13-#云界伦语#云计算起源于互联网，正走进企业级数据中心。同时，企业级数据中心正通过云计算走向互联网模式。二者的融合互补是今后几年云计算发展的重点之一 12-#云界伦语#挨踢本无云，桌面亦非云，今日到处云，何处不云海？ 11-#云界伦语#穿行在云里雾里，最要紧的是认清自己的方向，漫无目的的出击只会浪费自己的时间、精力和信心。 10-#云界伦语#如果终端计算云普及了，99%毕业生的简历中都不会出现Windows和Office这两个词 9-#云界伦语#一银行客户想将高价购买的IA64的机器入云，寻遍众厂商未果，问我，答曰：云计算不能走进死胡同，没有未来的云计算千万别信！ 8-#云界伦语#说云计算是忽悠的人是大忽悠 7-#云界伦语#到底基于小型机还是PC服务器构建云计算？这是一个极具中国特色的云界问题！ 6-#云界伦语#只能期待云法规的到来，不能指望现在就有完善的云法规，就像电商的法规是不断完善的一样 5-#云界伦语#云安全不是问题，问题是我们有没有信心。在通往云的旅途中，信心比黄金都珍贵！ 4-#云界伦语#云计算是一个旅程，不能急躁，需要至少5年来走您的云之旅 3-#云界伦语#虚拟化是企业数据中心云计算的第一步，你迈出第一步了吗？ 2-#云界伦语#只有公有云才能驯服峰值运算，所以今日每个数据中心都需要公有云！ 1-#云界伦语#互联网时代，内容为王；云计算时代，应用为王 本文出自 “云界漫步” 博客，请务必保留此出处http://virtualman.blog.51cto.com/200540/737913","title":"云界伦语- 戏说云界趣事，喜看云中漫步"},{"content":"【导读】《孙膑兵法·月战》：“天时、地利、人和，三者不得，虽胜有殃。” 我们可以把“云计算”当做一场没有硝烟的战争，云计算平台可以算是一场局部战争，OpenStack就像这场局部战争中一颗闪亮的“新星”。 天时：亚马逊已经成为云计算领域的“霸主”，没有一家IT巨头愿意受制于亚马逊，而且使用亚马逊网络服务的云计算企业，抱怨最多的就是“用户被绑架，无法轻易转移数据”，OpenStack应运而生，时机选择恰到好处。 地利：背靠美国国家宇航局，Rackspace两座“大山”，得天独厚。 人和：众多IT领军企业的倾力加盟。来自全球十多个国家的60多家领军企业，包括Dell、惠普，Intel都参与到了OpenStack的项目之中，阵容庞大。 牛X背景： Swift OpenStack Object Storage 最开始是由Rackspace开发，并于2010年7月贡献给OpenStack，作为其开源子项目。工程代号为Swift。 OpenStackObject Storage（Swift）是开源的，用来创建可扩展的、冗余的、对象存储（引擎）。Swift使用标准化的服务器存储PB级可用数据。但它并不是文件系统（file system），Swift看起来更像是一个长期的存储系统（long term storage system），为了获得、调用、更新一些静态的永久性的数据，Swift看起来具有更强的扩展性、冗余和持久性。 Nova 研究人员在美国的航空航天局（NASA）的Ames研究中心开发了 OpenStack的雏形，被称作Nova，其目的是为美国的航空航天机构提供可塑性较高的云客户端。之后Rackspace涉足了该技术商业化的进程， 并最终使其成为一款独立的基础软件。 版本历史： 我们明显可以看到，OpenStack的版本更新很快，基本上不到半年就会更新，这是自身的优势，也表明了OpenStack强大的生命力，但是如果新版本的发布过于频繁，就难免会在一些地方与老版本出现兼容性的问题。如果仅仅对代码做了一些改进，却不被社区接受，那么使用自己代码更新的版本将变得难以维护。 主要项目： OpenStack当前主要包括三个子项目，三个项目相互独立，可以单独安装。 • Swift： 提供对象存储。类似于Rackspace云文件（从它派生）或亚马逊的S3存储。 • Glance： 提供OpenStack Nova虚拟机镜像的发现，存储和检索。 • Nova ：根据要求提供虚拟服务。这与Rackspace云服务器或亚马逊EC2类似。将来会出现web 接口的子项目以及队列服务的子项目。 Openstack的架构图： 强悍对手： 显赫的出身，意味着身负众望，从出生就面临着最强大的对手，(是不是很像凯瑟琳·罗琳笔下的哈利·波特)，虽然没有与亚马逊全面的开战，但是“处处”硝烟弥漫！ 给予厚望： 开源是云计算发展的灵魂，OpenStack作为来源平台，自身就带有强大的优势，也许正是开源的魅力所在，才成就了OpenStack的高速发展。      Rackspace CEO Lanham Napier 随着云计算创新的步伐不断加快，新一代的技术和成果也在快速增长。但是云计算市场的分散性导致客户难以选择云计算厂商和合作伙伴，一旦做错决定将不得不转 移到新的云上进行重新构建。这对于一些大的公司来说，确实是一个挑战。 鉴于上述原因，云需要一个开源的操作系统，开源云可以避免被锁的问题，而OpenStack就是这样一个开源的云操作系统，RackSpace CTO John Engates将OpenStack的发展比作Linux，Rackspace 的CEO Lanham Napier对OpenStack更是给予厚望！ 相关文章：OpenStack：是否会像Linux一样缔造传奇 辉煌成就： 两年前的7月，OpenStack项目正式成立。目前已有183家企业参与，包括Rackspace，Dell，惠普，Intel等巨头。同时其社区活跃度已超越Eucalyptus、CloudStack，潜力无限。更重要的是一些企业已经把openstack投入到实战阶段，比如 ：在2011年7月底时，Dell推出了第一套支持OpenStack的云解决方案，包括OpenStack云操作系统、戴尔开发的管理与配置工具Crowbar、PowerEdgeC6100/C6105服务器、PowerConnect交换机、参考架构、部署指南及戴尔服务与支持等等 。 Openstack在中国 OpenStack在中国的发展趋势也是非常之好，包括物联网用户、国内高校以及部分大小企业，都开始利用OpenStack建立云计算环境，整合企业架构以及治理公司内部的IT基础架构。 在第四届中国云计算大会上，OpenStack开源技术专题论坛可以用“火爆”来形容。（上图是小编在云计算大会期间抓拍的一张照片） 相关文章：OpenStack为什么这么火？ 历经坎坷： OpenStack在成长的过程中，不是一帆风顺的，也经历了“崎岖坎坷”。曾经作为OpenStack的大靠山——Citrix，在今年四月份，就投入了在开源云计算平台上更为成熟的CloudStack的怀抱。现在令人更担忧的是，甚至有些白金合作伙伴对自己投放在OpenStack的赌注也想“套期保值”，一直研发自己的具有潜在竞争力的项目。这对OpenStack来说算是一场小小的“灾难”，尽管如此，Rackspace每年贡献约500万美元在项目的开发上，惠普也没有对其承诺大打折扣。 祸不单行，虽然美国宇航局和Rackspace的合作最终孕育了OpenStack，给予它生命，但是却在不久后选择了自己的对手Amazon的S3存储服务，对OpenStack造成了一定的打击。但是NASA的CIO后来发表博文解释，NASA和OpenStack还有一些合作项目，对OpenStack依然“一往情深”！ 相关文章：Citrix Splits With OpenStack, Takes Cloud to Apache 相关文章：NASA Embraces Amazon Cloud, Leaves OpenStack Behind 相关文章：NASA CIO：我们对OpenStack一往情深 两岁生日： OpenStack两岁了，然而两岁的生日并不是那么的好过。虽然社区活跃度已超越Eucalyptus、CloudStack，潜力无限。但是OpenStack仍然要面对自身的短板，在即将步入第三个年头的关键时期，OpenStack应该集思广益，在打造一个易于理解和定向驱动的平台上实现自我超越。OpenStack将必须拿出足够成熟的商用版，并解决兼容性等一系列问题。机遇与风险并存，OpenStack能否实现自我突破，让我们拭目以待！ 相关文章：OpenStack两岁：开启新的征程 展望未来： 尽管来自Eucalyptus、CloudStack等对手在当下拥有更成熟的产品，但IBM、Dell、惠普、Intel等巨头不约而同的选择了OpenStack，投入大量的资金和研发力量，在社区活跃度上OpenStack也超越所有对手，占尽了天时地利与人和。开源是被Linux证明是成功的开发的模式，OpenStack被誉为21世纪的Linux，最有可能成为云计算IaaS层的工业标准。 相关文章：用勇气和实力拥抱OpenStack  首届OpenStack亚太技术大会将于8月10日、11日在北京、上海召开，详情请参见大会官网（openstack.csdn.net），欢迎讲师报名、听众报名。感兴趣的网友，请关注@CSDN云计算微博、国际云计算技术交流群及OpenStack中文社区进行讨论。 本文为CSDN原创，未经允许不得转载。如需转载请联系market@csdn.net","title":"天时、地利、人和：大话OpenStack"},{"content":"市场观察家认为，云计算、虚拟化以及移动办公的趋势已经成为了当前企业网络变革的推动力。他们还表示，虽然企业在服务器、存储和网络融合上已经加大了投资力度，但问题还没有彻底解决。 近日记者通过邮件采访了Frost & Sullivan公司亚太区ICT部门研究员MayankKapoor。在采访中，Kapoor指出虚拟化和云计算已经成为了如今推动区域网络市场发展的最大动力。这些技术极大的增加了来自计算机和存储终端的数据流量，从而加强了对于“flat datacenter architecture”的需求。 而向云计算技术迁移的趋势使得企业IT架构趋于集中化，导致企业必须升级他们的LAN，WAN以及SAN架构，以实现远程用户的按需访问。 根据Kapoor的观点，虚拟化光纤网的发展将使得未来的网络瓶颈得以消除。他表示：“在当今的虚拟化环境中，传统的网络架构会导致传输效率低下。” 他还表示，将网络中每个节点相互连接将不再需要传统的STP协议(Spanning Tree Protocol)和路由循环，这将在提升网络传输效率的同时消除网络传输瓶颈和延迟问题。 除了虚拟化和云计算，Kapoor还指出，移动化是网络市场的新趋势。Hewlett-Packard亚太和日本区市场经理AmolMitra表示，在过去由于采用的是有线网络，用户必须“跟着网络走”。而如今随着智能手机设备的普及，网络必须要跟着用户走。 Juniper Networks亚太区企业解决方案经理C.K. Lam也表示，企业正在各种各样的移动设备(其中大部分是个人设备)中挣扎,努力将这些设备并入企业网并加以管理。这些设备主要会影响企业的无线网络架构，而很多企业的无线网络最初搭建时并没有考虑到会支持如此多的设备和流量。 Cisco Systems亚太区企业业务经理SrinivasNadesan认为，无线网络现在已经和有线网络一样受到企业的重视了，他表示：移动设备的大量增长“使得企业将网络投资中的很大一部分拨给了无线网络，用于建设与有线网络相当的无线安全防护系统。” 　　融合成为现实 不少市场观察家都认为，虽然服务器、存储以及网络的融合项目已经起步，并且未来比较乐观，但是现阶段仍然存在一些阻碍。 Frost & Sullivan公司的Kapoor表示，尤其在大型企业中，这种融合的趋势非常明显。 HP亚太和日本区副总裁Paul Robson指出，他们的融合架构策略早在一年半前就开始了，将数据中心的服务器、存储设备以及网络进行融合的技术对于集中管理企业资源有重要意义。 Juniper Networks的Lam也表示，有很多客户对于通过“光纤架构”将数据中心的服务器、存储设备和安全应用设备等进行网络融合表现出极大兴趣。 不过Kapoor指出，向融合架构转变的过程中还存在着很多障碍，包括很多被广泛使用的非以太网标准设备，企业由于前期设备的投入资金量较大而不愿意过早升级设备，以及厂商的私有架构向开放和多功能平台转化过于缓慢等。 Lam 还补充说，企业客户还在犹豫是否要将光纤通道迁移到Fiber Channel over Ethernet。因为前几年实施的支持无缝移动虚拟机的标准和协议要么很新，要么就是还在使用中，比如Virtual Ethernet Port Aggregator 或 VEPA。 Lam表示，对企业来说另一个挑战是企业缺乏融合方面的技能。他解释说：“以前在服务器、存储设备和网络管理员之间有明确的职责规定。而在一个完全融合和虚拟化的数据中心里，企业会发现这种职责界定变得相当模糊了。” 在这种情况下， Lam 认为解决方案供应商应该提供相应的管理解决方案，使得企业不论是在物理环境还是虚拟环境下都能明确自己的管理范围。 Cisco的Nadesan认为，虽然现在建立一个融合型的数据中心的技术已经成熟了，但是企业客户仍然面临一个很大的难题，即没有一个系统化的步骤指导他们该如何从传统的企业IT架构向统一化的数据中心架构过渡，而企业急需这种系统性的指导方案，帮助他们在迁移过程中最小化风险，并确保数据完整。 他说：“一些厂商，比如思科已经意识到了这个问题，并且正在努力与客户进行紧密合作，帮助客户和合作伙伴在架构迁移过程中实现其所需的服务，共同向建立客户满意的融合性数据中心的目标前进。” Brocade东南亚区的Gina Tan也表示，在实际的实施过程中，融合性的存储网络和数据网络并不像想象中那么简单直接。她警告说，这个级别的融合项目会涉及到网络设计和管理方面的多重挑战。 Tan 还说：“这类项目需要多协议设计方面的专业经验，并且涉及多个厂商，多种网络测试。”另外对于很多企业来说，如果他们没有专业技能，同时也不理解在数据网络使用以太网在存储网络使用光纤网的优势和不足，会很容易放弃这类项目。","title":"云计算，虚拟化和移动性促使网络变革"},{"content":"除非你像我的一位朋友那样，整个夏天都住在洞穴里（那是在芬兰，而我的朋友是一位艺术天才），否则你一定会听到关于云计算的喧嚣。 和很多处于生命周期中“炒作期”的技术一样，云计算并没有什么错——它的确是救治基础架构拥有成本昂贵、业务敏捷性缺失和开支过度的良药。能够按需购买计算周期（computing cycles）和存储空间，这在什么时候对于企业都是有吸引力的——这也是此类技术从上世纪60年代以来能够不断激发企业兴趣的原因所在。虽然我咨询过的企业中只有20%正在考虑云计算，但是很多企业对于探讨云计算的好处都十分感兴趣（在只拥有一个数据中心的企业中，有63%的企业说他们对探讨云计算的好处很感兴趣）。 然而对网络经理们来说，云计算却隐藏着一个风险：即网络依赖性。网络基础设施要想进入计算云，成本和质量是两大关键问题。 我们先说成本。在用户之间迁移数据和计算周期，意味着在用户之间以及用户与数据之间需要增加带宽。这虽然算不上什么大事，但是大多数云计算方案都需要在现有的数据中心带宽之外再额外增加带宽。这意味着网络经理们如果不增加预算就无法增加云计算所需的带宽（即便他们已经规划了要为数据中心进行容量升级也无济于事）。话句话说，要部署云计算，就得在已经制定好的预算基础上再增加网络升级的成本。 解决的办法也是显而易见的：网络经理们必须熟悉云计算规划的制订，并确保在制定容量规划时留出富裕。 还有一个比较棘手的问题：很多云服务产品都得依靠互联网的带宽，而很多企业恰恰在增加互联网的接入带宽上没有预算。这就带来了第二个问题：网络的质量。总体而言，互联网服务的质量需要不断提高，大多数用户想当然地以为互联网自己就会不断改进。但是当应用越来越多媒体化、越来越依赖带宽时，用户们的这种想当然就会出现问题。用户们在一天中的某些时候会越来越鲜明地体验到“网络的间歇性”，所以远程工作人员就会期待应用性能的提升。这个时候，商业互联网服务，即QoS将会成为关键。 这也是很多主要的运营商（包括AT&T、BT和Verizon）之所以要提供与MPLS网络服务捆绑的云计算的原因所在。网络经理们在考虑部署远程办公优化产品时需要考虑使用MPLS服务。 简言之，云计算对于企业的计算周期来讲或许是一种理想的方式，但他们对于网络可能受到的影响必须有所准备。 至于我的那位住在山洞里的艺术家朋友，我听说他正在用LED做着一些非常酷的玩意儿。这或许就是后现代派穴居生活方式吧。","title":"云计算阴暗的一面"},{"content":"Project2007产品套装对应了4个产品分别是：Project Standard 2007，Project Professional 2007，Project Server 2007，Project Portfolio Server 2007   到Project2010产品套装的时候，只有三个产品了。分别是Project Standard 2010，Project Professional 2010，Project Server 2010，也就是说Project Portfolio Server 2007被合并到Project Server 2010中。   而最新开始公测的Project2013产品套装中，多达6个产品，分别对应如下：   Project Standard 2013：标准版，不具备网络功能，供项目经理使用，按License模式收费； Project Professional 2013：专业版，具备网络功能，可以连接Project Server 2010或Project Online或者其他文档协同平台，如SharePoint 2010，供项目经理使用，按License模式收费； Project Server 2013：服务器版，可与Project Professional 2013或Project Pro for Office 365构建企业项目管理解决(EPM)方案，主要供管理者、PMO、项目成员使用，按License+访问许可模式收费； Project Pro for Office 365：标准版云计算版本，可以连接Project Online或Project Server 2013版本，还可以连接Office365，SharePoint Online，构建企业项目管理解决方案，供项目经理使用，按租赁模式按人/月收费。   Project Online：服务器版云计算版本，可以与 Project Pro for Office 365构建云计算版本的EPM解决方案，与Project Online with Project Pro for Office 365构建云计算版本的EPM解决方案和项目组合管理解决方案，并且微软已经整合好了所有的Office365，Lync，SharePoint，Exchange产品在里面了，主要面向管理者、PMO、项目成员使用，按租赁模式按人/月收费   Project Online with Project Pro for Office 365：专业版云计算版本，可以额外连接Project Online构建云计算版本的EPM解决方案和项目组合管理解决方案，供项目组合经理使用，按租赁模式按人/月收费，收费标准=Project Pro for Office 365+Project Online   每一个企业可以选择本地版本或者云计算版本使用Project 2013或者构建自己企业的项目管理（EPM）平台  ","title":"[置顶] Project 2013产品套装对应的六个产品详细信息"},{"content":"云 技术的能源效率 2012年6月26日 下午 02:38:00 发表者：Urs Hoelzle，Google高级副总裁，技术基础设施架构业务 我们努力建立可以进行云计算的节能数据中心。除了提升效率，Google Apps等云基础服务还可以减少能源使用，降低碳排放，省时又省钱。去年，我们发现Gmail的节能效果要比使用传统的内部电子邮件高出80倍。现在，从整体上分析Google Apps——文档、电子表格、电子邮件及其他应用程序——与本地托管服务标准模型的区别，结果显示，一个机构可以通过迁移到Google Apps节约约65%至85%的能源。 较低的能源使用会带来更少的碳污染，为企业节约更多能源。这正是美国总务管理局（GSA）的做法，其最近将17000多名用户转到Google Apps中。我们发现，GSA可以减少大约90%的服务器能源消耗以及85%的碳排放量。这意味着，GSA每年将大致节省285000美元的能源，降低93%的成本。 为什么云计算可以节能？这主要与减少服务器能源使用及服务器冷却有关。下面是其工作原理： 通常，一个组织会拥有比实际需求更多的服务器——用于计算备份的需求、应对计算故障及高峰。像Google这样基于云技术的服务提供商从成千上万人中累积需求，从根本上增加服务商使用量。我们的数据中心会使用专门为减少能源使用所设计的设备和软件。与本地托管服务器相比，云技术可以更高效地完成相同的工作。 事实上，根据研究显示，通过向云技术迁移，收入在十亿美元以上的美国及欧洲公司将在2020年前实现其在能源成本及碳排放方面的大幅降低。 • 美国公司可以节省123亿美元，以及高达8570万公吨的二氧化碳排放量。 • 英国公司节省12亿英镑，以及超过920万公吨的二氧化碳排放量。 • 法国公司可以节省近7亿欧元，以及120万公吨的二氧化碳排放量。 我们在世界各地都建立了高效的数据中心，甚至按照自然环境的最佳利用方式对这些中心进行设计，今后我们将继续提升能源利用率。我们相信，利用超级高效的云技术提供Google Apps这类服务可以在未来帮助创建更加高效节能的解决方案。","title":"云技术的能源效率"},{"content":"云计算时下可谓风靡一时，正如Gartner咨询公司资深分析师Ben Pring所说：\"云计算已经成为大家津津乐道的话题\"。但问题是每个人看起来似乎都有自己不同的定义。 　　\"云\"是个大家熟悉的名词，但当它与\"计算\"相结合，它的含义就演变的泛泛而且虚无缥缈。一些分析师和厂商将云计算狭义的定义为效用计算(Utility computing)的升级版本：最基本的就是在网络范围内应用虚拟服务器。其他方面的应用也很广泛。 　　当我们考虑到IT的实际需求时，云计算的概念也逐渐清晰起来：那就是在不需要增加基础设施投入，新员工培训或者最新软件授权的前提下提升闲置资源性能和能力的一种方法。云计算包含了任何通过网络实时提供订阅型（subscription-based）或者按照使用量付费（pay-per-use）的服务模式，扩展了IT行业现有的能力。 　　云计算目前还处于萌芽阶段，有大大小小鱼龙混杂的各色厂商在开发不同的云计算服务，从成熟的应用程序到存储服务再到垃圾邮件过滤不一而足。不错，效用模式基础架构供应商是提供多种服务，诸如Salesforce.com这样的SaaS（软件即服务）的供应商亦是如此。如今在很大程度上，IT业界必须个别的去接受云服务，不过云计算的开发商和集成商已经开始初具规模。 　　根据不同的厂商，分析师和IT用户对云计算的看法，我们将云计算细分如下： 1.软件即服务（SaaS） 　　这种类型的云计算是采用multitenant架构通过网络浏览器将单个的应用软件推广到数千用户。从用户角度来说，这意味着他们前期无需在服务器或软件许可证授权上进行投资；从供应商角度来看，与常规的软件服务模式相比，维护一个应用软件的成本要相对低廉。迄今为止Salesforce.com是企业应用软件领域中最为知名的供应商，但是软件即服务（SaaS)在人力资源管理软件方面运用比较普遍，还有诸如Workday这样的ERP软件供应商。谁又能预测来自Google和oho Office的软件即服务（SaaS)桌面系统应用软件是否会出现突然的飞跃呢？ 2.效用计算（Utility computing） 　　这种想法本来并无新意，但这种类型的云计算有了Amazon.com, Sun, IBM和其他从事存储服务和IT随需访问的虚拟机厂商的参与就焕发出了新的生命力。早期的企业主要将效用计算作为补充，不会应用在关键性任务需求上。但是时至今日效用计算逐渐在数据中心开始占据一席之地。一些供应商向用户提供解决方案来帮助IT企业从商业服务器开始创建数据中心，诸如3Tera的AppLogic和Cohesive Flexible Technologies的Elastic Server都提供这种随需服务。Liquid Computing公司的LiquidQ也有类似的服务，能帮助企业将内存，I/0，存储和计算容量通过网络集成为一个虚拟的资源池来使用。 3.云计算的网络服务 　　网络服务与软件即服务（SaaS）是密切相关的，网络服务供应商提供API能帮助开发商通过网络拓展功能性，而不只是提供成熟的应用软件。他们的服务范围从提供分散的商业服务（诸如Strike Iron和Xignite ）到涉及到Google Maps, ADP薪资处理流程，美国邮电服务，Bloomberg和常规的信用卡处理服务等的全套API服务。 4.平台即服务（Platform as a service） 　　平台即服务（Platform as a service）是软件即服务（SaaS）的变种，这种形式的云计算将开发环境作为服务来提供。你可以创建自己的应用软件在供应商的基础架构上运行，然后通过网络从供应商的服务器上传递给用户。比如乐高公司（Legos）就是这么做的。但这些服务会受到厂商设计和容量的限制，因此用户就没有足够的自由。代表公司包括Salesforce.com的Force.com和Coghead。 5.管理服务供应商（MSP） 　　管理服务是云计算最古老的形式之一，管理服务是面向IT厂商而并非最终用户的一种应用软件，诸如用于电子邮件的病毒扫描服务或者应用软件监控服务。由SecureWorks, IBM和Verizon公司提供的管理安全服务就归为此类，还有目前被Google收购的Postini以云为基础的反垃圾邮件服务。其他的产品还包含桌面系统管理服务，诸如CenterBeam和Everdream提供的产品。 6.服务商业平台 　　服务商业平台是软件即服务（SaaS）和管理服务供应商（MSP）的混合体，这种云计算服务提供了一种与用户相结合的服务采集器。在贸易领域中应用最为普遍，诸如费用管理系统能允许用户在用户设定的规格范围内从普通平台上订购与所要求的服务和价格相符的旅游产品或者秘书台服务，就好比一个自动化服务局，知名公司包括Rearden Commerce和Ariba。 7.网络集成 　　云基础服务的集成尚处于初始阶段。软件服务供应商OpSource目前推出了OpSource Services Bus，使用的就是被成为Boomi的云集成技术。软件即服务供应商Workday最近收购了这一领域中的另外一家公司CapeClear，这家ESB（企业服务总线）供应商主要从事B-TO-B商业模式的服务。Grand Central公司也致力于向用户提供集成解决方案，日前被Google所收购。 　　如今，云计算的运用还不是非常广泛，对于云计算更精确的描述可能是\"天空运算\"。同时，随着虚拟化和SOA在企业中的逐渐普及，这种想法也开始为大家所认同。可扩展的基础架构应该最终能将每一家企业都最为云的节点。这是个长期可发展的趋势，但是不可否认的是，云计算在很长的时期内还将是业界争论的难点之一。","title":"“云”到底是什么？云计算7种类型细分"},{"content":"网络大大扩展了计算机的计算能力和应用范围，尤其是随着互联网的出现，使得基于计算机的服务提供方与适用方之间能够进行友好度和扩展度都更优的充分交流。人们很早就提出和实现了基于网络的多台计算机的协同技术，例如，分布式技术、服务器集群技术、负载均衡技术和Web Service等，在互联网的基础上对这些技术进行扩展，再加入一些创新，基本就构成了现在的云计算。 云计算是一种基于并高度依赖于Internet，用户与实际服务提供的计算资源相分离，集合了大量计算设备和资源，并向用户屏蔽底层差异的分布式处理架构。 1、云计算的应用 总的来讲，云计算是一种大量服务器的组成架构，其提供的计算资源并不能直接给用户使用，而是通过其他的方式，例如，向用户提供搜索、存储、相册、Blog、科学计算等应用服务的方式来展现其魅力。目前，云计算已经被应用到以下几个方面： 1）存储服务，例如，Amazon说提供的S3，就是一种向用户提供存储服务的云计算应用，Microsoft公司通过Windows Live的SkyDriver向用户提供网络存储服务，Google Docs在2009年7月的一次更新中也开始支持对任意文件的存储。 2）搜索。各大搜索引擎公司（例如，Google等）为了满足用户的需求，并提供良好的用户体验，都使用了大量的服务器，组成服务器集群，把用户的请求进行拆分、执行和返回。 3）科学计算。小型团队在实验或者项目必须的情况下，必定会有大量的计算需求，但无论是购买设备，还是租用大型计算机，都将有不菲的费用，而通过购买云计算的资源（例如，Amazon的EC2服务），搭建需要的平台，基本可以再前期零投入的情况下来满足相应的计算需求。 4）软件即服务（Software As A  Service, SaaS）。通过利用BPS架构，将企业的业务逻辑和数据都置于云计算的服务器群中，以实用中小企业的低成本满足应用需求的要求。 另外，云计算可以应用到基础设施即服务（Infrastructure as a Service , IaaS）和平台即服务（Platform as a Service，PaaS）中。一般地，当有以下需求的时候，就可以考虑使用云计算服务： a.短时间内的中、大规模计算需求。 b.零成本的前期投入，并且总体拥有成本（Total Cost of Ownership , TCO）较优。 c.在充分相信云计算服务提供商的情况下的数据安全性需求。 d.没有足够的服务器管理和运维人员。 e.在终端设备配置较差的情况下完成较复杂的应用。 当使用云计算服务时，一般都可以达到前期成本的零投入，短时间内在云计算环境中搭建一个满足大规模计算需求的虚拟服务器或虚拟服务器集群。而且，用户不需要配置专门的维护人员，云计算服务的提供商也会为数据和服务器的安全做出相对较高水平的保护。由于云计算将数据存储在云端（分布式的云计算设备中承担计算和存储功能的部分），业务逻辑和相关计算都在云端完成，因此，终端只需要一个能够满足基础应用的普通设备即可。 2、云计算机的特点 云计算作为一个新兴事物，虽然在理论和应用上都没有得到一致性的共识，但也可以归纳出以下几个方面的特点： 1）集合了大量计算机，规模达到成千上万。一方面，大量的计算机可以提供强大的整体计算能力；另一方面，整体管理还可以降低管理和维护成本，通过对计算机运行环境的优化，缩短单台计算机的服务周期。 2）多种软硬件技术相结合。在云计算的组织结构中，使用到了诸如分布式、负载均衡和服务器集群等技术；在基于云计算的应用设计中，还会用到BPS、Web Service、SOA等技术；在硬件组织和机房建设中，又会使用到一些现已成熟的冷却、通风和布线等技术。 3）对客户端设备的要求低。通常，云计算的客户端系统只需要满足能够运行一个浏览器的要求即可。而且，云计算的客户端是多样的，可以试一台PC，也可以试一部移动电话。客户端只需要将相应的数据展现给客户，并对用户的输入进行收集和提交即可，业务逻辑中的大部分都将转换到云计算服务器上，数据也将存储在云端。例如，在商业的Saas应用中，大部分的客户端都是浏览器。当然，有些情况下需要安装一些插件。 4）规模化效应。云计算的服务器都是大规模的，用户也是大规模的，这使得管理与维护都得以集中，不仅降低了服务器的维护成本，还使软硬件资源得到最充分的利用。当然，这在很大程度上也加深了灾难的蝴蝶效应，一旦云计算的关键设施出现问题，例如，遭遇攻击或者网络发生异常等，对于客户的影响将是致命的。 3、云计算的架构 云计算的架构从总体功能上可以分为6层，从上到下分别是客户层、服务层、应用层、平台层、存储层和基础设施层。 1）客户层。客户层是云计算的最终用户所接触的一层，而且，在用户看来，另外5层都是透明的，用户不需要知道自己的请求最终由哪些计算机怎样去完成，只需要将自己的任务提交给云即可。客户层的配置是很低的，大多数情况下，只需要满足运行浏览器的要求即可。云计算中的数据存储和业务逻辑在客户层中都被弱化。客户层的设计一般都是跨平台的。可能会运行在移动设备、手持设备和瘦客户端，以及普通的胖客户端等。 2）服务层。服务层主要是将应用以服务的形式提供给用户，也是云计算中与用户进行直接交互的一层，该层将云计算的其它层进行屏蔽。一方面，客户层通过服务层利用云计算的各种资源；另一方面，云计算将所有资源以服务的形式进行封装。当然，服务层并不仅仅针对直接用户，也可以为其它云计算提供服务。服务层是云计算的I/O接口，各种应用都可以以服务的形式进行封装并运行在云计算上。 3）应用层。应用层主要运行直接提供服务的应用程序，它将云计算的计算资源转化成实际的服务，以实现对计算资源的封装。例如，SaaS的服务端就是以应用程序的形式运行在云计算服务器上。 4）平台层。平台层主要是提供应用层程序运行的环境，并对相关的计算资源进行调配。 5）存储层。存储层主要实现存储资源的整合与分配，云计算除了产生巨大的计算压力外，还需要对大量的数据进行临时或者永久性的存储。而且，为了安全考虑，这些数据通常都按照一定的策略进行安全保障。云计算的服务对象众多，还必须对这些数据进行隔离或者有条件的共享，这使得存储资源的分配和管理变得更加复杂。 6）基础设施层。云计算的基础设施概念相对较广，一般可概括为云计算的计算资源来源，可能是一个活多个服务器群，甚至也可以是一些由网格计算技术组织的计算机资源，还有可能是其它的云计算提供方。","title":"云计算之美"},{"content":"原文地址：http://www.apkbus.com/android-24213-1-1.html   我们潜意识就不想用计算机的方式来思考问题，我们有自己的思维描述方式，越是接近我们思维描述方式，我们越容易接受和使用。各种计算机语言，建模工具，不外乎就是建立一个更接近人的思维方式的概念空间，再使用工具从该概念空间向另外一个概念空间映射，我称之为人性思维空间向01序列描述空间的一个映射。实现方面来看，系统就是一个翻译器，将机器性更加人性化的一种机制。大学计算机经典课“计算机体系结构”，其他的可以忘记，但是下面这个图不能忘记： 2012-3-17 09:39 上传 下载附件 (8.24 KB) 这个就是概念空间最本质的原型体现：作为观测者看到了什么？设计者给了观察者什么？给出的答案是外部特性。 （1）提供给观察者的概念空间是什么？ （2）内部特性的概念空间是什么？     概念空间所表达的东西带有两个方面的缠绕：一面是人性自由，一面是物性制约（实时响应，系统资源的限制）。所以程序实现的概念空间是人性自由与特定计算机系统物性之间有一个折中，并且根据实际系统而采取某种动态的平衡。而这种平衡将会影响到系统架构，以及设计的思想。特别在手机这样的嵌入式系统中，这种矛盾和平衡无处不在，这种折中无处不在。而对系统的选取和采用，也就接受了某个方面的折中或某中即在的，也许是看不见的标准，及这样的标准有隐式和显式的。正因为如此，不管是工具的产生，新的平台的产生， 都是计算机的物性向人性靠近的一个小台阶。一个新的思想的形成随即带来的新工具，新系统框架，新的体系结构。     如果设计者站的高度足够高，那么设计者一开始就会考虑到“我该给他们一个什么样的概念空间，甚至一个什么样的理念，让他们这个概念空间去建立自己的产品”，于是设计者就会开始主动的去建立概念空间，这个概念空间要表达的实际意义，概念空间应该有哪些内容构成，考虑概念空间的完备性和封闭性，考虑概念空间的边界，考虑从哪个基础上建立这个概念空间，考虑如何与概念空间外的实体进行交互，考虑系统的资源限制条件，考虑功能性构建的合理性，考虑机器系统与人的平衡问题。     我们在学习新系统时，首先映入眼帘的就是新概念。新名词，就如现在我们面临的Android大量的新名词，在程序员的世界都是从代码实践开始的，是从写应用开始去涉及。SDK给了我们一个概念，我们就在这个概念框架下，使用SDK给我提供的函数接口，数据结构，初始化过程等，我们最初的接触到原型就是“HelloWorld”之类的DEMO程序，我们在Hello world上去使用各种不同的接口函数，对于应用程序员来讲,他说看到的系统就是系统调用接口，及其编程开发流程。实际上只要一使用这些接口,就不得不接受一系列的概念,只有在这种概念系统下,我们才能工作。但是,实际上我们却忽略了这样的概念系统的理解,只是在编程接口的这个狭窄的空间去理解系统.我们理解系统在形成理解概念的空间只是微小的一角，很少有资料来介绍这种概念系统的形成和理解,编程接口只是这个概念空间一个，对外部的一个表征。我们可以抽象起来,以接口,协议和行为,来描述系统的情况。SDK API的实质向上层提供了一个语义接口，从而在层间实现了一个转义过程，同时又成为一个功能的集合体。但是我们很少这样跳出来看，我们到底是处于一种什么样的概念空间，SDK除了调用接口外，还给了我们怎样一种整体概念？目标系统的基本构架在本质上的东西就是一个概念系统到另一个概念系统的映射。让我们大脑理解的概念系统映射到计算机能实现的概念域的一个映射。我们假定这个概念域E,机器能够理解的概念域为M,我们的软件工程要做的事情实质就是：EàM领域的一个映射过程。 为什么要在宏观上把握这些概念呢，显然有我的目的，理解概念空间是理解设计者意图的一个重要途径。设计者要想给开发者提供什么，设计者想要提供给最终用户什么。我们需要站在高处看待系统明白设计者意图。     Android的实质还是一套管理手机硬件系统的软件，这个话讲起来没有多大意义,计算机操作系统本质都是如此，Android是Google云计算计划的一部分，我们修正成：Android建立的本质就是让计算机成为我的云接入移动智能终端。作为硬件管理软件，Android提供概念空间内涵实质上泛操作系统内涵，我们的理解可以从泛操作系统概念空间映射到Android系统中去。而作为云计算的一部分的内容，我们可以云计算的概念入手去研究Andoird。","title":"Android核心分析 之二方法论探讨之概念空间篇"},{"content":"今天，客户关系管理系统 正在向云计算方向发展。无需为管理客户对话和信息而购买昂贵的服务器和软件，公司可以使用基于互联网的（“云”） CRM 应用程序，提高投资回报率。 对于任何行业中的销售、市场和服务专业人员，CRM 客户关系管理应用程序都应足够简单易用。这就是为什么聪明的公司都依赖一个可以让他们根据自己的业务特性进行灵活定制的 CRM 平台。这是提高用户使用率的最佳方法，还能确保 CRM 应用程序以最适合您的方式为您服务。 另一个影响云计算模式 CRM 客户关系管理应用程序的关键因素是多租户的架构。借助此架构（类似于 Amazon.com 和 Google），所有客户共享一种通用技术，运行于最新的版本之上，并受益于自动升级。因此，它们可以集中精力经营业务，而不必管理技术。 Salesforce.com 是企业级云计算的领导者。我们的旗舰 CRM 客户关系管理应用程序（Sales Cloud 和 Service Cloud），运行在我们的 Force.com云计算平台和云服务架构之上，完全基于互联网。","title":"CRM 客户关系管理和云计算...Salesforce企业级云计算的领导者..."},{"content":"  • 中国云计算发展概况与趋势 • 软件在线远程执行系统 • 虚拟机容错 • 异构集群环境下Hadoop作业调度优化 • 精简IT，敏捷商道-- 企业云计算IT基础设施平台架构概览 • 大规模云计算平台的技术挑战 • 云计算建设需去伪存真  ","title":"CCF技术动态第68期（云计算专题）...中国云计算发展概况与趋势..."},{"content":"这是7月中旬的一个下午，也是百度公司(BIDU.　NASDAQ)的普通一天。从北京西二旗地铁口出来，在一群科技公司的包围之中，最显眼的就是波浪状的百度大厦。小河环绕的透明大厅内人流攒动，每隔十几分钟，就会有人抱着笔记本电脑带着前来应聘的人们在二楼的阳光大厅内攀谈。 　　在正门右侧硕大的液晶墙上，是一张百度搜索关键词曲线图，每时每刻全国网民的搜索关键词的变动，构成了一条红色曲线，它勾画出这个国家网民最关注的热点。它也意味着，此处是中国最大的互联网入口。 　　财务数字正是这家公司极速发展的证据。今年第一季度百度的市场份额增长到77.6%。总营收、运营利润相比2011年同期都增长75%以上。预计二季度营收与去年同期增长接近60%。熟悉百度的分析师们对70%这个数字一定印象深刻，因为类似这样的环比增长已经持续数年。 　　然而，在最近摩根士丹利组织的调研中，基金研究员给出的判断却是，百度未来的日子可能不太好过。举杯欢庆多载，如今百度自身也需要思考，今天到底是百度整个成长周期的顶点还是新的起点? 　　下滑的流量变现曲线 　　目前移动终端带给百度的流量已经占据整个百度流量的20%。但是移动互联网并不能以桌面端那样的货币化，这也是移动互联网行业性的难题，对于百度而言，20%的流量可能仅提供个位数的盈利增长 　　于7月初发表的一组有关百度公司的调研报告引发了投资者的担忧，这则报告来自于6月26日由摩根士丹利组织的上述只有少数人参加的基金研究员对百度的调研。 　　如果互联网世界一直按照原有的轨迹运转下去，如果百度内部不发生大的问题，它就将继续扮演全中国最大的互联网“要塞”角色，成为中国互联网最重要的公司之一。 　　不过，在中国互联网产业垂直细分的时代，在移动互联网对桌面互联网冲击的过程中，在网络广告服务模式不断创新的情况下，外部野蛮生长的竞争者，正迫使百度从业务到企业气质进行重构。 　　整个互联网世界正在发生质变。 　　自移动互联网所诞生的基于应用程序(App)的人机交互模式，以及由此带来的通过应用来访问互联网的使用习惯，正在改变完全基于搜索引擎和浏览器的旧有模式。 　　越来越多的人在使用手机上网，越来越多的应用是放在云端而不是在终端上。有投资人关心，搜索引擎作为互联网的最大入口，百度如何继续保持权力的核心地位，而不被垂直搜索、移动应用削权。在互联网产业化，购物、视频、游戏等逐渐被划分势力割据，形成壁垒的当下，百度如何在内容上保持优势从而维持70%以上的环比增速? 　　百度公司表示，拥抱这样的变化，将百度现有的业务跟这两个趋势连接起来，不仅“拥抱”，同时还去“拓展”，通过开放云计算平台、重构与开发者共享云计算技术、数据、流量和变现优势的生态系统。 　　新业务可能带来更多的市场份额，但是无法解决流量变现的货币化难题。 　　今年的百度联盟大会上，百度公司CEO李彦宏表示，移动互联网和PC互联网是很不一样的，更难赚钱和商业兑现。 　　移动互联网是未来互联网公司一定要涉足而又需要重新适应游戏规则的领域，这是不论投资多少没有回报的资金都要布局的战略要地。在无线领域，从PC端迁移到移动终端的百度并没有天然的优势，而强调社交关系的腾讯搜搜、从开始就定位移动搜索的宜搜更具粘性。离开PC页面的百度无线选择的方式是：与运营商和终端厂商、系统合作。 　　目前的成果斐然。本报记者独家获悉，在今年3月苹果公司库克来华之时，百度公司已经获得了与苹果公司iOS5合作的合同，这意味着，在未来上市的iPhone5上，将内置百度搜索框。 　　百度不惜重金在移动互联网领域的合作并不期待短期盈利，在给记者的回复中，百度公司的态度是：“移动终端的屏幕比较小，使用时间都是碎片的时间，所以广告价值没有PC互联网那么大，即使是在发达的互联网市场或者移动互联网市场，它的变现能力也被认为是远低于PC互联网。” 　　百度希望借助于这些合作，使由于APP应用和其他搜索品牌入口分流的流量，被拦截回百度搜索框。 　　业界的判断是：目前移动终端带给百度的流量已经占据整个百度流量的20%。但是移动互联网并不能以桌面端那样的货币化，这也是移动互联网行业性的难题，对于百度而言，20%的流量可能仅提供个位数的盈利增长。  ","title":"百度的上半场隐患"},{"content":"云计算是分布式处理(Distributed Computing)、并行处理(Parallel Computing)和网格计算(Grid Computing)的发展，是透过网络将庞大的计算处理程序自动分拆成无数个较小的子程序，再交由多台服务器所组成的庞大系统经计算分析之后将处理结果回传给用户。通过云计算技术，网络服务提供者可以在数秒之内，处理数以千万计甚至亿计的信息，达到和”超级计算机”同样强大的网络服务。如下图：   云计算系统的建设目标是将运行在PC上、或单个服务器上的独立的、个人化的运算迁移到一个数量庞大服务器”云”中，由这个云系统来负责处理用户的请求，并输出结果，它是一个以数据运算和处理为核心的系统。 云存储是在云计算(cloud computing)概念上延伸和发展出来的一个新的概念，是指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统。当云计算系统运算和处理的核心是大量数据的存储和管理时，云计算系统中就需要配置大量的存储设备，那么云计算系统就转变成为一个云存储系统，所以云存储是一个以数据存储和管理为核心的云计算系统。 与云计算系统相比，云存储可以认为是配置了大容量存储空间的一个云计算系统。下图是云计算和云存储的架构模型对比。   从架构模型来看，云存储系统系统比云计算系统多了一个存储层，同时，在基础管理也多了很多与数据管理和数据安全有关的功能，在两者在访问层和应用接口层则是完全相同的。","title":"深谈云计算和云存储的关系"},{"content":"云计算经过长时间的发展，很多用户都很了解云计算了，这里我发表一下个人理解，和大家讨论讨论。   1.安全性：云计算的安全性主要体现在两个方面：一是云计算自身环境特有的安全问题，二是云计算会怎样改变现有的软件系统安全防护模式。 前者包括技术层面的安全性问题和政策法规层面的安全性问题。而后者体现在，传统的软件系统的安全性都是建立在本机的基础上，而把这些软件服务架构在云环境中，软件本身的安全性远远不能满足用户的需求，就需要各软件厂商改变原有的安全模式，考虑其产品在云环境中的安全性。   2.可用性：可用性指的是软件系统在给定一段时间内正常工作的时间占总时间的比重。为了提高真正好可用的服务，云计算的提供商正在研究常见故障的分析及预测模型。基于对这些模型的研究，云计算服务商希望能够预测到可能的可用性问题，并通过提前准备复本，提前解决故障，通知用户等手段来避免或者减少这些故障的发生。   3.可伸缩性：具备可伸缩性的软件系统能够通过资源的增加或减少来应对负载的变化，并保持一致的性能。 在云计算环境中，对于应用的垂直伸缩和水平伸缩都可以通过云计算的基础设施平台得到支持。比如在一个基于服务器虚拟化的云基础设施中，垂直伸缩可以通过对虚拟机的资源调整来实现；对于水平伸缩，则可以同构增加或减少应用对应的虚拟机节点来完成。   4.信息保密：在云计算环境中，虽然完整的数据是分成碎片存储在不同的服务器上的，增加了非法用户获得完整数据的难度，但是仍然存在可能。比如非法用户可以暴力破解所有的存储服务器来收集信息，他甚至会破解云存储系统的数据分发逻辑。除此之外，还要考虑各个国家的法律政策。   5.高性能：我们着重分析当前云计算环境中最流行的技术的性能，包括服务器虚拟化技术，大规模数据处理技术和分布式存储技术。 目前流行的半虚拟化系统中，例如Xen和Vmware ESX，虚拟机管理系统只会带来少量的额外CPU开销，而内存和I/O的性能开销比较严重。对于现在的虚拟化技术来说，原有的CPU密集型的应用能够比较好的迁移到虚拟化平台，而原有的内存或I/O密集型应用，例如数据库，就会遇到较大的麻烦。 作为云计算大规模数据处理的事实标准框架，MapReduce也存在性能问题。首先是适用性导致的性能问题，因为Google设计的MapReduce是针对搜索引擎的，并不是完全从通用的出发点考虑。其次，MapReduce的原语设计也会导致性能问题。此外，由于MapReduce运行在分布式系统上，系统中的节点通过网络进行连接，因此运行过程中需要大量的网络消息通信，造成额外的通信开销。   6.标准化：如果用户希望维护多个云之间的数据同步，应用版本同步，或者应用云之间的互操作，那么最理想的情况是通过一种方法将多个云数据中心抽象为一个，一次来降低使用的复杂性。这个工作职能同构标准化来完成。      ","title":"讲解6项云计算的挑战"},{"content":"GFS是 google自己设计的分布式文件系统，是大量安装有Linux操作系统的普通PC构成的集群系统。整个集群系统由一台Master(通常有几台备份)和若干台TrunkServer构成。GFS中文件备份成固定大小的Trunk分别存储在不同的TrunkServer上，每个Trunk有多份拷贝，也存储在不同的TrunkServer上。Master负责维护GFS中的 Metadata，即文件名及其Trunk信息。客户端先从Master上得到文件的Metadata，根据要读取的数据在文件中的位置与相应的 TrunkServer通信。本文介绍Google云计算的基础架构。 据介绍，google的每一份数据至少放在三个不同位置的机器上，所以可靠性是可以高度保证的；而且操作GFS和操作本地磁盘一样简单易行。 目前Google拥有超过200个的GFS集群，其中有些集群的计算机数量超过5000台。Google现在拥有数以万计的连接池从GFS集群中获取数据，集群的数据存储规模可以达到5个PB，并且集群中的数据读写吞吐量可达到每秒40G。     MapReduce是一个编程模式，它是与处理/产生海量数据集的实现相关。用户指定一个map函数，通过这个map函数处理key/value（键/值）对，并且产生一系列的中间key/value对，并且使用reduce函数来合并所有的具有相同key值的中间键值对中的值部分。MapReduce的主要贡献在于提供了一个简单强大的接口，通过这个接口，可以把大尺度的计算自动的并发和分布执行。 常见的应用例子：在很大的文档集合中通机每一个单词出现的次数.map函数检查每一个单词，并且对每一个单词增加1到其对应的计数器;reduce函数把特定单词的所有出现的次数进行合并。其他例子： URL访问频率统计：map函数处理webpag请求和应答（URL，1）的log。Reduce函数把所有相同的URL的值合并，并且输出一个成对的（URL，总个数）。 逆向Web-Link，map函数输出所有包含指向target URL的source网页，用（target,source）这样的结构对输出。Reduce函数局和所有关联相同target URL的source列表，并且输出一个(target,list(source))这样的结构。 分布式排序：map函数从每条记录中抽取关键字，并且产生(key,record)对。reduce函数原样输出所有的关键字对。 BigTable：一种用于管理超大规模结构化数据的分布式存储系统，可以管理分布在数以千计服务器上的以PB计的数据。Bigtable API将包括用于创建、编辑表和列，改变群集、表、列元数据的函数。ＢＴ不支持完全的关系数据模型，而是为客户提供了简单的数据模型，让客户来动态控制数据的分布和格式。BT只能支持大部分SQL。     Google App Engine Google App Engine是一个开发、托管网络应用程序的平台，使用Google管理的数据中心。它在2008年4月发布了第一个beta版本。Google App Engine使用了云计算技术,它跨越多个服务器和数据中心来虚拟化应用程序。当前，Google App Engine支持的编程语言是Python和Java. http://appengine.google.com Hadoop ◆Hadoop(http://hadoop.apache.org)是apache下面的一个分布式并行计算框架，是从lunece中抽取出来的一个框架。Hadoop主要是由HDFS、MapReduce和Hbase组成。 ◆HDFS是Google File System（GFS）的开源实现。 ◆MapReduce是Google MapReduce的开源实现。 ◆HBase是Google BigTable的开源实现 Google的上述分布式框架很有创造性，而且有极大的扩展性，使得Google在系统吞吐量上有很大的竞争力，但是用C++写的。因此Apache基金会用Java实现了一个开源版本hadoop，支持Fedora、Ubuntu等Linux平台。以上介绍Google云计算的基础架构。","title":"详聊Google云计算的基础架构"},{"content":"当前的经济危机使云计算成为一个热门的话题，创业公司和小公司为了节约资金都使用的是互联网上的虚拟机，大公司一般都会将应用如客户关系管理系统放到如Salesforce.com这样的云服务提供商构建的云中，但专家说，在将基础架构迁移到云中时要小心安全陷阱。 著名安全公司SensePost的技术主管Haroon Meer在黑帽大会上说：“云计算的低端用户虽然可以节约金钱，危险的是高端用户在没有任何审核的情况下使用它”，他说他的团队对Amazon的EC2进行了深入的研究。他们的实验表明很多公司都不会扫描第三方提供的机器，恶意实例可以很容易地创建木马访问公司的内部网络。 记住这些陷阱，下面的5个教训来自黑帽大会上的演示。 1、云计算很少提供法律保护 使用云计算的公司需要认识到云中的数据需要服从法律法规，政府可能在没有出具传票的情况下对数据进行检索和拷贝，iSec首席安全顾问Alex Stamos认为云提供商更关心的是如何保护自己而不是客户，因此不要过分将希望寄托在服务协议上写的法律保护条款。 Stamos说：“所有云服务商都有训练有素的法律团队，当你签署了服务协议后，意味着你基本上一无所有，如果因为服务商的失误导致用户不能正常使用，用户不能投诉服务商，如果因为数据中心的失误导致数据丢失，服务商也不承担任何责任”。看上去就是一个不平等条约。但他同时补充道，云服务商发现安全问题一般会即时补上，如果语言沟通没有问题，也能得到一些帮助。 2、硬件不是你的 Stamos警告，如果想对服务商进行审核和进行测试，要记住硬件不属于自己，如果要进行漏洞扫描和渗透测试，需要经过云服务商的明确许可，否则，客户就会被认为是在攻击系统。象亚马逊的服务协议中就明确指出了，客户可以在系统上进行测试，这一点很重要。因为有明确的协议许可使用那些机器进行测试是会受到法律保护的。 3、需要强有力的策略和用户教育 由于云计算为企业带来了巨大的好处，如允许从任何地方访问数据，解决了IT维护人员的一大难题，永远在线服务也意味着更容易遭受钓鱼攻击。因此对最终用户进行风险教育显得格外重要，不仅仅是为了他们自身，更是为了公司的需要。但要教育好那些非技术职员不上当钓鱼攻击的当很困难，在SaaS模式下，钓鱼式攻击不仅仅是个个人问题，还成为企业面对的一个大问题。 4、不要相信虚拟机实例 SensePost的Meer说“在使用服务商提供的虚拟机时，如第三方供应商在亚马逊EC2平台上创建的实例时，公司不应该相信这些系统”。 公司的研究人员扫描了大量的预配置实例，发现认证密钥在缓存中，信用卡数据和恶意代码被隐藏在系统中，但他们发现大部分用户并不关心安全问题。 Meer建议公司应该建立自己的内部认证机制，要从技术上和法律上保护自己。 5、重新考虑你对云计算的假设 在考虑安全时，企业信息管理人员需要重新思考他们之前对云安全的假设。例如，当部署一个应用到虚拟数据中心的计算机实例上时，虚拟系统相比物理系统的平均可用资源要少得多，一般不会如你预期的那样美好，因此可以猜测资源进行随机分配时也是有限度的。 原文出处：http://www.infoworld.com/d/cloud-computing/5-lessons-dark-side-cloud-computing-669?source=rss_infoworld_news 原文名：5 lessons from the dark side of cloud computing 作者：Robert Lemos","title":"五大云计算漏洞逐个数"},{"content":"近期的一次采访中，相关专家指出，云计算现在有十座大山，如果厂商和用户都难以翻过这十座大山，云计算会和13年前NC、NCA一样的下场。 十座大山如下： 1、没有任何厂商、任何组织对云计算有任何的准确定义、和文字上的共识； 2、云计算的初步实现到彻底实现无任何流程、无时间表； 3、没有任何厂商对云计算有任何产品研发计划和市场宣传计划； 4、没有厂商对云计算的过程、结果有任何的控制和承诺； 5、没有任何厂商对云计算的实现与否负任何经济责任； 6、人类对自己资源的贪婪阻碍云的使用，这好像自己已有了140平方米的大房子，不会将自己衣物放在一个叫“云”的公共储藏间一样的可信； 7、最重要的是安全需求，网络犯罪的频繁、技术复杂的发展速度超出了云计算的普及速度，用户不会为了占有云的公有的资源，冒自我信息的安全风险； 8、如果说谷歌、IBM倡导云计算可以理解,因为他就是云,他希望所有计算都在他的平台上,云计算和 虚拟化计算虽然微软和Wintel等也在忽悠，喊出的是为了节省资源、简化桌面系统，充分利用云端的资源，这和微软所推出的Windows桌面操作系统日 趋功能复杂度增加呈现自我矛盾状，也和英特尔公司不断加快的CPU速度增加呈现自我矛盾状，如果说云、用云，还需要本机那么快的速度和资源干什么？ 9、目前，乃至5年以内，网友平均独享宽带1M—10M资源之前，云计算对网友无即用即取的安全感、方便感； 10、NC、NCA失败于90年代中期；P2P也是雷声大雨点小于2003年；网格技术更极少被应用于2006年；这些技术应用的破产与半破产，预示了云计算会做到同样的下场。 “能回顾多远，就能展望多远”，这是英特尔一位著名的领导人说的，正是云计算难越十座大山的真实写照。","title":"云计算十大不可行"},{"content":"据国外媒体报道，针对近期有关谷歌即将推出GDrive云计算服务的传言，以及“云计算标志着PC的终结”这一说法，美国知名IT杂志《PCMagazine》主编兰斯-乌兰诺夫(LanceUlanoff)今天撰文对此进行了反驳。 AD： 虽然云计算技术有可取之处，但是在用户真正开始使用这种服务之前，谷歌等云计算厂商还是要面临8个关键问题。 谷歌、微软、雅虎以及其他所有科技公司都在竞相投入“云计算（CloudComputing）”领域。从很多方面来看，这都是一件好事。无论身处何地，用户都可以通过更为轻巧的客户端来访问存储在服务器上的数据。我们所需要的只是一个网络浏览器。 但是如果你做过飞机或是爬过高山，你就会有这种体会，在“云”中的感觉并不好受，因为那里缺氧。稀薄的空气使得人们变得愚蠢，以至于有人开始认为：“云计算将标志着PC的终结。” 虽然尚未真正露面，但是最近关于谷歌即将推出GDrive云计算服务的传言却广为流传。与此同时，关于云计算将终结PC的论调也再度兴起。其实，即便谷歌真的推出GDrive，也没有什么大不了。GDrive只不过是一种基于云计算技术的个人数据存储服务，用户可以将图片、文档、电子邮件等数据存储在谷歌提供的“云”中。微软的WindowsLiveDkyDrive也提供类似的服务。基于云计算的存储服务并不是什么新鲜的创意。事实上，它存在的时间几乎与互联网面向公众推出的时间差不多长。例如美国在线（AOL）的Xdrive以及其他数不清的类似产品均属此类。我曾经用过其中的部分服务，你猜最后怎么样？这些服务都消失了，存储在其中的数百万字节的个人数据也都不见踪影。 如今的互联网已经与创立之初有着天壤之别。宽带无处不在，越来越多的人在为自己的数据丢失或无法访问而担忧。尽管对于某些人而言已经是稀松平常的事情了，但还是有很多人开始慢慢适应将图片和视频存储在网络服务器上。尽管如此，对于大多数而言，将公共或私人数据存储在网络或“云”中仍然刚刚起步。 如今，已经有数以百计的基于网络的应用程序，谷歌毫无疑问是这方面的领导者。谷歌已经推出了诸如Picasa图片、Gmail电子邮件以及YouTube视频等多种服务，这也迫使微软推出了许多类似的产品。因此，也使得基于桌面的计算即将走向终结的说法看似言之凿凿。 我认为，事情并不会发展的如此之快。在用户加大对云计算的使用率之前，谷歌以及其他大力推广云计算技术的厂商需要首先回答以下8个问题。 1、数据存储于何处？ 数据究竟是被存储在华盛顿州还是加州的服务器上？或许分布于不同的区域。我可不相信，当用户对自己的重要数据被存储在何地都一无所知时，他们仍会满意。这类服务是否应该为用户提供相关的信息，以便让用户清楚自己的数据究竟被存储于何地？ 2、如果数据无法访问该怎么办？ 如果一切正常，那么促使用户采用云计算技术自然是一件好事。但是很多用户并不清楚，他们的路由器没准会突然宕机。有时，没准简单的重启就能解决问题。这种情况下，用户会手足无措，只能求助于云计算厂商的技术支持，之后，包括谷歌在内的厂商会尝试着为用户找出数据无法访问的原因。 3、我不能做什么？ 目前为止，我们看到的几乎所有的基于网络的应用程序都无法与其对应的桌面软件媲美。毫无疑问，用户会感到失落并希望了解为什么GoogleDocs不如微软Word？ 4、云计算是否安全？ 我们生活在一个多疑的社会中。人们被告知不可以泄露自己的个人信息，但是存储在“云”中的数据却会包含私人信息。如果厂商只是表示“我们已经将你的数据隐藏。”是不够的，他们需要提供更多的保障。 5、我是否需要在家中备份数据？ 简而言之一句话：“当然需要！”用户或许会认为这与云计算的初衷完全不符，其实未必。即使你完全在本地进行运算，你依然应该在硬盘上进行安全备份，而且最好将其放到保险箱或其他不宜暴露的地方。小心一点总没有错。云计算厂商在强调其优势的同时，也应当向用户传达这种信息。 6、我的文件是否过大？ 我用硬盘摄像机拍了许多视频，还用1200万像素的数码相机拍摄了大量300万像素的照片，更不用说还有大量的音乐文件。你是否有足够的空间存储这些文件？我相信谷歌有，前提是你愿意付费。虽然总会有一些免费的选择，但是如今的用户却总会在非常短的时间内消耗掉大量的存储空间。用户很快就会因为空间不够用而愤怒，因为他们为此花了50美元的年费，更不用说那些花费更高的专业用户了。 7、如果你破产了怎么办？ 我相信谷歌的高官们会笑着说：“亲爱的，我们永远不会破产。”我相信他们是对的。但就算是大公司有事也会放弃或关闭某些业务。万一有那么一天，我该怎么办？ 8、如果我忘记付费了怎么办？ 我希望不会因此出什么状况。我建议谷歌在收到欠款前封锁用户的数据，但是千万不要删除这些数据。 我对于云计算技术没有敌意，而是针对那些喜欢谷歌和憎恨微软、英特尔的人，他们希望投入“云”中，而放弃现有的PC和操作系统。的确，很多人都会使用谷歌的应用程序来访问“云”中的数据。但是微软和其他数不清的公司同样会提供这样的产品和服务。然而，大多数服务仍然无法摆脱“过时的”PC和硬盘，同样无法摆脱“过时的”操作系统，而且这个操作系统很可能就是Windows。","title":"8大关键问题扑向Google云计算"},{"content":"华为今天公布了2012年上半年业绩，销售收入1027亿元，同比增长5.1%；营业利润87.9亿元，营业利润率8.6%，营业利润环比上升20.3%，同比下降22.0%。 此外，根据华为发布的公告称，截至2012年6月，华为已在全球发布的80个LTE商用网络中部署了38个，可为全球2亿人口提供LTE服务。 在企业业务方面，华为收购了华为赛门铁克的股权项目，保持了华为在云计算领域的领先地位，并进一步完善了面向企业市场的ICT解决方案。 在终端业务方面，华为发布了其精品机系列——Ascend P1、Ascend D1等产品，并陆续在中国、西欧、日本、澳大利亚、加拿大等国家和地区上市。据易观国际数据显示，在中国智能手机市场，华为以12.16%的份额排名第二。 华为首席财务官孟晚舟表示，华为在2012年明确了管道战略，进一步围绕管道战略进行聚焦，并同时实施“有效增长，提升效率”的策略，推动经营效益及运作效率的持续提升。","title":"华为上半年销售收入1027亿元 同比增长5.1%"},{"content":"时下云计算如火如荼，众多企业纷纷推出云计算相关的应用，不少还搭建企业私有云和少数公有云（代表为Amazon）。然而，业界仍然缺乏一套实用的云计算管理平台，很大程度上提高了云计算应用的门槛，制约了云服务的发展。 作为开源的IaaS（Infrastructure as a Service）平台，OpenStack遵循Apache许可，其长期设计目标为同时服务公有云和私有云，提供统一的开源资源管理平台。 OpenStack是美国国家航空航天局（NASA）和Rackspace合作研制的云计算管理软件，最初目的是存储大量的空间视频、图片等信息，随着云计算需求的增长逐渐成长起来。 自2010年7月项目成立开始，OpenStack就收到广泛关注和支持。项目成员不乏业界巨头，包括Cisco、Citrix、HP、Intel、Dell、IBM、Microsoft等。其中Dell和HP公司还利用OpenStack创建了自己的云计算解决方案，当然，所使用的企业版本与开源版本有所区别。经过两年左右的发展，该项目已经吸引了超过160家公司和2600多名开发者，足可见认可程度。 目前，OpenStack项目由若干子项目组成，包括计算组件Nova、存储组件Swift、镜像管理组件Glance、认证组件Keystone、前台组件Horizon和网络管理组件Quantum。其中前三个组件是OpenStack的核心，经过长期开发和完善，已经较为成熟。大部分的组件都是松耦合联系，支持分布式，较好的保证了扩展性。 OpenStack在虚拟化技术上支持Xen、KVM、VMware、ESX、LXC、QEMU、UML等，并通过统一的虚拟层（Libvirt）来调用，实现底层对用户透明。对现有虚拟化技术较为全面的支持使得OpenStack可以被广泛部署在多种场景，而不用担心底层需要选取哪家技术实现。同时，OpenStack还支持亚马逊的EC2和S3的API，使得面向AWS（Amazon Web Services）开发的应用可以轻松的实现迁移。 OpenStack的版本命名与Ubuntu类似，按照字母顺序，分别为Austin、Bexar、Cactus、Diablo、Essex。最新版本为第五版的Essex，这一版经过了较长的开发周期。从第五版开始，OpenStack开始注意代码的质量和用户的体验，真正可以作为较为实用的云计算管理平台。 另外，根据最新的消息，OpenStack将在今年的4月16-18日在美国旧金山举办OpenStack Conference & Design Summit峰会，讨论该项目的未来发展，大家不妨略作关注。 客观的看，OpenStack对推动云计算的发展有着积极的作用（类似的项目包括OpenNebula、Eucalyptus等），但目前的版本，功能还比较简单，面向的群体也有限。同时，不支持网络虚拟化等新兴技术，在某种程度上制约了OpenStack的功能和性能。希望OpenStack在未来能更加完善，成为功能完善而又易用的云计算平台；也希望有更多的优质开源云计算项目能够成长起来，促进产业的发展。对OpenStack有兴趣的朋友可以尝试访问官方网站，或者trystack.org，简单注册后即可进行体验。","title":"OpenStack – 开源云计算项目"},{"content":"首先承认自己很菜，学习使用java和android应用编程才一年而已（2011.8月底因为项目关系开始学的），而设计模式这个词在我大脑中出现的时间迄今也就是五六个月而已(应该算是2012.1月左右吧,非计算机专业生)，从刚开始的完全不懂，到现在能够简单的说出几个模式道道来，也是因为在做项目的过程中遇到了很多困难，强烈感受到了那种饥饿感，及生存的压力，决定从心底灵魂深处开始对自己进行面向对象的革命，先后看了代码到底应该怎么写和面向对象的思想的方面的书籍，然后又开始啃设计模式了(没办法，刚开始啃不动啊）。 啃了一些后有了一些反思，可是模式太多了，而工作中用到的机会很少，发觉这样硬啃实在是没什么意思，没有项目经验看起来好吃力。 其实，我感觉设计模式就存在日常生活当中，它是一种生活中遇到问题时解决问题的哲学，它是很多事物背后存在的价值意义。设计模式就是人们根据生活中的经验认知在面临另一领域的问题时进行种种隐喻所想到的一些总结。————这就是我所认为的设计模式，所以我希望：能够从生活中找到设计模式的原型，一来，加深对设计模式的印象，为接下来用到设计模式时能够有所辨从，然后再去认真按照这种思想去尝试解决问题。这里也许有人说了，你怎么知道这种解决问题的思路就是对的呢？我觉得吧，如果按照这个思想不能解决问题，只能说明我对事物的认知有所偏差，导致我后续的选取解决问题的模式的行为出现了偏差。二来，我从对设计模式的学习映射到现实世界，能够帮助我更好的理解这个世界，发现这个世界不为人知的一面。我既用现实世界来学习设计模式，也用设计模式来探索世界，两者相辅相成，长此下去，希望自己的小宇宙定能够提前爆发:-P。 所以我学习设计模式的方式是：先学习设计模式的思想，对整个人进行心灵的洗礼，灵魂的升华，只要境界先达到了，到时候自然知道该用哪种设计模式，这时再认真研习其具体在代码语言中的使用套路。 顺便扯一点儿关于隐喻的重要性: 隐喻的定义就自己百度一下吧。 隐喻真得是太重要了，我觉得隐喻在软件世界里的价值相当于擎天之柱，没有它，软件世界的天根本就撑不起来，顶多能撑起来一个帐篷就不错了。在几乎所有领域都能够看到隐喻的作用。 在计算机领域有电脑，因特网，电子邮件，窗口，病鼠，标毒，木马，bug，数据库，菜单，云计算，码农，芯片中的桥，电路等等太多了。 隐喻是我们探索未知领域的好帮手。 交流的潜力是巨大的，此篇为设计模式学习之开篇，希望能够以我的隐喻想象能够起到抛砖引玉的作用，让大家都参与进来，表达出大家自己心中的设计模式是什么样子的。","title":"设计模式学习————初开混沌篇"},{"content":"OneStack：在Ubuntu12.04（precise）上一键安装部署Opentack Essex 提醒：如果你喜欢折腾，喜欢自己一步一步安装各个功能组件和配置conf文件，你可以略过此文。本文工具可以在裸机和虚拟机一键部署真实的OpenStack云计算平台，主要步骤是配置网络、数据库、keystone、glance、nova、dashboard、创建镜像和启动实例等，代码内有详细注释。这只是学习Opentack的入门的一步，深入研究可以参考附录3给出的部分资料和社区。 2012.07.14更新： 收到很多邮件和提问，精力有限没法一一回复，在此致歉。随手把记录的一些问题和解决方法整理了，供大家参考。 详见《OpenStack安装部署管理中常见问题解决方法（OpenStack-Lite-FAQ）》。 2012.07.09更新： 很多人来信问我单网卡怎么设置，以及其它网络问题，我后面写了一篇介绍OpenStack网络的，详见《OpenStack云平台的网络模式及其工作机制》。 2012.07.02更新： 1、受邀在vpsee上对这个项目进行了较为详细的介绍（OneStack：Ubuntu 12.04 上一键自动部署 OpenStack），对于项目来源、相关考虑、项目结构、具体安装步骤（参数设置和前期工作）和预期等做了说明，可以参考。 2、希望增加高可用性的云计算部署，构建OpenStack的高可用性（HA，High Availability） 对高可用性进行了初步介绍，欢迎提出意见和建议。 一、项目(OneStack)地址： http://onestack.googlecode.com 喜欢git或者github的请去 https://github.com/Kayven/OneStack 不希望同行们把过多精力花在OpenStack的安装部署上（以后应该会改进），而是对其机制原理、工程实践、性能调优、应用服务等深入研究探讨。 所以提供这个一键部署的工具，帮助大家快速建立环境实验生产实践。项目结构如下： oneStack.sh（一键部署 all-in-one 的 OneStack，简单安装的主要文件）； setup_base.sh（安装基本系统）； setup_test.sh（添加镜像和实例）； addComputeNode.sh（增加计算节点）； delStack.sh（只卸载nova、glance、keystone等）； delAll.sh（卸载所有安装的组件和工具）； resetStack.sh（清空数据库，镜像、网络和实例等，重新上传镜像、创建实例）； addClient.sh（添加客户端，nova管理等）； HAStack 目录（OneStack 的高可用性，希望更多人可以提出自己的解决方案）。 二、部署(OneStack)步骤 简单部署OneStack： wget http://onestack.googlecode.com/files/oneStack.sh && chmod +x oneStack.sh && ./oneStack.sh 完整部署OneStack： Just checkout and run it! 1. Setup a fresh Ubuntu Precise(12.04) Sever OS. 2. checkout svn checkout http://onestack.googlecode.com/svn/trunk/ onestack-read-only 3. run it! cd onestack-read-only/ && ./oneStack.sh （如何简单配置参数见留言说明，或者见http://onestack.googlecode.com，或者见脚本注释） （多节点的部署类似，只需要在计算节点设置并执行addComputeNode.sh） 三、项目(OneStack)说明： 在Ubuntu12.04（precise）上安装部署Opentack Essex 只需要一个文件即可完成全部功能组件的部署：http://onestack.googlecode.com/files/oneStack.sh 里面含有详细的注释说明，看完整个脚本相当于看完了安装文档； svn整个项目只是多一些辅助工具，包括重置、重新安装、卸载等; 也欢迎同道人补充和完善更多的功能，适用于更多的操作系统和应用场景。 四、项目(OneStack)来源： 类似项目有DevStack，但是DevStack是使用screen安装OpenStack，重启服务器会出现一些问题，没有提供重启、重置等有用功能； 由于组件独立分散，安装过程过于繁琐，可以抽象成通用的项目供大家方便使用； 官方提供了一个比较完善的入门文档，但是，这一步一步下来得做很多无用功，容易漏错而引起很多莫名和头疼的问题； 本项目不像devstack只是提供实验环境，而是可以实际部署使用，可以自己修改配置，按需增加组件和功能，实现一键部署，可扩展使用。 五、项目(OneStack)描述： 一键完整部署OpenStack，可以自定义配置、方便地扩展功能组件，无交互地自动部署； 安装过程不需要等待配置： 功能齐全，附带了卸载、重置、添加计算节点等工具 可以卸载主要的opentack组件，包括nova、glance、keystone等； 可以重置数据库和配置，重新安装openstack组件； 可以根据需要自行更改脚本，方便部署自己的云计算平台。 经过多次测试，完整在VMware虚拟机上部署OpenStack       测试环境：VMware ESXi 5.0虚拟Dell R210服务器，其中一个虚拟机上部署Opentack，启动多个实例，正常运行；远程访问和web管理正常；重启、重置、重新安装都正常。       系统要求：双网卡，64位机器，支持VT技术 脚本运行过程会做如下工作： 配置网络相关； 安装和配置数据库； 安装和部署身份管理组件keystone； 安装和部署镜像管理组件glance； 安装和部署控制与计算组件nova； 安装和部署web管理组件dashboard； 上传和添加ubuntu12.04镜像； 设置项目安全规则和密钥； 启动实例，并正常运行。 欢迎反馈，谢谢. 本人尽力做到不出差错，但是限于学识和眼界，难免有考虑不周、冗余、没有最优化或者表达不好之处； 希望大家有任何意见建议随时联系我。 附录1： 为了方便大家查阅、讨论、交流、review和完善，在此贴出主要代码。   #!/usr/bin/env bash # **oneStack.sh** is a tool to deploy complete and real OpenStack cloud computing service. # This script installs and configures various combinations of *Glance*, # *Horizon*, *Keystone*, *Nova*, *Mysql* and others. # Hily.Hoo@gmail.com (Kayven) # Learn more and get the most recent version at http://code.google.com/p/onestack/ set -o xtrace ## 请使用root执行本脚本！ ## Ubuntu 12.04 (\"Precise\") 部署 OpenStack Essex（或者ubuntu11.10版本） ## 一：准备系统 ## 1：下载ubuntu 12.04. 服务器版本 ## http://mirrors.ustc.edu.cn/ubuntu-releases/12.04/ubuntu-12.04-server-amd64.iso ## 2：安装OS ## 最小化安装，只需要安装ssh server就可以。 ## 装完系统后 更新源里的包,更新系统。确保你装的是最新版本的包。 ## 3：设置root权限 ## 为了简单，全部都是用root来运行。 if [ `whoami` != \"root\" ]; then         sudo passwd         exec su -c 'sh ./oneStack.sh' fi ## 4：设置参数和环境配置，直到两行#号结束 ## 这个配置以后就不需要更改了，比如看到192.168.139.50等ip，不用更改，脚本会自动替换这些初始值。 ## 可以变动的是，第500行的image的下载；或者去掉第七步开始的部分（上传镜像，创建实例） ########################################################################## ########################################################################## ## 如果原来安装过OpenStack，请先执行 ./delStack.sh ## 1）配置参数 ## 数据库相关 MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"} NOVA_DB_USERNAME=${NOVA_DB_USERNAME:-\"novadbadmin\"} NOVA_DB_PASSWD=${NOVA_DB_PASSWD:-\"cloud1234\"} GLANCE_DB_USERNAME=${GLANCE_DB_USERNAME:-\"glancedbadmin\"} GLANCE_DB_PASSWD=${GLANCE_DB_PASSWD:-\"cloud1234\"} ## 注意：单网卡的去掉interfaces的eth1，并把nova.conf里面eth1改完eth0即可！ ## 自行检查下面network/interfaces的两个网卡设置 ## 本机器外网ip （包括局域网的内网ip，相对于OpenStack内网而言的） OUT_IP=\"192.168.139.50\" OUT_IP_PRE=\"192.168.139\" ## nova-network内网ip IN_IP=\"10.0.0.1\" IN_IP_PRE=\"10.0.0\" ## flat的起始ip FLAT_IP=\"10.0.0.40\" ## 浮动ip的起始值 FLOAT_IP=\"192.168.139.225\" ## 选择虚拟技术，裸机使用kvm，虚拟机里面使用qemu VIRT_TYPE=\"qemu\" ## token, 登录dashboard密码（用户名admin） ADMIN_TOKEN=\"admin\" ########################################################################## ## 2）检查系统是否ubuntu12.04，据反映11.10也可以正常安装，可以去掉这一段检查 # Determine what system we are running on.  This provides ``os_VENDOR``... # Determine OS Vendor, Release and Update #if [[ -x \"`which lsb_release 2>/dev/null`\" ]]; then     os_VENDOR=$(lsb_release -i -s)     os_RELEASE=$(lsb_release -r -s)     os_UPDATE=\"\"     os_CODENAME=$(lsb_release -c -s) #fi if [ \"Ubuntu\" = \"$os_VENDOR\" ]; then     DISTRO=$os_CODENAME else     echo \"The os didn't seems to be Ubuntu.\"     exit 1 fi echo $DISTRO if [ \"precise\" != ${DISTRO} -a \"oneiric\" != ${DISTRO} ]; then     echo \"WARNING: this script has been tested on oneiric or precise\"     exit 1 fi ############################################################################ ## 3）以下系统配置，语言中文支持、国内APT源、网络设置（两个网卡），可以自行配置，注释掉这些步骤。 ## locale ############################################################################ ## 4：设置网络 SOURCE_FILE=${SOURCE_FILE:-\"/etc/apt/sources.list\"} cp $SOURCE_FILE $SOURCE_FILE.bak cat <<APT >$SOURCE_FILE deb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse deb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiverse deb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse deb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse deb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse deb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse deb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse deb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse deb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse deb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse APT #sed -i 's/debian.ustc.edu.cn/mirrors.163.com/g' $SOURCE_FILE # network configure NETWORK_CONF=${NETWORK_CONF:-\"/etc/network/interfaces\"} if ! grep -q eth1 $NETWORK_CONF; then         cat <<INTERFACES >$NETWORK_CONF auto lo iface lo inet loopback # The primary network interface auto eth0 iface eth0 inet static pre-up ifconfig eth0 hw ether b8:ac:6f:9a:ee:e4         address 192.168.139.50         netmask 255.255.255.0         network 192.168.139.0         broadcast 192.168.139.255         gateway 192.168.139.253         dns-nameservers 210.72.128.8 auto eth1 iface eth1 inet static pre-up ifconfig eth1 hw ether b8:ac:6f:9a:ee:e4         address 10.0.0.1         netmask 255.255.255.0         network 10.0.0.0         broadcast 10.0.0.255 INTERFACES         /etc/init.d/networking restart fi ## 以上系统配置，可以自行配置，注释掉这些步骤。 ############################################################################ ############################################################################ apt-get update   ## 5：安装bridge apt-get install -y bridge-utils ## 6：设置NTP apt-get install -y ntp if ! grep -q fudge \"/etc/ntp.conf\"; then         cat <<NTPconf > /etc/ntp.conf server ntp.ubuntu.com iburst server 127.127.1.0 fudge 127.127.1.0 stratum 10 NTPconf fi service ntp restart ## 7：设置Iscsi apt-get install -y tgt ssh w3m unzip wget curl expect ## 安装iscsi客户端、安装rabbitmq apt-get install -y open-iscsi open-iscsi-utils apt-get install -y rabbitmq-server memcached python-memcache apt-get install -y kvm libvirt-bin qemu qemu-kvm ## 二：安装mysql和创建相关数据库 ## Openstack的组件：nova，keystone，glance，都需要数据库。不过目前官方建议keystone，采用sqlite存储，而不用mysql存放。所以我们只需要创建nova和glance两个数据库就可以。 ## 1：安装mysql ## 过程中，会提示你输入root密码。通过debconf-set-selections读取跳过这一步. #MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"} ## apt-get install debconf debconf-utils cat <<MYSQL_PRESEED | debconf-set-selections mysql-server-5.1 mysql-server/root_password password $MYSQL_PASSWD mysql-server-5.1 mysql-server/root_password_again password $MYSQL_PASSWD mysql-server-5.1 mysql-server/start_on_boot boolean true MYSQL_PRESEED apt-get install --no-install-recommends -y mysql-server python-mysqldb ## chkconfig mysql on ## 让mysql支持外部访问 sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf  service mysql restart if [ ! -s /etc/apache2/httpd.conf ]; then         echo \"ServerName localhost\" >> /etc/apache2/httpd.conf         /etc/init.d/apache2 restart fi ## 2：安装phpmyadmin （可选） cat <<PHPmyadmin | debconf-set-selections phpmyadmin phpmyadmin/reconfigure-webserver  text     apache2 phpmyadmin phpmyadmin/dbconfig-install       boolean  true phpmyadmin phpmyadmin/app-password-confirm   password $MYSQL_PASSWD phpmyadmin phpmyadmin/mysql/admin-pass       password $MYSQL_PASSWD phpmyadmin phpmyadmin/password-confirm       password $MYSQL_PASSWD phpmyadmin phpmyadmin/setup-password         password $MYSQL_PASSWD phpmyadmin phpmyadmin/mysql/app-pass         password $MYSQL_PASSWD PHPmyadmin apt-get --no-install-recommends -yq install phpmyadmin ## 3：创建数据库 ## nova数据库，   管理员：novadbadmin，密码是：cloud1234 ## glance数据库，管理员：glancedbadmin，密码是：cloud1234 ## 如果你修改密码，后面很多配置都需要相应更改。 ##   mysql -uroot -p ##   CREATE DATABASE nova; ##   GRANT ALL PRIVILEGES ON nova.* TO 'novadbadmin'@'%' IDENTIFIED BY 'cloud1234'; ##   CREATE DATABASE glance; ##   GRANT ALL PRIVILEGES ON glance.* TO 'glancedbadmin'@'%' IDENTIFIED BY 'cloud1234'; ##   quit mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS nova;\" mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE nova;\" mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON nova.* TO '$NOVA_DB_USERNAME'@'%' IDENTIFIED BY '$NOVA_DB_PASSWD';\" mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS glance;\" mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE glance;\" mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON glance.* TO '$GLANCE_DB_USERNAME'@'%' IDENTIFIED BY '$GLANCE_DB_PASSWD';\" if [ -e /var/lib/keystone/keystone.db ]; then rm -rf /var/lib/keystone/keystone.db fi ## 三：安装和配置keystone ## Openstack的各个组件，keystone是最难配置。搞定keystone，后面应该就没啥麻烦。 ## 1：安装keystone apt-get install -y keystone python-keystone python-keystoneclient ## 2：配置keystone ## 如果更改token，需要修改 /etc/keystone/keystone.conf 两个地方 ##    默认定义的token就是ADMIN，web登录admin就是这个密码 ##    [DEFAULT] ##    bind_host = 0.0.0.0 ##    public_port = 5000 ##    admin_port = 35357 ##    admin_token = ADMIN ##    另外一个地方是 ##    [catalog] ##    #driver = keystone.catalog.backends.sql.Catalog ##    driver = keystone.catalog.backends.templated.TemplatedCatalog ##    template_file = /etc/keystone/default_catalog.templates ##     sed -i -e 's/keystone.catalog.backends.sql.Catalog/keystone.catalog.backends.templated.TemplatedCatalog\\ntemplate_file = \\/etc\\/keystone\\/default_catalog.templates/g' /etc/keystone/keystone.conf sed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/keystone/keystone.conf service keystone restart ## 3: 导入数据 ## 这个比较有技术含量。通过修改devstack的keystone_data.sh 脚本。实现导入数据。如果你上面的设置都和我一样，那么其实直接运行这个脚本就可以。 ## wget http://www.hastexo.com/system/files/user/4/keystone_data.sh_.txt -O keystone_data.sh wget http://onestack.googlecode.com/files/gen_keystone_data.sh -O gen_keystone_data.sh chmod +x gen_keystone_data.sh ## 运行脚本, 如果你修改的默认的用户名和密码，你需要修改脚本。修改两个地方 ## 第一个是登录dashboard的admin的密码 ## 第二个就是keystone的token ## #ADMIN_PASSWORD=${ADMIN_PASSWORD:-hastexo} ## ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin} ## SERVICE_PASSWORD=${SERVICE_PASSWORD:-$ADMIN_PASSWORD} ## #export SERVICE_TOKEN=\"hastexo\" ## export SERVICE_TOKEN=\"Centrin\" ## export SERVICE_ENDPOINT=\"http://localhost:35357/v2.0\" ## SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service} sed -i -e \"s/hastexo/$ADMIN_TOKEN/g\" gen_keystone_data.sh   ./gen_keystone_data.sh ##  顺利运行，会什么都没有输出 ##  #echo $? ##  下面会输出0 ，表示正常。你就别再运行脚本 ##  keystone --tenant=admin --username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 user-list ##  看到这些，就说明keystone安装正常。 cat <<ENV_AUTH >> /etc/profile export OS_TENANT_NAME=admin export OS_USERNAME=admin export OS_PASSWORD=ADMIN export OS_AUTH_URL=\"http://localhost:5000/v2.0/\" ENV_AUTH sed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/profile export OS_TENANT_NAME=admin export OS_USERNAME=admin export OS_PASSWORD=$ADMIN_TOKEN export OS_AUTH_URL=\"http://localhost:5000/v2.0/\" #source /etc/profile ## 检查检查 ## # export | grep OS_ ## declare -x OS_AUTH_URL=\"http://localhost:5000/v2.0/\" ## declare -x OS_PASSWORD=\"hastexo\" ## declare -x OS_TENANT_NAME=\"admin\" ## declare -x OS_USERNAME=\"admin\" ## 这个时候，直接运行 ## root@node6:~# keystone user-list ## 四：安装和配置glance ## 1：安装软件 apt-get install -y glance glance-api glance-client glance-common glance-registry python-glance ## 2：配置/etc/glance/glance-api-paste.ini ## 修改文件最后3行，这些设置都是keystone导入数据的时候设置的。 sed -i -e \"        s/%SERVICE_TENANT_NAME%/admin/g;        s/%SERVICE_USER%/admin/g;        s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;     \" /etc/glance/glance-api-paste.ini   ## 3：设置 /etc/glance/glance-registry-paste.ini sed -i -e \"        s/%SERVICE_TENANT_NAME%/admin/g;        s/%SERVICE_USER%/admin/g;        s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;     \" /etc/glance/glance-registry-paste.ini ## 4：配置/etc/glance/glance-registry.conf ## 修改 ## #sql_connection = sqlite:////var/lib/glance/glance.sqlite ## sql_connection = mysql://glancedbadmin:ohC3teiv@10.42.0.6/glance ## 在末尾添加两行 ## [paste_deploy] ## flavor = keystone GLANCE_API_CONF=${GLANCE_API_CONF:-\"/etc/glance/glance-api.conf\"} GLANCE_REGISTRY_CONF=${GLANCE_REGISTRY_CONF:-\"/etc/glance/glance-registry.conf\"} PUBLIC_IP=${PUBLIC_IP:-\"192.168.139.50\"} sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_API_CONF cat <<EOF >>$GLANCE_API_CONF [paste_deploy] flavor = keystone EOF sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_REGISTRY_CONF cat <<EOF >>$GLANCE_REGISTRY_CONF [paste_deploy] flavor = keystone EOF ## 5：配置/etc/glance/glance-api.conf ## 6：同步数据库 glance-manage version_control 0 glance-manage db_sync          service glance-api restart && service glance-registry restart ## 7：验证glance服务是否正常 # glance index ## 没有任何的输出。表示正常。 ## #echo $? ## 下面会输出0 ，表示正常。 ## # glance --version ## glance 2012.1 ## 8：下载镜像并上传 ## ubuntu官方专门提供image，http://uec-images.ubuntu.com。不过一定要注意 ## 这些镜像，都是必须使用密钥登录，直接用用户名密码是无法的登录的。 ## 下载镜像 ## http://cloud-images.ubuntu.com/precise/current/ ## 这应该是ubuntu提供的最新的稳定的镜像。 #wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img ##  expect -c \"spawn /usr/bin/scp  yuan@192.168.139.84:/home/yuan/precise-server-cloudimg-amd64-disk1.img .; expect { ##     \\\"password:\\\"; { ##    send \\\"yyhu\\r\\n\\\"; ##    }; \\\"Are you sure you want to continue connecting (yes/no)?\\\" { ##    send \\\"yes\\r\\n\\\" ; ##    expect \\\"password:\\\"; ##    send \\\"yyhu\\r\\n\\\"; ##    } ##  } ; set timeout -1; expect -re \\\"100%\\\";\" ##^^####sleep 5; expect -re \\\"password\\\"; send \\\"yyhu\\r\\n\\\"; # glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img ## 这里还有一种方法上传，如果你没用环境变量。 ## glance --tenant=admin--username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 add name=\"Ubuntu 11.10 cloudimg amd64\" is_public=true container_format=ovf disk_format=qcow2 < /root/precise-server-cloudimg-amd64-disk1.img ## 上传完镜像后。在运行 ## glance index ## 五：安装配置nova ## 1:安装nova相关组件 apt-get install -y nova-api nova-cert nova-common nova-compute nova-compute-kvm nova-doc nova-network nova-objectstore nova-scheduler  nova-volume python-nova python-novaclient  nova-consoleauth python-novnc novnc ## 2：配置 /etc/nova/nova.conf ## 如果你是在虚拟机里测试Openstack。你需要把默认的虚拟化引擎从kvm改成qemu。 cat <<NOVAconf > /etc/nova/nova.conf --dhcpbridge_flagfile=/etc/nova/nova.conf --dhcpbridge=/usr/bin/nova-dhcpbridge --logdir=/var/log/nova --state_path=/var/lib/nova --lock_path=/var/lock/nova --allow_admin_api=true --use_deprecated_auth=false --auth_strategy=keystone --scheduler_driver=nova.scheduler.simple.SimpleScheduler --s3_host=192.168.139.50 --ec2_host=192.168.139.50 --rabbit_host=192.168.139.50 --cc_host=192.168.139.50 --nova_url=http://192.168.139.50:8774/v1.1/ --routing_source_ip=192.168.139.50 --glance_api_servers=192.168.139.50:9292 --image_service=nova.image.glance.GlanceImageService --iscsi_ip_prefix=10.0.0 --sql_connection=mysql://novadbadmin:cloud1234@192.168.139.50/nova --ec2_url=http://192.168.139.50:8773/services/Cloud --keystone_ec2_url=http://192.168.139.50:5000/v2.0/ec2tokens --api_paste_config=/etc/nova/api-paste.ini --libvirt_type=kvm --libvirt_use_virtio_for_bridges=true --start_guests_on_host_boot=true --resume_guests_state_on_host_boot=true   #novnc --novnc_enabled=true --novncproxy_base_url= http://192.168.139.50:6080/vnc_auto.html --vncserver_proxyclient_address=127.0.0.1 --vncserver_listen=127.0.0.1 # network specific settings --network_manager=nova.network.manager.FlatDHCPManager --public_interface=eth0 --flat_interface=eth1 --flat_network_bridge=br100 --fixed_range=10.0.0.1/27 --floating_range=192.168.139.225/27 --network_size=32 --flat_network_dhcp_start=10.0.0.40 --flat_injected=False --force_dhcp_release --iscsi_helper=tgtadm --connection_type=libvirt --root_helper=sudo nova-rootwrap #--verbose --verbose=False NOVAconf ## if ! kvm-ok 1>/dev/null 2>&1; then ##      sed -i -e \"s/kvm/qemu/\" /etc/nova/nova-compute.conf ## fi sed -i -e \"s/novadbadmin/$NOVA_DB_USERNAME/g;s/cloud1234/$NOVA_DB_PASSWD/g\" /etc/nova/nova.conf sed -i -e \"s/192.168.139.50/$OUT_IP/g;s/192.168.139.225/$FLOAT_IP/g;\" /etc/nova/nova.conf sed -i -e \"s/10.0.0.1/$IN_IP/g;s/10.0.0.40/$FLAT_IP/g;s/10.0.0/$IN_IP_PRE/g;\" /etc/nova/nova.conf ## kvm or qemu? sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova.conf sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova-compute.conf ## 3：配置/etc/nova/api-paste.ini sed -i -e \"        s/%SERVICE_TENANT_NAME%/admin/g;        s/%SERVICE_USER%/admin/g;        s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;     \" /etc/nova/api-paste.ini # 4：停止和重启nova相关服务 for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done ## 六：安装和配置Dashbaord ## 1：安装dashbaord apt-get install -y libapache2-mod-wsgi openstack-dashboard /etc/init.d/apache2 restart ## 这个时候，你就可以登录dashboard ## http://192.168.139.50 ## user:admin ## pass:ADMIN ## 之后通过前端web管理 ## 七：创建第一个VM，可以通过上面安装的web管理系统创建。 # 0：同步数据库 ## 以前我运行同步数据库，如果正确, 当nova.conf ## --verbose=False ## 是没有任何的输出，否则有一堆是输出。 nova-manage db sync # 创建网络 nova-manage network create private --fixed_range_v4=10.0.0.1/27 --num_networks=1 --bridge=br100 --bridge_interface=eth1 --network_size=32 ## 设定floating IP nova-manage floating create --ip_range=192.168.139.225/27 ## 设置权限 chown -R nova:nova /etc/nova ## 再重启相关服务 for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done sleep 10   ## 1：检查nova服务 ## 一路回车，就可以了。通过expect可以不用输入。 if [ ! -e ~/.ssh/id_rsa ]; then expect -c \"spawn ssh-keygen ; set timeout 5; expect \\\":\\\"; send \\\"\\r\\n\\\"; set timeout 3; expect  \\\":\\\"; send \\\"\\r\\n\\\";set timeout 3; expect \\\":\\\"; send \\\"\\r\\n\\\"; expect eof;\" fi ## 2：上传密钥到数据库 nova keypair-add --pub_key ~/.ssh/id_rsa.pub key1 ## nova keypair-list ## 打开防火墙 nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0 nova secgroup-add-rule default udp 1 65535 0.0.0.0/0 nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0 ## 4：开始创建虚拟机 ## nova image-list ## nova flavor-list ## 创建虚拟机 # nova-manage flavor create --name=m1.minitest --memory=384 --cpu=1 --root_gb=1 --flavor=6 --ephemeral_gb=1 ## 上面的下载镜像移到这一步，可以去掉以下的步骤 wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img nova boot --flavor 1 --image \"Ubuntu12.04-amd64\" --key_name key1 cloud01 # nova show cloud01 # nova console-log cloud01 ##关联vm sleep 10 ## nova floating-ip-create ## nova add-floating-ip cloud01 192.168.139.226 nova show cloud01 nova add-floating-ip cloud01 `nova floating-ip-create | awk 'FNR==4{print $2}'` nova list nova show cloud01 # ssh instance # ssh-keygen -f \"/home/cloud/.ssh/known_hosts\" -R 10.0.0.2 # ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2 ## 八、完成安装部署 cat <<EOF >&1  1. login the dashboard    http://192.168.139.50    user:admin    pass:admin or $ADMIN_TOKEN  2. login a instance(\"cloud01\")    ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2  3. view & manage    nova list    nova show cloud01    ...  4. enjoy yourself! (Contact Hily.Hoo@gmail.com) EOF 附录2：安装后web登录（dashboard）截图 附录3：云计算平台OpenStack资料 官方OpenStack www.openstack.org 国内OpenStack社区 www.openstack.org.cn 国内技术博客-陈沙克 http://hi.baidu.com/chenshake OpenStack 架构  http://blog.csdn.net/anghlq/article/details/6543880 Ubuntu12.04安装OpenStack文档（入门指南） http://docs.openstack.org/essex/openstack-compute/starter/content/ Installing OpenStack Essex (2012.1) on Ubuntu 12.04 (\"Precise Pangolin\")（原文） http://www.hastexo.com/resources/docs/installing-openstack-essex-20121-ubuntu-1204-precise-pangolin  “OpenStack Documentation”team（文档、bug报告） https://launchpad.net/~openstack-doc Quora上关于openstack的话题 http://www.quora.com/OpenStack stackoverflow上关于openstack资源的讨论 http://stackoverflow.com/questions/5882333/good-tutorials-and-resources-for-openstack Kayven( Hily.Hoo@gmail.com )","title":"OneStack：Ubuntu 12.04 (或11.10) 一键部署安装OpenStack云计算平台 ."},{"content":"GCG Researcher: Dr. Wiizane Wang 一.为什么需要“基于云计算”？ 如果把人类发展的历史看作一条按照一定目的向前延伸的轨迹，那么就会发现，它是沿着信息不断膨胀的方向前进的。今天，互联网应用、商业智能数据分析、科学数据处理等具有海量数据挖掘需求的应用变得越来越普遍，如何高效管理、分析这些海量数据成为当前急需解决的问题；这些数据的异构性（即类型各异的结构化、半结构化以及非结构化数据）又进一步加剧了海量数据处理的难度。 数据挖掘是指从大量数据中获取有效的、新颖的、潜在有用的、最终可理解的模式的过程，能够发现隐含在大规模数据中的知识，从而指导人们决策。数据挖掘主要涉及特征化、区分、关联或相关分析、分类、聚类、演变分析等等，在互联网应用、电子商务、电信、金融、医疗、交通、军事、科学研究等等诸多领域的决策分析中被广泛应用。目前，常用的传统数据挖掘软件有：SQL server 2008、SPSS、SAS、R、Weka、Clementine、Statistica等等。数据挖掘技术与关系型数据库、数据仓库系统密切相关；通常需要遍历训练数据获得相关的统计信息，用于求解或优化模型参数；在大规模数据上进行频繁的数据访问需要耗费大量运算时间。近年来，数据规模从MB、GB级发展到TB、PB级甚至EB、ZB级，数据挖掘的要求和环境也变得越来越复杂，从而形成“数据量的急剧膨胀”和“数据深度分析需求的增长”这两大趋势，使得40年来一体适用的数据库系统架构在海量数据挖掘方面显得力不从心。 分布式计算/并行计算（尤其是低成本的计算）是解决海量数据挖掘任务的有效手段。云计算是并行计算、分布式计算和网格计算等计算机科学概念的商业实现，它可以将计算任务分布在大量互连的计算机上，使各种应用系统能够根据需要获取计算资源、存储资源和其他服务资源。按照中国电子学会云计算专家委员会的学术定义，云计算是一种基于互联网的、大众参与的计算模式，其计算资源（包括计算能力、存储能力、交互能力等）是动态、可伸缩、被虚拟化的，并以服务的方式提供。这个新兴领域中的MapReduce、Hadoop等高扩展性、高性能的并行计算编程模型、分布式海量数据处理框架以及相关关键技术，使得海量数据存储和分布式计算成为现实。基于云计算的海量数据挖掘技术，依赖于云计算平台提供的低成本分布式并行计算环境，可以为更多、更复杂的海量数据挖掘问题提供新的理论与支撑工具，为愈来愈多的企业分析海量数据提供解决方案，并大大减少它们应用商务智能的成本。 二、       基于云计算的海量数据挖掘技术热点 2004年，Google公司最先提出MapReduce技术作为面向大数据分析和处理的并行计算模型，主要包含3个层面的内容：(1) 分布式文件系统；(2) 并行编程模型；(3) 并行执行引擎。它首先为用户提供分布式的文件系统，使用户能方便地处理大规模数据；然后将所有的程序运算抽象为Map和Reduce两个基本操作，在Map阶段模型将问题分解为更小规模的问题，并在集群的不同节点上执行，在Reduce阶段将结果归并汇总。MapReduce在设计之初，致力于通过大规模廉价服务器集群实现大数据的并行处理，它把扩展性和系统可用性放在了优先考虑的位置。2005年初，Douglas Cutting等人在开源搜索引擎系统Nutch上实现了一个MapReduce系统；2006年，他们将MapReduce和NDFS（Nutch的分布式文件系统）移出Nutch形成开源搜索项目Lucene一个子项目：Hadoop；2008年，Hadoop成为Apache的顶级项目，并逐渐成为一个进行分布式计算和海量数据处理的基础平台；在这个平台之上的一系列项目和技术（如HDFS、MapReduce、Pig、Hive、HBase、ZooKeeper、Sqoop等）构建了一个Hadoop生态圈。 MapReduce并行编程模型和Hadoop平台具有强大的处理大规模数据的能力，最早仅面向搜索引擎领域的数据分析，现已扩展到面向更广泛应用的数据挖掘领域。但是，MapReduce模型适合结构一致的海量数据，且要求计算简单；而大量的数据密集型应用，往往涉及到数据降维、程序迭代、近似求解等等复杂的算法，计算非常困难。因此，基于云计算的海量数据挖掘技术成为了工业界和学术界共同关心的热点技术。下面对一些典型研究和应用进展进行介绍。 斯坦福大学Chu等人在国际学术会议NIPS’2006提出一种基于MapReduce的、适用于大量机器学习算法的通用并行编程框架。他们通过对经典的机器学习算法进行分析发现，算法学习过程中的运算都能转化为若干在训练数据集上的求和操作；求和操作可以独立地在不同数据子集上进行，因此很容易在MapReduce编程平台上实现并行化执行。在该框架下，他们实现了包括线性回归、朴素贝叶斯、神经网络、主成分分析和支持向量机等在内的十种经典的数据挖掘算法。源于这篇论文的思想，在Apache软件基金会资助下，Grant Ingersoll等人研发了一个基于Hadoop/MapReduce的开源机器学习算法库Mahout，致力于数据挖掘并行化。目前，Mahout最新发布版本号为0.5，已经实现了协同过滤、局部线性加权回归、贝叶斯分类器、随机森林决策树分类器、隐马尔科夫模型、奇异值矩阵分解、并行频繁模式挖掘、LDA、K-Means聚类、层次聚类、模糊K-Means聚类、均值漂移聚类、谱聚类等算法，可以有效地将并行数据挖掘技术应用于相关大规模数据分析领域。 针对传统数据挖掘软件扩展性差以及MapReduce数据分析功能薄弱的特点，IBM研究院致力于对R和Hadoop的集成研究，从而将计算推向更高层次的数据挖掘并进行并行处理，使Hadoop获得了强大的深度分析能力。此外，IBM研究院Sun等人认为，MapReduce特别适合倒排序索引、朴素贝叶斯、KNN等单次迭代的数据挖掘算法，也比较适合K-Means、高斯混合、PageRank、PLSI、LDA等需要多次迭代的算法，但并不适合像SVM这类需要对大量共享数据进行同步的算法。2011年，IBM研究院在国际顶级学术会议KDD’2011上指出，MapReduce在执行机器学习领域的算法时存在一些缺点，进而提出一种基于MapReduce的并行数据挖掘和机器学习算法执行工具包NIMBLE。 目前，学术界正在加大对基于云计算的海量数据挖掘技术研究的关注，例如SIGMOD、VLDB、KDD、SIGIR、WWW、HPDC、ICDE等国际学术会议都有论文阐述如何进一步增强MapReduce的数据分析能力。Talia等人提出可以从四个层次提供云计算数据挖掘服务：底层为组成数据挖掘算法的基本步骤；第二层为单独的数据挖掘服务（例如分类、聚类等）；第三层为分布式的数据挖掘模式（例如并行分类、聚合式机器学习等）；第四层为前三层元素构成的完整的数据挖掘应用。在此基础上，他们设计了基于云计算的数据挖掘开放服务框架，并开发了一系列的数据挖掘服务系统（例如Weka4WS、Knowledge Grid、Mobile Data Mining Services、Mining@home等）。例如，标准版Weka工具只能在单机上运行，并且不能超越1GB内存的限制；经过算法的并行化，在MapReduce集群上不仅突破了原有的可处理数据量的限制，轻松地对超过100GB的数据进行分析，同时利用并行计算提高了性能。此外，Ranger等人提出了一个基于MapReduce的应用程序编程接口Phoenix，并实现了K-Means、主成分分析和线性回归三种数据挖掘算法；Gillick等人对单程学习、迭代学习和基于查询的学习三类机器学习算法在MapReduce框架下的性能分别做了评测。 在国内，中科院计算所与中国移动研究院合作研发了基于Hadoop的并行分布式数据挖掘平台PDMiner，集成了多种机器学习算法；从系统架构角度看，自下而上分为：分布式计算层（包括分布式文件系统、并行编程环境、分布式系统管理）、数据挖掘平台层（主要包括数据加载、预处理、并行计算、结果显示等）以及业务应用层（主要是电信类业务应用）；达到了商用软件精度，数据处理规模远远超出传统商用数据挖掘软件；已成为中国移动数据挖掘分析支撑工具，应用于TB级的实际电信数据挖掘。此外，中科院计算所还开发了面向Web的数据挖掘云服务平台CMOS；中科院深圳先进研究院研制了一个分布式数据挖掘客户端系统AlphaMiner，服务器为运行于集群的Hadoop平台；南京大学正在研发一个基于Hadoop的并行数据挖掘算法工具箱Dodo，以期实现迭代/非迭代类数据挖掘算法的并行MapReduce化实现，并提供包括资源分配、目录服务、流管理等一系列的组件化数据挖掘云服务。 目前，工业界推出的商用云计算平台有：Amazon公司的EC2和S3（AWS）、Google公司的Google Apps Engine（GAE）、Yahoo!公司的Yahoo Application Platform（YAP）、IBM公司的Blue Cloud、Microsoft公司的Windows Azure、Salesforce公司的Sales Force、Apple公司的iCloud、VMware公司的vCloud、Cloudera的商用Hadoop平台、Apache软件基金会的开源Hadoop平台等。这些平台除了提供基本的分布式存储和计算功能外，有的还具备一些数据挖掘能力。Intel发布了2015未来云愿景，并发起开放式数据中心联盟，以期制定满足下一代数据中心和云计算的需求；Microsoft计划将基于Hadoop的Windows Server与其现有商务智能挖掘工具（如SQL server 2008）联合处理大数据任务；商务智能领域的各大公司也提供面向企业的大规模数据挖掘服务，例如微策略、IBM、Oracle等公司都拥有基于云计算的数据挖掘服务平台；Google、Yahoo!、Facebook等使用上千个节点组成的Hadoop集群进行海量搜索日志和网页数据分析。 在国内，中国移动、中国电信、中国联通分别展开“大云”、“星云”、“互联云”的项目建设（其中，2011年“大云”已经达到1036个节点、5208个CPU、10TB内存的规模），主要为商业经营分析、电信、互联网、电子政务等多个领域提供数据挖掘、系统评估、搜索等方面的计算服务。2011年，由国家发改委牵头，联合工信部、财政部拨出15亿元，作为国家战略新兴产业云计算示范工程专项资金，重点推动国内云计算产业发展、扶持云计算领军企业。例如，百度拥有国内最大规模的绿色数据中心集群，计划投入数十亿元发展智能数据服务、典型行业应用和公共云计算平台；阿里巴巴利用Hadoop平台对海量电子商务交易数据进行存储和深度数据挖掘，并于2011年启动10亿元云基金，专注于基于云计算的电子商务、分布式存储和计算技术、数据中心运维技术、大规模/超大规模的数据挖掘和分析的算法等等；腾讯已经在海量社交网络服务数据挖掘和大规模图分析等方面积累了丰富的实践经验，并已经或计划在天津、上海、重庆建立云计算中心和电子商务基地，以利用云计算展开海量数据分析。 但是，基于云计算的海量数据挖掘技术还面临很多挑战，仍存在许多问题等待解决，例如：基于云计算的新型海量数据挖掘方法研究和实现；各种数据挖掘算法的并行化策略；在MapReduce上实现更加复杂的分析、更大规模的分析；关系数据库技术与Hadoop/MapReduce技术的融合；云计算环境下海量数据挖掘服务的迁移学习；云计算环境下海量数据挖掘的可视化、可信性、安全性等等。","title":"基于云计算的海量数据挖掘"},{"content":"1.首先需要自我介绍？ 2.需要能够熟练的说明，你曾经负责的项目、产品开发？ 包括设计思想、技术实现、任务安排、进度控制、版本控制、需求控制、后期规划等一系列问题？ 3.j2ee开发，需要从前端，后端了解各种设计模型：比如前端的MVC框架，AXIS，Ext，JQuery，Flux等 后端的ejb，Spring，IOC，AOP，JMS，JNDI，RMI，以及负载均衡等 3.对于大表数据的处理？ 索引，SQL语句效率(切忌全表扫描)，数据迁移，水平切面等 4.怎么处理日志问题？有那些可行的方案？ 5.有一张表：比如银行的卡号表。 怎么做到，这张表的数据是1个小时执行更新操作，但是需要记录在这 1个小时中，每条记录的变动情况？ 方法：a.对ADD和DEL执行时时操作，对Modify通过一步调用，记录执行日志方式。b.通过主表做扩展字段， 对主表进行冗余，记录操作信息。 c.对主表进行扩展表，通过扩展表记录操作。d.通过内存队列，在内存队 列中记录信息，之后做1小时同步。 6.怎么处理权限分配？有几种权限分配模型？ 有3中流行的权限模型。 7.比如1台后端服务，支撑10个前端应用，怎么做到不重启服务？能够分别支持10个前端应用，有自己的业务逻辑？ 有自己的业务逻辑表现为：代码的执行不一样。 也就是怎么做到不重启服务，是代码的执行不一样. 有2中解决方法：1 通过java的代理。 2 通过编写txt，然后读取，通过流的方式，反射。 8.负载均衡的原理？ 9.当客户反映，程序变的很慢的时候，你是怎么处理这个问题的？ a.数据库端.b.后端应用平台端.c.前端web端.d.负载均衡.e.网络设置.f.机器性能的优化.g.考虑是否有病毒、木马等干扰等等 10.怎么做到系统整合？ a.通过代码的整合方式，使用相同的数据库。b.通过SSO方式，可以是异构数据库. 11.现行的软件开发模型？以及发展历程？ a.saf模型。b.saas模型,c paas模型等 12.云计算的含义？以及云计算等一些场景应用？ 云计算： 服务的云和存储的云。 场景的应用，需要考虑云计算出现的情况，以及传统saf开发模型的缺陷。","title":"构架师面试题目"},{"content":"RSA、离散对数、椭圆曲线是目前三大公钥加密算法，RSA是其中应用最多的一种。下面将介绍RSA算法的理论基础。 1. 算法产生背景 公钥加密或说非对称加密其作用已经不言而喻，在实际中已经得到大量应用，比如HTTPS证书，其中便包含了网站的公钥信息。非对称加密与对称加密最大的区别是，加密与解密使用不同的密钥，通过公钥加密的内容只有通过私钥才能解密，反之亦然。因此，发布者完全可以把公钥公布于众，使发送者便于查询。与此相反，对称加密需要参与双方妥善保管密钥。 非对称加密非常类似数学里面没有反函数的一类函数，RSA选取的函数便是数论里面的同余理论，依赖的是大整数因数分解的困难性，下面我们不仅希望给出RSA算法的构造过程，更希望能证明该过程的正确性。 RSA算法可以通过数论和群论来描述，算法导论中使用群论来描述，而我们着重使用数论。 2. 预备知识 整除 符号m|a，表示m整除a，或a是m的倍数，等价于a= k*m 同余 记a≡b(mod m)，表示a、b除以m之后的余数相等，即同余。这等价于m|(a-b) 同余性质1： 若a1≡b1(mod m)，a2≡b2(mod m)，则(a1+a2)≡(b1+b2)(mod m) 同余性质2： 若a1≡b1(mod m)，a2≡b2(mod m)，则a1*a2≡b1*b2(mod m) 同余性质3： 若a≡b(mod m1)，a≡b(mod m2)，则a≡b(mod [m1,m2])，[m1,m2]为m1,m2的最小公倍数 最大公因数 记d=(a,m)为正整数a、m的最大公因数为d。当d=1时称a、m互质 欧几里德公式（证明请参考初等数论） 对任意的d=(a,m)，存在整数x、y使得下式成立： ax+my = d，特别当d=1时，存在ax+my=1，即： ax≡1(mod m)，此时称x为a的逆，记为a-1。因此，只要a、m互质,a-1始终存在。 费马小定理 若p为素数，则对任意正整数a，ap-1 ≡ 1(mod p) 3. 算法过程 随机选取2个大素数p,q，p≠q，计算N=p*q 选取一个整数e，e<(p-1)*(q-1)，并且e与(p-1)*(q-1)互质 选择整数d，使得de≡1(mod (p-1)*(q-1))，根据欧几里德公式，d一定存在且唯一 销毁p、q，把(N,e)公开作为公钥，(N,d)妥善保管作为私钥。 假如用户A想通过公钥(N,e)加密整数n（n<N）给用户B，用户B通过私钥(N,d)进行解密，按如下步骤操作： 用户A计算c = （ne mod N）,作为加密结果发送给A，换种表达方式是： c≡ne(mod N),并且c<N B接收到加密信息c后，计算cd(mod N) 因为c≡ne(mod N)，所以cd≡ned(mod N) 因为ed≡1(mode (p-1)*(q-1))，所以ed=1+k*(p-1)*(q-1) 所以，cd≡ned(mod N) => cd ≡ n1+k*(p-1)*(q-1) (mod N) = n * n(p-1)*k*(q-1) (mod N) 因为p为素数，根据费马小定理：n(p-1)  ≡1(mod p) 因此，根据同余性质2，n * n(p-1)*k*(q-1) ≡n(mod p)  => cd ≡n( mod p) -----(1) 同里可得，cd ≡n( mod q) -----(2) 因为q、q为素数，N即为p、q的最小公倍数，因此根据同余性质3及式（1）、（2），cd ≡n( mod N)  也就是说cd 对N取余，则得到加密源数据n 用户B用私钥加密消息发送给A后，解密过程与上同。 上面过程像变戏法一样完成了非对称加解密的过程，但却留下了很多疑问： 为什么要选择(p-1)*(q-1)作为计算的基础？ 直观地说，是为了使用费马小定理，从ap-1 ≡ 1(mod p)可以看出，费马小定理可以把一个基于指数的大数的模转换为一个小数，这也是要求p、q必须为素数的原因。其实，费马小定理是欧拉定理的特例，欧拉定理： 对任意的整数(a,m)=1，存在公式： aφ(m)≡1(mod m) 其中φ(m)称为m的既约剩余系的大小，即那些与m互质的余数的个数，当m为素数p时，φ(p)=p-1（除0外其他余数都与p互质），则得到费马小定理。 同样，应用欧拉素数公式可以得到:φ(N)=φ(p*q)=(p-1)*(q-1)，这就是选择(p-1)*(q-1)作为计算基础的根本原因。 为什么加密元数据n需要满足n<N？ 因为任何数与N取模都会小于N，这样才能保证cd ≡n( mod N) 结果的唯一性。如果加密源大于N，则可以分割为多个小于N的数据进行加密。 如果用户B用私钥(N,d)加密数据发给用户A，岂不容易被任意一个拥有公钥(N,e)的窃听者破解？ 在设计上之保证A到B的信道是加密的，B到A之间的信道信息是公开的，更多是用来签名，用以证明消息的确是B发出的。 但B也可以使用A的公钥来发送数据已做到加密双端通信，这样A、B同时为公钥发布源。 4. 加密基础 RSA算法的加密基础在于，虽然公开(N，e)，但却无法从(N,e)推断出(N,d)，要想能推断出(N,d)，则必须知道p,q，问题就转化为能否把N分解为两个大素数p、q乘积的问题。如果N能被容易的分解为p、q，则RSA算法将很容易被破解。 这个问题看起来貌似很简单，但事实证明当N足够大时（比如1024位），大数的因子分解非常困难： 我们选取N为1024位，即N=21024,因子分解采用事除法，只要试除1-N1/2的奇数，即总共要试除(1/2)*2512=2511个数 假如超级计算机每秒运行1万亿次，大概相当于240次，则总共需要2471秒，大概需要2436年 20多年的使用经验表明，即使采用其他更为先进的素数测试法，比如随机素数测试，因数分解的困难程度也超出想象。但在云计算如火如荼的今天，这似乎又变得有希望起来： 1999年，RSA-155（512 bits）被成功分解 2002年，RSA-158也被成功因数分解 2009年12月12日，编号为 RSA-768 （768 bits, 232 digits）数也被成功分解 因此，为了保证RSA的安全性只有提高N的位数，一般认为提高到2048位才相对比较安全。 5. 性能 RSA性能是非常低的，原因在于寻找大素数、大数计算、数据分割需要耗费很多的CPU周期，所以一般的HTTPS连接只在第一次握手时使用非对称加密，通过握手交换对称加密密钥，在之后的通信走对称加密。 6. 补充理论 素数有无穷多个 可用数学归纳法：设p1,p2,...,pn为已知素数，则p1*p2*...*pn+1必为合数，且不能被p1,p2,...,pn整除，而合数必存在素数因子，从而说明存在一个新的不同于p1,p2,...,pn的新素数，即素数有无穷多个 素数越”向后“越稀疏，并且数量可以估计 记π(n)为小于n的素数的个数 记L=n/logn，则极限lim(π(n)/L=1(n->∞），因此可以用L估计素数的个数。经过计算，当n=109时，其误差不超过6%，精度还是非常高的。 素数的测试方法 根据费马小定理：若p为素数，则对任意正整数a，ap-1 ≡ 1(mod p) 反过来，如果存在p满足上面等式，则p为素数的概率会非常高，p越大概率越高（具体证明请参考算法导论）。 反复平方法 因为d比较大，如果直接计算cd可能会比较费时，采用反复平方法则会比较快，具体请参考：http://blog.csdn.net/chen77716/article/details/7093600 模乘法群 上面从e<(p-1)(q-1),ed≡1(mode (p-1)*(q-1))，可知ed=1+k*(p-1)*(q-1)，更进一步，d<(p-1)(q-1) 因为关于模N互质的余数构成的乘法运算构成一个群，即，a，b都是与m互质的模m的余数，即a*b≡1(mod m)，如果a<m，则必有b<m。 群有几个特性： （1）运算封闭 （2）存在逆元 故可以得出上述结论。","title":"RSA公钥加密算法"},{"content":"OpenStack既是一个社区，也是一个项目和一个开源软件，它提供了一个部署云的操作平台或工具集。其宗旨在于，帮助组织运行为虚拟计算或存储服务的云，为公有云、私有云，也为大云、小云提供可扩展的、灵活的云计算。 1. OpenStack是什么 OpenStack既是一个社区，也是一个项目和一个开源软件，它提供了一个部署云的操作平台或工具集。其宗旨在于，帮助组织运行为虚拟计算或存储服务的云，为公有云、私有云，也为大云、小云提供可扩展的、灵活的云计算。 OpenStack旗下包含了一组由社区维护的开源项目，他们分别是OpenStackCompute(Nova)，OpenStackObjectStorage(Swift)，以及OpenStackImageService(Glance)。 OpenStackCompute[1]，为云组织的控制器，它提供一个工具来部署云，包括运行实例、管理网络以及控制用户和其他项目对云的访问(thecloudthroughusersandprojects)。它底层的开源项目名称是Nova，其提供的软件能控制IaaS云计算平台，类似于AmazonEC2和RackspaceCloudServers。实际上它定义的是，与运行在主机操作系统上潜在的虚拟化机制交互的驱动，暴露基于WebAPI的功能。 OpenStackObjectStorage[2]，是一个可扩展的对象存储系统。对象存储支持多种应用，比如复制和存档数据，图像或视频服务，存储次级静态数据，开发数据存储整合的新应用，存储容量难以估计的数据，为Web应用创建基于云的弹性存储。 OpenStackImageService[1]，是一个虚拟机镜像的存储、查询和检索系统，服务包括的RESTfulAPI允许用户通过HTTP请求查询VM镜像元数据，以及检索实际的镜像。VM镜像有四种配置方式：简单的文件系统，类似OpenStackObjectStorage的对象存储系统，直接用Amazon'sSimpleStorageSolution(S3)存储，用带有ObjectStore的S3间接访问S3。 三个项目的基本关系如下图1-1所示： 1-1 OpenStack三个组件的关系","title":"OpenStack的架构详解(1)"},{"content":"当然最火的莫过于移动互联网和云计算了，那么这两者结合起来会发生点什么呢？那就是移动云存储。或许大家对这方面还不是很了解，接触的也不错，今天就来补补这方面的知识。 http://mobilecloud.diandian.com/post/2012-02-27/16260353","title":"移动云存储类应用盘点"},{"content":"Apache Mahout 是 ApacheSoftware Foundation (ASF) 旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序，并且，在 Mahout 的最近版本中还加入了对Apache Hadoop 的支持，使这些算法可以更高效的运行在云计算环境中。 在Mahout实现的机器学习算法见下表： Mahout最大的优点就是基于hadoop实现，把很多以前运行于单机上的算法，转化为了MapReduce模式，这样大大提升了算法可处理的数据量和处理性能。","title":"Apache Mahout中的机器学习算法集"},{"content":"            openstack目前已经成为云计算IaaS平台的主流开源项目，在国内大量被用于私有云的构建以及公有云的参考，例如sina的SAE就是以openstack为基础的二次开发，由于该项目越来越多的厂商支持和越来越完善的系统，自E版推出后，其发展更是迅猛。以下就对于openstack的关键概念以及主要架构一一说明，本人有幸在清华大学接触到了这个东西，在和网上各地的朋友交流后收获很大，由此决定开博客将之前的东西做一个整理，也希望以后能够和大家一起学习进步。        在开始基本配置的文字之前专门开设这个系列是十分必要的。我相信有很多人都和我当时一样老板说部署一个openstack于是就满网络找文档只要是按这步骤一步步做下来，的确可以搭建一个简易的示范系统出来，但是一旦某个细节出现问题产生错误或者系统需要拓展，那么都是一件很麻烦的事。        其实云计算在我刚听到这个名词的时候，我也觉的很玄乎，感觉几乎是一夜之间铺天盖地的都是云。但接触了以后才发现，其实云计算就是虚拟化的主机加上网格和分布式的思想，一言以蔽之，其实就是有效的集合和管理一堆的虚拟机，使之能高可用的运行。        由于在锐捷实习的关系，所以没有什么时间接着写博客，我觉得这类开源项目最重要的事情就是共享，我也是一步步的看openstack的前辈的东西成长起来的。所以这里把自己的想法和过程共享出来，如果觉得有什么不对大家不要拍砖啊。        在F版发布之前我尽快对E版的部署作出整理，希望对后来的人有所帮助。  ","title":"Openstack个人理解及各部分解释（一）"},{"content":"数据一致性通常指关联数据之间的逻辑关系是否正确和完整。而数据存储的一致性模型则可以认为是存储系统和数据使用者之间的一种约定。如果使用者遵循这种约定，则可以得到系统所承诺的访问结果。  常用的一致性模型有： a、严格一致性（linearizability, strict/atomic Consistency）：读出的数据始终为最近写入的数据。这种一致性只有全局时钟存在时才有可能，在分布式网络环境不可能实现。   b、顺序一致性（sequential consistency）：所有使用者以同样的顺序看到对同一数据的操作，但是该顺序不一定是实时的。 c、因果一致性（causal consistency）：只有存在因果关系的写操作才要求所有使用者以相同的次序看到，对于无因果关系的写入则并行进行，无次序保证。因果一致性可以看做对顺序一致性性能的一种优化，但在实现时必须建立与维护因果依赖图，是相当困难的。 d、管道一致性（PRAM/FIFO consistency）：在因果一致性模型上的进一步弱化，要求由某一个使用者完成的写操作可以被其他所有的使用者按照顺序的感知到，而从不同使用者中来的写操作则无需保证顺序，就像一个一个的管道一样。 相对来说比较容易实现。 e、弱一致性（weak consistency）：只要求对共享数据结构的访问保证顺序一致性。对于同步变量的操作具有顺序一致性，是全局可见的，且只有当没有写操作等待处理时才可进行，以保证对于临界区域的访问顺序进行。在同步时点，所有使用者可以看到相同的数据。 f、 释放一致性（release consistency）：弱一致性无法区分使用者是要进入临界区还是要出临界区， 释放一致性使用两个不同的操作语句进行了区分。需要写入时使用者acquire该对象，写完后release，acquire-release之间形成了一个临界区，提供 释放一致性也就意味着当release操作发生后，所有使用者应该可以看到该操作。 g、最终一致性（eventual consistency）：当没有新更新的情况下，更新最终会通过网络传播到所有副本点，所有副本点最终会一致，也就是说使用者在最终某个时间点前的中间过程中无法保证看到的是新写入的数据。可以采用最终一致性模型有一个关键要求：读出陈旧数据是可以接受的。 h、delta consistency：系统会在delta时间内达到一致。这段时间内会存在一个不一致的窗口，该窗口可能是因为log shipping的过程导致。 最终一致性的几种具体实现： 1、读不旧于写一致性（Read-your-writes consistency）：使用者读到的数据，总是不旧于自身上一个写入的数据。 2、会话一致性（Session consistency）：比读不旧于写一致性更弱化。使用者在一个会话中才保证读写一致性，启动新会话后则无需保证。 3、单读一致性（Monotonic read consistency）：读到的数据总是不旧于上一次读到的数据。 4、单写一致性（Monotonic write consistency）：写入的数据完成后才能开始下一次的写入。 5、写不旧于读一致性（Writes-follow-reads consistency）：写入的副本不旧于上一次读到的数据，即不会写入更旧的数据。 Werner Vogels认为：在很多互联网应用中，单读一致性＋读不旧于写一致性可以提供足够的一致性了。 Werner Vogels基于NWR模型来分析一致性，该模型决定了亚马逊云计算技术架构的方向。 N－副本个数，W－每次同步写入的副本个数，R－每次读出副本个数。认为只要W+R>N，就可以达到很强一致性。例如同步方式N=2,W=2,R=1，则始终是一致的；而如果是异步方式，则每次同步写入的W只有1，就不能保证一致性。如果W<N，则需要采取lazy的方式后续将更新同步给其他N-W个副本。 要保证强一致性，那么如果每次不能写够W份时，此次写操作必须失败，系统变得不可用。","title":"数据一致性"},{"content":"不管我们接受与否，使用微软的Office软件已成为了我们日常工作的一部分。 近20年来，微软Office软件早就成了全球白领最基本的生产工具。如果你的工作要与电脑打交道，很有可能你每天都在使用Word，Excel，powerpoint还有／或者Outlook. 然而你很有可能对此并非心甘情愿。你很可能对steve Ballme在周一最新的Office发布会上关于其最新特性的介绍不感兴趣。就像一盒舒洁纸巾或是一个垃圾篓，Office已经成为全球很多白领办公室里的标配。就算你在某些使用Simplehuman牌垃圾篓和Puffs Plus面巾纸的新潮公司上班，你的工作时间还是会被无处不在的.doc文件所占据。如果你充满激情，热爱设计，提倡愉悦的用户体验，想试试一个星期远离.xls文件，更别说.ppt文件，我们只能祝你好运了。 为什么会这样？为何这叫做“微软Windows版Office”的软件是如此的老式，却占据了商业办公软件90％以上的市场份额，以致产生每年高达200亿美元的销售额？ 这不是因为有千万的忠诚粉丝，也不是因为大量的零售需求。相反，分析师们认为这不过是简单的物理法则。Office软件的垄断在用户使用习惯的惯性下得以延续。影响全球经济的跨国公司使用着Office软件。尽管这些公司承受着价格过高、安全漏洞，员工抱怨的痛苦，相比转去使用其他新软件而带来的巨大不适应，这些都不足为道。最大的问题在于分析师Michael Silver所称的“看得见的忠诚度”。 “如果你用一个软件生成一份文件，然后用另一个软件打开它，那在两个软件中这同一个文件基本上不可能看起来一模一样。”Silver说到。对使用Office生成了不是数十亿就是数百万文件的公司来说，这是一个很大的问题。 Silver指出就算在过去的12年里，Office软件允许被模仿，这也没有撼动微软的霸主地位。不管用户有多不喜欢Office，也从来没有新的产品可以革命性的改进文字处理和建立表格的基本操作，从而使放弃微软软件更为划算。 近来谷歌高调的摆出了挑战者的姿态。它重新策划了办公方式，使之基于协作以及云计算技术。这是微软试图让Office的2013版本所顺应的潮流。但尽管多年来谷歌一直在督促旗下在线程序避免产生类似Office的用户体验，这些软件价格便宜得多，但商业公司转向它的步伐还是很慢。“微软Office最大的对手，不过就是人们已经在一直使用着的它的老版本。” Silver说道。 那也说明，人们是有选择的。至少对那些没有被公司的IT政策以及自身的期望所限制的个人用户来说的确如此。在这个被Office高度垄断的世界，你可能会忘记自己还有其他选择。有一篇《纽约时报》的专栏文章尽管是几年前发表的，但仍然值得被记住。这篇文章是“Virginia Hefferan谈使用Office的Vise-Grip”。 Oh,Word! 二十年来你一边帮助着我却又一边欺压着我。你给了我一个小气的神奇画板（一种儿童写画玩具，译者注），让我可以在狭窄的句子书写线上写作，却又一边为了维护你那滑稽的公司霸气，站在原地唾沫横飞用各种命令地训斥着我，叫我保存文件或者重定格式。比如：“无效产品序列号！”、“无法识别的数据库格式”！被你奴役了这么多年，我打算要革你的命了。 她转去使用的软件包括便于做研究用的Scrivener和极简抽象派的WriteRoom.这些软件都让人觉得设计时候考虑得更多得是作家的用户体验，而不是满足设计师功能说明书的性能需求。这些小应用程序，还有我还想补充的OmmWriter和支持云计算的Simplenote, 提醒我们办公软件世界里还有看上去与Office完全不一样的其他软件。然而若你想说服你的老板也这么想，那我只能祝你好运了。","title":"为什么你还是离不开微软的Office软件？"},{"content":"OneStack：Ubuntu 12.04 (或11.10) 一键部署安装OpenStack云计算平台 分类： OpenStack&云计算 2012-06-27 14:47 4533人阅读 评论(28) 收藏 举报 OneStack：在Ubuntu12.04（precise）上一键安装部署Opentack Essex 提醒：如果你喜欢折腾，喜欢自己一步一步安装各个功能组件和配置conf文件，你可以略过此文。本文工具可以在裸机和虚拟机一键部署真实的OpenStack云计算平台，主要步骤是配置网络、数据库、keystone、glance、nova、dashboard、创建镜像和启动实例等，代码内有详细注释。这只是学习Opentack的入门的一步，深入研究可以参考附录3给出的部分资料和社区。 2012.07.14更新： 收到很多邮件和提问，精力有限没法一一回复，在此致歉。随手把记录的一些问题和解决方法整理了，供大家参考。 详见《OpenStack安装部署管理中常见问题解决方法（OpenStack-Lite-FAQ）》。 2012.07.09更新： 很多人来信问我单网卡怎么设置，以及其它网络问题，我后面写了一篇介绍OpenStack网络的，详见《OpenStack云平台的网络模式及其工作机制》。 2012.07.02更新： 1、受邀在vpsee上对这个项目进行了较为详细的介绍（OneStack：Ubuntu 12.04 上一键自动部署 OpenStack），对于项目来源、相关考虑、项目结构、具体安装步骤（参数设置和前期工作）和预期等做了说明，可以参考。 2、希望增加高可用性的云计算部署，构建OpenStack的高可用性（HA，High Availability） 对高可用性进行了初步介绍，欢迎提出意见和建议。 一、项目(OneStack)地址： http://onestack.googlecode.com 喜欢git或者github的请去 https://github.com/Kayven/OneStack 不希望同行们把过多精力花在OpenStack的安装部署上（以后应该会改进），而是对其机制原理、工程实践、性能调优、应用服务等深入研究探讨。 所以提供这个一键部署的工具，帮助大家快速建立环境实验生产实践。项目结构如下： oneStack.sh（一键部署 all-in-one 的 OneStack，简单安装的主要文件）； setup_base.sh（安装基本系统）； setup_test.sh（添加镜像和实例）； addComputeNode.sh（增加计算节点）； delStack.sh（只卸载nova、glance、keystone等）； delAll.sh（卸载所有安装的组件和工具）； resetStack.sh（清空数据库，镜像、网络和实例等，重新上传镜像、创建实例）； addClient.sh（添加客户端，nova管理等）； HAStack 目录（OneStack 的高可用性，希望更多人可以提出自己的解决方案）。 二、部署(OneStack)步骤 简单部署OneStack： wget http://onestack.googlecode.com/files/oneStack.sh && chmod +x oneStack.sh && ./oneStack.sh 完整部署OneStack： Just checkout and run it! 1. Setup a fresh Ubuntu Precise(12.04) Sever OS. 2. checkout svn checkout http://onestack.googlecode.com/svn/trunk/ onestack-read-only 3. run it! cd onestack-read-only/ && ./oneStack.sh （如何简单配置参数见留言说明，或者见http://onestack.googlecode.com，或者见脚本注释） （多节点的部署类似，只需要在计算节点设置并执行addComputeNode.sh） 三、项目(OneStack)说明： 在Ubuntu12.04（precise）上安装部署Opentack Essex 只需要一个文件即可完成全部功能组件的部署：http://onestack.googlecode.com/files/oneStack.sh 里面含有详细的注释说明，看完整个脚本相当于看完了安装文档； svn整个项目只是多一些辅助工具，包括重置、重新安装、卸载等; 也欢迎同道人补充和完善更多的功能，适用于更多的操作系统和应用场景。 四、项目(OneStack)来源： 类似项目有DevStack，但是DevStack是使用screen安装OpenStack，重启服务器会出现一些问题，没有提供重启、重置等有用功能； 由于组件独立分散，安装过程过于繁琐，可以抽象成通用的项目供大家方便使用； 官方提供了一个比较完善的入门文档，但是，这一步一步下来得做很多无用功，容易漏错而引起很多莫名和头疼的问题； 本项目不像devstack只是提供实验环境，而是可以实际部署使用，可以自己修改配置，按需增加组件和功能，实现一键部署，可扩展使用。 五、项目(OneStack)描述： 一键完整部署OpenStack，可以自定义配置、方便地扩展功能组件，无交互地自动部署； 安装过程不需要等待配置： 功能齐全，附带了卸载、重置、添加计算节点等工具 可以卸载主要的opentack组件，包括nova、glance、keystone等； 可以重置数据库和配置，重新安装openstack组件； 可以根据需要自行更改脚本，方便部署自己的云计算平台。 经过多次测试，完整在VMware虚拟机上部署OpenStack       测试环境：VMware ESXi 5.0虚拟Dell R210服务器，其中一个虚拟机上部署Opentack，启动多个实例，正常运行；远程访问和web管理正常；重启、重置、重新安装都正常。       系统要求：双网卡，64位机器，支持VT技术 脚本运行过程会做如下工作： 配置网络相关； 安装和配置数据库； 安装和部署身份管理组件keystone； 安装和部署镜像管理组件glance； 安装和部署控制与计算组件nova； 安装和部署web管理组件dashboard； 上传和添加ubuntu12.04镜像； 设置项目安全规则和密钥； 启动实例，并正常运行。 欢迎反馈，谢谢. 本人尽力做到不出差错，但是限于学识和眼界，难免有考虑不周、冗余、没有最优化或者表达不好之处； 希望大家有任何意见建议随时联系我。 附录1： 为了方便大家查阅、讨论、交流、review和完善，在此贴出主要代码。 [plain] view plaincopyprint? #!/usr/bin/env bash   # **oneStack.sh** is a tool to deploy complete and real OpenStack cloud computing service.      # This script installs and configures various combinations of *Glance*,   # *Horizon*, *Keystone*, *Nova*, *Mysql* and others.      # Hily.Hoo@gmail.com (Kayven)   # Learn more and get the most recent version at http://code.google.com/p/onestack/      set -o xtrace   ## 请使用root执行本脚本！   ## Ubuntu 12.04 (\"Precise\") 部署 OpenStack Essex（或者ubuntu11.10版本）         ## 一：准备系统   ## 1：下载ubuntu 12.04. 服务器版本   ## http://mirrors.ustc.edu.cn/ubuntu-releases/12.04/ubuntu-12.04-server-amd64.iso   ## 2：安装OS   ## 最小化安装，只需要安装ssh server就可以。   ## 装完系统后 更新源里的包,更新系统。确保你装的是最新版本的包。      ## 3：设置root权限   ## 为了简单，全部都是用root来运行。   if [ `whoami` != \"root\" ]; then           sudo passwd           exec su -c 'sh ./oneStack.sh'   fi      ## 4：设置参数和环境配置，直到两行#号结束   ## 这个配置以后就不需要更改了，比如看到192.168.139.50等ip，不用更改，脚本会自动替换这些初始值。   ## 可以变动的是，第500行的image的下载；或者去掉第七步开始的部分（上传镜像，创建实例）   ##########################################################################   ##########################################################################   ## 如果原来安装过OpenStack，请先执行 ./delStack.sh   ## 1）配置参数   ## 数据库相关   MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}   NOVA_DB_USERNAME=${NOVA_DB_USERNAME:-\"novadbadmin\"}   NOVA_DB_PASSWD=${NOVA_DB_PASSWD:-\"cloud1234\"}   GLANCE_DB_USERNAME=${GLANCE_DB_USERNAME:-\"glancedbadmin\"}   GLANCE_DB_PASSWD=${GLANCE_DB_PASSWD:-\"cloud1234\"}      ## 注意：单网卡的去掉interfaces的eth1，并把nova.conf里面eth1改完eth0即可！   ## 自行检查下面network/interfaces的两个网卡设置   ## 本机器外网ip （包括局域网的内网ip，相对于OpenStack内网而言的）   OUT_IP=\"192.168.139.50\"   OUT_IP_PRE=\"192.168.139\"   ## nova-network内网ip   IN_IP=\"10.0.0.1\"   IN_IP_PRE=\"10.0.0\"   ## flat的起始ip   FLAT_IP=\"10.0.0.40\"   ## 浮动ip的起始值   FLOAT_IP=\"192.168.139.225\"      ## 选择虚拟技术，裸机使用kvm，虚拟机里面使用qemu   VIRT_TYPE=\"qemu\"   ## token, 登录dashboard密码（用户名admin）   ADMIN_TOKEN=\"admin\"   ##########################################################################   ## 2）检查系统是否ubuntu12.04，据反映11.10也可以正常安装，可以去掉这一段检查   # Determine what system we are running on.  This provides ``os_VENDOR``...   # Determine OS Vendor, Release and Update    #if [[ -x \"`which lsb_release 2>/dev/null`\" ]]; then       os_VENDOR=$(lsb_release -i -s)       os_RELEASE=$(lsb_release -r -s)       os_UPDATE=\"\"       os_CODENAME=$(lsb_release -c -s)   #fi   if [ \"Ubuntu\" = \"$os_VENDOR\" ]; then       DISTRO=$os_CODENAME   else       echo \"The os didn't seems to be Ubuntu.\"       exit 1   fi   echo $DISTRO   if [ \"precise\" != ${DISTRO} -a \"oneiric\" != ${DISTRO} ]; then       echo \"WARNING: this script has been tested on oneiric or precise\"       exit 1   fi      ############################################################################   ## 3）以下系统配置，语言中文支持、国内APT源、网络设置（两个网卡），可以自行配置，注释掉这些步骤。   ## locale      ############################################################################   ## 4：设置网络   SOURCE_FILE=${SOURCE_FILE:-\"/etc/apt/sources.list\"}   cp $SOURCE_FILE $SOURCE_FILE.bak   cat <<APT >$SOURCE_FILE   deb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse   APT   #sed -i 's/debian.ustc.edu.cn/mirrors.163.com/g' $SOURCE_FILE      # network configure   NETWORK_CONF=${NETWORK_CONF:-\"/etc/network/interfaces\"}   if ! grep -q eth1 $NETWORK_CONF; then           cat <<INTERFACES >$NETWORK_CONF   auto lo   iface lo inet loopback      # The primary network interface   auto eth0   iface eth0 inet static   pre-up ifconfig eth0 hw ether b8:ac:6f:9a:ee:e4           address 192.168.139.50           netmask 255.255.255.0           network 192.168.139.0           broadcast 192.168.139.255           gateway 192.168.139.253           dns-nameservers 210.72.128.8      auto eth1   iface eth1 inet static   pre-up ifconfig eth1 hw ether b8:ac:6f:9a:ee:e4           address 10.0.0.1           netmask 255.255.255.0           network 10.0.0.0           broadcast 10.0.0.255   INTERFACES           /etc/init.d/networking restart   fi   ## 以上系统配置，可以自行配置，注释掉这些步骤。   ############################################################################   ############################################################################      apt-get update            ## 5：安装bridge   apt-get install -y bridge-utils   ## 6：设置NTP   apt-get install -y ntp   if ! grep -q fudge \"/etc/ntp.conf\"; then           cat <<NTPconf > /etc/ntp.conf   server ntp.ubuntu.com iburst   server 127.127.1.0   fudge 127.127.1.0 stratum 10   NTPconf   fi   service ntp restart   ## 7：设置Iscsi   apt-get install -y tgt ssh w3m unzip wget curl expect   ## 安装iscsi客户端、安装rabbitmq   apt-get install -y open-iscsi open-iscsi-utils   apt-get install -y rabbitmq-server memcached python-memcache   apt-get install -y kvm libvirt-bin qemu qemu-kvm      ## 二：安装mysql和创建相关数据库   ## Openstack的组件：nova，keystone，glance，都需要数据库。不过目前官方建议keystone，采用sqlite存储，而不用mysql存放。所以我们只需要创建nova和glance两个数据库就可以。   ## 1：安装mysql   ## 过程中，会提示你输入root密码。通过debconf-set-selections读取跳过这一步.   #MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}   ## apt-get install debconf debconf-utils   cat <<MYSQL_PRESEED | debconf-set-selections   mysql-server-5.1 mysql-server/root_password password $MYSQL_PASSWD   mysql-server-5.1 mysql-server/root_password_again password $MYSQL_PASSWD   mysql-server-5.1 mysql-server/start_on_boot boolean true   MYSQL_PRESEED      apt-get install --no-install-recommends -y mysql-server python-mysqldb   ## chkconfig mysql on   ## 让mysql支持外部访问   sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf     service mysql restart   if [ ! -s /etc/apache2/httpd.conf ]; then           echo \"ServerName localhost\" >> /etc/apache2/httpd.conf           /etc/init.d/apache2 restart   fi      ## 2：安装phpmyadmin （可选）   cat <<PHPmyadmin | debconf-set-selections   phpmyadmin phpmyadmin/reconfigure-webserver  text     apache2   phpmyadmin phpmyadmin/dbconfig-install       boolean  true   phpmyadmin phpmyadmin/app-password-confirm   password $MYSQL_PASSWD   phpmyadmin phpmyadmin/mysql/admin-pass       password $MYSQL_PASSWD   phpmyadmin phpmyadmin/password-confirm       password $MYSQL_PASSWD   phpmyadmin phpmyadmin/setup-password         password $MYSQL_PASSWD   phpmyadmin phpmyadmin/mysql/app-pass         password $MYSQL_PASSWD   PHPmyadmin   apt-get --no-install-recommends -yq install phpmyadmin      ## 3：创建数据库   ## nova数据库，   管理员：novadbadmin，密码是：cloud1234   ## glance数据库，管理员：glancedbadmin，密码是：cloud1234   ## 如果你修改密码，后面很多配置都需要相应更改。   ##   mysql -uroot -p   ##   CREATE DATABASE nova;   ##   GRANT ALL PRIVILEGES ON nova.* TO 'novadbadmin'@'%' IDENTIFIED BY 'cloud1234';   ##   CREATE DATABASE glance;   ##   GRANT ALL PRIVILEGES ON glance.* TO 'glancedbadmin'@'%' IDENTIFIED BY 'cloud1234';   ##   quit   mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS nova;\"   mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE nova;\"   mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON nova.* TO '$NOVA_DB_USERNAME'@'%' IDENTIFIED BY '$NOVA_DB_PASSWD';\"   mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS glance;\"   mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE glance;\"   mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON glance.* TO '$GLANCE_DB_USERNAME'@'%' IDENTIFIED BY '$GLANCE_DB_PASSWD';\"   if [ -e /var/lib/keystone/keystone.db ]; then   rm -rf /var/lib/keystone/keystone.db   fi      ## 三：安装和配置keystone   ## Openstack的各个组件，keystone是最难配置。搞定keystone，后面应该就没啥麻烦。   ## 1：安装keystone   apt-get install -y keystone python-keystone python-keystoneclient   ## 2：配置keystone   ## 如果更改token，需要修改 /etc/keystone/keystone.conf 两个地方   ##    默认定义的token就是ADMIN，web登录admin就是这个密码   ##    [DEFAULT]   ##    bind_host = 0.0.0.0   ##    public_port = 5000   ##    admin_port = 35357   ##    admin_token = ADMIN   ##    另外一个地方是   ##    [catalog]   ##    #driver = keystone.catalog.backends.sql.Catalog   ##    driver = keystone.catalog.backends.templated.TemplatedCatalog   ##    template_file = /etc/keystone/default_catalog.templates   ##        sed -i -e 's/keystone.catalog.backends.sql.Catalog/keystone.catalog.backends.templated.TemplatedCatalog\\ntemplate_file = \\/etc\\/keystone\\/default_catalog.templates/g' /etc/keystone/keystone.conf   sed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/keystone/keystone.conf   service keystone restart      ## 3: 导入数据   ## 这个比较有技术含量。通过修改devstack的keystone_data.sh 脚本。实现导入数据。如果你上面的设置都和我一样，那么其实直接运行这个脚本就可以。   ## wget http://www.hastexo.com/system/files/user/4/keystone_data.sh_.txt -O keystone_data.sh   wget http://onestack.googlecode.com/files/gen_keystone_data.sh -O gen_keystone_data.sh   chmod +x gen_keystone_data.sh   ## 运行脚本, 如果你修改的默认的用户名和密码，你需要修改脚本。修改两个地方   ## 第一个是登录dashboard的admin的密码   ## 第二个就是keystone的token   ## #ADMIN_PASSWORD=${ADMIN_PASSWORD:-hastexo}   ## ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}   ## SERVICE_PASSWORD=${SERVICE_PASSWORD:-$ADMIN_PASSWORD}   ## #export SERVICE_TOKEN=\"hastexo\"   ## export SERVICE_TOKEN=\"Centrin\"   ## export SERVICE_ENDPOINT=\"http://localhost:35357/v2.0\"   ## SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}   sed -i -e \"s/hastexo/$ADMIN_TOKEN/g\" gen_keystone_data.sh        ./gen_keystone_data.sh   ##  顺利运行，会什么都没有输出   ##  #echo $?   ##  下面会输出0 ，表示正常。你就别再运行脚本   ##  keystone --tenant=admin --username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 user-list   ##  看到这些，就说明keystone安装正常。      cat <<ENV_AUTH >> /etc/profile   export OS_TENANT_NAME=admin   export OS_USERNAME=admin   export OS_PASSWORD=ADMIN   export OS_AUTH_URL=\"http://localhost:5000/v2.0/\"   ENV_AUTH   sed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/profile   export OS_TENANT_NAME=admin   export OS_USERNAME=admin   export OS_PASSWORD=$ADMIN_TOKEN   export OS_AUTH_URL=\"http://localhost:5000/v2.0/\"   #source /etc/profile   ## 检查检查   ## # export | grep OS_   ## declare -x OS_AUTH_URL=\"http://localhost:5000/v2.0/\"   ## declare -x OS_PASSWORD=\"hastexo\"   ## declare -x OS_TENANT_NAME=\"admin\"   ## declare -x OS_USERNAME=\"admin\"   ## 这个时候，直接运行   ## root@node6:~# keystone user-list         ## 四：安装和配置glance   ## 1：安装软件   apt-get install -y glance glance-api glance-client glance-common glance-registry python-glance   ## 2：配置/etc/glance/glance-api-paste.ini    ## 修改文件最后3行，这些设置都是keystone导入数据的时候设置的。   sed -i -e \"          s/%SERVICE_TENANT_NAME%/admin/g;          s/%SERVICE_USER%/admin/g;          s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;       \" /etc/glance/glance-api-paste.ini       ## 3：设置 /etc/glance/glance-registry-paste.ini   sed -i -e \"          s/%SERVICE_TENANT_NAME%/admin/g;          s/%SERVICE_USER%/admin/g;          s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;       \" /etc/glance/glance-registry-paste.ini   ## 4：配置/etc/glance/glance-registry.conf   ## 修改   ## #sql_connection = sqlite:////var/lib/glance/glance.sqlite   ## sql_connection = mysql://glancedbadmin:ohC3teiv@10.42.0.6/glance   ## 在末尾添加两行   ## [paste_deploy]   ## flavor = keystone   GLANCE_API_CONF=${GLANCE_API_CONF:-\"/etc/glance/glance-api.conf\"}   GLANCE_REGISTRY_CONF=${GLANCE_REGISTRY_CONF:-\"/etc/glance/glance-registry.conf\"}   PUBLIC_IP=${PUBLIC_IP:-\"192.168.139.50\"}   sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_API_CONF   cat <<EOF >>$GLANCE_API_CONF   [paste_deploy]   flavor = keystone   EOF   sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_REGISTRY_CONF   cat <<EOF >>$GLANCE_REGISTRY_CONF   [paste_deploy]   flavor = keystone   EOF      ## 5：配置/etc/glance/glance-api.conf   ## 6：同步数据库   glance-manage version_control 0   glance-manage db_sync             service glance-api restart && service glance-registry restart      ## 7：验证glance服务是否正常   # glance index   ## 没有任何的输出。表示正常。   ## #echo $?   ## 下面会输出0 ，表示正常。   ## # glance --version   ## glance 2012.1      ## 8：下载镜像并上传   ## ubuntu官方专门提供image，http://uec-images.ubuntu.com。不过一定要注意   ## 这些镜像，都是必须使用密钥登录，直接用用户名密码是无法的登录的。   ## 下载镜像   ## http://cloud-images.ubuntu.com/precise/current/   ## 这应该是ubuntu提供的最新的稳定的镜像。   #wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img   ##  expect -c \"spawn /usr/bin/scp  yuan@192.168.139.84:/home/yuan/precise-server-cloudimg-amd64-disk1.img .; expect {   ##     \\\"password:\\\"; {   ##    send \\\"yyhu\\r\\n\\\";   ##    }; \\\"Are you sure you want to continue connecting (yes/no)?\\\" {   ##    send \\\"yes\\r\\n\\\" ;   ##    expect \\\"password:\\\";   ##    send \\\"yyhu\\r\\n\\\";   ##    }   ##  } ; set timeout -1; expect -re \\\"100%\\\";\"   ##^^####sleep 5; expect -re \\\"password\\\"; send \\\"yyhu\\r\\n\\\";         # glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img   ## 这里还有一种方法上传，如果你没用环境变量。   ## glance --tenant=admin--username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 add name=\"Ubuntu 11.10 cloudimg amd64\" is_public=true container_format=ovf disk_format=qcow2 < /root/precise-server-cloudimg-amd64-disk1.img   ## 上传完镜像后。在运行   ## glance index         ## 五：安装配置nova   ## 1:安装nova相关组件   apt-get install -y nova-api nova-cert nova-common nova-compute nova-compute-kvm nova-doc nova-network nova-objectstore nova-scheduler  nova-volume python-nova python-novaclient  nova-consoleauth python-novnc novnc   ## 2：配置 /etc/nova/nova.conf   ## 如果你是在虚拟机里测试Openstack。你需要把默认的虚拟化引擎从kvm改成qemu。   cat <<NOVAconf > /etc/nova/nova.conf   --dhcpbridge_flagfile=/etc/nova/nova.conf   --dhcpbridge=/usr/bin/nova-dhcpbridge   --logdir=/var/log/nova   --state_path=/var/lib/nova   --lock_path=/var/lock/nova   --allow_admin_api=true   --use_deprecated_auth=false   --auth_strategy=keystone   --scheduler_driver=nova.scheduler.simple.SimpleScheduler   --s3_host=192.168.139.50   --ec2_host=192.168.139.50   --rabbit_host=192.168.139.50   --cc_host=192.168.139.50   --nova_url=http://192.168.139.50:8774/v1.1/   --routing_source_ip=192.168.139.50   --glance_api_servers=192.168.139.50:9292   --image_service=nova.image.glance.GlanceImageService   --iscsi_ip_prefix=10.0.0   --sql_connection=mysql://novadbadmin:cloud1234@192.168.139.50/nova   --ec2_url=http://192.168.139.50:8773/services/Cloud   --keystone_ec2_url=http://192.168.139.50:5000/v2.0/ec2tokens   --api_paste_config=/etc/nova/api-paste.ini   --libvirt_type=kvm   --libvirt_use_virtio_for_bridges=true   --start_guests_on_host_boot=true   --resume_guests_state_on_host_boot=true       #novnc   --novnc_enabled=true   --novncproxy_base_url= http://192.168.139.50:6080/vnc_auto.html   --vncserver_proxyclient_address=127.0.0.1   --vncserver_listen=127.0.0.1      # network specific settings   --network_manager=nova.network.manager.FlatDHCPManager   --public_interface=eth0   --flat_interface=eth1   --flat_network_bridge=br100   --fixed_range=10.0.0.1/27   --floating_range=192.168.139.225/27    --network_size=32   --flat_network_dhcp_start=10.0.0.40   --flat_injected=False   --force_dhcp_release   --iscsi_helper=tgtadm   --connection_type=libvirt   --root_helper=sudo nova-rootwrap   #--verbose   --verbose=False   NOVAconf   ## if ! kvm-ok 1>/dev/null 2>&1; then   ##      sed -i -e \"s/kvm/qemu/\" /etc/nova/nova-compute.conf   ## fi      sed -i -e \"s/novadbadmin/$NOVA_DB_USERNAME/g;s/cloud1234/$NOVA_DB_PASSWD/g\" /etc/nova/nova.conf   sed -i -e \"s/192.168.139.50/$OUT_IP/g;s/192.168.139.225/$FLOAT_IP/g;\" /etc/nova/nova.conf   sed -i -e \"s/10.0.0.1/$IN_IP/g;s/10.0.0.40/$FLAT_IP/g;s/10.0.0/$IN_IP_PRE/g;\" /etc/nova/nova.conf   ## kvm or qemu?   sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova.conf   sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova-compute.conf      ## 3：配置/etc/nova/api-paste.ini   sed -i -e \"          s/%SERVICE_TENANT_NAME%/admin/g;          s/%SERVICE_USER%/admin/g;          s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;       \" /etc/nova/api-paste.ini   # 4：停止和重启nova相关服务   for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done         ## 六：安装和配置Dashbaord   ## 1：安装dashbaord   apt-get install -y libapache2-mod-wsgi openstack-dashboard   /etc/init.d/apache2 restart      ## 这个时候，你就可以登录dashboard   ## http://192.168.139.50   ## user:admin   ## pass:ADMIN   ## 之后通过前端web管理         ## 七：创建第一个VM，可以通过上面安装的web管理系统创建。      # 0：同步数据库   ## 以前我运行同步数据库，如果正确, 当nova.conf   ## --verbose=False   ## 是没有任何的输出，否则有一堆是输出。   nova-manage db sync      # 创建网络   nova-manage network create private --fixed_range_v4=10.0.0.1/27 --num_networks=1 --bridge=br100 --bridge_interface=eth1 --network_size=32      ## 设定floating IP   nova-manage floating create --ip_range=192.168.139.225/27      ## 设置权限   chown -R nova:nova /etc/nova   ## 再重启相关服务   for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done   sleep 10       ## 1：检查nova服务   ## 一路回车，就可以了。通过expect可以不用输入。   if [ ! -e ~/.ssh/id_rsa ]; then   expect -c \"spawn ssh-keygen ; set timeout 5; expect \\\":\\\"; send \\\"\\r\\n\\\"; set timeout 3; expect  \\\":\\\"; send \\\"\\r\\n\\\";set timeout 3; expect \\\":\\\"; send \\\"\\r\\n\\\"; expect eof;\"   fi   ## 2：上传密钥到数据库   nova keypair-add --pub_key ~/.ssh/id_rsa.pub key1   ## nova keypair-list         ## 打开防火墙   nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0   nova secgroup-add-rule default udp 1 65535 0.0.0.0/0   nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0         ## 4：开始创建虚拟机   ## nova image-list   ## nova flavor-list   ## 创建虚拟机   # nova-manage flavor create --name=m1.minitest --memory=384 --cpu=1 --root_gb=1 --flavor=6 --ephemeral_gb=1      ## 上面的下载镜像移到这一步，可以去掉以下的步骤   wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img   glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img   nova boot --flavor 1 --image \"Ubuntu12.04-amd64\" --key_name key1 cloud01   # nova show cloud01   # nova console-log cloud01      ##关联vm   sleep 10   ## nova floating-ip-create   ## nova add-floating-ip cloud01 192.168.139.226   nova show cloud01   nova add-floating-ip cloud01 `nova floating-ip-create | awk 'FNR==4{print $2}'`   nova list   nova show cloud01   # ssh instance   # ssh-keygen -f \"/home/cloud/.ssh/known_hosts\" -R 10.0.0.2   # ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2         ## 八、完成安装部署   cat <<EOF >&1    1. login the dashboard      http://192.168.139.50      user:admin      pass:admin or $ADMIN_TOKEN    2. login a instance(\"cloud01\")      ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2    3. view & manage      nova list      nova show cloud01      ...    4. enjoy yourself! (Contact Hily.Hoo@gmail.com)   EOF   #!/usr/bin/env bash# **oneStack.sh** is a tool to deploy complete and real OpenStack cloud computing service.# This script installs and configures various combinations of *Glance*,# *Horizon*, *Keystone*, *Nova*, *Mysql* and others.# Hily.Hoo@gmail.com (Kayven)# Learn more and get the most recent version at http://code.google.com/p/onestack/set -o xtrace## 请使用root执行本脚本！## Ubuntu 12.04 (\"Precise\") 部署 OpenStack Essex（或者ubuntu11.10版本）## 一：准备系统## 1：下载ubuntu 12.04. 服务器版本## http://mirrors.ustc.edu.cn/ubuntu-releases/12.04/ubuntu-12.04-server-amd64.iso## 2：安装OS## 最小化安装，只需要安装ssh server就可以。## 装完系统后 更新源里的包,更新系统。确保你装的是最新版本的包。## 3：设置root权限## 为了简单，全部都是用root来运行。if [ `whoami` != \"root\" ]; then        sudo passwd        exec su -c 'sh ./oneStack.sh'fi## 4：设置参数和环境配置，直到两行#号结束## 这个配置以后就不需要更改了，比如看到192.168.139.50等ip，不用更改，脚本会自动替换这些初始值。## 可以变动的是，第500行的image的下载；或者去掉第七步开始的部分（上传镜像，创建实例）###################################################################################################################################################### 如果原来安装过OpenStack，请先执行 ./delStack.sh## 1）配置参数## 数据库相关MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}NOVA_DB_USERNAME=${NOVA_DB_USERNAME:-\"novadbadmin\"}NOVA_DB_PASSWD=${NOVA_DB_PASSWD:-\"cloud1234\"}GLANCE_DB_USERNAME=${GLANCE_DB_USERNAME:-\"glancedbadmin\"}GLANCE_DB_PASSWD=${GLANCE_DB_PASSWD:-\"cloud1234\"}## 注意：单网卡的去掉interfaces的eth1，并把nova.conf里面eth1改完eth0即可！## 自行检查下面network/interfaces的两个网卡设置## 本机器外网ip （包括局域网的内网ip，相对于OpenStack内网而言的）OUT_IP=\"192.168.139.50\"OUT_IP_PRE=\"192.168.139\"## nova-network内网ipIN_IP=\"10.0.0.1\"IN_IP_PRE=\"10.0.0\"## flat的起始ipFLAT_IP=\"10.0.0.40\"## 浮动ip的起始值FLOAT_IP=\"192.168.139.225\"## 选择虚拟技术，裸机使用kvm，虚拟机里面使用qemuVIRT_TYPE=\"qemu\"## token, 登录dashboard密码（用户名admin）ADMIN_TOKEN=\"admin\"############################################################################ 2）检查系统是否ubuntu12.04，据反映11.10也可以正常安装，可以去掉这一段检查# Determine what system we are running on.  This provides ``os_VENDOR``...# Determine OS Vendor, Release and Update #if [[ -x \"`which lsb_release 2>/dev/null`\" ]]; then    os_VENDOR=$(lsb_release -i -s)    os_RELEASE=$(lsb_release -r -s)    os_UPDATE=\"\"    os_CODENAME=$(lsb_release -c -s)#fiif [ \"Ubuntu\" = \"$os_VENDOR\" ]; then    DISTRO=$os_CODENAMEelse    echo \"The os didn't seems to be Ubuntu.\"    exit 1fiecho $DISTROif [ \"precise\" != ${DISTRO} -a \"oneiric\" != ${DISTRO} ]; then    echo \"WARNING: this script has been tested on oneiric or precise\"    exit 1fi############################################################################## 3）以下系统配置，语言中文支持、国内APT源、网络设置（两个网卡），可以自行配置，注释掉这些步骤。## locale############################################################################## 4：设置网络SOURCE_FILE=${SOURCE_FILE:-\"/etc/apt/sources.list\"}cp $SOURCE_FILE $SOURCE_FILE.bakcat <<APT >$SOURCE_FILEdeb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverseAPT#sed -i 's/debian.ustc.edu.cn/mirrors.163.com/g' $SOURCE_FILE# network configureNETWORK_CONF=${NETWORK_CONF:-\"/etc/network/interfaces\"}if ! grep -q eth1 $NETWORK_CONF; then        cat <<INTERFACES >$NETWORK_CONFauto loiface lo inet loopback# The primary network interfaceauto eth0iface eth0 inet staticpre-up ifconfig eth0 hw ether b8:ac:6f:9a:ee:e4        address 192.168.139.50        netmask 255.255.255.0        network 192.168.139.0        broadcast 192.168.139.255        gateway 192.168.139.253        dns-nameservers 210.72.128.8auto eth1iface eth1 inet staticpre-up ifconfig eth1 hw ether b8:ac:6f:9a:ee:e4        address 10.0.0.1        netmask 255.255.255.0        network 10.0.0.0        broadcast 10.0.0.255INTERFACES        /etc/init.d/networking restartfi## 以上系统配置，可以自行配置，注释掉这些步骤。########################################################################################################################################################apt-get update## 5：安装bridgeapt-get install -y bridge-utils## 6：设置NTPapt-get install -y ntpif ! grep -q fudge \"/etc/ntp.conf\"; then        cat <<NTPconf > /etc/ntp.confserver ntp.ubuntu.com iburstserver 127.127.1.0fudge 127.127.1.0 stratum 10NTPconffiservice ntp restart## 7：设置Iscsiapt-get install -y tgt ssh w3m unzip wget curl expect## 安装iscsi客户端、安装rabbitmqapt-get install -y open-iscsi open-iscsi-utilsapt-get install -y rabbitmq-server memcached python-memcacheapt-get install -y kvm libvirt-bin qemu qemu-kvm## 二：安装mysql和创建相关数据库## Openstack的组件：nova，keystone，glance，都需要数据库。不过目前官方建议keystone，采用sqlite存储，而不用mysql存放。所以我们只需要创建nova和glance两个数据库就可以。## 1：安装mysql## 过程中，会提示你输入root密码。通过debconf-set-selections读取跳过这一步.#MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}## apt-get install debconf debconf-utilscat <<MYSQL_PRESEED | debconf-set-selectionsmysql-server-5.1 mysql-server/root_password password $MYSQL_PASSWDmysql-server-5.1 mysql-server/root_password_again password $MYSQL_PASSWDmysql-server-5.1 mysql-server/start_on_boot boolean trueMYSQL_PRESEEDapt-get install --no-install-recommends -y mysql-server python-mysqldb## chkconfig mysql on## 让mysql支持外部访问sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf  service mysql restartif [ ! -s /etc/apache2/httpd.conf ]; then        echo \"ServerName localhost\" >> /etc/apache2/httpd.conf        /etc/init.d/apache2 restartfi## 2：安装phpmyadmin （可选）cat <<PHPmyadmin | debconf-set-selectionsphpmyadmin phpmyadmin/reconfigure-webserver  text     apache2phpmyadmin phpmyadmin/dbconfig-install       boolean  truephpmyadmin phpmyadmin/app-password-confirm   password $MYSQL_PASSWDphpmyadmin phpmyadmin/mysql/admin-pass       password $MYSQL_PASSWDphpmyadmin phpmyadmin/password-confirm       password $MYSQL_PASSWDphpmyadmin phpmyadmin/setup-password         password $MYSQL_PASSWDphpmyadmin phpmyadmin/mysql/app-pass         password $MYSQL_PASSWDPHPmyadminapt-get --no-install-recommends -yq install phpmyadmin## 3：创建数据库## nova数据库，   管理员：novadbadmin，密码是：cloud1234## glance数据库，管理员：glancedbadmin，密码是：cloud1234## 如果你修改密码，后面很多配置都需要相应更改。##   mysql -uroot -p##   CREATE DATABASE nova;##   GRANT ALL PRIVILEGES ON nova.* TO 'novadbadmin'@'%' IDENTIFIED BY 'cloud1234';##   CREATE DATABASE glance;##   GRANT ALL PRIVILEGES ON glance.* TO 'glancedbadmin'@'%' IDENTIFIED BY 'cloud1234';##   quitmysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS nova;\"mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE nova;\"mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON nova.* TO '$NOVA_DB_USERNAME'@'%' IDENTIFIED BY '$NOVA_DB_PASSWD';\"mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS glance;\"mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE glance;\"mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON glance.* TO '$GLANCE_DB_USERNAME'@'%' IDENTIFIED BY '$GLANCE_DB_PASSWD';\"if [ -e /var/lib/keystone/keystone.db ]; thenrm -rf /var/lib/keystone/keystone.dbfi## 三：安装和配置keystone## Openstack的各个组件，keystone是最难配置。搞定keystone，后面应该就没啥麻烦。## 1：安装keystoneapt-get install -y keystone python-keystone python-keystoneclient## 2：配置keystone## 如果更改token，需要修改 /etc/keystone/keystone.conf 两个地方##    默认定义的token就是ADMIN，web登录admin就是这个密码##    [DEFAULT]##    bind_host = 0.0.0.0##    public_port = 5000##    admin_port = 35357##    admin_token = ADMIN##    另外一个地方是##    [catalog]##    #driver = keystone.catalog.backends.sql.Catalog##    driver = keystone.catalog.backends.templated.TemplatedCatalog##    template_file = /etc/keystone/default_catalog.templates##     sed -i -e 's/keystone.catalog.backends.sql.Catalog/keystone.catalog.backends.templated.TemplatedCatalog\\ntemplate_file = \\/etc\\/keystone\\/default_catalog.templates/g' /etc/keystone/keystone.confsed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/keystone/keystone.confservice keystone restart## 3: 导入数据## 这个比较有技术含量。通过修改devstack的keystone_data.sh 脚本。实现导入数据。如果你上面的设置都和我一样，那么其实直接运行这个脚本就可以。## wget http://www.hastexo.com/system/files/user/4/keystone_data.sh_.txt -O keystone_data.shwget http://onestack.googlecode.com/files/gen_keystone_data.sh -O gen_keystone_data.shchmod +x gen_keystone_data.sh## 运行脚本, 如果你修改的默认的用户名和密码，你需要修改脚本。修改两个地方## 第一个是登录dashboard的admin的密码## 第二个就是keystone的token## #ADMIN_PASSWORD=${ADMIN_PASSWORD:-hastexo}## ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}## SERVICE_PASSWORD=${SERVICE_PASSWORD:-$ADMIN_PASSWORD}## #export SERVICE_TOKEN=\"hastexo\"## export SERVICE_TOKEN=\"Centrin\"## export SERVICE_ENDPOINT=\"http://localhost:35357/v2.0\"## SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}sed -i -e \"s/hastexo/$ADMIN_TOKEN/g\" gen_keystone_data.sh  ./gen_keystone_data.sh##  顺利运行，会什么都没有输出##  #echo $?##  下面会输出0 ，表示正常。你就别再运行脚本##  keystone --tenant=admin --username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 user-list##  看到这些，就说明keystone安装正常。cat <<ENV_AUTH >> /etc/profileexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=ADMINexport OS_AUTH_URL=\"http://localhost:5000/v2.0/\"ENV_AUTHsed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/profileexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=$ADMIN_TOKENexport OS_AUTH_URL=\"http://localhost:5000/v2.0/\"#source /etc/profile## 检查检查## # export | grep OS_## declare -x OS_AUTH_URL=\"http://localhost:5000/v2.0/\"## declare -x OS_PASSWORD=\"hastexo\"## declare -x OS_TENANT_NAME=\"admin\"## declare -x OS_USERNAME=\"admin\"## 这个时候，直接运行## root@node6:~# keystone user-list## 四：安装和配置glance## 1：安装软件apt-get install -y glance glance-api glance-client glance-common glance-registry python-glance## 2：配置/etc/glance/glance-api-paste.ini ## 修改文件最后3行，这些设置都是keystone导入数据的时候设置的。sed -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/glance/glance-api-paste.ini ## 3：设置 /etc/glance/glance-registry-paste.inised -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/glance/glance-registry-paste.ini## 4：配置/etc/glance/glance-registry.conf## 修改## #sql_connection = sqlite:////var/lib/glance/glance.sqlite## sql_connection = mysql://glancedbadmin:ohC3teiv@10.42.0.6/glance## 在末尾添加两行## [paste_deploy]## flavor = keystoneGLANCE_API_CONF=${GLANCE_API_CONF:-\"/etc/glance/glance-api.conf\"}GLANCE_REGISTRY_CONF=${GLANCE_REGISTRY_CONF:-\"/etc/glance/glance-registry.conf\"}PUBLIC_IP=${PUBLIC_IP:-\"192.168.139.50\"}sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_API_CONFcat <<EOF >>$GLANCE_API_CONF[paste_deploy]flavor = keystoneEOFsed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_REGISTRY_CONFcat <<EOF >>$GLANCE_REGISTRY_CONF[paste_deploy]flavor = keystoneEOF## 5：配置/etc/glance/glance-api.conf## 6：同步数据库glance-manage version_control 0glance-manage db_sync          service glance-api restart && service glance-registry restart## 7：验证glance服务是否正常# glance index## 没有任何的输出。表示正常。## #echo $?## 下面会输出0 ，表示正常。## # glance --version## glance 2012.1## 8：下载镜像并上传## ubuntu官方专门提供image，http://uec-images.ubuntu.com。不过一定要注意## 这些镜像，都是必须使用密钥登录，直接用用户名密码是无法的登录的。## 下载镜像## http://cloud-images.ubuntu.com/precise/current/## 这应该是ubuntu提供的最新的稳定的镜像。#wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img##  expect -c \"spawn /usr/bin/scp  yuan@192.168.139.84:/home/yuan/precise-server-cloudimg-amd64-disk1.img .; expect {##     \\\"password:\\\"; {##    send \\\"yyhu\\r\\n\\\";##    }; \\\"Are you sure you want to continue connecting (yes/no)?\\\" {##    send \\\"yes\\r\\n\\\" ;##    expect \\\"password:\\\";##    send \\\"yyhu\\r\\n\\\";##    }##  } ; set timeout -1; expect -re \\\"100%\\\";\"##^^####sleep 5; expect -re \\\"password\\\"; send \\\"yyhu\\r\\n\\\";# glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img## 这里还有一种方法上传，如果你没用环境变量。## glance --tenant=admin--username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 add name=\"Ubuntu 11.10 cloudimg amd64\" is_public=true container_format=ovf disk_format=qcow2 < /root/precise-server-cloudimg-amd64-disk1.img## 上传完镜像后。在运行## glance index## 五：安装配置nova## 1:安装nova相关组件apt-get install -y nova-api nova-cert nova-common nova-compute nova-compute-kvm nova-doc nova-network nova-objectstore nova-scheduler  nova-volume python-nova python-novaclient  nova-consoleauth python-novnc novnc## 2：配置 /etc/nova/nova.conf## 如果你是在虚拟机里测试Openstack。你需要把默认的虚拟化引擎从kvm改成qemu。cat <<NOVAconf > /etc/nova/nova.conf--dhcpbridge_flagfile=/etc/nova/nova.conf--dhcpbridge=/usr/bin/nova-dhcpbridge--logdir=/var/log/nova--state_path=/var/lib/nova--lock_path=/var/lock/nova--allow_admin_api=true--use_deprecated_auth=false--auth_strategy=keystone--scheduler_driver=nova.scheduler.simple.SimpleScheduler--s3_host=192.168.139.50--ec2_host=192.168.139.50--rabbit_host=192.168.139.50--cc_host=192.168.139.50--nova_url=http://192.168.139.50:8774/v1.1/--routing_source_ip=192.168.139.50--glance_api_servers=192.168.139.50:9292--image_service=nova.image.glance.GlanceImageService--iscsi_ip_prefix=10.0.0--sql_connection=mysql://novadbadmin:cloud1234@192.168.139.50/nova--ec2_url=http://192.168.139.50:8773/services/Cloud--keystone_ec2_url=http://192.168.139.50:5000/v2.0/ec2tokens--api_paste_config=/etc/nova/api-paste.ini--libvirt_type=kvm--libvirt_use_virtio_for_bridges=true--start_guests_on_host_boot=true--resume_guests_state_on_host_boot=true #novnc--novnc_enabled=true--novncproxy_base_url= http://192.168.139.50:6080/vnc_auto.html--vncserver_proxyclient_address=127.0.0.1--vncserver_listen=127.0.0.1# network specific settings--network_manager=nova.network.manager.FlatDHCPManager--public_interface=eth0--flat_interface=eth1--flat_network_bridge=br100--fixed_range=10.0.0.1/27--floating_range=192.168.139.225/27 --network_size=32--flat_network_dhcp_start=10.0.0.40--flat_injected=False--force_dhcp_release--iscsi_helper=tgtadm--connection_type=libvirt--root_helper=sudo nova-rootwrap#--verbose--verbose=FalseNOVAconf## if ! kvm-ok 1>/dev/null 2>&1; then##      sed -i -e \"s/kvm/qemu/\" /etc/nova/nova-compute.conf## fised -i -e \"s/novadbadmin/$NOVA_DB_USERNAME/g;s/cloud1234/$NOVA_DB_PASSWD/g\" /etc/nova/nova.confsed -i -e \"s/192.168.139.50/$OUT_IP/g;s/192.168.139.225/$FLOAT_IP/g;\" /etc/nova/nova.confsed -i -e \"s/10.0.0.1/$IN_IP/g;s/10.0.0.40/$FLAT_IP/g;s/10.0.0/$IN_IP_PRE/g;\" /etc/nova/nova.conf## kvm or qemu?sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova.confsed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova-compute.conf## 3：配置/etc/nova/api-paste.inised -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/nova/api-paste.ini# 4：停止和重启nova相关服务for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done## 六：安装和配置Dashbaord## 1：安装dashbaordapt-get install -y libapache2-mod-wsgi openstack-dashboard/etc/init.d/apache2 restart## 这个时候，你就可以登录dashboard## http://192.168.139.50## user:admin## pass:ADMIN## 之后通过前端web管理## 七：创建第一个VM，可以通过上面安装的web管理系统创建。# 0：同步数据库## 以前我运行同步数据库，如果正确, 当nova.conf## --verbose=False## 是没有任何的输出，否则有一堆是输出。nova-manage db sync# 创建网络nova-manage network create private --fixed_range_v4=10.0.0.1/27 --num_networks=1 --bridge=br100 --bridge_interface=eth1 --network_size=32## 设定floating IPnova-manage floating create --ip_range=192.168.139.225/27## 设置权限chown -R nova:nova /etc/nova## 再重启相关服务for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; donesleep 10 ## 1：检查nova服务## 一路回车，就可以了。通过expect可以不用输入。if [ ! -e ~/.ssh/id_rsa ]; thenexpect -c \"spawn ssh-keygen ; set timeout 5; expect \\\":\\\"; send \\\"\\r\\n\\\"; set timeout 3; expect  \\\":\\\"; send \\\"\\r\\n\\\";set timeout 3; expect \\\":\\\"; send \\\"\\r\\n\\\"; expect eof;\"fi## 2：上传密钥到数据库nova keypair-add --pub_key ~/.ssh/id_rsa.pub key1## nova keypair-list## 打开防火墙nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0nova secgroup-add-rule default udp 1 65535 0.0.0.0/0nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0## 4：开始创建虚拟机## nova image-list## nova flavor-list## 创建虚拟机# nova-manage flavor create --name=m1.minitest --memory=384 --cpu=1 --root_gb=1 --flavor=6 --ephemeral_gb=1## 上面的下载镜像移到这一步，可以去掉以下的步骤wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.imgglance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.imgnova boot --flavor 1 --image \"Ubuntu12.04-amd64\" --key_name key1 cloud01# nova show cloud01# nova console-log cloud01##关联vmsleep 10## nova floating-ip-create## nova add-floating-ip cloud01 192.168.139.226nova show cloud01nova add-floating-ip cloud01 `nova floating-ip-create | awk 'FNR==4{print $2}'`nova listnova show cloud01# ssh instance# ssh-keygen -f \"/home/cloud/.ssh/known_hosts\" -R 10.0.0.2# ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2## 八、完成安装部署cat <<EOF >&1 1. login the dashboard   http://192.168.139.50   user:admin   pass:admin or $ADMIN_TOKEN 2. login a instance(\"cloud01\")   ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2 3. view & manage   nova list   nova show cloud01   ... 4. enjoy yourself! (Contact Hily.Hoo@gmail.com)EOF 附录2：安装后web登录（dashboard）截图 附录3：云计算平台OpenStack资料 官方OpenStack www.openstack.org 国内OpenStack社区 www.openstack.org.cn 国内技术博客-陈沙克 http://hi.baidu.com/chenshake OpenStack 架构  http://blog.csdn.net/anghlq/article/details/6543880 Ubuntu12.04安装OpenStack文档（入门指南） http://docs.openstack.org/essex/openstack-compute/starter/content/ Installing OpenStack Essex (2012.1) on Ubuntu 12.04 (\"Precise Pangolin\")（原文） http://www.hastexo.com/resources/docs/installing-openstack-essex-20121-ubuntu-1204-precise-pangolin  “OpenStack Documentation”team（文档、bug报告） https://launchpad.net/~openstack-doc Quora上关于openstack的话题 http://www.quora.com/OpenStack stackoverflow上关于openstack资源的讨论 http://stackoverflow.com/questions/5882333/good-tutorials-and-resources-for-openstack   来源：http://blog.csdn.net/hilyoo/article/details/7696169 OneStack：在Ubuntu12.04（precise）上一键安装部署Opentack Essex 提醒：如果你喜欢折腾，喜欢自己一步一步安装各个功能组件和配置conf文件，你可以略过此文。本文工具可以在裸机和虚拟机一键部署真实的OpenStack云计算平台，主要步骤是配置网络、数据库、keystone、glance、nova、dashboard、创建镜像和启动实例等，代码内有详细注释。这只是学习Opentack的入门的一步，深入研究可以参考附录3给出的部分资料和社区。 2012.07.14更新： 收到很多邮件和提问，精力有限没法一一回复，在此致歉。随手把记录的一些问题和解决方法整理了，供大家参考。 详见《OpenStack安装部署管理中常见问题解决方法（OpenStack-Lite-FAQ）》。 2012.07.09更新： 很多人来信问我单网卡怎么设置，以及其它网络问题，我后面写了一篇介绍OpenStack网络的，详见《OpenStack云平台的网络模式及其工作机制》。 2012.07.02更新： 1、受邀在vpsee上对这个项目进行了较为详细的介绍（OneStack：Ubuntu 12.04 上一键自动部署 OpenStack），对于项目来源、相关考虑、项目结构、具体安装步骤（参数设置和前期工作）和预期等做了说明，可以参考。 2、希望增加高可用性的云计算部署，构建OpenStack的高可用性（HA，High Availability） 对高可用性进行了初步介绍，欢迎提出意见和建议。 一、项目(OneStack)地址： http://onestack.googlecode.com 喜欢git或者github的请去 https://github.com/Kayven/OneStack 不希望同行们把过多精力花在OpenStack的安装部署上（以后应该会改进），而是对其机制原理、工程实践、性能调优、应用服务等深入研究探讨。 所以提供这个一键部署的工具，帮助大家快速建立环境实验生产实践。项目结构如下： oneStack.sh（一键部署 all-in-one 的 OneStack，简单安装的主要文件）； setup_base.sh（安装基本系统）； setup_test.sh（添加镜像和实例）； addComputeNode.sh（增加计算节点）； delStack.sh（只卸载nova、glance、keystone等）； delAll.sh（卸载所有安装的组件和工具）； resetStack.sh（清空数据库，镜像、网络和实例等，重新上传镜像、创建实例）； addClient.sh（添加客户端，nova管理等）； HAStack 目录（OneStack 的高可用性，希望更多人可以提出自己的解决方案）。 二、部署(OneStack)步骤 简单部署OneStack： wget http://onestack.googlecode.com/files/oneStack.sh && chmod +x oneStack.sh && ./oneStack.sh 完整部署OneStack： Just checkout and run it! 1. Setup a fresh Ubuntu Precise(12.04) Sever OS. 2. checkout svn checkout http://onestack.googlecode.com/svn/trunk/ onestack-read-only 3. run it! cd onestack-read-only/ && ./oneStack.sh （如何简单配置参数见留言说明，或者见http://onestack.googlecode.com，或者见脚本注释） （多节点的部署类似，只需要在计算节点设置并执行addComputeNode.sh） 三、项目(OneStack)说明： 在Ubuntu12.04（precise）上安装部署Opentack Essex 只需要一个文件即可完成全部功能组件的部署：http://onestack.googlecode.com/files/oneStack.sh 里面含有详细的注释说明，看完整个脚本相当于看完了安装文档； svn整个项目只是多一些辅助工具，包括重置、重新安装、卸载等; 也欢迎同道人补充和完善更多的功能，适用于更多的操作系统和应用场景。 四、项目(OneStack)来源： 类似项目有DevStack，但是DevStack是使用screen安装OpenStack，重启服务器会出现一些问题，没有提供重启、重置等有用功能； 由于组件独立分散，安装过程过于繁琐，可以抽象成通用的项目供大家方便使用； 官方提供了一个比较完善的入门文档，但是，这一步一步下来得做很多无用功，容易漏错而引起很多莫名和头疼的问题； 本项目不像devstack只是提供实验环境，而是可以实际部署使用，可以自己修改配置，按需增加组件和功能，实现一键部署，可扩展使用。 五、项目(OneStack)描述： 一键完整部署OpenStack，可以自定义配置、方便地扩展功能组件，无交互地自动部署； 安装过程不需要等待配置： 功能齐全，附带了卸载、重置、添加计算节点等工具 可以卸载主要的opentack组件，包括nova、glance、keystone等； 可以重置数据库和配置，重新安装openstack组件； 可以根据需要自行更改脚本，方便部署自己的云计算平台。 经过多次测试，完整在VMware虚拟机上部署OpenStack       测试环境：VMware ESXi 5.0虚拟Dell R210服务器，其中一个虚拟机上部署Opentack，启动多个实例，正常运行；远程访问和web管理正常；重启、重置、重新安装都正常。       系统要求：双网卡，64位机器，支持VT技术 脚本运行过程会做如下工作： 配置网络相关； 安装和配置数据库； 安装和部署身份管理组件keystone； 安装和部署镜像管理组件glance； 安装和部署控制与计算组件nova； 安装和部署web管理组件dashboard； 上传和添加ubuntu12.04镜像； 设置项目安全规则和密钥； 启动实例，并正常运行。 欢迎反馈，谢谢. 本人尽力做到不出差错，但是限于学识和眼界，难免有考虑不周、冗余、没有最优化或者表达不好之处； 希望大家有任何意见建议随时联系我。 附录1： 为了方便大家查阅、讨论、交流、review和完善，在此贴出主要代码。 [plain] view plaincopyprint? #!/usr/bin/env bash   # **oneStack.sh** is a tool to deploy complete and real OpenStack cloud computing service.      # This script installs and configures various combinations of *Glance*,   # *Horizon*, *Keystone*, *Nova*, *Mysql* and others.      # Hily.Hoo@gmail.com (Kayven)   # Learn more and get the most recent version at http://code.google.com/p/onestack/      set -o xtrace   ## 请使用root执行本脚本！   ## Ubuntu 12.04 (\"Precise\") 部署 OpenStack Essex（或者ubuntu11.10版本）         ## 一：准备系统   ## 1：下载ubuntu 12.04. 服务器版本   ## http://mirrors.ustc.edu.cn/ubuntu-releases/12.04/ubuntu-12.04-server-amd64.iso   ## 2：安装OS   ## 最小化安装，只需要安装ssh server就可以。   ## 装完系统后 更新源里的包,更新系统。确保你装的是最新版本的包。      ## 3：设置root权限   ## 为了简单，全部都是用root来运行。   if [ `whoami` != \"root\" ]; then           sudo passwd           exec su -c 'sh ./oneStack.sh'   fi      ## 4：设置参数和环境配置，直到两行#号结束   ## 这个配置以后就不需要更改了，比如看到192.168.139.50等ip，不用更改，脚本会自动替换这些初始值。   ## 可以变动的是，第500行的image的下载；或者去掉第七步开始的部分（上传镜像，创建实例）   ##########################################################################   ##########################################################################   ## 如果原来安装过OpenStack，请先执行 ./delStack.sh   ## 1）配置参数   ## 数据库相关   MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}   NOVA_DB_USERNAME=${NOVA_DB_USERNAME:-\"novadbadmin\"}   NOVA_DB_PASSWD=${NOVA_DB_PASSWD:-\"cloud1234\"}   GLANCE_DB_USERNAME=${GLANCE_DB_USERNAME:-\"glancedbadmin\"}   GLANCE_DB_PASSWD=${GLANCE_DB_PASSWD:-\"cloud1234\"}      ## 注意：单网卡的去掉interfaces的eth1，并把nova.conf里面eth1改完eth0即可！   ## 自行检查下面network/interfaces的两个网卡设置   ## 本机器外网ip （包括局域网的内网ip，相对于OpenStack内网而言的）   OUT_IP=\"192.168.139.50\"   OUT_IP_PRE=\"192.168.139\"   ## nova-network内网ip   IN_IP=\"10.0.0.1\"   IN_IP_PRE=\"10.0.0\"   ## flat的起始ip   FLAT_IP=\"10.0.0.40\"   ## 浮动ip的起始值   FLOAT_IP=\"192.168.139.225\"      ## 选择虚拟技术，裸机使用kvm，虚拟机里面使用qemu   VIRT_TYPE=\"qemu\"   ## token, 登录dashboard密码（用户名admin）   ADMIN_TOKEN=\"admin\"   ##########################################################################   ## 2）检查系统是否ubuntu12.04，据反映11.10也可以正常安装，可以去掉这一段检查   # Determine what system we are running on.  This provides ``os_VENDOR``...   # Determine OS Vendor, Release and Update    #if [[ -x \"`which lsb_release 2>/dev/null`\" ]]; then       os_VENDOR=$(lsb_release -i -s)       os_RELEASE=$(lsb_release -r -s)       os_UPDATE=\"\"       os_CODENAME=$(lsb_release -c -s)   #fi   if [ \"Ubuntu\" = \"$os_VENDOR\" ]; then       DISTRO=$os_CODENAME   else       echo \"The os didn't seems to be Ubuntu.\"       exit 1   fi   echo $DISTRO   if [ \"precise\" != ${DISTRO} -a \"oneiric\" != ${DISTRO} ]; then       echo \"WARNING: this script has been tested on oneiric or precise\"       exit 1   fi      ############################################################################   ## 3）以下系统配置，语言中文支持、国内APT源、网络设置（两个网卡），可以自行配置，注释掉这些步骤。   ## locale      ############################################################################   ## 4：设置网络   SOURCE_FILE=${SOURCE_FILE:-\"/etc/apt/sources.list\"}   cp $SOURCE_FILE $SOURCE_FILE.bak   cat <<APT >$SOURCE_FILE   deb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse   deb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiverse   deb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverse   APT   #sed -i 's/debian.ustc.edu.cn/mirrors.163.com/g' $SOURCE_FILE      # network configure   NETWORK_CONF=${NETWORK_CONF:-\"/etc/network/interfaces\"}   if ! grep -q eth1 $NETWORK_CONF; then           cat <<INTERFACES >$NETWORK_CONF   auto lo   iface lo inet loopback      # The primary network interface   auto eth0   iface eth0 inet static   pre-up ifconfig eth0 hw ether b8:ac:6f:9a:ee:e4           address 192.168.139.50           netmask 255.255.255.0           network 192.168.139.0           broadcast 192.168.139.255           gateway 192.168.139.253           dns-nameservers 210.72.128.8      auto eth1   iface eth1 inet static   pre-up ifconfig eth1 hw ether b8:ac:6f:9a:ee:e4           address 10.0.0.1           netmask 255.255.255.0           network 10.0.0.0           broadcast 10.0.0.255   INTERFACES           /etc/init.d/networking restart   fi   ## 以上系统配置，可以自行配置，注释掉这些步骤。   ############################################################################   ############################################################################      apt-get update            ## 5：安装bridge   apt-get install -y bridge-utils   ## 6：设置NTP   apt-get install -y ntp   if ! grep -q fudge \"/etc/ntp.conf\"; then           cat <<NTPconf > /etc/ntp.conf   server ntp.ubuntu.com iburst   server 127.127.1.0   fudge 127.127.1.0 stratum 10   NTPconf   fi   service ntp restart   ## 7：设置Iscsi   apt-get install -y tgt ssh w3m unzip wget curl expect   ## 安装iscsi客户端、安装rabbitmq   apt-get install -y open-iscsi open-iscsi-utils   apt-get install -y rabbitmq-server memcached python-memcache   apt-get install -y kvm libvirt-bin qemu qemu-kvm      ## 二：安装mysql和创建相关数据库   ## Openstack的组件：nova，keystone，glance，都需要数据库。不过目前官方建议keystone，采用sqlite存储，而不用mysql存放。所以我们只需要创建nova和glance两个数据库就可以。   ## 1：安装mysql   ## 过程中，会提示你输入root密码。通过debconf-set-selections读取跳过这一步.   #MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}   ## apt-get install debconf debconf-utils   cat <<MYSQL_PRESEED | debconf-set-selections   mysql-server-5.1 mysql-server/root_password password $MYSQL_PASSWD   mysql-server-5.1 mysql-server/root_password_again password $MYSQL_PASSWD   mysql-server-5.1 mysql-server/start_on_boot boolean true   MYSQL_PRESEED      apt-get install --no-install-recommends -y mysql-server python-mysqldb   ## chkconfig mysql on   ## 让mysql支持外部访问   sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf     service mysql restart   if [ ! -s /etc/apache2/httpd.conf ]; then           echo \"ServerName localhost\" >> /etc/apache2/httpd.conf           /etc/init.d/apache2 restart   fi      ## 2：安装phpmyadmin （可选）   cat <<PHPmyadmin | debconf-set-selections   phpmyadmin phpmyadmin/reconfigure-webserver  text     apache2   phpmyadmin phpmyadmin/dbconfig-install       boolean  true   phpmyadmin phpmyadmin/app-password-confirm   password $MYSQL_PASSWD   phpmyadmin phpmyadmin/mysql/admin-pass       password $MYSQL_PASSWD   phpmyadmin phpmyadmin/password-confirm       password $MYSQL_PASSWD   phpmyadmin phpmyadmin/setup-password         password $MYSQL_PASSWD   phpmyadmin phpmyadmin/mysql/app-pass         password $MYSQL_PASSWD   PHPmyadmin   apt-get --no-install-recommends -yq install phpmyadmin      ## 3：创建数据库   ## nova数据库，   管理员：novadbadmin，密码是：cloud1234   ## glance数据库，管理员：glancedbadmin，密码是：cloud1234   ## 如果你修改密码，后面很多配置都需要相应更改。   ##   mysql -uroot -p   ##   CREATE DATABASE nova;   ##   GRANT ALL PRIVILEGES ON nova.* TO 'novadbadmin'@'%' IDENTIFIED BY 'cloud1234';   ##   CREATE DATABASE glance;   ##   GRANT ALL PRIVILEGES ON glance.* TO 'glancedbadmin'@'%' IDENTIFIED BY 'cloud1234';   ##   quit   mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS nova;\"   mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE nova;\"   mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON nova.* TO '$NOVA_DB_USERNAME'@'%' IDENTIFIED BY '$NOVA_DB_PASSWD';\"   mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS glance;\"   mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE glance;\"   mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON glance.* TO '$GLANCE_DB_USERNAME'@'%' IDENTIFIED BY '$GLANCE_DB_PASSWD';\"   if [ -e /var/lib/keystone/keystone.db ]; then   rm -rf /var/lib/keystone/keystone.db   fi      ## 三：安装和配置keystone   ## Openstack的各个组件，keystone是最难配置。搞定keystone，后面应该就没啥麻烦。   ## 1：安装keystone   apt-get install -y keystone python-keystone python-keystoneclient   ## 2：配置keystone   ## 如果更改token，需要修改 /etc/keystone/keystone.conf 两个地方   ##    默认定义的token就是ADMIN，web登录admin就是这个密码   ##    [DEFAULT]   ##    bind_host = 0.0.0.0   ##    public_port = 5000   ##    admin_port = 35357   ##    admin_token = ADMIN   ##    另外一个地方是   ##    [catalog]   ##    #driver = keystone.catalog.backends.sql.Catalog   ##    driver = keystone.catalog.backends.templated.TemplatedCatalog   ##    template_file = /etc/keystone/default_catalog.templates   ##        sed -i -e 's/keystone.catalog.backends.sql.Catalog/keystone.catalog.backends.templated.TemplatedCatalog\\ntemplate_file = \\/etc\\/keystone\\/default_catalog.templates/g' /etc/keystone/keystone.conf   sed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/keystone/keystone.conf   service keystone restart      ## 3: 导入数据   ## 这个比较有技术含量。通过修改devstack的keystone_data.sh 脚本。实现导入数据。如果你上面的设置都和我一样，那么其实直接运行这个脚本就可以。   ## wget http://www.hastexo.com/system/files/user/4/keystone_data.sh_.txt -O keystone_data.sh   wget http://onestack.googlecode.com/files/gen_keystone_data.sh -O gen_keystone_data.sh   chmod +x gen_keystone_data.sh   ## 运行脚本, 如果你修改的默认的用户名和密码，你需要修改脚本。修改两个地方   ## 第一个是登录dashboard的admin的密码   ## 第二个就是keystone的token   ## #ADMIN_PASSWORD=${ADMIN_PASSWORD:-hastexo}   ## ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}   ## SERVICE_PASSWORD=${SERVICE_PASSWORD:-$ADMIN_PASSWORD}   ## #export SERVICE_TOKEN=\"hastexo\"   ## export SERVICE_TOKEN=\"Centrin\"   ## export SERVICE_ENDPOINT=\"http://localhost:35357/v2.0\"   ## SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}   sed -i -e \"s/hastexo/$ADMIN_TOKEN/g\" gen_keystone_data.sh        ./gen_keystone_data.sh   ##  顺利运行，会什么都没有输出   ##  #echo $?   ##  下面会输出0 ，表示正常。你就别再运行脚本   ##  keystone --tenant=admin --username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 user-list   ##  看到这些，就说明keystone安装正常。      cat <<ENV_AUTH >> /etc/profile   export OS_TENANT_NAME=admin   export OS_USERNAME=admin   export OS_PASSWORD=ADMIN   export OS_AUTH_URL=\"http://localhost:5000/v2.0/\"   ENV_AUTH   sed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/profile   export OS_TENANT_NAME=admin   export OS_USERNAME=admin   export OS_PASSWORD=$ADMIN_TOKEN   export OS_AUTH_URL=\"http://localhost:5000/v2.0/\"   #source /etc/profile   ## 检查检查   ## # export | grep OS_   ## declare -x OS_AUTH_URL=\"http://localhost:5000/v2.0/\"   ## declare -x OS_PASSWORD=\"hastexo\"   ## declare -x OS_TENANT_NAME=\"admin\"   ## declare -x OS_USERNAME=\"admin\"   ## 这个时候，直接运行   ## root@node6:~# keystone user-list         ## 四：安装和配置glance   ## 1：安装软件   apt-get install -y glance glance-api glance-client glance-common glance-registry python-glance   ## 2：配置/etc/glance/glance-api-paste.ini    ## 修改文件最后3行，这些设置都是keystone导入数据的时候设置的。   sed -i -e \"          s/%SERVICE_TENANT_NAME%/admin/g;          s/%SERVICE_USER%/admin/g;          s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;       \" /etc/glance/glance-api-paste.ini       ## 3：设置 /etc/glance/glance-registry-paste.ini   sed -i -e \"          s/%SERVICE_TENANT_NAME%/admin/g;          s/%SERVICE_USER%/admin/g;          s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;       \" /etc/glance/glance-registry-paste.ini   ## 4：配置/etc/glance/glance-registry.conf   ## 修改   ## #sql_connection = sqlite:////var/lib/glance/glance.sqlite   ## sql_connection = mysql://glancedbadmin:ohC3teiv@10.42.0.6/glance   ## 在末尾添加两行   ## [paste_deploy]   ## flavor = keystone   GLANCE_API_CONF=${GLANCE_API_CONF:-\"/etc/glance/glance-api.conf\"}   GLANCE_REGISTRY_CONF=${GLANCE_REGISTRY_CONF:-\"/etc/glance/glance-registry.conf\"}   PUBLIC_IP=${PUBLIC_IP:-\"192.168.139.50\"}   sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_API_CONF   cat <<EOF >>$GLANCE_API_CONF   [paste_deploy]   flavor = keystone   EOF   sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_REGISTRY_CONF   cat <<EOF >>$GLANCE_REGISTRY_CONF   [paste_deploy]   flavor = keystone   EOF      ## 5：配置/etc/glance/glance-api.conf   ## 6：同步数据库   glance-manage version_control 0   glance-manage db_sync             service glance-api restart && service glance-registry restart      ## 7：验证glance服务是否正常   # glance index   ## 没有任何的输出。表示正常。   ## #echo $?   ## 下面会输出0 ，表示正常。   ## # glance --version   ## glance 2012.1      ## 8：下载镜像并上传   ## ubuntu官方专门提供image，http://uec-images.ubuntu.com。不过一定要注意   ## 这些镜像，都是必须使用密钥登录，直接用用户名密码是无法的登录的。   ## 下载镜像   ## http://cloud-images.ubuntu.com/precise/current/   ## 这应该是ubuntu提供的最新的稳定的镜像。   #wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img   ##  expect -c \"spawn /usr/bin/scp  yuan@192.168.139.84:/home/yuan/precise-server-cloudimg-amd64-disk1.img .; expect {   ##     \\\"password:\\\"; {   ##    send \\\"yyhu\\r\\n\\\";   ##    }; \\\"Are you sure you want to continue connecting (yes/no)?\\\" {   ##    send \\\"yes\\r\\n\\\" ;   ##    expect \\\"password:\\\";   ##    send \\\"yyhu\\r\\n\\\";   ##    }   ##  } ; set timeout -1; expect -re \\\"100%\\\";\"   ##^^####sleep 5; expect -re \\\"password\\\"; send \\\"yyhu\\r\\n\\\";         # glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img   ## 这里还有一种方法上传，如果你没用环境变量。   ## glance --tenant=admin--username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 add name=\"Ubuntu 11.10 cloudimg amd64\" is_public=true container_format=ovf disk_format=qcow2 < /root/precise-server-cloudimg-amd64-disk1.img   ## 上传完镜像后。在运行   ## glance index         ## 五：安装配置nova   ## 1:安装nova相关组件   apt-get install -y nova-api nova-cert nova-common nova-compute nova-compute-kvm nova-doc nova-network nova-objectstore nova-scheduler  nova-volume python-nova python-novaclient  nova-consoleauth python-novnc novnc   ## 2：配置 /etc/nova/nova.conf   ## 如果你是在虚拟机里测试Openstack。你需要把默认的虚拟化引擎从kvm改成qemu。   cat <<NOVAconf > /etc/nova/nova.conf   --dhcpbridge_flagfile=/etc/nova/nova.conf   --dhcpbridge=/usr/bin/nova-dhcpbridge   --logdir=/var/log/nova   --state_path=/var/lib/nova   --lock_path=/var/lock/nova   --allow_admin_api=true   --use_deprecated_auth=false   --auth_strategy=keystone   --scheduler_driver=nova.scheduler.simple.SimpleScheduler   --s3_host=192.168.139.50   --ec2_host=192.168.139.50   --rabbit_host=192.168.139.50   --cc_host=192.168.139.50   --nova_url=http://192.168.139.50:8774/v1.1/   --routing_source_ip=192.168.139.50   --glance_api_servers=192.168.139.50:9292   --image_service=nova.image.glance.GlanceImageService   --iscsi_ip_prefix=10.0.0   --sql_connection=mysql://novadbadmin:cloud1234@192.168.139.50/nova   --ec2_url=http://192.168.139.50:8773/services/Cloud   --keystone_ec2_url=http://192.168.139.50:5000/v2.0/ec2tokens   --api_paste_config=/etc/nova/api-paste.ini   --libvirt_type=kvm   --libvirt_use_virtio_for_bridges=true   --start_guests_on_host_boot=true   --resume_guests_state_on_host_boot=true       #novnc   --novnc_enabled=true   --novncproxy_base_url= http://192.168.139.50:6080/vnc_auto.html   --vncserver_proxyclient_address=127.0.0.1   --vncserver_listen=127.0.0.1      # network specific settings   --network_manager=nova.network.manager.FlatDHCPManager   --public_interface=eth0   --flat_interface=eth1   --flat_network_bridge=br100   --fixed_range=10.0.0.1/27   --floating_range=192.168.139.225/27    --network_size=32   --flat_network_dhcp_start=10.0.0.40   --flat_injected=False   --force_dhcp_release   --iscsi_helper=tgtadm   --connection_type=libvirt   --root_helper=sudo nova-rootwrap   #--verbose   --verbose=False   NOVAconf   ## if ! kvm-ok 1>/dev/null 2>&1; then   ##      sed -i -e \"s/kvm/qemu/\" /etc/nova/nova-compute.conf   ## fi      sed -i -e \"s/novadbadmin/$NOVA_DB_USERNAME/g;s/cloud1234/$NOVA_DB_PASSWD/g\" /etc/nova/nova.conf   sed -i -e \"s/192.168.139.50/$OUT_IP/g;s/192.168.139.225/$FLOAT_IP/g;\" /etc/nova/nova.conf   sed -i -e \"s/10.0.0.1/$IN_IP/g;s/10.0.0.40/$FLAT_IP/g;s/10.0.0/$IN_IP_PRE/g;\" /etc/nova/nova.conf   ## kvm or qemu?   sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova.conf   sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova-compute.conf      ## 3：配置/etc/nova/api-paste.ini   sed -i -e \"          s/%SERVICE_TENANT_NAME%/admin/g;          s/%SERVICE_USER%/admin/g;          s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;       \" /etc/nova/api-paste.ini   # 4：停止和重启nova相关服务   for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done         ## 六：安装和配置Dashbaord   ## 1：安装dashbaord   apt-get install -y libapache2-mod-wsgi openstack-dashboard   /etc/init.d/apache2 restart      ## 这个时候，你就可以登录dashboard   ## http://192.168.139.50   ## user:admin   ## pass:ADMIN   ## 之后通过前端web管理         ## 七：创建第一个VM，可以通过上面安装的web管理系统创建。      # 0：同步数据库   ## 以前我运行同步数据库，如果正确, 当nova.conf   ## --verbose=False   ## 是没有任何的输出，否则有一堆是输出。   nova-manage db sync      # 创建网络   nova-manage network create private --fixed_range_v4=10.0.0.1/27 --num_networks=1 --bridge=br100 --bridge_interface=eth1 --network_size=32      ## 设定floating IP   nova-manage floating create --ip_range=192.168.139.225/27      ## 设置权限   chown -R nova:nova /etc/nova   ## 再重启相关服务   for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done   sleep 10       ## 1：检查nova服务   ## 一路回车，就可以了。通过expect可以不用输入。   if [ ! -e ~/.ssh/id_rsa ]; then   expect -c \"spawn ssh-keygen ; set timeout 5; expect \\\":\\\"; send \\\"\\r\\n\\\"; set timeout 3; expect  \\\":\\\"; send \\\"\\r\\n\\\";set timeout 3; expect \\\":\\\"; send \\\"\\r\\n\\\"; expect eof;\"   fi   ## 2：上传密钥到数据库   nova keypair-add --pub_key ~/.ssh/id_rsa.pub key1   ## nova keypair-list         ## 打开防火墙   nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0   nova secgroup-add-rule default udp 1 65535 0.0.0.0/0   nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0         ## 4：开始创建虚拟机   ## nova image-list   ## nova flavor-list   ## 创建虚拟机   # nova-manage flavor create --name=m1.minitest --memory=384 --cpu=1 --root_gb=1 --flavor=6 --ephemeral_gb=1      ## 上面的下载镜像移到这一步，可以去掉以下的步骤   wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img   glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img   nova boot --flavor 1 --image \"Ubuntu12.04-amd64\" --key_name key1 cloud01   # nova show cloud01   # nova console-log cloud01      ##关联vm   sleep 10   ## nova floating-ip-create   ## nova add-floating-ip cloud01 192.168.139.226   nova show cloud01   nova add-floating-ip cloud01 `nova floating-ip-create | awk 'FNR==4{print $2}'`   nova list   nova show cloud01   # ssh instance   # ssh-keygen -f \"/home/cloud/.ssh/known_hosts\" -R 10.0.0.2   # ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2         ## 八、完成安装部署   cat <<EOF >&1    1. login the dashboard      http://192.168.139.50      user:admin      pass:admin or $ADMIN_TOKEN    2. login a instance(\"cloud01\")      ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2    3. view & manage      nova list      nova show cloud01      ...    4. enjoy yourself! (Contact Hily.Hoo@gmail.com)   EOF   #!/usr/bin/env bash# **oneStack.sh** is a tool to deploy complete and real OpenStack cloud computing service.# This script installs and configures various combinations of *Glance*,# *Horizon*, *Keystone*, *Nova*, *Mysql* and others.# Hily.Hoo@gmail.com (Kayven)# Learn more and get the most recent version at http://code.google.com/p/onestack/set -o xtrace## 请使用root执行本脚本！## Ubuntu 12.04 (\"Precise\") 部署 OpenStack Essex（或者ubuntu11.10版本）## 一：准备系统## 1：下载ubuntu 12.04. 服务器版本## http://mirrors.ustc.edu.cn/ubuntu-releases/12.04/ubuntu-12.04-server-amd64.iso## 2：安装OS## 最小化安装，只需要安装ssh server就可以。## 装完系统后 更新源里的包,更新系统。确保你装的是最新版本的包。## 3：设置root权限## 为了简单，全部都是用root来运行。if [ `whoami` != \"root\" ]; then        sudo passwd        exec su -c 'sh ./oneStack.sh'fi## 4：设置参数和环境配置，直到两行#号结束## 这个配置以后就不需要更改了，比如看到192.168.139.50等ip，不用更改，脚本会自动替换这些初始值。## 可以变动的是，第500行的image的下载；或者去掉第七步开始的部分（上传镜像，创建实例）###################################################################################################################################################### 如果原来安装过OpenStack，请先执行 ./delStack.sh## 1）配置参数## 数据库相关MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}NOVA_DB_USERNAME=${NOVA_DB_USERNAME:-\"novadbadmin\"}NOVA_DB_PASSWD=${NOVA_DB_PASSWD:-\"cloud1234\"}GLANCE_DB_USERNAME=${GLANCE_DB_USERNAME:-\"glancedbadmin\"}GLANCE_DB_PASSWD=${GLANCE_DB_PASSWD:-\"cloud1234\"}## 注意：单网卡的去掉interfaces的eth1，并把nova.conf里面eth1改完eth0即可！## 自行检查下面network/interfaces的两个网卡设置## 本机器外网ip （包括局域网的内网ip，相对于OpenStack内网而言的）OUT_IP=\"192.168.139.50\"OUT_IP_PRE=\"192.168.139\"## nova-network内网ipIN_IP=\"10.0.0.1\"IN_IP_PRE=\"10.0.0\"## flat的起始ipFLAT_IP=\"10.0.0.40\"## 浮动ip的起始值FLOAT_IP=\"192.168.139.225\"## 选择虚拟技术，裸机使用kvm，虚拟机里面使用qemuVIRT_TYPE=\"qemu\"## token, 登录dashboard密码（用户名admin）ADMIN_TOKEN=\"admin\"############################################################################ 2）检查系统是否ubuntu12.04，据反映11.10也可以正常安装，可以去掉这一段检查# Determine what system we are running on.  This provides ``os_VENDOR``...# Determine OS Vendor, Release and Update #if [[ -x \"`which lsb_release 2>/dev/null`\" ]]; then    os_VENDOR=$(lsb_release -i -s)    os_RELEASE=$(lsb_release -r -s)    os_UPDATE=\"\"    os_CODENAME=$(lsb_release -c -s)#fiif [ \"Ubuntu\" = \"$os_VENDOR\" ]; then    DISTRO=$os_CODENAMEelse    echo \"The os didn't seems to be Ubuntu.\"    exit 1fiecho $DISTROif [ \"precise\" != ${DISTRO} -a \"oneiric\" != ${DISTRO} ]; then    echo \"WARNING: this script has been tested on oneiric or precise\"    exit 1fi############################################################################## 3）以下系统配置，语言中文支持、国内APT源、网络设置（两个网卡），可以自行配置，注释掉这些步骤。## locale############################################################################## 4：设置网络SOURCE_FILE=${SOURCE_FILE:-\"/etc/apt/sources.list\"}cp $SOURCE_FILE $SOURCE_FILE.bakcat <<APT >$SOURCE_FILEdeb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverseAPT#sed -i 's/debian.ustc.edu.cn/mirrors.163.com/g' $SOURCE_FILE# network configureNETWORK_CONF=${NETWORK_CONF:-\"/etc/network/interfaces\"}if ! grep -q eth1 $NETWORK_CONF; then        cat <<INTERFACES >$NETWORK_CONFauto loiface lo inet loopback# The primary network interfaceauto eth0iface eth0 inet staticpre-up ifconfig eth0 hw ether b8:ac:6f:9a:ee:e4        address 192.168.139.50        netmask 255.255.255.0        network 192.168.139.0        broadcast 192.168.139.255        gateway 192.168.139.253        dns-nameservers 210.72.128.8auto eth1iface eth1 inet staticpre-up ifconfig eth1 hw ether b8:ac:6f:9a:ee:e4        address 10.0.0.1        netmask 255.255.255.0        network 10.0.0.0        broadcast 10.0.0.255INTERFACES        /etc/init.d/networking restartfi## 以上系统配置，可以自行配置，注释掉这些步骤。########################################################################################################################################################apt-get update## 5：安装bridgeapt-get install -y bridge-utils## 6：设置NTPapt-get install -y ntpif ! grep -q fudge \"/etc/ntp.conf\"; then        cat <<NTPconf > /etc/ntp.confserver ntp.ubuntu.com iburstserver 127.127.1.0fudge 127.127.1.0 stratum 10NTPconffiservice ntp restart## 7：设置Iscsiapt-get install -y tgt ssh w3m unzip wget curl expect## 安装iscsi客户端、安装rabbitmqapt-get install -y open-iscsi open-iscsi-utilsapt-get install -y rabbitmq-server memcached python-memcacheapt-get install -y kvm libvirt-bin qemu qemu-kvm## 二：安装mysql和创建相关数据库## Openstack的组件：nova，keystone，glance，都需要数据库。不过目前官方建议keystone，采用sqlite存储，而不用mysql存放。所以我们只需要创建nova和glance两个数据库就可以。## 1：安装mysql## 过程中，会提示你输入root密码。通过debconf-set-selections读取跳过这一步.#MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}## apt-get install debconf debconf-utilscat <<MYSQL_PRESEED | debconf-set-selectionsmysql-server-5.1 mysql-server/root_password password $MYSQL_PASSWDmysql-server-5.1 mysql-server/root_password_again password $MYSQL_PASSWDmysql-server-5.1 mysql-server/start_on_boot boolean trueMYSQL_PRESEEDapt-get install --no-install-recommends -y mysql-server python-mysqldb## chkconfig mysql on## 让mysql支持外部访问sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf  service mysql restartif [ ! -s /etc/apache2/httpd.conf ]; then        echo \"ServerName localhost\" >> /etc/apache2/httpd.conf        /etc/init.d/apache2 restartfi## 2：安装phpmyadmin （可选）cat <<PHPmyadmin | debconf-set-selectionsphpmyadmin phpmyadmin/reconfigure-webserver  text     apache2phpmyadmin phpmyadmin/dbconfig-install       boolean  truephpmyadmin phpmyadmin/app-password-confirm   password $MYSQL_PASSWDphpmyadmin phpmyadmin/mysql/admin-pass       password $MYSQL_PASSWDphpmyadmin phpmyadmin/password-confirm       password $MYSQL_PASSWDphpmyadmin phpmyadmin/setup-password         password $MYSQL_PASSWDphpmyadmin phpmyadmin/mysql/app-pass         password $MYSQL_PASSWDPHPmyadminapt-get --no-install-recommends -yq install phpmyadmin## 3：创建数据库## nova数据库，   管理员：novadbadmin，密码是：cloud1234## glance数据库，管理员：glancedbadmin，密码是：cloud1234## 如果你修改密码，后面很多配置都需要相应更改。##   mysql -uroot -p##   CREATE DATABASE nova;##   GRANT ALL PRIVILEGES ON nova.* TO 'novadbadmin'@'%' IDENTIFIED BY 'cloud1234';##   CREATE DATABASE glance;##   GRANT ALL PRIVILEGES ON glance.* TO 'glancedbadmin'@'%' IDENTIFIED BY 'cloud1234';##   quitmysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS nova;\"mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE nova;\"mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON nova.* TO '$NOVA_DB_USERNAME'@'%' IDENTIFIED BY '$NOVA_DB_PASSWD';\"mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS glance;\"mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE glance;\"mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON glance.* TO '$GLANCE_DB_USERNAME'@'%' IDENTIFIED BY '$GLANCE_DB_PASSWD';\"if [ -e /var/lib/keystone/keystone.db ]; thenrm -rf /var/lib/keystone/keystone.dbfi## 三：安装和配置keystone## Openstack的各个组件，keystone是最难配置。搞定keystone，后面应该就没啥麻烦。## 1：安装keystoneapt-get install -y keystone python-keystone python-keystoneclient## 2：配置keystone## 如果更改token，需要修改 /etc/keystone/keystone.conf 两个地方##    默认定义的token就是ADMIN，web登录admin就是这个密码##    [DEFAULT]##    bind_host = 0.0.0.0##    public_port = 5000##    admin_port = 35357##    admin_token = ADMIN##    另外一个地方是##    [catalog]##    #driver = keystone.catalog.backends.sql.Catalog##    driver = keystone.catalog.backends.templated.TemplatedCatalog##    template_file = /etc/keystone/default_catalog.templates##     sed -i -e 's/keystone.catalog.backends.sql.Catalog/keystone.catalog.backends.templated.TemplatedCatalog\\ntemplate_file = \\/etc\\/keystone\\/default_catalog.templates/g' /etc/keystone/keystone.confsed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/keystone/keystone.confservice keystone restart## 3: 导入数据## 这个比较有技术含量。通过修改devstack的keystone_data.sh 脚本。实现导入数据。如果你上面的设置都和我一样，那么其实直接运行这个脚本就可以。## wget http://www.hastexo.com/system/files/user/4/keystone_data.sh_.txt -O keystone_data.shwget http://onestack.googlecode.com/files/gen_keystone_data.sh -O gen_keystone_data.shchmod +x gen_keystone_data.sh## 运行脚本, 如果你修改的默认的用户名和密码，你需要修改脚本。修改两个地方## 第一个是登录dashboard的admin的密码## 第二个就是keystone的token## #ADMIN_PASSWORD=${ADMIN_PASSWORD:-hastexo}## ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}## SERVICE_PASSWORD=${SERVICE_PASSWORD:-$ADMIN_PASSWORD}## #export SERVICE_TOKEN=\"hastexo\"## export SERVICE_TOKEN=\"Centrin\"## export SERVICE_ENDPOINT=\"http://localhost:35357/v2.0\"## SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}sed -i -e \"s/hastexo/$ADMIN_TOKEN/g\" gen_keystone_data.sh  ./gen_keystone_data.sh##  顺利运行，会什么都没有输出##  #echo $?##  下面会输出0 ，表示正常。你就别再运行脚本##  keystone --tenant=admin --username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 user-list##  看到这些，就说明keystone安装正常。cat <<ENV_AUTH >> /etc/profileexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=ADMINexport OS_AUTH_URL=\"http://localhost:5000/v2.0/\"ENV_AUTHsed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/profileexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=$ADMIN_TOKENexport OS_AUTH_URL=\"http://localhost:5000/v2.0/\"#source /etc/profile## 检查检查## # export | grep OS_## declare -x OS_AUTH_URL=\"http://localhost:5000/v2.0/\"## declare -x OS_PASSWORD=\"hastexo\"## declare -x OS_TENANT_NAME=\"admin\"## declare -x OS_USERNAME=\"admin\"## 这个时候，直接运行## root@node6:~# keystone user-list## 四：安装和配置glance## 1：安装软件apt-get install -y glance glance-api glance-client glance-common glance-registry python-glance## 2：配置/etc/glance/glance-api-paste.ini ## 修改文件最后3行，这些设置都是keystone导入数据的时候设置的。sed -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/glance/glance-api-paste.ini ## 3：设置 /etc/glance/glance-registry-paste.inised -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/glance/glance-registry-paste.ini## 4：配置/etc/glance/glance-registry.conf## 修改## #sql_connection = sqlite:////var/lib/glance/glance.sqlite## sql_connection = mysql://glancedbadmin:ohC3teiv@10.42.0.6/glance## 在末尾添加两行## [paste_deploy]## flavor = keystoneGLANCE_API_CONF=${GLANCE_API_CONF:-\"/etc/glance/glance-api.conf\"}GLANCE_REGISTRY_CONF=${GLANCE_REGISTRY_CONF:-\"/etc/glance/glance-registry.conf\"}PUBLIC_IP=${PUBLIC_IP:-\"192.168.139.50\"}sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_API_CONFcat <<EOF >>$GLANCE_API_CONF[paste_deploy]flavor = keystoneEOFsed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_REGISTRY_CONFcat <<EOF >>$GLANCE_REGISTRY_CONF[paste_deploy]flavor = keystoneEOF## 5：配置/etc/glance/glance-api.conf## 6：同步数据库glance-manage version_control 0glance-manage db_sync          service glance-api restart && service glance-registry restart## 7：验证glance服务是否正常# glance index## 没有任何的输出。表示正常。## #echo $?## 下面会输出0 ，表示正常。## # glance --version## glance 2012.1## 8：下载镜像并上传## ubuntu官方专门提供image，http://uec-images.ubuntu.com。不过一定要注意## 这些镜像，都是必须使用密钥登录，直接用用户名密码是无法的登录的。## 下载镜像## http://cloud-images.ubuntu.com/precise/current/## 这应该是ubuntu提供的最新的稳定的镜像。#wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img##  expect -c \"spawn /usr/bin/scp  yuan@192.168.139.84:/home/yuan/precise-server-cloudimg-amd64-disk1.img .; expect {##     \\\"password:\\\"; {##    send \\\"yyhu\\r\\n\\\";##    }; \\\"Are you sure you want to continue connecting (yes/no)?\\\" {##    send \\\"yes\\r\\n\\\" ;##    expect \\\"password:\\\";##    send \\\"yyhu\\r\\n\\\";##    }##  } ; set timeout -1; expect -re \\\"100%\\\";\"##^^####sleep 5; expect -re \\\"password\\\"; send \\\"yyhu\\r\\n\\\";# glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img## 这里还有一种方法上传，如果你没用环境变量。## glance --tenant=admin--username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 add name=\"Ubuntu 11.10 cloudimg amd64\" is_public=true container_format=ovf disk_format=qcow2 < /root/precise-server-cloudimg-amd64-disk1.img## 上传完镜像后。在运行## glance index## 五：安装配置nova## 1:安装nova相关组件apt-get install -y nova-api nova-cert nova-common nova-compute nova-compute-kvm nova-doc nova-network nova-objectstore nova-scheduler  nova-volume python-nova python-novaclient  nova-consoleauth python-novnc novnc## 2：配置 /etc/nova/nova.conf## 如果你是在虚拟机里测试Openstack。你需要把默认的虚拟化引擎从kvm改成qemu。cat <<NOVAconf > /etc/nova/nova.conf--dhcpbridge_flagfile=/etc/nova/nova.conf--dhcpbridge=/usr/bin/nova-dhcpbridge--logdir=/var/log/nova--state_path=/var/lib/nova--lock_path=/var/lock/nova--allow_admin_api=true--use_deprecated_auth=false--auth_strategy=keystone--scheduler_driver=nova.scheduler.simple.SimpleScheduler--s3_host=192.168.139.50--ec2_host=192.168.139.50--rabbit_host=192.168.139.50--cc_host=192.168.139.50--nova_url=http://192.168.139.50:8774/v1.1/--routing_source_ip=192.168.139.50--glance_api_servers=192.168.139.50:9292--image_service=nova.image.glance.GlanceImageService--iscsi_ip_prefix=10.0.0--sql_connection=mysql://novadbadmin:cloud1234@192.168.139.50/nova--ec2_url=http://192.168.139.50:8773/services/Cloud--keystone_ec2_url=http://192.168.139.50:5000/v2.0/ec2tokens--api_paste_config=/etc/nova/api-paste.ini--libvirt_type=kvm--libvirt_use_virtio_for_bridges=true--start_guests_on_host_boot=true--resume_guests_state_on_host_boot=true #novnc--novnc_enabled=true--novncproxy_base_url= http://192.168.139.50:6080/vnc_auto.html--vncserver_proxyclient_address=127.0.0.1--vncserver_listen=127.0.0.1# network specific settings--network_manager=nova.network.manager.FlatDHCPManager--public_interface=eth0--flat_interface=eth1--flat_network_bridge=br100--fixed_range=10.0.0.1/27--floating_range=192.168.139.225/27 --network_size=32--flat_network_dhcp_start=10.0.0.40--flat_injected=False--force_dhcp_release--iscsi_helper=tgtadm--connection_type=libvirt--root_helper=sudo nova-rootwrap#--verbose--verbose=FalseNOVAconf## if ! kvm-ok 1>/dev/null 2>&1; then##      sed -i -e \"s/kvm/qemu/\" /etc/nova/nova-compute.conf## fised -i -e \"s/novadbadmin/$NOVA_DB_USERNAME/g;s/cloud1234/$NOVA_DB_PASSWD/g\" /etc/nova/nova.confsed -i -e \"s/192.168.139.50/$OUT_IP/g;s/192.168.139.225/$FLOAT_IP/g;\" /etc/nova/nova.confsed -i -e \"s/10.0.0.1/$IN_IP/g;s/10.0.0.40/$FLAT_IP/g;s/10.0.0/$IN_IP_PRE/g;\" /etc/nova/nova.conf## kvm or qemu?sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova.confsed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova-compute.conf## 3：配置/etc/nova/api-paste.inised -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/nova/api-paste.ini# 4：停止和重启nova相关服务for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done## 六：安装和配置Dashbaord## 1：安装dashbaordapt-get install -y libapache2-mod-wsgi openstack-dashboard/etc/init.d/apache2 restart## 这个时候，你就可以登录dashboard## http://192.168.139.50## user:admin## pass:ADMIN## 之后通过前端web管理## 七：创建第一个VM，可以通过上面安装的web管理系统创建。# 0：同步数据库## 以前我运行同步数据库，如果正确, 当nova.conf## --verbose=False## 是没有任何的输出，否则有一堆是输出。nova-manage db sync# 创建网络nova-manage network create private --fixed_range_v4=10.0.0.1/27 --num_networks=1 --bridge=br100 --bridge_interface=eth1 --network_size=32## 设定floating IPnova-manage floating create --ip_range=192.168.139.225/27## 设置权限chown -R nova:nova /etc/nova## 再重启相关服务for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; donesleep 10 ## 1：检查nova服务## 一路回车，就可以了。通过expect可以不用输入。if [ ! -e ~/.ssh/id_rsa ]; thenexpect -c \"spawn ssh-keygen ; set timeout 5; expect \\\":\\\"; send \\\"\\r\\n\\\"; set timeout 3; expect  \\\":\\\"; send \\\"\\r\\n\\\";set timeout 3; expect \\\":\\\"; send \\\"\\r\\n\\\"; expect eof;\"fi## 2：上传密钥到数据库nova keypair-add --pub_key ~/.ssh/id_rsa.pub key1## nova keypair-list## 打开防火墙nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0nova secgroup-add-rule default udp 1 65535 0.0.0.0/0nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0## 4：开始创建虚拟机## nova image-list## nova flavor-list## 创建虚拟机# nova-manage flavor create --name=m1.minitest --memory=384 --cpu=1 --root_gb=1 --flavor=6 --ephemeral_gb=1## 上面的下载镜像移到这一步，可以去掉以下的步骤wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.imgglance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.imgnova boot --flavor 1 --image \"Ubuntu12.04-amd64\" --key_name key1 cloud01# nova show cloud01# nova console-log cloud01##关联vmsleep 10## nova floating-ip-create## nova add-floating-ip cloud01 192.168.139.226nova show cloud01nova add-floating-ip cloud01 `nova floating-ip-create | awk 'FNR==4{print $2}'`nova listnova show cloud01# ssh instance# ssh-keygen -f \"/home/cloud/.ssh/known_hosts\" -R 10.0.0.2# ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2## 八、完成安装部署cat <<EOF >&1 1. login the dashboard   http://192.168.139.50   user:admin   pass:admin or $ADMIN_TOKEN 2. login a instance(\"cloud01\")   ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2 3. view & manage   nova list   nova show cloud01   ... 4. enjoy yourself! (Contact Hily.Hoo@gmail.com)EOF 附录2：安装后web登录（dashboard）截图 附录3：云计算平台OpenStack资料 官方OpenStack www.openstack.org 国内OpenStack社区 www.openstack.org.cn 国内技术博客-陈沙克 http://hi.baidu.com/chenshake OpenStack 架构  http://blog.csdn.net/anghlq/article/details/6543880 Ubuntu12.04安装OpenStack文档（入门指南） http://docs.openstack.org/essex/openstack-compute/starter/content/ Installing OpenStack Essex (2012.1) on Ubuntu 12.04 (\"Precise Pangolin\")（原文） http://www.hastexo.com/resources/docs/installing-openstack-essex-20121-ubuntu-1204-precise-pangolin  “OpenStack Documentation”team（文档、bug报告） https://launchpad.net/~openstack-doc Quora上关于openstack的话题 http://www.quora.com/OpenStack stackoverflow上关于openstack资源的讨论 http://stackoverflow.com/questions/5882333/good-tutorials-and-resources-for-openstack   来源：http://blog.csdn.net/hilyoo/article/details/7696169","title":"Ubuntu 12.04 (或11.10) 一键部署安装OpenStack云计算平台 OneStack：Ubuntu 12.04 (或11.10) 一键部署安装OpenStack云计算平台"},{"content":"云电视、云空调、云手机……满天飞的“云概念”让很多消费者云里雾里，不过新兴的“云电脑”就比较好懂了，一台显示器、一个小巧的机顶盒，与普通电脑一样的界面，就可以上网了。 上周五，即将23岁的“天才少年”谈天霆带着他首创的“云电脑”来到北京，向外界讲授这个新鲜事物，而明年北京市民有望体验这项业务。 一切都在远程服务器上 什么是云电脑？在现场记者看到摆放着几台普通的电脑显示器，键盘、鼠标也没什么特别，只是没有传统的电脑机箱。除了登录时需要输入用户名和密码外，电脑界面与普通的电脑没有差别，看网页、看视频、存文件跟平常一样。而秘密就在显示屏后面连着的巴掌大小的机顶盒上，这个小盒子连着网线，原来的CPU、内存、硬盘现在统统在远程服务器上。 谈天霆介绍说，机顶盒只是中转站，云电脑最核心的想法是替代PC主机，更简便地使用电脑。他们目前设计的模式是：通过机顶盒，用户可根据需要，上网购买CPU、内存等配置资源，输入个人账号和密码，就能登录自己的办公或私人桌面，而相关的硬盘资料、备份文件等都被存放在数据中心。它不仅可以连电脑显示器，还能接手机、平板电脑，还可带着机顶盒移动办公。 目前该业务主要针对中小型企业，下个月该公司将在上海同运营商合作向个人用户开放试点，并计划明年拓展到北京。谈天霆希望与运营商捆绑销售，将用户的宽带费与业务使用费打包，比原先宽带价格高出一点点。 （谈天霆） 比虚拟桌面更好用 不过，有人指出云电脑和虚拟桌面概念很相似，都是让用户端脱离主机，后者是2009年流行起来的一种解决方案。谈天霆列举了云电脑的几大优势：使用更简单，传统的虚拟桌面业务很伤神，需要选择技术协议，选择接入终端，还要考虑兼容性等问题；后期维护更简单，既可以交钥匙式的管理，管理权限交给使用者，也可以保姆式的托管，中小公司不必重金聘请专业维护人员；当然，更重要的一点，云电脑更便宜，成本不到后者的一半。 谈天霆坦言，这个“发明”正源于自己使用虚拟桌面的烦恼。2009年他还是虚拟桌面的一个普通用户，但发现高价买了相关硬件，还要买服务器、授权费，出了问题还要找专业人员解决，存在隐性的问题和隐性的成本。于是他就钻研更简单、更便宜的方法，开发三年后，云电脑终于结果。 14岁辍学创业的“天才少年” 新闻链接 实际上，外界在关注云电脑这个新概念的同时，聚焦的目光还有谈天霆本人。这个白净、帅气的大男孩不走寻常路，有人称他为电脑天才，他14岁就辍学开网吧走上创业路。 他曾沉迷网游，初二时辍学创业，雇佣5名大学生开始从事开发网络游戏。2006年，他创办了中国第一家专业VPS（虚拟专用服务器）供应商—3TVPS，从此与虚拟化技术结缘。2008年云计算概念兴起时，谈天霆投入这场创新盛宴，并成立了天霆云计算公司，现在这个公司已有上百人规模。谈到这段特别的创业经历，谈天霆说得云淡风轻，“电脑、云计算我很在行的。”","title":"[置顶] 谈天霆和他的云计算PC机"},{"content":"云计算 hadoop   http://tianhailong.com/","title":"优秀网站"},{"content":"作者: Peter Mell 和 Tim Grance 版本: 15, 10-7-09 美国国家标准及技术研究所，信息技术实验室 注释1：云计算仍然是一个进化中的规范。通过公共机构或者商业机构的热烈的讨论，云计算的定义、用例、底层技术、课题、风险以及益处依然会被提炼出来。这些定义、属性和特征将随着时间而进化和改变。 注释2：云计算工业代表了一个由许多模型、提供商以及市场潜力组成的巨大的生态系统。这个定义试图覆盖所有这些到达云的途径。 云计算的定义 云计算是一个模型，这个模型可以方便地按需访问一个可配置的计算资源（例如，网络、服务器、存储设备、应用程序以及服务）的公共集。这些资源可以被迅速提供并发布，同时最小化管理成本或服务提供商的干涉。云模型由五个基本特征、三个服务模型和四个发布模型组成，如此使以上成为可能。 基本特征 : 按需自助服务。视客户需要，可以从每个服务提供商那里单方面地向客户提供计算能力，譬如，服务器时间和网络存储，而这些是自动进行无需干涉的。 广泛的网络访问。具有通过规范机制网络访问的能力，这种机制可以使用各种各样的瘦和胖客户端平台（例如，携带电话、笔记本电脑以及PDA）。 资源共享。提供商提供的计算资源被集中起来通过一个多客户共享模型来为多个客户提供服务，并根据客户的需求，动态地分配或再分配不同的物理和虚拟资源。有一个区域独立的观念，就是客户通常不需要控制或者需要知道被提供的资源的确切的位置，但是可能会在更高一层的抽象（例如，国家、州或者数据中心）上指定资源的位置。资源的例子包括存储设备、数据加工、内存、网络带宽和虚拟机等。 快速的可伸缩性。具有快速地可伸缩性地提供服务的能力。在一些场景中，所提供的服务可以自动地，快速地横向扩展，在某种条件下迅速释放、以及快速横向收缩。对于客户来讲，这种能力用于使所提供的服务看起来好象是无限的，并且可以在任何时间、购买任何数量。 可度量的服务。云系统通过一种可计量的能力杠杆在某些抽象层上自动地控制并优化资源以达到某种服务类型（例如，存储、处理、带宽以及活动用户帐号）。资源的使用可以被监视和控制，通过向供应商和用户提供这些被使用服务报告以达到透明化。 服务模型： 软件即服务 (SaaS) 。客户所使用的服务商提供的这些应用程序运行在云基础设施上。这些应用程序可以通过各种各样的客户端设备所访问，通过瘦客户端界面像WEB浏览器（例如，基于WEB的电子邮件）。客户不管理或者控制底层的云基础架构，包括网络、服务器、操作系统、存储设备，甚至独立的应用程序机能，在可能异常的情况下，限制用户可配置的应用程序设置。 平台即服务 (PaaS) 。客户使用云供应商支持的开发语言和工具，开发出应用程序，发布到云基础架构上。客户不管理或者控制底层的云基础架构，包括网络、服务器、操作系统或者存储设备，但是能控制发布应用程序和可能的应用程序运行环境配置。 架构即服务 (IaaS) 。向客户提供处理、存储、网络以及其他基础计算资源，客户可以在上运行任意软件，包括操作系统和应用程序。用户不管理或者控制底层的云基础架构，但是可以控制操作系统、存储、发布应用程序，以及可能限度的控制选择的网络组件（例如，防火墙）。 发布模型： 私有云。云基础架构被一个组织独立地操作，可能被这个组织或者第三方机构所管理，可能存在于某种条件下或者无条件存在。 社区云。云基础架构被几个组织所共享，并且支持一个互相分享概念（例如，任务、安全需求、策略和切合的决策）的特别的社区。可能被这些组织或者第三方机构所管理，可能存在于某种条件下或者无条件存在。 公有云。云基础架构被做成一般公共或者一个大的工业群体所使用，被某个组织所拥有，并出售云服务。 混合云。云基础架构是由两个或者两个以上的云组成，这些云保持着唯一的实体但是通过标准或者特有的技术结合在一起。这些技术使得数据或者应用程序具有可移植性。（例如，在云之间进行负载平衡的Cloud Bursting技术）   (http://csrc.nist.gov/groups/SNS/cloud-computing/cloud-def-v15.doc) 附： NIST云计算的目标： 长期的目标是提供与云计算范式相关的思想领导地位和指南，以此分析其在工业与政府内的使用。NIST旨在缩短使用周期，这将降低短期的花费并实现快速创建与部署企业级应用的能力。NIST希望拥抱云计算系统和支持交互性、便携性以及安全需求的实践，这对于重要使用场景来说是非常恰当并且是可以实现的。 NIST对云计算的定义包含了5个本质特征： 按需的自我服务 广泛的网络访问 资源池 快速的弹性能力 可度量的服务 NIST使用了如下3个云计算服务模型： IaaS——Infrastructure-as-a-Service PaaS——Platform-as-a-Service SaaS——Software-as-a-Service 本文出处：http://w-w.cn/article-1254-1.html","title":"云计算的NIST定义"},{"content":"云计算可以认为包括以下几个层次的服务：基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）。 IaaS：基础设施即服务 　　IaaS(Infrastructure-as-a- Service)：基础设施即服务。消费者通过Internet可以从完善的计算机基础设施获得服务。 PaaS：平台即服务 　　PaaS(Platform-as-a- Service)：平台即服务。PaaS实际上是指将软件研发的平台作为一种服务，以SaaS的模式提交给用户。因此，PaaS也是SaaS模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。 SaaS：软件即服务 　　SaaS(Software-as-a- Service)：软件即服务。它是一种通过Internet提供软件的模式，用户无需购买软件，而是向提供商租用基于Web的软件，来管理企业经营活动。","title":"云计算模式"},{"content":"着眼眼前，ruby看完（最多5天） 入门python，看看如何做web 复习java（1天），学jvm 云计算","title":"任务杂记"},{"content":"　　有一位研二的同学向我求助。学习观、学习方法的问题不解决，确实伤不起。 　　我的观点直接写成原信中的点评，写中间觉得有点不客气了，回信中提出请同学包涵，他更需要改变的是做事的思维和方式。 　　下面是原信及我的点评。 贺老师， 　　您好！很冒昧的跟你发邮件，耽误您一些时间，我在csdn论坛上看到您的一些对网友的回复，觉得您是一个很有耐心的前辈，所以想跟您说说我现在的一些情况，请您帮忙指点迷津。 　　是这样的，我今年研一，在中科院的一个所，马上就研二了，本科是在一个并不是很好的211读的，专业是计算机科技，当时是想通过考研一方面能换一个平台，另一方面是想提升技术，可是现在却慢慢发现情况并不像自己想象的那样，突然特别迷茫。 　　本科的时候并没有做过什么项目，只是上过一些专业课，像数据结构，算法，操作系统，网络之类的，当时什么也不懂，上课看书多数也是为了考试，也不知道以后究竟要干什么，需要练哪些技术。【这应该是问题的根子，要在这一行做，这个债得还。】 　　研一在科大上课，课余时间看过一些Java，j2ee之类教学视频，但是自己动手做东西也不多，【补课的事，拖到现在了。】现在研一结束进实验室了，打听了一些实验室的情况，导师带的队伍在所里算是大的了，软件部分主要是上面批下来的项目，但大部分都是用j2ee做一些网站之类的。【你上的应该是学术型的硕士。如果导师让大家做的就是这个层面的事情，我不敢苟同。你需要知道“研究生”中的“研究”二字，即使将来不是在研究所或其他地方做“研究”工作，做研究的功底，还是要的。现在即将要进研二，导师不知会不会引导大家选研究方向，无论如何，你自己得定一个。途径是文献阅读，中文的，尤其是英文原文的文献。现在我的这种观点可能很多人不认同了，现在的研究生，还做什么研究？一心盯着找工作，当然做不了这些。而当初选择上研究生，就是要放长线的。是否这样做，决定了下一个问题的回答。】 　　我在网上看到很多前辈都说，用j2ee做网站这些东西都是比较底层的东西【这个底层的说法对吗？】，高中毕业参加完培训之后也可以做，我的一个师兄今年出去找工作，面试官直接问他，你也是用j2ee做网站的，而培训学校出来的也可以做网站，他们做的未必比你差，你跟他们究竟有什么区别？【这个问题很刺激人。回答好这个问题，研究生就上成功了。人家为研究生提供高的工资，看重的不是直接上一线做网站，而是要凭借“研究”的能力，解决关键的技术问题。一种说法，学越上路越窄，去小公司，只用成熟的技术解决大家都能做的事，确实不是研究生的选择，而去大公司，就一定要让自己有核心竞争力。学过的那么多的算法要能用上，将知识综合运用的能力要有，面临新问题，能够查文献，设计新方案，找出新办法。所以，如何上好研究生，从本原上，并不是围绕着找工作，用这个或者那个公司的要求套，这不是主要考虑的事。这方面我讲不出多少，多找些资料看看。我写的两篇文章《不比钱》、《和刘金英谈研一学习及文献阅读》可以参考。建议到科学网博客上看看，那儿是说这个事情的地方。作为研究生，直接动手的技术不能没有，但更重要的东西不是这个。】 　　据说当时那位师兄就傻了。贺老师，不知道您能不能理解我们这种心情，不是说不愿意去做这些，当初考研继续读书就是为了以后能把技术练好，以后找个好工作，但是我们现在的处境很尴尬，真的很迷茫。【上研究生就不是单纯练技术的，况且包括你的研一在内，并没有安排出自己课余的，以实践为主的个性学习，用等着人安排的方法去度过，只能走入迷茫。】 　　我们实验室引进回来一位老师，是研究云计算的，也可以跟着那位老师学东西，但是听师兄说如果跟那位老师的话，导师可能会不太高兴，因为不能帮实验室赚钱了，虽然导师表面上不可能说的，也不会阻止去那位老师那，但是心里估计会有看法的，所以我很纠结，不知道该怎么办？想请教贺老师怎么看？【没有什么纠结的。老是师兄说，你有没有和导师沟通去？很多学生讲导师不管，有导师的问题，但研究生自己首先要检讨：你有没有主动找导师？自己学上东西是第一位的，讲清楚自己的想法，不见得导师不同意；可以探讨一种两边都能接受的方式；实在导师小心眼，甚至给你穿小鞋，做强自己，在“研究”上拿出硬货来，谁也挡不了。沟通，加上自己的实力提高，双管齐下。】 　　另外，贺老师觉得有没有必要继续读博呢，我们导师鼓励留下来读博，读完博之后出去工作的前景怎么样？听说计算机的博士出去并不太好找工作。【好不好找工作不能以群体而论，在于你自己！这里也全是听说来的东西。不能围绕找工作想读书的问题。以这种思维，得上成烈士。博文《是否该读博士》可以参考。】 　　这些问题困扰我很久了，很迷茫很纠结，我非常想想听听贺老师的建议，我是个菜鸟，很多事都不太清楚，但是非常渴望弄清楚这些问题，话说的很不条理，希望贺老师见谅！【主动找导师联系、形成自己的主见、有自己的体会、找住自己的方向，以及提高实践能力，真正做一些东西出来。其实即使没有研究云计算的老师出现，在北京有那么多的公司，那么多的实习机会，让我们这些小地方的学生羡慕得要死，机会都在眼前，就看要不要主动去抓了。】 　　期待您的回复！祝您身体健康，阖家幸福！ 【学生回信】 贺老师，您好， 　　感谢您在百忙之中抽空查阅我的文件，并详细回复，实在感谢！ 　　我仔细看了几遍您的回信，感觉说的很中肯，对照了自己的一些想法，觉得说的很有道理，我想了想，可能出现我现在这种状态的主要根源有下面这些： 　　1.过于懒惰。总是希望能够坐享其成，一切靠导师安排，希望通过高学历来提高自己。事实说明这种想法是不正确的，有点表面化形式化。长时间持有这种想法，必然造成了如今走进死胡同。          2.过于被动。自己并没有主动去思考和实际解决遇到的问题，并没有主动去设计和改变行事的思路和方法，总是被各种外部情况牵着鼻子走，顾虑太多，包袱太重。直接导致了慢慢的失去了个人主见和能动性。 　　3.不够踏实。我一直期望能够很快的变成技术上的牛人，能够解决技术上的问题，但是并没有一个正确的思路，没有一个正确的方法，而是通过不切实际和消极被动的想法，最后只能南辕北辙。我觉得这是非常浮躁的表现。 　　我觉得我的问题可能就是由于这些原因，仔细读了您的回信，愈加觉得是这样。我很惭愧都已经到研二了还处在这样的一个状态，也很感谢贺老师及时帮我指正，非常感谢您！ 　　再次感谢您的回复，祝您身体健康，工作顺利！ 【我回信】 　　来信收到。死胡同说重了，但主动一些，踏实一些，沉下心来，轻装上阵，你会找到自己的道路的。 　　祝进步！","title":"研二学生的迷茫"},{"content":"今天是忙碌的一天，感觉很累……现在还在实验室，这也是第一次在实验室写东西。 上午起来去系办签到了，又是最无趣而且根本没有什么意义的事情，哎，懒得理。之后是去了地质管看英语，感觉压力好大，英语绝对是程序员的噩梦，想学到地道的知识不得不过英语这关，比如前两天老师给的云计算白皮书，全英的，而且都是基础的东西，不懂英语的孩子怎么能学会呢？所以，大学最荒废的学科，到现在成了最重要的工具，必须要努力重拾喽，不过我有信心，我是淫才~哇哈哈。再次记下一个句子：forbidden fruit is the sweetest。 下午按计划来到了实验室，小小修改了hadoop配置后开始了向另外两台电脑传输数据，可是，太不给力了，传了一下午，结果出错了，以至于，到现在还没搞好，有点小气愤，由于实验室万恶的系统恢复程序，导致每天都要差异拷贝，VMware应该是传好了，不过ubuntu虚拟机应该是没有传好，只能靠万能的飞鸽了~雅蠛蝶啊 学习上没有什么收获的时候总是会觉得比较失落，声明我早已推出学霸的行列，只是从小比较乖，学习这东西自己也比较看重吧，心里还是想每天都能有所收获的，而且，现在的学习对于我，是一种寄托，我要比较努力，让自己不空虚，让自己不去想过去。至少我觉得，现在的我，虽然是自己一个人，比较孤单，可是每天骑车，读书，泡实验室，听歌，也还过得去，不去想就能安静些，如果你刚失恋，最好的方法是找一个新的恋爱对象，如果这一点做不到，就要慢慢的受着单身后带来的煎熬，不过不要气馁，时间是很好的解药，会让人忘记该忘记的，收获该收获的，曲婉婷的《快活》不错，可以听听，歌词也得有内涵，就是别看脸……不吐槽，人家有才哦~ 该回家了，这个家是指宿舍的意思，这个词也是和她一起说起的，呵呵。不过真的该回家看看爸妈了，好想回去，找机会吧，在父母身边的孩子们，多陪陪他们，因为以后，可能想见到都成了一种奢望，恩。 明天加油喽~    ","title":"不能说のsecret 3"},{"content":"嗯，时隔两年，再次归来，为自己写的一些东西找一个地方吧。 这次重开blog，主题变化较大，过去的研究领域是MDA/UML/软件工程，其中，软件工程还会继续，另外会主要关注云计算、物联网和智慧城市领域，目前我所负责的团队（http://gz.iscas.ac.cn）主要领域就是智慧城市和软件工程，希望和更多同道交流。 1）云计算的PPT，2011.6 这是刚到广州的时候，团队刚组建，给团队成员做的一个普及型讲座的PPT。 http://wenku.baidu.com/view/169a5d2cb4daa58da0114ab9.html 2）智慧城市的PPT，2012.2 这是给相关部门做报告准备的智慧城市的PPT，包括对智慧城市的定义、评价体系，以及现状和问题的分析，最后给出建议。 http://wenku.baidu.com/view/fa87d91fa8114431b90dd894.html 还有一些文章，有的因为在刊物上发表了，等过段时间再陆续放上来吧。","title":"再次归来，奉上原创的一些文章（云计算和智慧城市）"},{"content":"【学生来信】 　　老师您好，刚看到您给一个准大四学生的回信，觉得分析的很中肯，又看了一下底下评论的，才知道您是专门答疑解惑的，很高兴在CSDN上认识您。 　　我在这里留言，希望您也能给我些建议。 　　我是一名211高校的学生（我们学校其实只在本省有些名气），即将大三，学的是数学与应用数学专业，专业学的过得去吧，但拿过奖学金。以前因为个人兴趣原因，想过考公务员，但后来逐渐成熟觉得自己并不适合走那条路。在去年接触的c++，但那时没有认真学，学的也纯粹是为了应付考试的。后来通过兴趣的培养，我对时下比较热门的移动互联网、云计算都挺感兴趣。这个暑假学习C++，一方面是为了九月份的二级考试，一方面是为了毕业后自己能有一技之长，毕竟我们专业的就业率是超低的。您推荐的书《读大学，究竟读什么》我看过，对我影响还挺大的，有时甚至觉得我和那个作者真的很像。 　　我现在的状态是，在努力学习C++，最近在看指针和引用这里，发现真的很难。目前自己也挺热爱编程的，不过绝大多数情况下我都是照书上打的。首先，我如果想顺利通过九月份的C++考试，应该做哪些准备？最后，您对我的以后职业生涯有什么建议？ 　　打了很多字，先谢谢老师在百忙中看看了！ 【我的回复】 　　我不是专门答疑解惑的，不过我觉得既然给我写信、评论，总是值交流的人，能为学生成长提些可能用得上的建议还是一件善事。我想C++考试首先应定位于促进你学习C++可能更好一些，而不是拿上那个证书，这样，才能让你用健康的方式，而不仅是应试的方式学习这个实践性很强的学科。我感觉你目前最大的问题就是自己编程太少，照书上打程序，练打字么？找上一本能够让你易于投入实践的参考书，一定要让自己亲手编程才行。这样做可能从时间上与9月的考试冲突了，但要先解决核心问题。我最近看的《好学的C++》上面给的练习还不错，可供参考，我给我的学生写的题目也可以参考（http://blog.csdn.net/sxhelijian/article/details/7056008），不过这个可能太费时间了。我学、练结合，再难的内容有了直接体验后也会变得易于突破了。既然喜欢，而且你的专业做计算机是很有优势的，以后的事，可以在程序设计基础（体现在C++上）的问题尽快解决（10月前）然后，确定下一步努力的方向。像数学专业，搞算法和底层的一些东西有优势，但你进入大三了，而就业市场上做应用的机会更多些，是否也可以考虑找一个喜欢的应用方向再学下去，也可能是一种选择。需要你先有个计划，等你再有新的想法时，如果需要，我再给你出主意。 【学生回复】 　　很激动，谢谢老师的回复！ 　　其实我目前学习C++也仅仅不是为了拿个二级证书，只是我就觉得这个证书是必需的。我现在在看的是Dr Dobb's Journal专栏作家Al Stevens 的《C++大学自学教程》，因为据介绍这本书还不错。我主要是想先打好基础。而编程方面，因为我目前可以说还没学习到类部分，所以自己动手编程的时候不多。不过有些书上程序还是会写吧，或许是因为理解加记忆吧。还有您所说的这些应用方向是什么？我不太清楚呃…… 【我的回复】 　　比如web技术、移动开发、数据库……太多了，到CSDN首页看栏目吧。目前先把编程基础关过了再说，你不自己编程，光看、理解、记忆，会出问题的。希望还是要学练结合起来。 【学生回复】 　　嗯，多谢老师不厌其烦的解答。","title":"给一位准大三学生的建议"},{"content":"开始了大四生活，决定在这里记录一下我的私念。 我是一个不善于做计划人，我认为那些所谓的目标不过是束缚自己的枷锁，以至于活到现在自己都没有很好的规划人生路，以至于——迷茫。当然，我并不是怪罪自己的无法无章，只是觉得，该适当的想想今后，至少大四这一年，该怎样度过，才算有些许意义。 于是我决定记录下每天思索过的，经历过的，阅读过的，尝试过的，遭遇到的种种事情，也为之后的一小段“未来”做小小的期待。 上午终于弄好了看了几天的hibernate多对多关联，本来想继续用ssh架构做选课系统，不过最近毕设老师要求做云计算了，毕竟选了这个课题，也没有办法，所以，ssh这个还没有学会的架构又暂时搁浅了，我很讨厌这种感觉，因为这种搁浅，对于一个记忆力比较差，而且根本没有理解深入的人来说，基本上属于丢弃，也就是说，这个学期的努力，有成为水中之月，感觉是存在，其实，一碰就碎，不过我不想丢弃这个，作为一个业余的东西吧。 午睡前突然有种罪恶感，最近的生活，或者说大学生活实在是令自己汗颜，不能在这样没有目标的走下去了，缺失，人与人之间是有差距的，不过，我不退缩，我不认输。做了一个小小的计划： 1、早上8点左右起床，（毕竟懒散惯了，太早也不实际，等到适应了在改进）吃早饭，学英语，看看阅读，记些单词。 2、中午回家午休，“中午不睡下午崩溃”的道理还是正解的。 3、下午背起书包去实验室，学习云计算，每隔几天去打一次球也是必要的，这个就待定了。晚上也是交给程序，具体内容可根据下午的感觉来。 4、9点半下午跑步，半个小时，戴上耳机，妥妥的。回来后放松一下，最好看看新闻，逛逛论坛，看别的也无所谓啦。 5、11点半上床，以后真的不能熬夜了，身体很重要，作息是根本，所以要对自己好一点。 至于要学的东西，上午是英语，下午是云计算，这是主要部分，云计算少不了linux，今天重新拾起了ubuntu，慢慢适应吧，本来想装双系统，算了，还是在虚拟机里玩玩吧。java编程不能放，毕竟自己还是挺喜欢的，就写数据结构练习和算法练习。有空把自己想做的ssh网站和“超级计算器”写了，这是后话。 要学的东西还很多，但是作为程序员是不能慌张不能心浮气躁的。pick up my confidence. 之所以选择在这里写东西也是有所考虑，一段时间前学着开始写技术贴，这个地方遍成了我的一个思想寄托，仍旧没能完全摆脱失恋的阴影，毕竟执着的天蝎们都是情痴，论坛的id也是包含了当初美好的记忆，最近还是会时常想起，不过我不能做死在过去中，她已经有了归宿，甚至让我心痛的幸福，我也要好好生活，把精力放到学习中。我会加油，一点一点的。 很久没有dota了，自从上次决定戒掉，真的没有碰了，小骄傲一下。","title":"不能说のsecret 1"},{"content":"云计算时代需要怎样的数据中心架构？ 字号:小大2012-07-13 09:35 来源：51CTO 我要评论(0) 云计算要求基础设施具有良好的弹性、扩展性、自动化、数据移动、多租户、空间效率和对虚拟化的支持。那么，云计算环境下的数据中心基础设施各部分的架构应该是什么样的呢？ 1、云计算数据中心总体架构 云计算架构分为服务和管理两大部分。在服务方面，主要以提供用户基于云的各种服务为主，共包含3个层次：基础设施即服务IaaS、平台即服务PaaS、软件即服务SaaS.在管理方面，主要以云的管理层为主，它的功能是确保整个云计算中心能够安全、稳定地运行，并且能够被有效管理。 2、云计算机房架构 根据长城电子公司多年的经验，为满足云计算服务弹性的需要，云计算机房采用标准化、模块化的机房设计架构。模块化机房包括集装箱模块化机房和楼宇模块化机房。 集装箱模块化机房在室外无机房场景下应用，减轻了建设方在机房选址方面的压力，帮助建设方将原来半年的建设周期缩短到两个月，而能耗仅为传统机房的50%，可适应沙漠炎热干旱地区和极地严寒地区的极端恶劣环境。楼宇模块化机房采用冷热风道隔离、精确送风、室外冷源等领先制冷技术，可适用于大中型数据中心的积木化建设和扩展。 3、云计算网络系统架构 网络系统总体结构规划应坚持区域化、层次化、模块化的设计理念，使网络层次更加清楚、功能更加明确。数据中心网络根据业务性质或网络设备的作用进行区域划分，可从以下几方面的内容进行规划。 1）按照传送数据业务性质和面向用户的不同，网络系统可以划分为内部核心网、远程业务专网、公众服务网等区域。 2）按照网络结构中设备作用的不同，网络系统可以划分为核心层、汇聚层、接入层。 3）从网络服务的数据应用业务的独立性、各业务的互访关系及业务的安全隔离需求综合考虑，网络系统在逻辑上可以划分为存储区、应用业务区、前置区、系统管理区、托管区、外联网络接入区、内部网络接入区等。 此外，还有一种Fabric的网络架构。在数据中心部署云计算之后，传统的网络结构有可能使网络延时问题成为一大瓶颈，这就使得低延迟的服务器间通信和更高的双向带宽需要变得更加迫切。这就需要网络架构向扁平化方向发展，最终的目标是在任意两点之间尽量减少网络架构的数目。 Fabric网络结构的关键之一就是消除网络层级的概念，Fabric网络架构可以利用阵列技术来扁平化网络，可以将传统的三层结构压缩为二层，并最终转变为一层，通过实现任意点之间的连接来消除复杂性和网络延迟。不过，Fabric这个新技术目前仍未有统一的标准，其推广应用还有待更多的实践。 4、云计算主机系统架构 云计算核心是计算力的集中和规模性突破，云计算中心对外提供的计算类型决定了云计算中心的硬件基础架构。从云端客户需求看，云计算中心通常需要规模化的提供以下几种类型的计算力，其服务器系统可采用三（多）层架构，一是高性能的、稳定可靠的高端计算，主要处理紧耦合计算任务，这类计算不仅包括对外的数据库、商务智能数据挖掘等关键服务，也包括自身账户、计费等核心系统，通常由企业级大型服务器提供；二是面向众多普通应用的通用型计算，用于提供低成本计算解决方案，这种计算对硬件要求较低，一般采用高密度、低成本的超密度集成服务器，以有效降低数据中心的运营成本和终端用户的使用成本；三是面向科学计算、生物工程等业务，提供百万亿、千万亿次计算能力的高性能计算，其硬件基础是高性能集群。 5、云计算存储系统架构 云计算采用数据统一集中存储的模式，在云计算平台中，数据如何放置是一个非常重要的问题，在实际使用的过程中，需要将数据分配到多个节点的多个磁盘当中。而能够达到这一目的的存储技术趋势当前有两种方式，一种是使用类似于GoogleFileSystem的集群文件系统，另外一种是基于块设备的存储区域网络SAN系统。 GFS是由Google公司设计并实现的一种分布式文件系统，基于大量安装有Linux操作系统的普通PC构成的集群系统，整个集群系统由一台Master和若干台ChunkServer构成。在SAN连接方式上，可以有多种选择。一种选择是使用光纤网络，能够操作快速的光纤磁盘，适合于对性能与可靠性要求比较高的场所。另外一种选择是使用以太网，采取iSCSI协议，能够运行在普通的局域网环境下，从而降低成本。采用SAN结构，服务器到共享存储设备的大量数据传输是通过SAN网络进行的，局域网只承担各服务器之间的通信任务，这种分工使得存储设备、服务器和局域网资源得到更有效的利用，使存储系统的速度更快，扩展性和可靠性更好。 6、云计算应用平台架构 云计算应用平台采用面向服务架构SOA的方式，应用平台为部署和运行应用系统提供所需的基础设施资源应用基础设施，所以应用开发人员无需关心应用的底层硬件和应用基础设施，并且可以根据应用需求动态扩展应用系统需的资源。 以上是对云计算数据中心架构的一些剖析。云计算之所以称为“云”，是因为它在某些方面具有现实中云的特征：云一般都较大；云的规模可以动态伸缩，它的边界是模糊的。云计算的商业模式给用户提供的是一种IT服务，其内容也是随时间变化、动态弹性的。因此，云计算数据中心的架构也会随着社会的进步不断调整和优化。","title":"云计算时代需要怎样的数据中心架构？"},{"content":"导语：日前，Smartronix的战略计划主任Gaurav Pal在GigaOM上发布了一篇文章称，由于云计算和Java的发展过程相似，我们可以通过对Java和WORA的进化分析，对未来几年内各种云计算模式的演变进行分析。 以下为文章全文： 美国SUN（Stanford University Network）公司的口号：Write Once, Run Anywhere（一次编写，到处运行），在20世纪90年代后期和21世纪初相当热门。今天，一个新的技术浪潮正在形成：Deploy once, scale anywhere（部署一次，任意扩展），或称为DOSA。为什么现在我们要关心WORA？因为通过了解Java和WORA的进化，我们可能会了解到未来几年内各种云计算模式将如何进行演变。 作为多个大型Java和云部署的企业架构师，我一直密切关注着这两种技术的发展。基于这一经验，我看到了它们的相似之处，我相信各种云平台最终将和Java虚拟机（JVM）类似，创建独立的基础设施用来启用新的架构。 随着云计算平台开始成熟和互操作性的种子开始萌芽，DOSA到来的日子不远了。桉树AWS API兼容性交易是这可能实现的一种方法。另一个可能是在OpenStack里启用云服务的可用性，如惠普，Rackspace和AT＆T等供应商。VMWare最近收购DynamicOps也指出了这个方向。这些只是一些每天正在发生的事态发展。DOSA 看上去和PaaS技术很接近，如CloudFoundry和OpenShift，提供弹性应用程序容器，和Java 在15年前承诺的无处不在的 Java 虚拟机的可用性方式相同。显然，主要业界厂商已经开始做准备。 我敢打赌，云计算的混乱现象（特别是IaaS和PaaS）将演变成一个更加精妙的DOSA信息。IT企业将有收缩和激增基于开放灵活的基础设施平台的能力。这些基础设施平台将主要包括商品的硬件和智能软件，以确保整个服务提供商之间的互操作性。 以下是WORA和DOSA的三个关键相似之处： 1. 运行应用程序的新方法 正如90年代末企业在互联网和网络时代如何建立新的应用进行挣扎，企业正在寻找新的方法来建立网络规模系统。正如Java被视为构建应用程序的新方法，可以部署在任何操作系统上，下一代的云应用也可以动态部署在任何云平台上。在飞速发展的移动设备和丰富的应用程序的驱动下，公司的扩展模型正在从昂贵的专用服务器转向提供更多的商品。这些扩展模型的逻辑延伸，能够方便地挑选基础设施服务提供商，从而降低厂商入门门槛。 2. 开放系统继续增加 软件应该是开放而无需支付庞大的许可费用的想法，真正是在90年代中期，随舍Java和Linux的开放而发展起来。这股浪潮正在渗透到基础设施的领域。“古老”的IT供应商的企业数据中心现在必须转型，从上亿美元的昂贵设备迁移到以开放和可互操作的使用为基础的模型上来。 3. 基础设施的标准化 WORA现象催生了一个标准化的需求，随后导致了Java生态系统的出现。同样，云计算已付出了巨大的努力来实现现代化和IT基础架构技术的标准化。这将最终使内部和外部的云服务具有互操作性，包括一整套系统和软件的之间的安全、应用、硬件、虚拟化软件、监控和管理。 那么，谁将会成为DOSA的推动者？这是一个新兴的领域，但也显露出了发展势头，Gartner公司已经谈论了很多的云中间商。许多有趣的模型开始出现： Jamcracker和Virtustream公司是在云代理领域的创新。 内容分发网络和电信领域中的厂商也开始行动，并成为云联网。例如，Akamai的全球流量管理器（GTM）允许机构自动引导工作负荷中心之间的流量。 现有的云服务提供商如微软Azure也开始探索跨平台的互操作性。 混合云配置中的各项中心之间无缝移动工作负载的能力是一个新兴的架构蓝图。将“部署一次，任意扩展”的权利转交到那些正在寻找创新、迁移迅速，并且不会被锁定到昂贵的专有数据中心的企业手中。 虽然Sun发明了Java，但最大的受益者是IBM。所以，我想知道新兴的DOSA的赢家将会是谁？ 本文来自：GigaOM","title":"WORA预言的云计算未来"},{"content":"云计算概念发端于Google和Amazon等超大规模的互联网公司，随着这些公司业务的成功，作为其支撑技术的云计算也得到了业界的高度认可和广泛传播。时至今日，云计算已被普遍认为是IT产业发展的新阶段，从而被赋予了很多产业和产品层面的意义。由于意义多重，各种概念纷繁复杂，众多公司和从业人员的眼中都有自己的一朵云，正如徐志摩在《偶然》一诗中所说：“我是天空里的一片云，偶尔投影在你的波心”。 传统的系统设计考虑的主要是单机环境，而云计算主要考虑的环境却是数据中心。从单机到数据中心，很多设计原则发生了根本变化，极端点甚至可以说PC时代30年来一以贯之的系统设计原则到今天已完全不适用。 考虑到云计算的诸多内涵，从技术角度讲，数据中心计算 （Datacenter Computing）可能是更合适的表述。本文对数据中心计算的技术领域和设计原则的变化进行了粗浅的探讨。一家之见，仅供参考。 云计算简介 从20世纪80年代个人电脑的发展开始，PC的计算能力不断增强，用一台PC就可以存放个人需要的所有数据并完成处理工作，比如编写文档、处理邮件等。但在互联网时代，一家互联网公司提供服务时需要用到远超过个人规模的数据，这些数据的存储和处理需要成千上万台机器的协同工作才能完成。这种服务器规模不是个人能够提供的，只有大型公司或机构才能拥有，这好像又回到了更早以前的Mainframe时代。从Mainframe到PC再到云，这正是计算机技术螺旋上升的发展过程。 简单来说，云计算就是利用系统架构技术把成千上万台服务器整合起来，为用户提供灵活的资源分配和任务调度能力。这里有几个关键字：一是超大规模，包括机器的数量、用户的数量和并发任务的数量；二是资源整合，成千上万台的服务器资源能集合起来做一件事情，比如存储大量数据，或者处理一个大型任务；三是灵活与快速交付，大规模的服务器资源能进行灵活的调配，按应用需求分解成若干个虚拟的资源池，快速地支持大量的并发请求或作业。 云计算技术的出 现，使整理和加工数据的能力变得空前强大，这种能力可以帮我们找出很多看似无关的事件背后的规律，并用其来预测未来发展。结合移动和物联网等技术，还可以 更好地服务于社会和人们的日常生活，如灾难预警、智慧城市和智能交通等。这种数据处理能力是在海量数据之上发展起来的，与作为基础支撑的系统架构技术同步 发展并逐渐融合，共同组成了现在大家所看到的云计算技术。 综合系统架构和数据处理技术两方面，云计算技术自下而上可分为硬件基础架构、软件基础架构和数据智能三个层面，如图1所示。 图1 云计算技术可分为三个层面 硬件基础架构包括服务器、网络和数据中心的设计与实施等技术领域，软件基础架构聚焦于存储、计算与大规模分布式系统等技术领域，数据智能则关注数据仓库（Data Warehouse）、机器学习（Machine Learning）及数据分析与可视化（Data Analysis & Visualization）等技术领域。值得一提的是，这三个层次的划分主要以技术领域为出发点，而通常提到的云计算三个层次SaaS/PaaS/IaaS则更多地是从资源的提供形态和接口为考虑进行划分的，二者并非同一维度。 时下流行的大数据（Big Data）概念可以看成从海量数据的角度看数据分析技术和软件架构支撑，包括软件基础架构与数据智能相关技术。二者都与数据有关，但其区别在于：软件基础架构关心的主要是数据的格式、容量以及访问模式等，而数据智能更在意数据的语义。 而数据中心计算则是从体系结构的角度看待软硬件系统设计。下文将就相关的技术领域和设计原则进行讨论。 数据中心计算 技术领域与挑战 如图2所示，数据中心计算包含存储、计算、实时存储与计算、超大规模系统、体系结构以及数据中心等技术领域。存储系统的需求来自两个维度。首先，大量的无结构数据需要表（Table）、对象（Object）与文件（File）等多种存储结构进行支持；其次，访问模式的不同（如只读不写、只写少读、读写均匀等）将很大程度上影响对存储系统设计和优化的考虑。 图2 数据中心所包含的技术领域 计算系统的需求和技术特点与计算任务的类型有很大关系。数据密集型的代表是MapReduce，它对CPU和I/O的需求比较均衡。计算密集型任务与通信密集型任务都是CPU密集计算，但二者访问数据的规模不同。如果只需要少量数据则是计算密集型。而如果需要访问大量数据，比如大矩阵迭代，内存限制这些数据必须存放在多台机器上，那么往往此时系统瓶颈将转移到通信的延迟上，这类似于传统的高性能计算。 通常的存储系统和计算系统只能支持到一定级别的延迟和并发度，对于更高的要求则需要基于内存构造实时的存储与计算系统。考虑到内存的特点，在存储上更适合提供具有丰富语义的数据结构。在分布式数据结构的基础上，加入流式数据处理和触发式事件处理的模型，则可以更好地支持实时检索、OLAP、PubSub等应用。 超大规模系统主要通过分布式相关技术保证系统的可用性（availability）和可管理性 （manageability），包括系统建模、设计、开发以及运维等多方面。体系结构包括虚拟机、服务器设计等。数据中心包括机柜设计、网络规划与设计、数据中心设计与建设等，主要关注于能效比（PUE）。 系统设计原则 传统的软硬件系统主要面向单机和个人，在桌面环境中使用，我们也可以称其为桌面计算（Desktop Computing）。从桌面到数据中心，应用特点和负载模型发生了巨大变化。 在单机上，主要面向一个用户，他可能运行多项任务，任务可以分为前台任务和后台任务两种。用户对系统的响应性（promptness或responsiveness）十分敏感，所以前台任务通常优先于后台任务，而后台任务则希望被公平调度。这也是抢占式调度（Preemptive Scheduling）策略最终胜过协作式调度（Cooperative Scheduling）的原因。 在数据中心里，同样也有在线和离线两种应用类型，在线系统直接面向用户，而离线系统多用于数据处理。在线系统通常是一个大型应用服务于海量用户，用户对系统响应性仍然十分敏感。但由于用户规模巨大以及互联网服务通常免费，成本压力十分严峻，所以系统需要充分挖掘用户对响应性的容忍度。通常情况下，人对事件响应的感知能力在500ms左右，利用这一特点可以优化系统调度并节省资源。而在极限压力情况下，没有足够的资源满足所有请求，很多系统开始延长响应时间，然后在持续压力下失去响应直至崩溃。此时，为可服务范围内的请求提供正常服务，并为超过范围的请求提供快速的拒绝响应，将会给用户带来更好的体验，也能提升系统的可用性。到最后，我们会发现在线服务系统应以稳定的极限吞吐（Sustained Throughput）作为首要设计目标。当然，要在一定延迟阈值的前提保证下。 离线系统主要服务于数据处理类作业，这些作业涉及海量数据，使用者的预期并不会特别高，此时的处理效率更为重要。通常，这些作业将会以批处理的方式合并执行，提升系统的总吞吐率，即资源利用率成为首要调度目标。 在系统设计时，有一些永恒的矛盾需要做出折中考虑，例如延迟与吞吐、公平与效率。在桌面环境中，我们选择了低延迟和公平，而在数据中心环境中，我们选择了高吞吐（或稳定的极限吞吐）和高效率。在具体实现方案上，也带来了不同的选择，比如同步与异步模型、线程与事件驱动、线程池与队列等。 从桌面到数据中心，同样发生变化的还有开发模式。PC是一个开放系统，无论软件还是硬件，每个厂商都只负责系统中的一部分，都需要考虑和不同的组件一起工作。由于用户众多，需求各不相同，只能采取按层次组织的系统架构（layered architecture）以及约定俗成的标准化规范。这虽然保证了系统的通用性，以及不同来源的各种组件的有效分工和协同工作，但也带来了一些问题，例如一个功能需要穿透多层才能完成，而每层互不信任，需要执行严格的参数检查等。 更严重的是，在系统的每一层中，都可能存在一些重复的功能。以存储为例，一次写入需要经历从libc的文件流（FILE stream），到文件系统的缓冲区，再到驱动器中的缓冲区，最后到磁盘上的缓存这样的长调用流程才能完成持久化（persistency）。这个流程从其中的每一层单独来看都是合理的，但从整个系统的角度看来，存在着性能浪费。另外，由于分层带来的透明性使得数据持久化不得不通过额外的fsync操作才得以保证，从而使系统的可靠性保证机制变得更复杂。 此外，在架构设计时，我们也经常在谈机制（mechanism）与策略（policy）的分离。固定、明确的功能称为机制，通过灵活的可变的策略进行配置，从而使系统具有良好的可扩展性。但实际上，每层独立且透明，且通常也都沿用相同的设计理念，这其实并不能保证机制策略的有效分离，最后的系统往往很难取得可扩展性和性能的良好平衡。 我们可以发现分层导致了每层都倾向于变得聪明、变得复杂，但综合效果却不如人意。而在今天的数据中心环境中，如前面所说，很多时候我们其实是在做一个超大型应用，应用的特点需要被充分考虑。另外这个系统通常只有一个生产商，可以进行垂直化的设计或整合。此时，由应用层或平台的上层提供策略，而下层只需要考虑机制，这将使系统变得更加简单，从而取得更好的性能，而扩展性也可以得到很好的保证。 以SSD为例，现在的SSD在设计时通常假设由文件系统来使用。由于闪存的擦除特性，需要考虑写缓冲区，而由于缓冲区需要有预留空间也需要有复杂的置换算法和回收机制，这对性能和成本（也包括开发成本）都有很大影响。但在数据中心环境里，我们通常有完整设计的存储系统，数据组织方式和读写流程也被充分优化，对存储设备的需求就是最基本的定长块。这种情况下，SSD的逻辑其实可以做得非常简单，直接对上层暴露内部的状态（如通路、物理块），从而提高性能、降低成本。更重要的是，这将有效提高交付速度——这对于缓解服务器、网络、IDC等硬件系统的长实施周期和业务快速增长的规模需求之间的矛盾至关重要。 上层对下层的要求是逻辑简单、功能单一，而下层对上层则暴露更多细节，最复杂的逻辑判断由最上层的应用来完成，这是另一种方式的层次化。而且，层次之间也不需要维持一个物理边界（如现在应用和内核之间），可以通过函数调用的方式实现柔性的层次划分。有兴趣的读者可以参考libOS【注：Exokernel】或者in-kernel web server【注：khttpd】的一些设计思路。 从桌面到数据中心的第三个变化是评价体系。一个中等规模的数据中心通常包含数万服务器，在这样的规模下，硬件故障成为家常便饭。一般，我们通过冗余复制或者重复处理来解决硬件故障问题。在习惯了硬件故障之后，我们对软件Bug的态度也会发生变化。软件Bug中有一种偶发性Bug【注：也被称为heisenbug，意指海森堡测不准原理】最难发现也最难调试，消除这些Bug需要付出巨大的代价。但考虑到这种Bug的出现概率堪比硬件故障，我们其实可以采用同样的方式来对待。 规模增长的同时，系统的复杂度也变得越来越高，以至于很多时候已经超过一个人的直接掌控能力。要去理解系统的运行状态以保障其正常运行，在这种情况下变得十分困难。此时，我们可以利用系统冗余的特点，对一些组件进行定期重启（reboot），通过重置状态降低Bug被触发的概率【注：“Recovery Oriented Computing”】。而对于性能上的问题则更是如此，有时还需要采用数据挖掘的方法来进行优化或系统调试【注：M.K. Aguilera, J.C. Mogul, J.L. Wiener, etc., “Performance debugging for distributed systems of black boxes”, in SOSP’03】。 海量数据以及数据处理应用也带来了很大的影响。由于数据的规模以及处理算法的特点，很多时候系统只需要提供概率意义上正确的结果，不需要保证数据的绝对可靠，也不需要严格保证运行结果的可重复性。 总而言之，互联网服务规模巨大，对成本很敏感，而且业务需求的变化也异常频繁，这和PC应用的特点截然不同。现在的系统设计原则是在桌面环境中历时30余年发展起来的，但到了今天已经完全不适应数据中心环境，我们需要重新思考并总结出适用的设计原则，这体现在如下三个方面。 从单用户多任务到多用户单任务的环境变化，导致我们在系统设计时重新审视对延迟与吞吐、公平与效率的折中考虑。 自行开发全套系统成为可能，透明性不再是美德，架构由层次化向竖井式演进，系统由需求驱动而定制。 由于规模与复杂度增大，我们不再追求零缺陷，而是与故障和Bug共舞。同时数据也成为系统的一部分，这些都使得以前的确定性系统变得不确定，评价指标也由正确性（correctness）向精确度（precision）转变。 需要强调的是，这些设计原则的改变并不意味着，我们需要颠覆桌面环境的通用系统，全盘转向专用系统。以前通用系统的设计完全以桌面环境为出发点，现在则是新的环境、新的应用形态和新的业务需求，这时需要有另一种类型的通用系统。这就像现在的NoSQL系统，提出之时是专用的，但正逐渐变得通用。 总结 互联网服务区别于传统行业最显著的特点是超大规模的数据以及快速迭代的开发方式，通过数据可以分析用户行为，而快速迭代则使数据分析结果更快生效，从而优化运营或适应用户需求的变化。可以说，数据规模和迭代速度决定了一个互联网公司创新的速度，同时也是它技术水平的标志，而其中最关键的便是云计算技术。 云计算技术可分解为大数据和数据中心计算。大数据从海量数据的角度看数据分析技术和系统架构支撑，包括软件基础架构与数据智能等相关技术，而数据中心计算则是从体系结构的角度看待软硬件系统。传统的软硬件系统基于桌面环境设计，而今天的数据中心环境有了很多变化，比如应用特点和负载模型、开发模式、评价体系等，这导致了传承至今的设计原则不再适用。 本文主要从宏观上对数据中心计算的特点进行讨论，旨在理清概念、抛砖引玉，引发业界对系统设计原则的重新思考。对于具体的技术方向如存储、计算以及大规模分布式系统等，文中并没有详细描述，留待日后陆续讨论。 原文链接如下： http://cloud.csdn.net/a/20120220/312009.html","title":"浅谈云计算与数据中心计算"},{"content":"随着云计算的概念受到越来越多的人的推崇和论证，“云上的日子”看起来离我们越来越近了。几乎所有的IT厂商都不约而同了启动了各自的云计算战略。但是由于每个企业的战略出发点不同，企业推出的云计算概念也有所差别。如果仅仅以自己的产品和业务为标准，片面地将云计算理解为SOA或SaaS，则不仅混淆了云计算概念，模糊了其产品形式, 还阻碍了云计算的推广和应用。那么， SOA、 SaaS等同于云计算么？它们有什么区别？我们应当如何正确理解这三者之间的关系呢？   解惑云计算、SOA与SaaS 云计算涵盖的范围很广泛，内容也很丰富。我们通常可以把云分为三个层次：硬件层的基础架构云（Infrastructure as a Service, IaaS）、平台云（Platform as a Service, PaaS）和软件应用云（Software as a Service, SaaS）。目前大家对于云计算概念的理解，主要有两个误区：一是片面地把SaaS视为云计算；二是以为运用了SOA架构就感觉好像实现了云计算，于是就把SOA和云计算等同起来。   实际上，SOA作为一种面向服务的架构，是一种软件架构设计的模型和方法论。从业务角度来看，一切以最大化“服务”的价值为出发点，SOA利用企业现有的各种软件体系，重新整合并构建起一套新的软件架构。这套软件架构能够随着业务的变化，随时灵活地结合现有服务，组成新软件，共同服务于整个企业的业务体系。简单的理解，我们可以把SOA看作是模块化的组件，每个模块都可以实现独立功能，而不同模块之间的结合则可以提供不同的服务，模块之间的接口遵循统一标准，可以实现低成本的重构和重组。在SOA的技术框架下，可以把杂乱无章的庞大系统整合成一个全面有序的系统，从而增加企业在业务发展过程中应用系统的灵活性，实现最大的IT资产利用率。   SOA技术其实在几年前就已经出现了，但是任何一种IT技术，真正要产生效应，都必须要以大大降低实际系统的使用、维护以及升级的成本为前提。更重要的是，一种技术的普及需要，都只有在这种技术不断成熟，并且形成相应的规模应用之后才能实现。   SaaS则是一种基于互联网技术的软件价值交付的新型业务模式。具体地讲，SaaS是按照使用者的需求提供软件应用服务的业务模式。SOA架构可发挥其在系统界面和接口标准化等方面的优势，为SaaS提供一个较好的技术平台，从服务管理和系统运维角度为SaaS提供有力的技术支撑，从而有助于灵活地构建起一个用户成本最低的SaaS方案。   由此看来，SOA与SaaS有着必然的联系：两者都面向服务。但两者也有着明显的区别：SaaS侧重于运营和交付，SOA侧重于平台架构。所以，SaaS是云计算的最终价值交付运营模式，SOA是实现云计算开放架构的基础理念之一，两者都包含了云计算的某些重要特征，但是他们都不能称之为云计算的全部。   互联网技术催生云计算、SaaS与SOA的汇合 云计算与SaaS、SOA三者本身的发展轨迹和侧重点不同，但是却又互相联系，互相影响。   我们可以从云计算的发展历史来看，云计算的模式就好比以前在大学或者政府的研究机构里面的大型计算机中心。计算机中心把计算机的计算和存储资源以租用时段的方式提供给内部各个科研单位，或者提供给外部用户。从过去的大型计算机时代到个人计算机、企业服务器的兴起，计算、存储资源开始分散于企业。但是如今，企业面对成千上百台服务器以及上千种不同的软件，运维成本越来越高。云计算可以把所有的计算资源虚拟化，进行动态管理，进而大大降低企业的IT运维成本，因此已是一个颇有影响的技术趋势。   另一方面，从可适应性计算、网格计算到云计算，除了硬件资源的集中使用外，企业更希望操作系统、数据库，以及软件、应用等都能通过集中调配的方式满足企业的各种需求。随着互联网技术的迅速发展与普及，SOA则能带来整个软件系统的互联成本、维护成本、升级成本的大幅降低，并成为支撑云计算的技术标准。   所有因素都帮助促成了从硬件层的基础架构云（IaaS）到平台云（PaaS）再到软件应用云（SaaS）不同层次的云计算。   SOA与SaaS合力, 推动云计算产业的成熟与发展 云计算实现了IT基础设施的社会共享；SOA有利于整合技术平台，统一技术标准，推动软件产业价值链中的各成员间的协调配合，充分利用硬件资源共享的有利条件，促使云上的软件系统日趋成熟；SaaS则通过软件交付模式上的创新，为云计算开辟出更大的市场空间，激励众多软件厂商开发出更多应用，从而使云计算产业联盟不断发展壮大。   总而言之，在云计算产业链向前推进的过程中，如果我们能善于发挥SOA和SaaS两者的特点与优势，将其效用结合起来，那必将有助于实现云计算产业的新一轮高速发展。 原文链接如下： http://blog.csdn.net/juishl/article/details/5869056 随着云计算的概念受到越来越多的人的推崇和论证，“云上的日子”看起来离我们越来越近了。几乎所有的IT厂商都不约而同了启动了各自的云计算战略。但是由于每个企业的战略出发点不同，企业推出的云计算概念也有所差别。如果仅仅以自己的产品和业务为标准，片面地将云计算理解为SOA或SaaS，则不仅混淆了云计算概念，模糊了其产品形式, 还阻碍了云计算的推广和应用。那么， SOA、 SaaS等同于云计算么？它们有什么区别？我们应当如何正确理解这三者之间的关系呢？   解惑云计算、SOA与SaaS 云计算涵盖的范围很广泛，内容也很丰富。我们通常可以把云分为三个层次：硬件层的基础架构云（Infrastructure as a Service, IaaS）、平台云（Platform as a Service, PaaS）和软件应用云（Software as a Service, SaaS）。目前大家对于云计算概念的理解，主要有两个误区：一是片面地把SaaS视为云计算；二是以为运用了SOA架构就感觉好像实现了云计算，于是就把SOA和云计算等同起来。   实际上，SOA作为一种面向服务的架构，是一种软件架构设计的模型和方法论。从业务角度来看，一切以最大化“服务”的价值为出发点，SOA利用企业现有的各种软件体系，重新整合并构建起一套新的软件架构。这套软件架构能够随着业务的变化，随时灵活地结合现有服务，组成新软件，共同服务于整个企业的业务体系。简单的理解，我们可以把SOA看作是模块化的组件，每个模块都可以实现独立功能，而不同模块之间的结合则可以提供不同的服务，模块之间的接口遵循统一标准，可以实现低成本的重构和重组。在SOA的技术框架下，可以把杂乱无章的庞大系统整合成一个全面有序的系统，从而增加企业在业务发展过程中应用系统的灵活性，实现最大的IT资产利用率。   SOA技术其实在几年前就已经出现了，但是任何一种IT技术，真正要产生效应，都必须要以大大降低实际系统的使用、维护以及升级的成本为前提。更重要的是，一种技术的普及需要，都只有在这种技术不断成熟，并且形成相应的规模应用之后才能实现。   SaaS则是一种基于互联网技术的软件价值交付的新型业务模式。具体地讲，SaaS是按照使用者的需求提供软件应用服务的业务模式。SOA架构可发挥其在系统界面和接口标准化等方面的优势，为SaaS提供一个较好的技术平台，从服务管理和系统运维角度为SaaS提供有力的技术支撑，从而有助于灵活地构建起一个用户成本最低的SaaS方案。   由此看来，SOA与SaaS有着必然的联系：两者都面向服务。但两者也有着明显的区别：SaaS侧重于运营和交付，SOA侧重于平台架构。所以，SaaS是云计算的最终价值交付运营模式，SOA是实现云计算开放架构的基础理念之一，两者都包含了云计算的某些重要特征，但是他们都不能称之为云计算的全部。   互联网技术催生云计算、SaaS与SOA的汇合 云计算与SaaS、SOA三者本身的发展轨迹和侧重点不同，但是却又互相联系，互相影响。   我们可以从云计算的发展历史来看，云计算的模式就好比以前在大学或者政府的研究机构里面的大型计算机中心。计算机中心把计算机的计算和存储资源以租用时段的方式提供给内部各个科研单位，或者提供给外部用户。从过去的大型计算机时代到个人计算机、企业服务器的兴起，计算、存储资源开始分散于企业。但是如今，企业面对成千上百台服务器以及上千种不同的软件，运维成本越来越高。云计算可以把所有的计算资源虚拟化，进行动态管理，进而大大降低企业的IT运维成本，因此已是一个颇有影响的技术趋势。   另一方面，从可适应性计算、网格计算到云计算，除了硬件资源的集中使用外，企业更希望操作系统、数据库，以及软件、应用等都能通过集中调配的方式满足企业的各种需求。随着互联网技术的迅速发展与普及，SOA则能带来整个软件系统的互联成本、维护成本、升级成本的大幅降低，并成为支撑云计算的技术标准。   所有因素都帮助促成了从硬件层的基础架构云（IaaS）到平台云（PaaS）再到软件应用云（SaaS）不同层次的云计算。   SOA与SaaS合力, 推动云计算产业的成熟与发展 云计算实现了IT基础设施的社会共享；SOA有利于整合技术平台，统一技术标准，推动软件产业价值链中的各成员间的协调配合，充分利用硬件资源共享的有利条件，促使云上的软件系统日趋成熟；SaaS则通过软件交付模式上的创新，为云计算开辟出更大的市场空间，激励众多软件厂商开发出更多应用，从而使云计算产业联盟不断发展壮大。   总而言之，在云计算产业链向前推进的过程中，如果我们能善于发挥SOA和SaaS两者的特点与优势，将其效用结合起来，那必将有助于实现云计算产业的新一轮高速发展。 原文链接如下： http://blog.csdn.net/juishl/article/details/5869056","title":"正确理解SOA、SaaS和云计算的关系"},{"content":"       云计算，这个令外界甚至行内人士都感到陌生的词语，现阶段是如此的火热。敢问，他到底为何物？              从外界看云，他为开发者提供了大量很好的资源，你可以方便的从中得到你需要的各种资源（计算资源、空间资源等），无需关注内部的方式。 之所以称为“云”，是因为它在某些方面具有现实中云的特征：云一般都较大；云的规模可以动态伸缩，它的边界是模糊的；云在空中飘忽不定，你无法也无需确定它的具体位置，但它确实存在于某处。        “计算”顾名思义，他提供了计算方式，这种计算像云一般，计算能力可以无限扩展，因此，潜力无限。        因此，“云计算”提供了一个强大的后台支持，以供开发者进行开发。为了提供强大的数据处理和存储能力，云计算也需要相应的技术支持。 1、分布式计算、网格计算、并行计算        对于大批量的数据处理，比如有10亿条的数据，一台计算机每秒能够处理10万条，处理完这些数据需要1000s。如果能够让多台计算机同时处理这些数据，那么使用1000台计算机，只需使用1s（理想情况下）。这就是分布式计算，把一个需要非常巨大的计算能力才能解决的问题分成许多小的部分，然后把这些部分分配给许多计算机同时进行处理，最后把这些计算结果综合起来得到最终的结果。流行的是使用google的MapReduce模型进行分布式处理。 2、 虚拟化        我们使用整个集群的计算资源，却只需要在一个地方操作，而无需关心整个集群的数据如何分配处理；我们在本机上，可以使用到巨大的存储能力，尽管这些存储可能是分布在许多机器上，但我们无需关心…没有虚拟化技术，这些都没办法发实现。虚拟化技术，让我们纯粹的使用软件提供的服务，而无需真正关心我们的行为在硬件层次的具体行为。他可以简化管理、优化资源，让我们只需要关注自己的事物。 3、 负载均衡        提供云计算的服务是由成百上千台服务器进行的，我们不能让某些服务器负载过大，另一些服务器利用率低下，需要将工作任务进行合理的分发，使得没台服务器都能够在最佳的状态下运行，使得并发处理的效率最高。Hadoop的集群使用Zookeeper进行协调。 4、 效用计算        由于云计算以“按需使用，按使用收费”的方式提供服务，因此，需要对使用的计算资源和基础设施进行量化，以计算出相应的费用，这就需要关系到“效用计算”。效用计算是一种提供模型的服务，在这个模型里面服务提供商产生客户需要的计算资源和基础设施管理，并且根据某个应用，而不是仅仅按照速率进行收费。        综合了以上技术，云计算的概念就提出了。并不是说云计算就一定要有这些技术，而是缺少了这些技术，就提供不了如此便捷的服务。但云计算本身只是一些相关技术的整合，提供了一个强大的技术支持，并不能作为向公众开放的成熟的商品。于是，为了将其商业化，又提出了基于云计算的三种模式：IaaS、PaaS、SaaS，开发者或者客户可以直接受益于其提供的服务，相应的产品代表如下：   技术类别 代表厂商名称 主要产品 功能 SaaS Salesforce Salesforce CRM 可用于销售、服务、营销和呼叫中心运营等 八百客 800APP CRM 以CRM为核心，集进销存、财务、简易OA于一体，包括：合作伙伴关系管理、在线通用财务系统、在线标准进销存系统等标准化模块 Netsuite NetSuite OneWorld（在线ERP） 提供了多级水平的综合报表、全球定单管理、实时管理和自动财务功能，可降低成本，简化税务管理 中企开源 企业管理、电子商务、行业门户等 对中小企业“按需服务，随需而变”，可以极大地降低中小企业信息化的成本与风险 PaaS Salesforce Force.com 可构建和运行任意应用程序，按需提供企业级 Web 应用程序，而无需付出部署基础结构的成本。 Google Google Apps Engine 可在 Google 的基础架构上构建并运行自己的网络应用程序，无需维护服务器 八百客 800APP 使用此开发平台，用户不需编程即可开发包括CRM、OA、HR、SCM、进销存管理等任何企业管理软件，而且不需要使用其他软件开发工具并立即在线运行 云计算 Amazon EC2（Elastic Compute Cloud，弹性计算云）、S3（Simple Storage Service，简单储存服务） 为企业提供计算和存储服务，收费的服务项目包括存储服务器、带宽、CPU资源以及月租费 IBM公司 蓝云（Blue Cloud） 使计算不仅仅局限在本地，通过架构一个分布的、可全球访问的资源结构，使数据中心在类似互联网的环境下运行计算。 微软公司 Azure 包括了Windows Azure、Microsoft SQL数据库服务，Microsoft .Net服务等主要组件，帮助开发可运行在云服务器、数据中心、Web和PC上的应用程序    ","title":"云计算与它的三个架构"},{"content":"作者：趋势科技垃圾邮件研究工程师Maydalene Salvador 网络犯罪分子是标准的机会主义者。他们会利用任何吸引人的运动赛事（例如世界杯足球赛和奥运会）实施他们的攻击。随着 2012伦敦奥运会开幕日的临近，可想而知利用这次活动的垃圾邮件也将大幅增加。 下面是一些我们发现的一些会利用 2012奥运会作为诱饵的垃圾邮件，有的电子邮件会伪装成“中奖通知”，还有通过个人信息换取礼品的广告，甚至还有一封要求用户联络特定的联系人。落入这些陷阱可能会泄漏个人资料，计算机会感染恶意软件，有些垃圾邮件甚至会造成经济上的损失。 1.利用奖品或免费入场卷换取你的个人资料 第一封和奥运有关的垃圾邮件会要求你提供个人资料。为了让用户自愿交出这些数据，这封邮件会告知收件人可以赢得免费门票，但领奖需要提供个人资料，例如家庭地址/位置、婚姻状况，甚至职业信息。类似的信件还会进一步增加诱惑力，通知用户赢得了现金大奖。     企图利用 2012奥运会的三种垃圾邮件类型：利用奖品或免费入场卷来交换个人资料   这封垃圾邮件背后的攻击者可能会将这些数据用在未来的恶意计划里。他们还可以将数据卖给其他网络犯罪集团。 2. 恶意软件伪装成中奖通知 趋势科技也发现好几封号称跟 2012伦敦奥运有关的邮件，夹带着伪装成“中奖通知”的附件文件，用奖金诱惑用户。如果用户好奇下载并打开附件文件，其实就等于执行了恶意文件。例如下面就是一个范例：     企图利用 2012奥运会的三种垃圾邮件类型：恶意软件伪装成中奖通知   在另外一起垃圾邮件攻击中，我们看到有个附件文件实际上是木马（命名为 TROJ_ARTIEF.ZIGS），它会攻击RTF堆栈缓冲区溢出漏洞（CVE-2010-3333）。一旦攻击成功，恶意软件会植入后门程序BKDR_CYSXL.A。根据我们的分析，这个后门程序会连接远程用户，让他可以在中毒系统上执行命令。更令人担心的是，这个感染后门的系统还会遭受其他攻击，包括会窃取网络银行凭证的恶意软件（密码、账号名称等等）。 3. 垃圾邮件要求用户联络特定对象 第三种的垃圾邮件一开始看起来可能很正常。这种邮件会伪装成知名单位（例如 Visa），并且提供一个假冒的活动联络人信息。       企图利用 2012奥运会的三种垃圾邮件类型：垃圾邮件要求用户联络特定对象   在邮件中，收件人需要联络所谓的联系人。一旦用户给指定的邮箱发送邮件，他们就会收到从诈骗者返回的，介绍如何领奖的邮件。最终，用户会被要求提供个人资料。攻击背后的诈骗者还可能会要求用户提供自己的银行账号信息，或是将钱汇往指定银行账户，以便领取奖金。 为什么这些垃圾邮件攻击继续存在 这些骗局并不是什么新鲜事。之前也有垃圾邮件利用 2008北京奥运和都灵冬奥会等事件。那为什么这对用户来说还会是个威胁？网络犯罪分子会继续从这些攻击中赚到钱。资深威胁研究员RobertMcArdle认为：“……攻击者继续这些攻击，因为这些骗局仍然能带给他们很好的利润。社会工程学在过去多年来一直都很有用，而且看来也没有太多改变。”因此，只要仍然有人会上当，这些骗子就会继续利用像奥运这样的事件来发送新的垃圾邮件，并赚快钱。 趋势科技利用云计算安全技术来保护用户，特别是电子邮件信誉评比服务会在这些邮件进入用户邮箱前就将其封锁。此外还有文件信誉评比服务会检测并删除相关的恶意软件。 用户也可以做些简单的邮件检查来防止这类威胁。小心这些可疑的骗人迹象： 马虎/非专业的电子邮件格式 明显的语法错误 令人难以置信的奖励 对于即将来临的奥运和相关比赛的最新消息，用户应该去找可靠的来源或网站。想要了解更多相关威胁，以便更好地保护自己，可以参考我们的数字生活电子指南：社交工程如何运作，以及我们的问答集利用运动作诱饵：网络犯罪分子想赢大奖。 ＠原文出处：Spammed Messages Attempt toCash In on London 2012 Olympics    ","title":"企图利用2012伦敦奥运会的三种垃圾邮件"},{"content":"混迹IT江湖这许多年，做了不少分布计算、并行计算、大数据处理的项目，按照现在的归类，这些都属于云计算范畴。今天我说说做过的其中三个项目，只三个。 第一个是我们接到的视频分享网站的视频转码的订单，网站名字就不说了，有替人宣传嫌疑。他们情况是这样，视频网站的内容用MP4格式在网页上播放，但是上传的格式多种多样，我们必须把这些视频统一转换成MP4格式，视频转码的工作想必大家都在自己的电脑上试过，通常一个100M左右的视频转码需要20分钟以上。为了提高转码效率，让用户以接近实时得到结果，必须在收完视频后，立即将一个视频拆分成多个单元，分散到多台计算机上进行转码，然后回收所有转码视频，按照顺序再次组合成一个新视频。我们这个团队最早做流媒体起家的，工作没什么难度，轻车熟路，很快就完成了。只要机器足够多，视频差不多可以以接近实时的状态完成转码。后来又再一次改进，从用户上传视频开始立即进行转码，收到一段转码一段，用户的视频上传完毕，我们的转码工作也完成，用户可以马上看到自己上传的转码后视频，基本上是零延时，并且稳定性、效率都高于对方提出的要求。做完这个，对方老板很满意，接着又给了一个CDN的项目。现在我们仍保持着合作的关系。 第二个有点玄乎，项目可以写一篇论文，题目是《关于空中移动目标运行轨迹和落点的问题》。这个项目是XXX发下来的，实质就是炮弹打导弹，大概是想看看能不能打着，论证技术可行性。当前人还在单位，因为研究领域和空气动力学毫不相关，所以这方面的知识基本属于文盲，知道的也就是那么几个有限的名词和数学公式，但是这正好符合XXX的要求，不需要我们懂这些高深的理论，他们派人和我们合作这个项目。我们的工作就是把很多传感器（XXX人说的，我想这东西应该是雷达）接收的数据，包括当前多少公里范围内的空气的风速、风向、地表的曲面率，还有其它一些指标在收集后（这些瞬间的数据量非常大），分散到一大堆计算机上去执行（我们准备了100个节点），并且要很快计算出结果（必须比导弹快）。这个项目花了很长时间，主要是与合作方的沟通改进，然后是再沟通再改进，循环往复，周而复始。后来终于完成了，据说做了试验，可行性很高，上面领导很满意，还摆了庆功酒。反正我没见着也没喝着。其实他们怎么计算的，我到最后也没有搞明白，问过一次，说是秘密。 第三个和两桶油有关。项目发包方要求通过采集岩页中的样本，分析某个地区地下有没有油气资源。这套程序原本已经是有的，艾克森.美孚石油公司开发的，跑在CARY-1向量机上。但是那套机器是上世纪八十年代初的超级计算机，已经赶不上时代要求，并且有些数据分析理论已经过时，需要调整。两桶油最不满意的地方还是速度太慢，一次计算经常几天才能出结果。这一次又是合作，两桶油出采油的技术专家，我们出并行计算的码农，前前后后合作弄了大半年，算是完成了。这次我们用了新的分布算法：Diffuse/Aggregate，运算速度超快（这在后来Lexst项目派上大用场，和Google的Map/Reduce有一拼）。和上次炮弹打导弹一样，整个项目静悄悄开始，静悄悄结束，后面是不是发现油气田就不知道了。","title":"[置顶] 那些年，我做的那些云计算"},{"content":"中国云计算服务发展趋势研讨会9月1日在北京召开，中科院计算技术研究所倪光南院士在会上表示，中国应大力发展嵌入式软件，过去中国许多地方不顾具体条件，只重视离岸外包，投入产出比收效不大。 倪光南还用数字举例，2009年软件服务外包出口24亿美元，不到中国软件业销售收入的2%，而嵌入式系统软件却占占软件出口收入的2/3以上，在中国整个软件业收入的占比也达到17.6%；在中国前10家最大的软件企业中，有5家是嵌入式软件企业。 倪光南还表示，软件业在中国整个电子信息产业中占到比例还不到20%，比发达国家差很多（美国的软件产业约占信息产业的50%）。中国的软件远远落后于硬件，要改变“重硬轻软”，要大力发展软件，而嵌入式软件是重中之重。 他还指出，我国对嵌入式软件的优惠政策摇摆不定，也对产业发展不利。 据了解，嵌入式软件广泛应用于国防、工控、家用、商用、办公、医疗等领域，如我们常见的移动电话、掌上电脑、数码相机、机顶盒、MP3等都是用嵌入式软件对传统产品进行智能化改造的结果。在中国，嵌入式软件应用集中在国防工业、工业控制、消费电子、通信产业、汽车，钢铁，纺织等重要领域和行业。 倪光南还表示，在嵌入式系统公司中，软件人员占据研发人员的大多数，对中国的制造业需要提升竞争力，调整产业结构，嵌入式软件在其中占有特殊地位。他还举例，华为的研发人员构成中，软件人员约占80%左右。 “可以说，嵌入式软件对中国的重要性相当于离岸外包对于印度的重要性”倪光南最后表示。","title":"倪光南：离岸外包收效不大 应大力发展嵌入式软件"},{"content":".面向服务的体系结构SOA 1）定义：Service-Oriented Architecture，一种应用的体系结构，其中所有的功能都定义为独立的具有可调用的接口的服务。这些服务可以在一个流程中被调用从而完成相应的商业处理过程。服务可以位于同一个应用，也可以位于不同的进程，甚至可以在远程。业务逻辑（business logic）或独立功能被模块化，并作为服务呈现给消费者或客户端。应用开发人员或者系统集成者可以通过组合一个或多个服务来构建应用，而无须理解服务的底层实现。 SOA的核心就是找到将软件组织在一起的方法，是让IT更加关注于业务流程而非底层的基础结构! SOA的目的是最大限度地重用应用程序中独立的服务以提高IT适应性和效率，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。 因此，与其说SOA是一种技术，不如说它是一种架构和组织IT基础结构及业务功能的方法。是一种在计算环境中设计、开发、部署和管理离散逻辑单元（服务）的模型，是一种架构模型和一套设计方法学。   2）架构： 服务提供者：发布自己的服务，并且对使用自己自身服务的请求进行响应。 服务代理：注册已经发布的服务提供者，对其进行分类并提供搜索服务 服务请求者：利用服务代理查找所需的服务，然后使用该服务。 3）特性： SOA服务具有平台独立的自我描述XML文档：WSDL是描述服务的标准语言 SOA 服务用消息进行通信：该消息通常用XML Schema（主要是SOAP）定义 SOA服务通过实现目录服务的注册中心(Registry)来维护，应用通过注册中心来查找和调用服务：UDDI是服务注册的标准 每项SOA服务都有与之相关的QoS：QoS包括安全需求、可靠通信等策略 4）实现技术： SOA不是一种具体的实现技术，更不是一个全新的概念。它是一个抽象的概念和指导方针。我们可以用任何一种现今成熟的技术实现它：EJB、CORBA、Web Service（Web Service的出现让SOA提出的一切得到了实现）。 注意WebService和SOA的区别和联系： Web服务是技术规范，而SOA是设计原则，WSDL是Web服务与SOA的根本联系 SOA是一种架构模式，而Web服务是利用一组标准实现的服务 Web服务是实现SOA的方式之一，实际上也是最主要的实现方式，用Web服务来实现SOA的好处是可以通过中立平台来获得服务。 5）优势： 大多数软件商接受SOA并有相关平台和应用，这也是SOA与现有的分布式技术的区别。 SOA的标准化程度更好：SOA能够在最新的和现有的应用之上创建应用，能够使客户或服务使用者免受服务实现的改变所带来的影响，能够升级单个服务或服务消费者而无需重写整个应用，也无需保留已经不再适用于新需求的现有系统。 总之，SOA以借助现有的应用来组合产生新服务的敏捷方式，提供给企业更好的灵活性来构建应用程序和业务流程。   6）问题： 标准仍不完备。Web 服务是实现SOA最好的方式，但Web服务本身还有很多不成熟的方面。 服务粒度的确立问题：要在灵活和效率方面找到一个折中点； 服务的监控和管理问题 服务间的交互性、相互关联性难以把握     2.网格计算 1）定义：利用互联网把分散在不同地理位置的电脑组织成一个“虚拟的超级计算机”，其中每一台参与计算的计算机就是一个“节点”，而整个计算是由成千上万个“节点”组成的“一张网格”，网格是把整个网络整合成一台巨大的超级计算机，实现计算资源、存储资源、数据资源、信息资源、知识资源、专家资源的全面共享，来解决复杂问题的计算模式，适于大型科学计算和项目研究。 2）目的： 设计一种能够提供以下功能的系统： 提高或拓展企业内所有计算资源的效率和利用率，满足最终用户的需求，同时能够解决以前由于计算、数据或存储资源的短缺而无法解决的问题。 建立虚拟组织，通过让他们共享应用和数据来对公共问题进行合作。 整合计算能力、存储和其他资源，能使得需要大量计算资源的巨大问题求解成为可能。 通过对这些资源进行共享、有效优化和整体管理，能够降低计算的总成本。 通过任何一台计算机都可以提供无限的计算能力，可以接入浩如烟海的信息 3）应用领域： 科学领域 分布式超级计算：一些科学与工程计算问题的解决 高吞吐率计算：分时广域分布式仪器系统，包括远程可视化以及远程控制等，其核心是网格支持的远程控制操作。 数据密集型计算：大型的天体物理、人体医学、图像等大型数据库的分析和处理 社会经济生活领域 基于广泛信息共享的人与人交互：对性能和服务质量有特别的要求，应用于交互的计算可视化、教育、培训、场景模拟、艺术与娱乐等领域。 更广泛的资源贸易 4）特点： a.分布性： b.自相似性：网格的局部和整体之间存在着一定的相似性，局部往往在许多地方具有全局的某些特征，而全局的特征在局部也有一定的体现。 c.多样性和动态性：网络资源异构多样，资源动态增加和动态减少。 d.可扩展性：系统计算规模会逐渐增大，需要在网格资源规模不断扩大、应用不断增大的情况下，不能降低网格计算的性能。 e.动态适应性：资源管理必须能够动态监视和管理网格资源，从可利用的资源中选取最佳资源服务。 f.自治性和管理的多重性。   5）内部主要功能： 管理层次：确定管理层次体系，管理域按层次划分 通信服务：随应用目的的不同提供不同的服务，支持各种通信协议，提供延迟、带宽等指标 信息服务：提供方便可靠的机制，获得不断变化的各节点信息和状态 名字服务：提供全局统一的名字服务 文件系统：提供一个分布式文件系统机制、全局存储和缓存空间 监视系统：提供监视系统资源和运行情况的工具 资源管理和调度：提供透明的资源调度，高效的利用可利用的资源。 资源交易机制：提供一种计算资源的交易机制，允许资源提供者获得利益，使系统能动态地取得更好的性价比资源。 编程工具：提供丰富的用户接口和编程环境，提供最常用的语言，以及分布式共享存储器和一些函数库等。 用户图形界面：提供方便的用户访问接口，包括Web 方式接口，使用户可以在任何位置、任何平台上使用系统资源。 6）分类： a.五层沙漏结构：由Foster等最早提出的，是一个最先出现的应用和影响最广泛的结构。是一种以协议为中心的结构，也十分强调服务与API（Application Programming Interfaces）和SDK （Software Development Kits）的重要性。基本思想：共享+互操作+协议+服务+API/SDK b.OGSA体系结构：开放网格服务结构OGSA(Open Grid Services Architecture)是Global Grid Forum 4的重要标准建议，是继五层沙漏结构之后最重要，也是目前最新的一种网格体系结构。2002年，Globus和IBM发布了开放网格服务体系结构OGSA（Open Grid Services Architecture）； OGSA 完善和扩展了Globus toolkit. 三大基本思想： 一切都是服务：将资源，信息。数据等统一起来，十分有利于灵活的一致的动态的共享机制的实现，使得分布式系统管理有标准的接口和行为，网格={网格服务}，网格服务可以以不同的方式聚集起来满足虚拟组织的需要。在OGSA 内，一切都表示为一个Grid 服务，即一个遵循一套规范（使用WSDL 来表示）的（潜在短暂的）服务，这些规范用于实现生命周期管理、发现特性、通知等目的。 统一的Web 服务架构：自然具备了原来Web Service的所有有利因素：服务描述和发现；从描述中自动产生客户和服务器端的代码；…….OGSA通过标准接口和规范支持创建、终止、管理和调用有状态的短暂服务，这些服务具有动态的、可管理的生命周期，是可命名、可管理的实体。 突破科技应用领域：同样可用于商业领域 组成： 持久服务实例：“Web services” 强调永久 服务的发现和调用：整个企业持久状态的接口，无状态的服务。 瞬间服务实例：  分布活动状态的接口，例如工作流, 视频会议, 远程数据分析等。 服务架构： 支撑技术： 网格技术（即Globus软件包）：Globus是一种基于社团的，开放结构，开放源码的服务的集合，也是支持网格与网格应用的软件库，该工具包解决了安全，信息发现，资源管理，数据管理，通信，错误检测以及可移植等问题。 Web Service：Web Service 只要是涉及一些协议标准的，主要有SOAP，WSDL，WS－Inspection，UDDI等协议。这些协议之间互相可以支持。其中关于XML协议是它的工作基础。 7）网格服务——基于Web Service的资源虚拟化 a.网格服务=接口/行为+服务数据。 服务化各类资源，多个逻辑实例映射相同物理资源，位置透明、多协议绑定和服务的多种实现，组成高级服务，不关心各服务如何构成实现。 例如存储的虚拟化： b.生存期管理 GS 实例由factory或手工创建，GridService 接口支持：Destroy 操作用于显式撤消和软状态撤销 软状态生命周期管理机制：初始的生命周期在创建时和Factory协商，用户可以SetTerminationTime设置生命周期 ，GetTerminationTime 查询，通知 interface也允许生命周期的通知。软状态生命期管理可避免资源的无限期占用等。 7）四种形式： 企业计算 企业计算是“以实现大型组织内部和组织之间的信息共享和协同工作为主要需求而形成的网络计算技术”，其核心是Client/Server计算模型和相关的中间件技术。 其研究热点是建立标准化的对象请求代理，屏蔽网络环境下计算平台、操作系统、编程语言、网络协议的异构性和复杂性，使分布在网络上的应用系统能够协同工作，为网络应用提供通用的高级网络管理服务以及与应用领域相关的增值服务。随着电子商务需求的发展，企业计算面临企业间的信息共享和协同工作问题，面向Web的企业计算解决方案成为热点，企业计算技术全面进入Internet时代。 网格计算 从概念上，网格计算的目标是资源共享和分布协同工作；网格的这种概念可以清晰地指导行业和企业中各个部门的资源进行行业或企业整体上的统一规划、部署、整合和共享，而不仅仅是行业或大企业中的各个部门自己规划、占有和使用资源；网格是一种技术；为了达到多种类型的分布资源共享和协作，网格计算技术必须解决多个层次的资源共享和合作技术，制定网格的标准，将Internet从通讯和信息交互的平台提升到资源共享的平台。 网格是基础设施，是通过各种网络综合计算机、数据、设备和服务等资源的基础设施；随着网格技术逐步成熟，建立地理分布的遍布全国或世界的大型资源节点，集成网络上的多个资源，联合向全社会按需提供全方位的信息服务。 对等计算 P2P（Peer to Peer）系统由若干互联协作的计算机构成，且至少具有如下特征之一：系统依存于边缘化（非中央式服务器）设备的主动协作，每个成员直接从其他成员而不是从服务器的参与中受益；系统中成员同时扮演服务器与客户机的角色；系统应用的用户能够意识到彼此的存在，构成一个虚拟或实际的群体。P2P把网络计算模式从集中式引向分布式，也就是说，网络应用的核心从中央服务器向网络边缘的终端设备扩散：所有网络节点上的设备都可以建立P2P对话。 从目前的应用看，P2P的威力还主要体现在大范围的共享和搜索的优势上，诸如对等计算、协同工作、搜索引擎、文件交换等。 普及计算 普及计算（ubiquitous computing or pervasive computing）强调人与计算环境的紧密联系，使计算机和网络更有效地融入人们的生活,让人们在任何时间、任何地点都能方便快捷地获得网络计算提供的各种服务。普及计算研究的内容主要包括两个方面：自然的人机交互和网络计算。 相同点：目标一致 广泛共享:通过各种方法、技术和策略将网络上的各种资源提供给网络上众多用户共享使用； 有效聚合：将网络上的巨大资源通过协同工作连接集成起来，产生巨大的综合效能，联合完成应用任务； 充分释放：为用户提供良好的开发手段和使用环境，将网络上的多种资源的聚合效能按照需求传递给用户，为用户提供个性化的信息服务、计算服务和决策支持服务。 不同点： 面向对象的分布式计算技术强调的是分布系统的集成能力，以两层或多层Client/Server为主要计算模式，关心的是简化用户端的工作，强化多层服务器的功能，注重分布系统之间的协同工作和快速的应用开发和实现，强调应用服务之间的可交互、可操作性，代码的可移植性，通常关注一个组织内的资源共享。 P2P技术弱化了集中服务器的功能，重视网络中所有个体的作用，强调的是个体之间、系统之间、计算机之间的直接通信和联系，每一个参与者既是客户又是服务方，它与现行以中间件为主的分布式计算技术所采用的Client/Server模式有本质区别。 网格计算是在Internet基础上强调对计算、数据、设备等网络基本资源进行整合，力图将Internet作为一个社会化的计算基础设施。在计算模型、技术路径和研究目标上，Grid计算和目前分布计算中间件领域面向应用级别的交互、互操作和开发有很大的不同。它强调多机构之间大规模的资源共享和合作使用，提供了资源共享的基本方法，而分布计算技术没有提供多组织之间的资源共享通用框架，以Client/Server为主要的交互形式，传统企业计算技术集中在一个组织内的资源共享。 普及计算模式则是要颠覆“人使用计算机”的传统方式，将人与计算机的关系改变为“计算机为人服务”，从某种意义上说，是让人与计算环境更好地融合在一起。 尽管各种网络计算技术有差异，但是它们之间并不是冲突的关系，而是一种正交关系，有时甚至是融合的，因此，各种网络计算技术可以共同存在。例如网格计算和CORBA、SOAP、XML等技术结合可以访问多个机构组成的虚拟组织的资源。   常见FAQ（这部分是转载）： 1.什么是网格 ，网格的目标？ 　　网格是从电力网格中借鉴过来的一个概念，原本是希望计算力和计算资源能够象电力一样，“打开电源开关就可以使用”，不用去关心是谁、如何提供的这些服务。 　　网格的目标是抽象并量化计算资源，随时随地能够通过网络“定额”完成“定量”的计算相关的工作。 2.网格的本质特征是什么？ 　　网格的本质特征是： 　　分布与资源共享：分布是网格最本源的特征，网格是通过集中分散的资源来完成计算的，资源的共享是一种集中资源的手段 　　高度抽象：把计算力和所有的计算资源高度抽象成为用户可见的“电源接线板”，其它的东西对用户透明。 　　自相似：在大尺度上和小尺度上有相同或者类似的规律 　　动态性和多样性：和电力网格一样，用户的需求是变化的，所以动态性是网格需要考虑的一个基本问题 　　自治性与管理的多重性：网格节点内部的自治和外部的受控整合是网格的一个特征，分层的资源需要层次化的管理，而分层来自于网格节点的归属问题和性能方面的考虑。 3.网格计算中有哪些基础概念？ 　　资源发现：资源发现是网格主动去发现可用的资源，并注册、管理这些资源的过程 　　资源调度：如何充分利用网格收集的计算资源进行高效率地合理地使用是资源调度的研究范畴 　　异构：是抽象的本源动力 　　元计算：是关于“计算”的计算，就像“元语言”是描述语言的语言一样，元计算是为了进行计算而展开的计算活动，是网格对资源进行抽象的过程 　　计算网格：网格的重心在解决高密度的计算问题的网格结构 　　数据网格：重心在高密度、海量数据的储存和管理、使用过程的网格结构 4.如何判断是否是网格 　　还没有网格的确切定义出炉，只能根据网格的一些基本特征来判断。P2P严格来说也是一种网格。 　　根据Globus toolkit的创始人的观点，Globus就是网格，这个观点有些偏颇，姑且这么认为吧。 5.网格目前有标准吗，有人在制定标准吗？ 　　OGSI和OGSA是目前关于网格的一个标准 6.能用非常简单的例子说明什么是网格吗？ 　　例如P2P，目前已经实现了储存共享，以解决服务器资源限制（带宽和服务能力）的问题，但是目前的P2P 计算还在热门研究中。它的特点是通过分布式的共享储存和带宽资源，也包括部分计算资源的共享来提高服务的可用性，已经包括了网格的几个主要特征。 　　又如，国外一些如抗癌项目，充分发掘PC 的计算力来寻找治疗癌症的新药，也具有相应的特征，只不过其资源调度的粒度很粗，各节点的耦合很松散，只要计算任务和结果，节点只与中央节点交换数据，结构比较简单。 7.如何在应用领域体现网格的优势 　　高性能（大计算吞吐量）、低成本 8.为什么要把网格比做电网 　　不要考虑计算力从什么地方来，只管用就行了。 9.网格如何分类 　　分为计算网格、数据网格、访问网格、信息网格、服务网格等 10.何为元计算，与网格是什么关系 　　元计算技术是将一组通过广域网连接起来的性质不同的计算资源集合起来，作为一个单独的计算环境向用户提供计算服务。元计算系统的目标是使用户能够共享其中的计算资源并以合作的方式进行计算。元计算前端主要解决最终用户通过统一的界面来使用广域网上各类计算资源的问题；元计算内核主要解决计算任务在广域网中各种超级计算机上协作完成的问题，提供一个完整的程序开发和运行环境。当用户提出计算请求时，计算问题的执行代码在系统内部的计算资源上进行合理的调度和管理，最后得出运行结果并通过元计算前端反馈给最终用户。一个良好的元计算系统主要由三个部分组成：一是尽量简单而又可靠的使用界面；二是资源管理系统;三是良好的编程模型和高效可靠的运行时环境。其中资源管理系统处于核心地位，它负责整个系统中各个资源的描述、变动、分配与保护，与运行时系统密切合作，保证整个系统的正常运行。资源管理系统需要为不同级别的系统管理员提供强有力的工具或界面来对这些资源进行控制和保护。 　　元计算是网格计算的初级形态。 11.什么是计算网格 　　强调计算力获取、管理等的网格 12.什么是数据网格 　　强调数据存储、管理、传输、处理的网格 13.什么是信息网格 　　强调信息存储、管理、传输、处理的网格 14.什么是存储网格 　　强调数据存储的网格 15.什么是知识网格 　　强调知识存储、管理、传输、处理的网格 16.什么是语义网格 　　强调语义解析的网格，实现语义互操作 17.什么是access  grid 　　简单来讲，是一个项目。目的是为网格用户提供简单有效的视频、音频会议功能，为e-science提供基础的工具。 提供单一访问通道获取网格资源的网格。 18.什么是grid portal 　　格网门户，提供格网单一访问通道 19.什么是服务网格 　　强调应用服务集成的网格 20.目前有哪些应用网格 　　美国科学格网（DOE Science Grid）、远程分布式计算与通信（Distance and Distributed Computing and Communication，DisCom2）和地球 系统格网（Earth System Grid II，ESG）、TeraGrid和国家地震工程仿真格网（Network for Earthquake Engineering Simulation Grid，NEES Grid）、CrossGrid、天体物理虚拟天文台（Astronomical Virtual Observatory，AVO）、英国国家格网（U.K. National Grid）、德国的计算资源统一接口项目（Uniform Interface to Computing Resources，UNICORE）、亚太地区格网（APGrid） 21.什么是P2P计算，与网格有什么关系 　　对等（P2P）计算是在Internet上实施分布式计算的新模式。在这种模式下，服务器与客户端的界限消失了，网络上的所有节点都可以“平等”共享其他节点的计算资源。IBM为对等下了如下定义：对等系统由若干互联协作的计算机构成，且至少具有如下特征之一：系统依存于边缘化（非中央式服务器）设备的主动协作，每个成员直接从其他成员而不是从服务器的参与中受益；系统中成员同时扮演服务器与客户机的角色；系统应用的用户能够意识到彼此的存在，构成一个虚拟或实际的群体。 　　网格采用P2P计算体系结构 22.网格与分布式计算是什么关系 　　格网计算是一种新的高性能的分布式计算方法。格网计算作为新一代的分布式计算方法，与传统分布式计算的主要区别在于在没有集中控制机制的情况下，通过对计算资源进行大规模共享，满足应用对高性能计算要求，并且这种对计算资源进行大规模共享是动态的、柔性的、安全的和协作式的。 23.网格与中间件是什么关系 　　网格中间件（Gridware）就是一种在网格中应用的中间件 　　现在的globus toolkit就是一种网格中间件，连接异质的主机节点构成globus网格 24.什么是web service，网格与web service是什么关系。 　　OGSA吸纳了许多Web服务 标准，如Web服务描述语言（WSDL）、简单对象访问协议（SOAP）、轻目录访问协议（LDAP）、Web服务探测（WS-Inspection）等。这些标准用于定位、调度计算资源并保证它们的安全。 　　OGSA采用Web服务框架的优点是：一方面，通过注册和发现接口定义和终端（endpoint）实现描述以及动态产生特定接口绑定的代理，在异构环境中能够支持服务的动态发现和合成。另一方面，由于Web服务机制在商业应用领域广泛采用，OGSA采用Web服务框架使人们能够利用许多现有的开发工具和扩展服务，如产生语言绑定的WSDL处理器。 25.网格跟.net, corba, jini,java的rmi，J2EE都是什么关系。 　　网格融合了.net, corba, jini或java的rmi，J2EE思想，并从软件集成扩展到CPU、存储设备、仪器等硬件的集成。 26.网格和CSCW是什么关系 　　CSCW可以定义为地域分散的一个群体借助计算机及其网络技术，共同协调与协作来完成一项任务。网格促进了这种工作模式。 27.网格跟IBM提出的自主计算有什么关系 　　“自主计算”的设想是将日益复杂的IT系统管理后台化、自动化和智能化，通过强大的中间件将异构网络改造成真正意义上的和谐自主的数字神经系统。 　　网格本身就是一种自主计算 28.什么是网格的体系结构 　　网格体系结构就是关于如何建造网格的技术描述。它给出了网格的基本组成与功能，描述了网格各组成部分的关系以及它们集成的方式或方法，刻画了支持网格有效运转的机制。 29.网格的主要有那些体系结构，他们目前发展状况如何。 　　美国Globus项目提出的格网体系结构模型采用本地服务层、核心服务层、高层服务与工具层、应用层四层结构。在此基础上，美国的Argonne国家实验室、芝加哥大学、南加州大学和IBM公司共同提出了开放式格网服务体系结构(Open Grid Services Architecture，OGSA)。OGSA采用纤维层、联络层、资源层、协作层、应用层五层结构。 30.网格的起源是什么 　　“网格”（Grid）一词来源于人们熟悉的电力网（Power Grid）。目前对计算力的需求正在持续不断地增长。高速网络、功能和性能更加强大的大规模计算系统、高性能存储系统以及高级数据分析软件的应用为解决商业领域和科学领域的计算问题带来了希望。但是利用这些新的能力意味着应付不断增加的工作负荷要求所带来的空前挑战。当一个组织机构在努力保持竞争力的时候他们面临许多前所未有的挑战：减少计算费用、增加计算吞吐量、加快对市场的响应、改进生产服务质量和产品创新等都是非常重要的。一个组织机构在硬件方面的投资需要谨慎地进行权衡，并且必须找到利用可得资源完成更多工作的方法。 　　尽管对计算力的需求是非常大的，但是许多现有的系统都没有得到充分利用。其中一些单个服务器也许满负荷工作，但是大多数系统却不是满负荷工作的，使许多计算周期（computing cycles）没有使用，而实际上这些计算周期可以用于满足不断增长的计算资源需求。格网计算使组织机构可以更加有效地和灵活地用他们的分布式计算资源，从现有的系统中获取更加有用的计算力，帮助组织机构获得竞争优势。 31.网格目前的发展状况如何 　　研究、开发、炒作，即处于预热期。 32.国内的网格有那些项目，每个项目的目标如何，目前进展如何。 　　ACI工程的目标是把分布在不同地理位置的高性能计算机、贵重仪器、数据库等用高速网络连接在一起构成一台虚拟计算机，用户通过ACI共享资源、共同讨论、合作开展科研项目。 　　织女星计划（Vega计划以元数据、构件框架、智能体、格网公共信息协议和格网计算协议为主要研究突破点。 33.介绍一些国外的主要网格项目的状况 　　美国科学格网项目的目标是建立基于格网中间件（Gridware）和系统工具的高级分布式计算基础设施（ADCI）使能源部科学计算体系的可伸缩性满足能源部内部科学研究任务要求。 　　远程分布式计算与通信项目的目标是创建一个用于访问美国能源部三个武器实验室的具有可操作性的格网，以支持国防计划中远程计算和分布式计算这两个关键战略领域复杂的分析、设计、制造、认证功能。 　　地球系统格网（Earth System Grid II，ESG）项目由阿贡国家实验室（Argonne National Laboratory）等五个国家实验室的科学家联合承担。主要目标是解决从全球地球系统模型分析和发现知识所面临的巨大挑战，为下一代气候研究提供一个无缝的强大的虚拟协同环境。 　　国家地震工程仿真格网的目标使地震研究人员能够进行各种地震工程实验数据分析的大规模计算任务。 　　此外，目前美国正在进行的格网计算研发项目还包括Globus、美国航空航天局（NASA）的信息动力格网（Information Power Grid，IPG）、美国国家技术格网（National Technology Grid）、虚拟实验室项目（Virtual Laboratory Project）、天体物理仿真合作实验室（Astrophysics Simulation Collaboratory，ASC）、国际虚拟数据格网实验室（International Virtual Data Grid Laboratory，iVDGL）等。Globus目标构建一个格网软件基础设施。研究内容包括资源管理、数据访问、应用开发、格网安全等。目前全球许多用户利用Globus工具包创建格网和开发格网应用。信息动力格网的目标是为国家航空航天局科学研究任务提供持续、可靠的计算动力源。美国国家技术格网项目的目标是创建一个无缝集成的协同计算环境原型系统。虚拟实验室项目致力于研究、设计、开发能够帮助解决数据密集的、涉及大规模计算的分子生物学问题的格网技术。天体物理仿真合作实验室项目的主要目标利用Cactus和Globus格网计算的研究成果为高级可视化交互和元计算提供大规模并行计算能力，实现在相对论天体物理学领域的大规模仿真。国际虚拟数据格网实验室项目由欧盟的数据格网（DataGrid）、美国的格网物理网络（Grid Physics Network）和粒子物理数据格网（Particle Physics Data Grid）协作创建。 34.网格的发展有哪些困难 　　信息安全、商业模式等 35.网格面临哪些技术问题 　　格网资源管理、注册、预订、分配、调度、安全、计费等 36.GGF主要的工作是什么 　　应用程序及编程模型和环境（APME）。 　　架构。 　　数据。 　　安全性。 　　信息系统和性能（ISP）。 　　端到端应用（P2P）。 　　调度和资源管理（SRM）。 37.国内有类似GGF的组织吗 　　没有，至少没有成规模、成气候、分工协作。 38. OGSA,OGSI,Globus,WSRF有什么关系 　　OGSI（Open Grid Service Ieterface，开放网格服务接口）规定了向网格发送处理请求时所使用的接口，相当于Web服务中的WSDL（Web服务描述语言），在网格计算相关标准中处于核心地位。 　　开放式格网服务体系结构(Open Grid Services Architecture，OGSA)采用纤维层、联络层、资源层、协作层、应用层五层结构，格网是通过调用服务来构造应用的，这就涉及接口问题。 　　OGSA是一个抽象的东西,里面没有具体的内容,OGSA的推出要比OGSI早,OGSI是对OGSA的主要方面具体化,规范化.Globus是基于 OGSI标准的一个实现. WSRF是和OGSI同一个层次的东西,是吸收了Web Service最新成果后,对OGSI的重构和发展. 39.网格是一种新技术，任何新技术或多或少都会带有泡沫的成分？你是否赞成？网格技术是否也带有泡沫的色彩？ 　　技术本身没有泡沫，泡沫是商业炒作产生的，现在已经开始商业炒作了。 40.从总体上看，网格技术目前的发展，是处在一个什么状况？ 　　技术研究开发阶段 41.网格离实际应用，离商业应用还有多远？ 　　2到3年时间 42.一个新技术，从理论性的研究，到实际的商业的推广需要经历几个阶段，你认为“网格”需要经历几个阶段，才能走向真正的商用？ 　　原型应用系统开发、格网标准化（规范、协议）、成熟的商业模式 43.网格想要得到广泛的商业应用，是否会遇到一些阻碍？ 　　是的，例如安全问题、计费问题等。 44.任何一个新技术的发展趋势，都应该受到身在政府、行业、企业中的CIO所关注。你认为作为“网格”技术，这些CIO应该从哪几方面进行关注？ 　　网格在政府、行业、企业中的应用 45.什么才算是Ian Foster三个checklist中的非平凡服务？ 　　大吞吐量、服务透明、高可靠性 46.学习网格要学习哪些基础知识 　　计算机原理、计算机网络、数据库、编程语言 等 47：什么是制造网格 　　是现代集成制造哲理和敏捷制造模式在网络化经济环境下的一种具体物化形式，目标是快速设计、快速制造、快速检测、快速响应和快速重组，克服空间上的距离给不同企业间的协同带来的障碍，在最大程度上实现设计、制造、信息、技术资源的共享，以及协同制造过程中物流、信息流、价值流的优化运行，它能为实现敏捷制造和虚拟企业的运作提供支持，形成具有数字化、柔性化、敏捷化等基本特征的优势互补的协同企业。而在这样的制造网络支持下，整个制造网格系统中的制造企业群体将以较低的成本、较短的开发周期，制造出符合市场需求的高质量产品。       3.云计算 1）定义：云计算是分布式处理(Distributed Computing)、并行处理(Parallel Computing)和网格计算(Grid Computing)的发展，或者说是这些计算机科学概念的商业实现 “Cloud Computing is a paradigm in which information is permanently stored in servers on the Internet and cached temporarily on clients that include desktops, entertainment centers, tablet computers, notebooks, wall computers, handhelds, sensors, monitors, etc.”                 ---- IEEE Internet Computing, 2008 云模式的初衷是让硬件层的消费象按需计算，按所需存储空间那样进行，而为了让云模式带来更多力量，我们需要在整个应用架构中，在一个虚拟的环境中实现配制，部署，服务。云计算就是为一些需要动态改变的需要访问资源与服务。应用和服务请求的资源来自“云”，而不是固定的有形的实体。云就是一些可以自我维护和管理的虚拟资源。 2）基本原理： 通过使计算分布在大量的分布式计算机上，而非本地计算机或远程服务器中，企业数据中心的运行将更与互联网相似，这使得企业能够将资源切换到需要的应用上，根据需求访问计算机和存储系统，这意味着计算能力也可以作为一种商品进行流通，就像煤气、水电一样，取用方便，费用低廉。最大的不同在于，它是通过互联网进行传输的。类比：从古老的单台发电机模式转向了电厂集中供电的模式。 3）特点：超大规模+虚拟化+高可靠性+通用性+高可扩展性+按需服务+极其廉价。 4）应用分类： 软件即服务（SaaS）：通过网络浏览器将单个的应用软件推广到用户，从用户角度来说，前期无需在服务器或软件许可证授权上进行投资；从供应商角度来看，与常规的软件服务模式相比，维护一个应用软件的成本要相对低廉。成功应用：Salesforce.com，在人力资源管理软件方面的应用较为成功，Workday，ERP软件供应商，Google App，知名的在线办公软件。 效用计算（Utility computing）：想法本无新意，目前逐渐应用在数据中心，将计算和存储等资源，打包成为可量化的服务，类似于传统的电力资源等公共效用，例如，Liquid Computing公司的LiquidQ服务，能帮助企业将内存，I/0，存储和计算容量通过网络集成为一个虚拟的资源池来使用。 网络集成 ：云基础服务的集成尚处于初始阶段，案例包括：OpSource推出的OpSource Services Bus；Workday收购的CapeClear，其从事B-TO-B商业模式服务；Grand Central向用户提供集成解决方案，被Google收购。 网络服务：与软件即服务(SaaS)是密切相关的，网络服务供应商提供API能帮助开发商通过网络拓展功能性，而不只是提供成熟的应用软件，成功应用： Google Maps。 管理服务供应商（MSP）：管理服务是云计算最古老的形式之一，是面向IT厂商而并非最终用户的一种应用软件，例如，用于电子邮件的病毒扫描服务或者应用软件监控服务。 服务商业平台 ：服务商业平台是软件即服务(SaaS)和管理服务供应商(MSP)的混合体，为用户和提供商之间的互动提供了一个平台。比如用户个人开支管理系统，能够根据用户的设置来管理其开支并协调其订购的各种服务。   4.P2P技术 1）定义：P2P是一种分布式网络，网络的参与者共享他们所拥有的一部分硬件资源（处理能力、存储能力、网络连接能力等），这些共享资源需要由网络提供服务和内容，能被其它对等节点（Peer）直接访问而无需经过中间实体。在此网络中的参与者既是资源提供者（Server），又是资源获取者（Client）servent。P2P打破了传统的Client/Server (C/S)模式，在网络中的每个结点的地位都是对等的。每个结点既充当服务器，为其他结点提供服务，同时也享用其他结点提供的服务。 例如BT原理： Tracker即时接收所有下载者信息（IP地址和端口），并且给每个下载者一份随机的peer列表。 下载者每隔一段时间连一次Tracker，告知自己的进度和取得列表，这样就可以和那些已经直接连接上的peer进行数据的上传下载。在进行文件传输时，每个文件一般被划分成256K的大小的块，每个块都计算其校验值。用户间互相的Choke和UnChoke对方，来交换这些文件块。 2）优势 非中心化：网络中的资源和服务分散在所有结点上，信息的传输和服务的实现都直接在结点之间进行，可以无需中间环节和服务器的介入，避免了可能的瓶颈 可扩展：随着用户的加入，不仅服务的需求增加了，系统整体的资源和服务能力也在同步地扩充 健壮性：P2P架构天生具有耐攻击、高容错的优点。多副本没有单点失效问题，部分结点或网络遭到破坏对其它部分的影响很小 负载均衡：资源分布在多个节点，更好的实现了整个网络的负载均衡 高性能/价格比：通过利用网络中的大量空闲资源，可以用更低的成本提供更高的计算和存储能力。 隐私保护：信息的传输分散在各节点之间进行而无需经过某个集中环节，用户的隐私信息被窃听和泄漏的可能性大大缩小，所有参与者都可以提供中继转发的功能，因而大大提高了匿名通讯的灵活性和可靠性，能够为用户提供更好的隐私保护。 3）拓扑结构 中心化拓扑：共享软件 Napster 中央服务器的瘫痪容易导致整个网络的崩溃，可靠性和安全性较低 随着网络规模的扩大，对中央索引服务器进行维护和更新的费用将急剧增加，所需成本过高。 中央服务器的存在引起共享资源在版权问题上的纠纷，并因此被攻击为非纯粹意义上的P2P网络模型 优点：维护简单，发现效率高，资源的发现依赖中心化的目录系统，发现算法灵活高校并并能够实现复杂查询 问题： 全分布式非结构化拓扑：P2P文件共享系统  Gnutella   优点：容错性好，支持复杂的查询，并受结点频繁加入和退出系统的影响小。 问题：查询的结果可能不完全，查询速度较慢，采用广播查询的系统对网络带宽的消耗非常大，并由此带来可扩展性差等问题。 全分布式结构化拓扑： 采用分布式散列表（DHT），DHT实际上是一个由广域范围大量结点共同维护的巨大散列表。散列表被分割成不连续的块，每个结点被分配给一个属于自己的散列块，并成为这个散列块的管理者，如Chord：网络结点按照一定的方式分配一个唯一结点标识符(Node ID) ，资源对象通过散列运算产生一个唯一的资源标识符(Object ID) ，且该资源将存储在结点ID与之相等或者相近的结点上。需要查找该资源时，采用同样的方法可定位到存储该资源的结点。提出了一个分布式查找协议，该协议可将指定的关键字(Key) 映射到对应的结点。 优点：DHT类结构能够自适应结点的动态加入/退出，有着良好的可扩展性、鲁棒性、结点ID分配的均匀性和自组织能力。由于重叠网络采用了确定性拓扑结构，DHT可以提供精确的发现。 问题：DHT的维护机制较为复杂，尤其是结点频繁加入退出造成的网络波动（Churn）会极大增加DHT的维护代价。DHT仅支持精确关键词匹配查询，无法支持内容/语义等复杂查询。 半分布式拓扑：选择性能较高（处理、存储、带宽等方面性能）的结点作为超级点（英文文献中多称作：SuperNodes, Hubs).在各个超级点上存储了系统中其他部分结点的信息，发现算法仅在超级点之间转发，超级点再将查询请求转发给适当的叶子结点。半分布式结构也是一个层次式结构，超级点之间构成一个高速转发层，超级点和所负责的普通结点构成若干层次。KaZaa就是个实例。 优点：性能、可扩展性较好，较容易管理 问题：对超级点依赖性大，易于受到攻击，容错性也受到影响 比较： 4）应用 ICQ、Skype类的即时通信应用。两个或多个用户互相使用文字、语音或视频进行交流。利用P2P技术可以弱化甚至摆脱对服务器的依赖，这样的通信更接近人与人的通信模式。 海量存储类数据存储应用，如Microsoft提出的Farsite。在网络上将存储对象分散化存放。而不像现在放置在专用服务器，可以减轻服务器负担，增加数据的可靠性和传输速度。 Napster、BT类文档交换应用。实现数据和文件共享，使用者可以直接从任意一台安装同类软件的PC下载及上传文件，而不是从服务器上传及下载。用户可以检索、复制共享的文件。软件自动发现最新的文件列表，发布者无需使用其他途径发布。 Infrasearch、Pointera类数据搜索及查询软件。用来在P2P网中完成信息检索，动态地将当前P2P网络中各个f对等点的内容进行收集，并且有效地向用户传递。 Netbatch（Intel）类协同计算应用。现有实验可连接近1万台PC，利用它们的空闲时间进行协同计算，完成超级计算量的工作（如空间探测、分子生物学计算、芯片设计）。 Groove类数据或行动协同应用，是基于P2P连接的软件工具，可以建立一个安全的企业级协同工作平台（P2P网），提供供求信息链上的互动信息沟通，如货品目录、库存及发货清单，帮助使用者进行经销渠道维护、客户服务和支持。 在线游戏类应用。许多双人及多人对弈网络游戏采用P2P技术交换数据。 5）相关研究与未来 6）主要问题： P2P类应用吞噬带宽 ：BT类业务的流量占据了超过40%的网络带宽 ，无论运营商如何扩容，带宽似乎永远不够，运营商之间互联带宽加倍后会在短短的几周内被占满 P2P类应用难以监管：基于P2P技术的即时通信工具使合法监听难以实施，基于P2P技术的即时通信工具在业务层没有一个集中的点来建立呼叫或者安排路由，因此不能基于业务控制设置合法监听点 ，虽然可以在骨干设备或者互联设备上得到经过该设备的所有数据，但是由于数据量过大，一般很难进行实时的海量分析，由于P2P通信由两端计算机直接协商，很容易实现端到端强加密，即使第三方得到通信数据，也很难在较短时间使用较小代价解密。  7）P2P对电信行业带来的思考： 互联网的建设和运营 ：接入网出口及骨干网带宽问题和运营模式问题——内容拥有者在产业链各环节中的发言权增强，其甚至可以利用P2P技术，自己进行网络传输。 从文件交换服务提供者的角度来看，P2P作为一种单纯的服务，似乎不存在赢利的可能———用户需要的不是P2P软件，他们需要的只是通过P2P能得到的东西，也就是共享的文件。这更加凸现了内容提供商而非网络提供者的价值。另外电信运营商是否应当提供内容以及增值业务 ？ 互联网网络中立问题 ：网络中立的提案中既排斥区别使用者分配资源也排斥区别应用分配资源。 网络中立提案希望电信运营商将网络像高速公路或者电网那样运营。电信运营商将只能作为管道提供商为内容提供商以及用户提供管道，不能按照自己的意愿以及所传送内容分配资源。虽然电信运营商拥有网络，但是只能得到少量的接入费用，而内容提供商却“寄生”在网络上得到绝大多数的利润，因此绝大多数运营商都反对网络中立。当前网络中立法案还没有在美国通过。 在以P2P为首的业务应用引出问题以后，互联网在网络中立问题上是否改变，如何改变，何时改变，都是需要思考的内容。 互联网安全保障 ：因为P2P类应用是用户到用户的，骨干网上不存在用户数据的必经点，对用户行为以及用户传送内容的过滤、合法监听越来越困难。当然如果在所有用户接入点上布置分析过滤工具不是不可能。但是这样带来的附加成本可能会急剧上升电信运营商是否应当为通信内容的安全负责？电信运营商应当对网络安全负多大的责任？成为管道提供者的电信运营商如何对安全负责。","title":"SOA、网格计算、云计算与P2P技术"},{"content":"国内第一台无CPU、无内存、无系统的电脑主机在沪投产 　　一只与移动硬盘大小相仿的金属盒子，“身上”长着4个USB接口和电源、网络、耳麦、投影仪专用接口，只需连接上显示器、键盘、鼠标等外接设备并插上网线，轻轻点击登录窗口，熟悉的Windows界面即刻展现在显示器或投影屏幕上，开机启动时间几乎可以忽略不计……   　　经过上海科研人员的数年攻关，国内第一台无CPU、无内存、无系统的“零终端电脑主机”近日在沪问世，并于7月初投入量产。目前，上海黄金交易所已经“抛弃”掉笨重的PC主机，配置完成300台这样的“零终端电脑”，成为全国第一家进入云电脑办公时代的公共机构。 　　节电95%零电磁辐射 　　记者日前在上海金图信息科技有限公司看到，这台可以完全替代PC主机的“宝盒子”KT8000长12厘米、宽8厘米、高1.5厘米，只相当于两包香烟大小，重量只有80克，比便携式移动硬盘还轻。 - 　　“KT8000是目前世界上唯一真正做到无CPU、无内存、无系统的零终端电脑，盒子内只有一块高度集成的电脑芯片，而上网浏览、操作软件、编辑保存文件、播放视频等所有工作，都通过网线另一端强大的服务器软硬件系统来完成。”金图科技总裁宋代明表示，由于“宝盒子”将传统PC主机内的数据运算、管理程序、操作系统等全部“转移”到了基于云计算概念的远程服务器，办公桌上的电脑终端得以大幅度“瘦身”，电力消耗只有3.5瓦不到，是通常台式电脑的5%，以一家100人规模的办公企业测算，能源消耗只有独立主机方案的1/10，3年下来可节省5万元电费。 　　无CPU、无内存、无系统，对电脑使用者来说还意味着——让办公族头疼的开机等候时间长、电磁辐射、电脑病毒都一一迎刃而解。 　　初步上市约3000元 　　在沪问世的KT8000“零终端电脑”已通过中国质量认证中心的中国国家强制性产品认证，被中科院上海科技查新咨询中心认定为国际领先技术，并于7月初正式投入量产。 　　目前，一台“宝盒子”的市场价格约3000元左右，今年第三季度可望量产4500台，已具备年产10万台的生产能力。 　　家庭版“零终端电脑”也在研制中，有望明年年中面市，届时价格也会大幅降低，一台家庭用“宝盒子”不会超过1000元人民币。   ---------------------------------------------------------------------------------------- 2011年3月最新“985”工程大学名单39所  2011年3月最新“211”工程大学名单112所 10类最急需IT人才：Java开发者居首         海量Java教程、学习资料和源码  2012年度中国工科大学排名100强名单     特色985大学高校名单 2012年中国大学高校排行榜--580强排名  中国最高等级实验室—“国家实验室”名单       长时间操作电脑需要养成的几个好习惯    90后就业“钱景”:IT仍是最佳选择    2012年度世界500强企业，中国大陆香港台湾公司上榜名单（79家）  2012年全球城市竞争力排名500强名单，69个中国城市上榜 2012四月发布的世界各国人均GDP排名名单,中国超泰国  2012年全国各省平均工资排行  2011-2012年度中国软件企业公司100强排行榜名单 世界各国国土面积和人口排名  程序员工资年薪5万起领跑2012年应届生求职市场                    ","title":"仅硬盘大小电脑在中国问世：无CPU无内存无系统"},{"content":"云计算也叫了好几年,概念业已深入人心，各国政府和大小企业都在为之投入，号称云计算的产品或平台也很多，但真正成功的公共云应用，特别是涉及企业和个人核心的基本没有，原因是什么呢？技术？观念？资金？其实这些，我觉得都不是关键。云计算发展到现在真正缺的，是立法，是配套的法律法规和保证这些法律法规执行得配套措施。公共云计算在很大程度上，运作形式跟现在的银行很类似（把数据看作是钱），需要信用担保，而信用担保最基本的方法就是立法，以国家信用为其背书。 立法的内容包括： 1）云计算的相关规范和标准； 2）云计算企业的基本资质认定； 3）云计算企业的运营管理要求（比如，研发和运营分离，运营数据安全制度等）； 4) 云数据保护法律法规；(这个很重要，包括云计算数据和云计算产品源码第三方(或国家)备份制度，数据盗窃量刑和处罚等) 5）云计算安全标准; 6) 云数据保险制度（类似银行准备金制度，担保制度） 7）运计算企业破产用户权益保护；（） 8） 云计算平台和产品公证担保制度； 9）云计算用户权益保护法(包括用户权益，义务和相关的赔偿制度) ..... 与之相关的配套措施包括： 1）国家云计算数据存储中心或第三方云数据存储中心，这些中心不参与云计算，仅根据法律法规存放云计算数据和云产品的源码等； 2）云应用数据和应用风险保险业务；（可以有保险公司来承担） .......   云计算在减少中小微企业和个人的信息化成本方面，还是有着非常大的优势，云平台或应用将是下一个大的信息采集和交易平台。云计算要发展和真正应用起来，相应的立法不可或缺。另外，税法的完善（减税和透明化）也是企业云应用得以繁荣的一个重要条件。  PS：立法的缺失，其实也是企业公共云计算发展的一大障碍。","title":"公共云计算还缺什么?(万事俱备,只欠东风)"},{"content":"Lily以NoSQL技术为主题，是建立在云计算上的内容仓库(content repository)。它是基于Apache的 HBase(存储)和Solr(索引/搜索)，并提供了大型内容集合存储与检索的解决方案。可运用在 门户网站，内容管理系统，及时搜索，档案应用，文案管理，等等。 官网地址:http://www.lilyproject.org/ Lily是第一个基于云技术（Big Data与NOSQL）实现的开源数据和内容仓库。它用到的具体技术包括： Hadoop, HBase和Solr。 Hadoop提供分布式文件系统，HBase是一个运行在Hadoop之上的No-SQL数据库。HBase具有可伸缩和自动切片功能。Lily将它的内容存储在HBase中。对开发人员友好的内容模型将被映射和持久化到HBase数据库中。 它的内容使用Solr索引并用到其提供的搜索。Solr具有高度可伸缩的特点，提供分布式搜索和索引复制。ZooKeeper提供集中式服务用于维护配置信息。Avro RPC，一种数据序列化系统提供API支持。 Lily项目与传统的Lucene框架相比体现了以下几点关键性的优势： •伸缩性 –>sharding/MapReduce •可用性 –> replication •及时性 –> real-time update index •容错性 –> no SPFO 另外，Lily 借用了Apache的 HBase进行存储 ，Solr进行Index/Search； Lily 重新构建大数量的索引Lily会采用MapReduce把索引当做文件切在HDFS上； Lily 索引更新时切换并没有像LinkedIn的Zoie那样保存在内存里，Lily在Hbase上建立了secondary indexes； Lily 在建立索引的结构方面 借鉴了Google App Engine的索引设计思想； Lily 提供REST 和 API 2种方式提供客户端调用； 关于上面提到了LinkedIn的Zoie我想多数两句，Zoie跟LinkedIn的其他产品捆绑的非常紧密，导致你如果单一的使用Zoie总会觉得很变扭，而且文档非常少，那篇让人貌似惊喜的中文文档仍然不够详细，只好对Zoie望而却步了。 Lily的系统架构由4个主要的部分组成： 1.Zookeeper – 对分布式环境中的状态和配置进行管理，让Client可以知道当前有多少个工作的 Lily Node。 2.Lily Node – a)WAL(预写日志)、b)Message Queue(消息队列)、c)Indexer(索引策略)、d)Lily Repository(索引CRUD) 组成。 3.HBase -作为存储单元，最终的消息、索引、数据和二进制数据还是存储在HDFS上。 4.Solr – 建立Lucene框架基础上查询器，并且支持分布式搜索，切片的策略由Lily Middleware中的Indexer部件提供。 5.Client-客户端的访问入口基于Avro的协议(类似于PB)操作Repository。 如图所示: 友情提示： 1.Lily 提供了快速入门的模拟集群工具(Minicluster)，不需要搭建HBase/Hadoop/Zookeeper环境，只要有JDK你第一次上手20分钟内也能跑起来一个例子。 2.Lily 在分布式的环境中不能使用Apache的原版Hbase和Hadoop，需要使用改装过的版本，HBase是Lily自己改装的，Hadoop是Cloudera的 0.20.2+737版 。 3.Lily 为了简化开发和将来对项目的维护，在代码上使用了Spring作为集成工具。 4.Lily 考虑使用HBase和Solr作为基础平台纠结了很久，最终给出了一些依据。 5.zookeeper作为JEE分布架构中最上层防止单点(SPFO)系统接口是不错的选择，不仅是Lily在这样做，HBase本身也是这样。 6.分布式搜索中需要异步架构的支撑，消息中间件是最佳的选择，用来对索引进行CRUD和挂起的操作。 7.对于大数量的索引合并和更新是MapReduce施展才能的时候了。 8.通过Lily项目对于HBase的使用场景又有了新的参考。 9.Srping也对云计算的话题蠢蠢欲动，Spring Framework HBase Template 列入计划中。 10.在众多HBase ORM中pigi 算是不错的一个，使用简单，Pigi Project 。 11.JMXToolkit 可以对HBase进行监控，并且可以和Cacti、Nagios进行集成。","title":"Lily-建立在云计算上的分布式搜索框架"},{"content":"作者：趋势科技产品经理SandraCheng 与资深技术总监 Jon Oliver            一样的手法，更多样化的伪造对象：最新的黑洞漏洞攻击垃圾邮件          如同趋势科技在之前文章所提到的，有一连串黑洞垃圾邮件攻击正在持续肆虐着，这些攻击通常最开始来自垃圾邮件，里面夹带了指向已被植入漏洞攻击代码的沦陷网站链接，借此即可将Zeus木马变种安装到用户计算机上，并窃取敏感数据。本文主要是对当下黑洞漏洞攻击垃圾邮件垃圾邮件的活动状况进行一些更新。          黑洞漏洞攻击垃圾邮件已经出现好一段时间了，直到目前为止依然是十分的活跃。这些垃圾邮件攻击对于那些被冒名的组织、入侵沦陷网站的经营者，以及那些受到网络钓鱼攻击的用户来说，都是严重的问题。不过我们通过分析大量数据，加上趋势科技云计算安全技术为用户提供的防范垃圾邮件的方法，仍然可以有效监测并过滤攻击者发送的垃圾邮件。   黑洞漏洞攻击垃圾邮件的变化           趋势科技最近注意到，网络罪犯除了继续使用与以前完全相同的策略外，还开始利用心的方法，冒充知名机构作为幌子发送垃圾邮件。具体来说，他们的垃圾邮件会假冒成合法电子邮件，诱骗用户点击邮件中的链接。攻击者首先会使用含有入侵沦陷网站链接的垃圾邮件，将用户重定向到包含恶意软件的网站。就像前面所说的，不同之处在于，用来做为幌子的知名机构更多了。   最近的攻击活动有着多样化的幌子          下表是最近发生过的攻击，包括被黑洞漏洞攻击垃圾邮件所冒用的组织名称以及日期：   日期 组织 5月29日 美国银行（Bank of America），威讯（Verizon） 5月30日 PayPal，花旗银行（Citibank） 5月31日 Monster，Windstream 6月1日 Century Link，Detroit Basketball，The HoneyBaked Ham  Company，Ticketmaster，LinkedIn 6月3日 美国联邦储蓄系统（The Federal Reserve System） 6月4日 威讯（Verizon） 6月5日 亚马逊（Amazon），AT&T，PayPal 6月6日 AT&T，花旗银行（Citibank），Craigslist，惠普（Hewlett-Packard） 6月7日 LinkedIn   感染链范例          下图是黑洞漏洞攻击垃圾邮件假冒成Amazon、AT＆T，以及PayPal 进行攻击的感染链接。这只是一个范例，用来描述我们的专家所追踪到的大规模垃圾邮件攻击，并且在攻击发生时我们已经提供了解决方案：       黑洞漏洞攻击垃圾邮件假冒成Amazon、AT＆T 和PayPal 进行攻击的感染链范例          想要解决黑洞漏洞攻击，最主要的目标是感染点。既然电子邮件是最初的起点，那么检测这些网络钓鱼攻击就是一种有效的方式，可以打击这种威胁。   ＠原文出处：SameOperation, Diversification of Targets Being Spoofed: Current Black Hole ExploitKit Spam Runs    ","title":"冒充知名机构的网络钓鱼攻击有增加趋势"},{"content":"    云计算时代的来临把我们的信息化带入了一个新的阶段，云计算、虚拟化等技术也都在各领域中得到应用。OA系统对企业来说可能并不陌生，但是真正实施好一个OA系统却是难上加难。     不论国家、政府还是企业都不同程度地面临着资金、资源、人才、技术等多方面的压力，低成本、高效群策群力完成共同目标，不断突破保持竞争能力，已经变的越来越重要了。建立一个信息管理规范、信息共享方便、工作流程合理/标准的现代办公环境势在必行。     为什么OA系统的成功率不高呢？是选型没有选好？还是实施中出现了问题？今后我们的OA发展情况又会是什么样呢？这些问题都困惑了我们很久。     OA是现代利用电脑进行全自动的办公,目的是提高效率。OA在选型上是一个难题，既要系统稳定可靠还要根据需求进行自由定制，还要看是否有众多的成功案例。     企业实施OA系统切记“顺手牵羊”，一定要符合企业自身的环境。我接触过一个企业CIO，他给我讲述了自己企业OA的选型之路，从开始的失败到最后成功，他告诉我一句话贵在坚持。他在选型之前也做好了准备列出了一系列的条件，但是最后系统还是失败了。     总结失败经验，得出几条选型上需要注意的事项，分享给大家。选择在行业里有很好的经验的软件厂商，还要能够配合需求灵活调整，软件厂商要有权威认证，最后要有实际效果，去该厂家实施OA系统的企业去实际考察，才能获得准确的信息。     选型只是成功的第一步，有了好的选型才能更好的实施。在实施中推广使用的问题、功能需求的问题、软件系统易用性、稳定性的问题、服务问题，还有最重要的安全性问题都接踵而来。     让企业全体员工包括领导都真正参与进来，先使用最基本最常用的功能。这样才能很好的在企业内部进行推广。企业中每个部门的管理水平不同，对OA系统的应用深度也会不同。因此，有必要进行OA系统二次实施。OA选型成功的话，修改、调整、扩展等OA系统二次开发内容，就会比较顺利的完成。     企业信息化进程一般已经达到一个比较深的层次，不少企业内部同时拥有两个或两个以上的业务系统，为了消除信息孤岛、实现协同管理，整合是必须的。可扩展、可集成、拥有灵活开发接口的平台型OA产品能够满足这个需求。     企业的最终目标是实现柔性管理，这就要求OA系统能够应需而变，与企业战略紧密结合协调发展，这样实施才算是成功。     基于现在的发展环境，OA的厂商也是百花齐放，大家都看到这块流油的肥肉，竞争也是不言而喻。国内OA厂商是有人欢喜有人忧，一方面以泛微等一些有实力的厂商纷纷加紧抢占市场份额，而一批实力弱小的厂商在激烈的市场竞争中转型或倒闭。     OA的市场已经接近饱和，基本每个公司都有自己的一套程序。之前的“行贿门”事件、金蝶协达的诉讼事件等，体现出现在市场还没有达到规范化。新老OA厂商激烈竞争，价格战、广告战、促销战此起彼伏。     现在的OA基本上都是第四代OA，以工作流为中心。它的前景还是很广阔的，企业信息化管理是趋势。将来的发展趋势是要有性价比，还要有良好的服务支持。","title":"让OA选型与实施不再苦口难言"},{"content":"7月10日消息，在第十八届”兰洽会”上，杂志《读者》宣布计划推出包括平板、液晶触摸一体机在内的多款数字化新品，其中平板电脑更是内置了《读者》杂志30年期刊的电子版本！在兰洽会上的《读者》数字化展台前，工作人员向参观者展示液晶触摸一体机的使用方法，这款设备被大家形象地称为”可书写的液晶电视”。在将液晶显示 器和电脑主机集成的基础上，可以实现操作者用手或教鞭在液晶屏幕上直接控制电脑及书写标注。这种产品同时还内置了多款教学软件，可以更直观地演示教学课件 等内容，可以替代传统的黑板、投影仪、电脑等课堂教学设备。      同时，此次《读者》全新推出的”悦读”平板电脑，大小为9.7英寸，使用最新的安卓操作系统。与一般平板电脑相区别的是，这款平板内置了《读者》杂志30年期刊的电子版本。     另外，《读者》集团还计划在今年10月推出自己的手机。 据了解，这些数字化新品将利用读者的”云图书馆”项目，利用云计算技术，打造一个大型的内容推送平台，不管读者身处全球任何一个角落，都可以进入”云图书馆”下载由《读者》提供的数字出版内容。 《读者》杂志创刊于1981年，作为一本家喻户晓的杂志，有”心灵读本”的美誉。多年来，《读者》杂志发行量连续位居国内第一。近年来，《读者》这一老牌杂志适应新形势和进入数字出版领域，先后推出了手机杂志、手持阅读器电纸书等多种数字化产品.","title":"你没看错：《读者》杂志要出平板 而且还要出手机"},{"content":"我的废话：     大年三十夜，看春晚实在是太无聊了，整个《新闻联播》的电视剧版本，还不如上上网，看看资料，喝喝老酒，写点东西来的快活。    近2年来云计算的话题到目前为止风风火火从来没有平静过，一直是大家嘴边讨论的热门话题，人们期望运用云计算提供可靠、稳定、高速的计算，在云计算中Google是目前最大的云计算供应商，例如：Google GAE(Google App Engine)和Google的Docs在线文章服务，这些SaaS上线产品的数据存储(datastore)是由BigTable提供存储服务的，在次之前我提到过Yahoo贡献给Apache的那些山寨版本(Google与Yahoo的那些利器)，其中Apache的HBase就是山寨了Google的BigTable。    我们知道在云计算的技术话题中Apache的Hadoop项目是一块基石，利用Hadoop项目中的产品可以建立云计算平台和超大型的计算。不知道你是否有想过如果将HBase作为Google GAE上的数据存储(datastore)，那么每个用户之间的数据访问权限怎么办？如果使用HBase提供对大客户提供“私有云”(private cloud)或者另一种可能一个公司内部的集群上运行HBase，公司的内部可能有几个部门，某几个部门之间的数据都是独立分离但又运行在一个平台上，那么你就会发现HBase不具备这样的功能，貌似目前HBase的最高版本0.90.0还没有这样的功能对用户的表、Row、Cell的访问权限。但是我们知道Google的GAE上每个用户访问的数据肯定是有权限划分的，不然我只要有权限登录GEA就能看见所有用户存放的数据了。这样的问题你有可能没有想过，但趋势公司的工程师们却为此想到了这点，并且把他们的设想和设计提交了HBase项目组，并且提出了以下主要的设计思想：    1. Client access to HBase is authenticated    2. User data is private unless access has been granted    3. Access to data can be granted at a table or per column family basis. 对HBase中的表和数据划分权限等级和身份验证后，操作权限被分为3大类，每类中包含的操作权限如下所示： 对于方案中涉及到存储的权限的是指整个表或表中的列族，也就是说只考虑在表这个级别的权限，表与表之间的所属关系是存放在 .META. 系统表中，以regioninfo:owner 的格式进行存放，例如:系统中table1这个表是有权限的，这个表权限的存根保存在3个地方 ：     * The row in .META. for the first region of table1                        * The node /hbase/acl/table1 of Zookeeper                              * The in-memory Permissions Mirror of every regionserver that serves table1       如图所示，图中的箭头表示了数据流向的顺序： 查看大图请点击这里 方案中HBase在分布式、集群环境下，而权限一致性的问题交给了Zookeeper来处理，在多个regionservers中，每个服务器的HRegion中存放着多个表，并且实现了(implement)ZKPermissionWatcher接口的nodeCreated() 和 nodeChanged() 方法，这2个方法对Zookeeper 的节点进行监控， 节点的状态发生相应的变化时会ZooKeeper刷新镜像中的权限。 如图所示： 查看大图请点击这里 HBase的这一关于权限的功能正在设计和研讨当中，让我们继续对他保持关注，看看今后将会发生的变化能给我们带来什么样的效果，非常期待这个功能早日正式发布。","title":"HBase入门7 -安全&权限"},{"content":"    原文作者：惠普知名博主Paul Muller “我接受这些条款和条件。请点击这里确认。”   您有多少次是在没有仔细阅读用小字体撰写的法律条款的情况下就点击“确认”来订购云供应商的服务了？   请不要再这样做了。   请点击下面的链接阅读全文： http://www.enterprisecioforum.com/en/blogs/paulm/look-you-click-10-questions-ask-agreeing","title":"同意签署云服务协议前需要问的10个问题"},{"content":"摘要：     在国内外，云计算正在大步的走向商业化的道路，也得到了越来越多公司的重视。其中平台即服务(Platform-as-a-Service  PaaS)已经称为业界探讨云计算的热点方式之一，采用PaaS模式来构建应用运行平台App Engine是一种重要的实现方式。本文主要是对App Engine的背景、特点、需求等进行分析整理，并据此对业界主要的App Engine进行了调研分析。最后对一个完善的App Engine进行了需求的细化分解、架构设计，并针对App Engine的部分核心技术问题提出了解决方案。     关键字：App Engine、PaaS、SAE、Nginx、scribe、Hadoop、Storm、Ptail、Scribe 1综述 1.1背景     在国内外，云计算正在大步的走向商业化的道路，也得到了越来越多公司的重视。其中平台即服务(Platform-as-a-Service  PaaS)已经称为业界探讨云计算的热点方式之一，采用PaaS模式来构建应用运行平台App Engine是一种重要的实现方式，比如说国外的Google App Engine、国内的Baidu App Engine/Sina App Engine/Tencent App Engine。     云计算(Cloud Computing)是当前IT领域的热点，是继1980年大型计算机到客户端-服务器的大转变之后的又一种巨变。云计算的一个重要目标是“通过互联网，使用户更加方便、快捷、灵活地使用各种有质量保障的 IT 资源，这些资源以服务形式提供，终极的云计算环境将使得消费这些服务就像今天使用水、电和煤气等公共基础设施一样便捷”。通常来说云计算可以认为包含以下三个层次的服务： SaaS(Software-as-a-Service)：软件即服务。它是一种通过Internet提供软件的模式，用户无需购买软件，而是向提供商租用基于Web的软件，来管理企业经营活动。 PaaS(Platform-as-a-Service)：平台即服务。PaaS实际上是指将软件研发的平台作为一种服务，以SaaS的模式提交给用户。因此，PaaS也是SaaS模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。 Iaas(Infrastructure-as-a-Service)：基础设施即服务。提供给消费者的服务是对所有设施的利用，包括处理、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、储存空间、部署的应用，也有可能获得有限制的网络组件(例如，防火墙，负载均衡器等)的控制。     云计算三个层次的服务关系如下图所示：          其中可以看出PaaS是承接Iaas和SaaS的关键点，是对底层IaaS的再次封装从而提供完善的运行平台来支撑不同的SaaS应用。PaaS的一种重要实现形式就是App Engine，本文分析的对象就是App Engine。 1.2 App Engine特点     App Engine具有PaaS平台的三个特点: 平台即服务：PaaS所提供的服务与其他的服务最根本的区别是PaaS提供的是一个基础平台，而不是某种应用。PaaS为不同的业务应用提供全流程的运行环境支持，对具体的业务应用而言，PaaS就是一个服务，一个为应用开发提供支持的平台服务。 平台及服务：一个App应用所需提供的服务，不仅仅是单纯的基础平台，而且包括针对该平台的技术支持服务，甚至针对该平台而进行的应用系统开发、优化等服务。所以一个完善的PaaS运行平台，不仅仅只能是运行环境，还需要提供各种相关服务，比如说完善的平台控制服务、自动化运维服务、弹性调度服务等等。 平台级服务：PaaS运营商对外提供的服务不同于其他的服务，这种服务的背后是强大而稳定的基础运营平台，以及专业的技术支持队伍。这种“平台级”服务能够保证支撑SaaS或其他软件服务提供商各种应用系统长时间、稳定的运行。PaaS的实质是将互联网的资源服务化为可编程接口，为第三方开发者提供有商业价值的资源和服务平台。有了PaaS平台的支撑，云计算的开发者就获得了大量的可编程元素，这些可编程元素有具体的业务逻辑，这就为开发带来了极大的方便，不但提高了开发效率，还节约了开发成本。有了PaaS平台的支持，WEB应用的开发变得更加敏捷，能够快速响应用户需求的开发能力，也为最终用户带来了实实在在的利益。 1.3 App Engine需求     App Engine将应用运行所需的 IT 资源和基础设施以服务的方式提供给用户，包括了中间件服务、资源管理服务、弹性调度服务、消息服务等多种服务形式。App Engine的目标是对应用提供完整生命周期(包括设计、开发、测试和部署等阶段)的支持，从而减少了用户在购置和管理应用生命周期内所必须的软硬件以及部署应用和IT 基础设施的成本，同时简化了以上工作的复杂度。为了确保高效地交付具备较强灵活性的平台服务，在App Engine中，平台服务通常基于自动化的技术通过虚拟化的形式交付，在运行时，自动化，自优化等技术也将被广泛应用，以确保实时动态地满足应用生命周期内的各种功能和非功能需求。     具体来说，搭建传统 IT 基础平台是一个漫长的过程，通常由申请，审计，硬件购买与运输，硬件安装与配置，软件安装与配置等步骤组成。在这个过程中繁复的手工配置工作费时费力，而且容易产成人为配置错误。同时，平台环境的升级维护也面临人为配置错误频繁产生问题，造成不必要的影响和损失。由于这些原因，搭建完成的应用运行平台，即使在一定时期内不再需要，也不会被及时释放回收，以供新项目使用。这是造成空闲硬件资源的原因之一。此外，传统基础平台提供的应用运行能力是静态的。然而在不同时间，应用负载往往是不一样的。为了确保高负载时应用的正常运行，应用运行平台必须能够提供最高运行能力，这就造成了非高峰时的众多空闲硬件资源。     云计算的产生，尤其是平台服务App Engine的理念，从产生空闲硬件资源的根本原因入手建立了快速搭建部署应用运行环境和动态调整应用运行时环境资源这两个目标。依据虚拟化与自动化技术实现应用运行环境的即时部署以及快速回收，降低了环境搭建时间，避免了手工配置错误，快速重复搭建环境，及时回收资源， 减少了低利用率硬件资源的空置。另一方面，根据应用运行时的需求对应用环境进行动态调整，实现了应用平台的弹性扩展和自优化，减少了非高峰时硬件资源的空置。     简而言之，App Engine主要目标是：Easy to maintain, Easy to scale, Easy to build。     具体来说，需求可以从三个维护来分解： 第一、              开发需求。从开发的角度来看，App Engine需要提供全流程的运行环境和全流程的开发环境。其中全流程的运行环境包含流量接入服务、运行环境、通用服务。全流程的开发环境包含：开发支持SDK、基础框架基础库、代码自动生产脚手架、单机运行环境。 第二、              运维需求。运维是App Engine最重要的目标之一，运行资源弹性调度、资源审计、预算、资源利用率、安全隔离、访问控制、实时监控等等都是重要的需求。 第三、              产品支持需求。这里面需要对开发、运维、产品提供全流程的管理支持工作，包含有开发上支持需求：业务监控、问题定位、分布式日志重建。运维上的报警、预算分析、自动调度。产品上的需求：统计分析、离线数据挖掘、在线实时计算。 2调研              主要调研分析了两个比较典型的App Engine：最近开源的CloudFoundry和国内最近比较火的Sae平台。 2.1 CloudFoundry     CloudFoundry是VMware公司在2011年4月份推出的开源PaaS平台，官方网站是http://cloudfoundry.com/。在这过去的一年发展中，CloudFoundry发展非常迅速，目前已经支持PHP/JAVA/Ruby等各种运行环境，并且很好的和各种开源框架、服务进行对接。     CloudFoundry的整体架构如下图所示：          其中各个模块的工作如下： 1、             Request Router。顾名思义，是一个Router层，主要的工作是流量接入并进入路由分发请求到不同的App 执行环境中去。在CloudFoundry的具体实现中，Request Router是通过Nginx来实现的。 2、             App Exec Engine。同样通过字面上的意义可以了解到这就是CloudFoundry的App执行引擎。不同语言的执行环境都是在这里实现的，如何做到不同语言的执行环境同构化，CloudFoundry的实现方案很简单：直接对异构运行环境进行封装成一个tar包，并提供一个统一的start脚本来负责启动对应的服务。目前关于隔离性、虚拟化方面暂无详细支持计划。 3、             Services。通用服务，对通用服务的调用进行了简单的封装，并提供了服务加入流程化支持。Cloud Foundry的Service模块从源代码控制上看就知道是一个独立的、可Plugin的模块，以方便第三方把自己的服务整合入 CloudFoundry生态系统。在Github上看到service是与CloudFoundry Core项目vcap独立的一个repository，为vcap-service。Service模块其中设计原则是方便第三方服务提供商提供服务。在 这方面CloudFoundry做得很成功，从Github上看，已经有以下服务提供：a)MongoDB; b) mysql; c) neo4j; d) PostgreSql; e) RabbitMQ; f) Redis; g)vBlob。基类都是放在base文件夹中。第三方如果需要自己开发CloudFoundry的服务，需要继承改写它里面的两个基础类：Node和Gateway；而里面一些操作， 如：Provision，可以在base的provisioner.rb基础上加入自己的逻辑，同样的还有Service_Error和 Service_Message等 4、             Clond Controller。平台控制器。Clond Controller是CloudFoundry的控制管理中心，目前的主要功能有：对app的增删改读、服务的停止启动、app的部署、通用服务的部署管理。同时实现了一些简单弹性调度策略，比如说通过HealthManager来获取app应用的性能数据和健康数据，从而进行一些app实例的增加删除操作。 5、             HealthManager。监控状态管理中心。目前做的事情不复杂，简单的说是从各个App Exec Engine里面拿到运行信息，然后进行统计分析，报告等。统计数据会与Cloud Controller的设定指标进行比对，并进行相应的操作处理。HealthManager模块目前还不是十分完善，但是在CloudManage里面，自动化健康管理、分析是一个很重要 的领域，而这方面可以扩展的地方也很多，结合OrchestrationEngine可以使云自管理、自预警；而与BI方面技术结合，可以统计运营情况，合理分配资源等。 整体来说，CloudFoundry提供了比较完善运行环境支持，包含流量接入、app运行和通用服务，并实现了一定的平台控制和业务支持功能，比如说弹性自动扩容。但目前在资源管理、虚拟化、资源控制、产品支持方面还有很多工作来做。同时对于app运行环境之间的隔离性、安全控制也缺少考虑。 2.2 SAE     SAE是国内目前相对比较成熟的App Engine平台，从09年到现在已经为超过15W+的app应用提供服务。SAE主推PHP开发环境，目前也支持JAVA、Python，主要是公有云集群平台，同时也针对部分VIP客户提供了差异化的服务。     SAE的设计理念是：1、无状态对等节点，方便扩展。2、无单点。目前整体架构完整情况未知，从公开的资料来看，SAE在运行环境上的架构如下图：          主要特点是： 1、  动态DNS。Isp和四层之间的工作。 2、  App Router。主要功能是反向代理、应用功能和权限配置、域名服务。是基于Nginx实现的。 3、  Runtime。实现沙箱(代码隔离、访问控制、分钟配额控制)、应用配置(appconfig)、本地IO(安全考虑不允许本地文件操作)等等。目前是应用级别的隔离。 4、  通用服务方面，目前已经支持非常多种通用服务，并且屏蔽了分布式实现细节，比如说mysql、kvdb、memcache、fetchurl等等。 5、  应用代码管理。目前支持在线编辑、代码采用svn来进行发布来提交，同时提供code deployer来实现代码的自动化发布。     在平台支持方面，目前SAE提供了统计和报表分析功能，也有部分资源审计、日志查看方面的产出，据说架构如下：      3实践              从前面的描述，基本上介绍了App Engine的背景、特点和需求，也对当前一些主流的App Engine进行了调研，本章节主要关注如何能够搭建好一个完整的App Engine平台。本章节首先会明确细化分析App Engine的需求，然后给出平台的整体架构和方案，最后描述如何使用业界开源技术来搭建完成这个App Engine平台。 3.1需求     App Engine的最基本需求是能够给不同的应用提供全方面的服务，细分来说，App Engine平台的整体需求如下图：          具体描述如下： 1、              流量接入。流量接入层最重要的三个功能是防攻击、流量接入、业务分流。此外还需要考虑内部隔离性等方面的需求。 2、              应用运行层。应用运行层是整个业务能够跑起来最重要也最关键的部分，包含运行基础环境、安全隔离、应用防攻击、资源管理、集群划分、授权管理。 3、              通用服务。通用服务主要是为App Engine提供各种基础服务，从而方便不同的应用来使用。此外还需要其他通用服务提供完成的服务接入流程和方案。 4、              平台控制。平台控制中心，是整个在线运行平台的中控中心。通过自动、手动想结合的方式把整个在线运行平台的各个系统协调控制起来，从而实现整个平台的正常运行。总体来说，平台控制器中心的功能会分为：业务调度、集群管理、资源审计、命令总控、代码管理、代码发布等等。 5、              日志服务。日志服务的主要作用是收集平台上应用和运行环境相关的数据，并为下游应用提供相应的数据访问接口。主要包括两个方面的工作：日志收集、日志处理。 6、              业务支持。由于所有的业务应用都统一运维，实现分布式部署、动态调度，因此一些可以在具体机器上实现的功能需求，需要通过其他手段来实现相应的分布式版本。比如说APP应用日志查看、问题定位、监控、统计。 7、              平台管理。平台管理主要是方便平台管理员来控制管理整个平台，并提供友好可用的界面。主要功能包括：平台监控、平台管理和业务管理三大块。 8、              开发支持。主要是对业务开发人员提供一系列的支持，方便业务开发人员使用ORP平台，并更好的管理好自己的业务。主要包括：业务管理平台、文档中心、反馈跟踪平台、相关SDK和工具。 3.2 整体架构     针对上述需求，整体架构如下图：          其中各个模块的作用如下： 1、  App Router。对应流量接入层，主要工作是接收用户请求，并转发到不同的App Runtime。 2、  App Runtime。对应应用运行环境，为各个应用提供基本的运行引擎，从而让app能够运行起来。 3、  Code Center。对应代码中心，主要作用是完成代码存储、部署上线相关的工作。 4、  Services。对应各个通用服务，主要是对主流的服务提供通用的接入。 5、  Log Center。主要是实时收集相关系统的日志，并提供实时计算和分析平台，从而为Platform Control和Platform Support提供最基础的支持。 6、  Platform Control。平台控制层，主要作用是实现弹性扩容、资源审计、集群管理等相关工作。 7、  Platform Support。平台支持层，主要为app应用提供相关的支持，比如说app应用监控、问题定位、分布式日志重建、统计分析等基本功能。 3.3具体实现 3.3.1 App Router的实现              App Router的主要作用是流量接入 + 业务分流，从技术角度来看要满足几个点：高性能 + 完善的反向代理功能 + 足够的扩展性。据此，Nginx是一个不错的选择，Nginx有足够强劲的性能，并且在Http Proxy方面有着非常完善的支持，同时在防攻击、扩展开发方面也有着非常多的优势。此外，Nginx还能够非常方便的支持多域名多服务。具体可以参考http://blog.xiuwz.com/2011/12/08/nginx-internals/。 3.3.2 App Runtime的资源管理              在App Runtime中，需要重点关注几个点： 1、  容量评估。一个Runtime需要多少cpu、多少memcache、多少io，如何评估如何标准化。 2、  资源隔离。如何保证多个runtime在一个实体机器上不回出现相互影响是一个很值得关注的问题。 3、  安全控制。如何保证多个runtime之间是安全可控的，如何避免runtime a的程序能够读到runtime b的文件。 4、  资源的快速恢复。     其实这所有的问题结合分布式集群后，就是一个资源调度和管理的问题，如何实现分布式的资源管理，对于App Engine来说也是非常关键的一点。目前业界知名公司都在做类似的东西，比如说google的borg、腾讯的“台风”。     在简单的情况下，可以采用xen虚拟机或者cgroup方式来实现对机器资源抽象和隔离。关于cgroup可以参考这篇文章：http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/pdf/Resource_Management_Guide/Red_Hat_Enterprise_Linux-6-Resource_Management_Guide-en-US.pdf 3.3.3 Log Center的日志实时收集     平台支持和平台控制的不少需求都依赖实时的采集各个app应用数据。比如说弹性调度、资源审计、实时性能数据采集等等。     那么如何实现一个实时的日志采集呢？采用Facebook的Scribe是一个不错的选择。Scribe的整体架构如下图所示：          关于Scribe相关技术可以参考以下文章：http://www.xiuwz.com/site/tech-open-scribe/。 3.3.4 Log Center的实时计算平台     平台支持和平台控制同样对实时计算有着强烈的需求，比如说弹性调度需要用到业务实时的性能数据，如何得不到就根本做不到弹性调度。对于离线计算分析，很显然采用目前成熟的hadoop平台能够完全满足需求。那么实时计算方面呢？建议直接采用twitter开源的storm实时计算框架。     Storm是一个实时流式计算框架，目前在twitter、淘宝等多个公司中都有应用，其整体架构如下：          关于Storm的详细介绍可以参考官网相关资料：https://github.com/nathanmarz/storm。 3.3.5 App Engine的弹性调度     云计算最重要的特点之一就是弹性调度，从某种意义上来看，是否做到弹性调度也是平台一个App Engine平台技术成熟的关键点之一。从目前调研结果来看，完全实现弹性调度的App Engine屈指可数。     弹性调度的思想很简单：能够根据app应用的运行情况进行资源的动态调整，从而保证app应用整体的稳定性和系统资源利用率的最高。但要做好非常难，其中有几个关键问题点： 1、              app应用扩容的自动化。自动化一键扩容一个app应用是一个相当有难度的事情，需要寻找资源、部署app应用、检查效果、引入流量等等一系列操作。 2、              触发app应用扩容的时机。如何需要实时捕捉app应用的相关数据。 3、              模型。什么情况下需要进行弹性调度，是需要建立一个数学模型的。模型的好坏直接决定弹性调度的效果。如何设计不好，很有可能导致整个App Engine的不稳定。 4、              原子性。弹性调度本身是一个分布式事务，如何保证弹性调度和其他分布式操作(比如说更新业务)不冲突也是一个重要问题。否则很容易出现不一致问题。 5、              资源审计需求。如果没有资源审计，有可能出现一个app弹性调度消耗掉整体集群的资源。     那么具体如何来实现弹性计算呢？基本思路如下： 1、  基于实时计算平台和Log Center来实现对app应用数据的实时采集和分析。 2、  提供app应用扩容的服务。从业务流程角度来保证该命令的原子性。 3、  基于实时数据，建立简单的实时调度模型。 4、  引入简单的资源审计模型。 4参考文章     http://blog.xiuwz.com/2011/12/19/xldb2011%E4%BC%9A%E8%AE%AE%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%9E%B6%E6%9E%84%E7%B2%BE%E5%8D%8Eppt%E5%A4%A7%E5%85%A8/     http://www.oschina.net/p/paas/similar_projects     http://www.xiuwz.com/site/tech-open-scribe/     http://baike.baidu.com/view/1413359.htm     http://baike.baidu.com/view/1316082.htm     http://www.cloudguide.com.cn/newshow_177_0_bay_yes.html     http://blog.sina.com.cn/s/blog_493a84550101332d.html     http://blog.sina.com.cn/s/blog_493a8455010133l5.html     http://blog.sina.com.cn/s/blog_493a845501013ajw.html     http://blog.sina.com.cn/s/blog_493a84550101350q.html     http://blog.sina.com.cn/s/blog_493a845501012fe6.html     http://blog.sina.com.cn/s/blog_493a8455010132s6.html     http://sd.csdn.net/a/20111202/308433.html     http://news.csdn.net/a/20120202/311374.html?bsh_bid=71628880     http://www.programmer.com.cn/9818/     http://www.infoq.com/cn/presentations/cl-sae     http://www.infoq.com/cn/articles/cl-sae-datastore     http://www.chinagrid.net/show.aspx?id=8700&cid=22     http://www.infoq.com/cn/articles/clj-sae-mini-blog-app     http://www.infoq.com/cn/presentations/cl-sae-cloud-architecture     http://wiki.babel.baidu.com/twiki/bin/view/Com/Main/Bae_frontend_summary     http://sae.sina.com.cn/?m=devcenter&catId=164 by xuliqiang","title":"浅析App Engine"},{"content":"       本来打算在新开的博客（这个名字当时打错了）写的，结果，提示说三天之内不能写，那只好先在这里写了再说。        作为大一大二完全迷迷糊糊地度过（60、70清一色）的我来说，保研不指望，考研不合适，坚决找工作（话说昨天和某研究生学长聊时，他也说读研比较好，我只是小郁闷了一下）。可是找工作要有足够的证明自己能力的经验，比如成绩、项目经验、竞赛。这些都没有，也不怪自己前段时间广投简历，结果全部被筛下去了。         又因为天天浪费时间或写的程序太无聊，于是积极的关注和报名一些项目和比赛，据我临时统计下，报名的有： 大学生创新实验项目（没开始就退出），大学生创新创业训练计划（才立项就结束），华为杯（最后还是写不完），编程之美（人工智能不会），INTEL的HTML5的什么比赛（报名就忘了），百度之星（一道题都没写出来），TOPCODER（也是一题未动），一个学生俱乐部里的跟云计算有关的项目（连代码都没看）等。        关注的：网易有道难题为首的好几个移动应用开发比赛（只关注，但是没想法），中兴捧月（那几个题目怎么看都看不懂）。        也就是说，大三下从4月左右，到现在（小学期倒数第一周），比赛多多，机会多多，最后，一个都没抓住。说到底，是自己贪多，又根本缺少能力。        百度之星这类ACM比赛，就是算法还没学好，学了个半吊子。        移动应用类，脑子里面没有什么好的主意，（O-C，XML）不会，JAVA半桶水。        最可惜的就是有老师带队的那几次，也都没坚持到最后（会总结其中一个的失败教训）。        自己一直叫嚷着要写项目，才有项目经验，但是，这种半途而废的情况频繁发生，如何能够真正地写一个项目呢……","title":"虎头蛇尾"},{"content":"1、新浪微博开放平台（http://open.weibo.com/wiki/index.php/Quickstart） 　　开放的是什么：开放平台开放给开发者的是每一个用户的用户关系，开发者不在向传统应用那样面对单个开发者而是面对用户身后的整个好友圈。每一个API都是围绕好友与好友之间的交流来提供相关的功能，如发送微博，查看好友资料等等。 　　为什么要使用开放平台？开放平台可以加快应用的推广。每个用户可以影响到周围的好友，一旦应用真的优秀，用户可以方便的推荐给好友，好友又可以再推荐给他的好友。开放平台让用户关系更加容易获得。当应用涉及到用户交流的时候，需要同时拥有一定的用户群和用户的关系链，而建立有这样数量用户的关系链需要大量时间和精力。微博通过草根和草根，草根和明星、明星和明星之间的互相关注，形成了一个巨大的社会关系网络，应用可以直接通过开放平台使用这个网络。 2、新浪云平台（Sina AppEngine，SAE） 　　Sina App Engine（以下简称SAE）是新浪研发中心于2009年8月开始内部开发，并在2009年11月3日正式推出第一个Alpha版本的国内首个公有云计算平台（http://sae.sina.com.cn），SAE是新浪云计算战略的核心组成部分。 　　SAE作为国内的公有云计算，从开发伊始借鉴吸纳Google、Amazon等国外公司的公有云计算的成功技术经验，并很快推出不同于他们的具有自身特色的云计算平台。SAE选择在国内流行最广的Web开发语言PHP作为首选的支持语言，Web开发者可以在Linux/Mac/Windows上通过SVN、SDK或者Web版在线代码编辑器进行开发、部署、调试，团队开发时还可以进行成员协作，不同的角色将对代码、项目拥有不同的权限；SAE提供了一系列分布式计算、存储服务供开发者使用，包括分布式文件存储、分布式数据库集群、分布式缓存、分布式定时服务等，这些服务将大大降低开发者的开发成本。同时又由于SAE整体架构的高可靠性和新浪的品牌保证，大大降低了开发者的运营风险。另外，作为典型的云计算，SAE采用“所付即所用，所付仅所用”的计费理念，通过日志和统计中心精确的计算每个应用的资源消耗（包括CPU、内存、磁盘等）。 　　总之，SAE就是简单高效的分布式Web服务开发、运行平台。 　　更多见http://sae.sina.com.cn/?m=devcenter&catId=19。 3、新浪云平台（Sina AppEngine，SAE）和新浪微博开放平台的关系 　　微博应用开发成功后，需要将代码部署到Web中才能使用。也就是说，微博应用开发是通过调用新浪微博开放平台中的API完成程序编写的，而这些程序要上传到SAE，并在SAE上运行。 　　在开发过程中，可以在本地搭建Web服务器运行程序，也可以选择传统的服务托管完成。但是，这两种方案需要不少麻烦的配置。 　　在开发中直接将代码部署到SAE中，不需要任何的配置，甚至将来可能会用到的更多的服务都已经由SAE为你准备好了，我们可以直奔主题——开发微博应用。 　　SAE是免费的（至少是作为个人学习中需要用到的资源），这也很重要。 　　等熟悉了SAE，你会了解更多的“云服务”。 4、为什么要用PHP开发微博应用 　　新浪微博开放开发平台提供了对Java ，PHP，Flash，Python，Javascript，Android及iOS等多种语言及平台的支持，能够完成Web上的应用，也能够开发移动设备上的应用。开发者自由选择的余地相当大。 　　你学习微博应用开发的目标可能也并不是要用PHP开发，你甚至没有想法学会PHP。如果这样，看完这本小册子并尝试将用PHP将应用做出来，仅当作学习的过程就可以了。在这个过程中，你将了解一般的流程，以及不少体验不好理解的概念。 　　如果你本来就打算学会用PHP开发，更加恭喜你了，我们一同起步吧。事实上，学会这一招，找个工作机会不少。 　　最关键的是，SAE的编程语言是PHP。为了能快速的起步做微博开发，先用PHP是必需的。 5、基础知识 　　需要知道C/S结构和B/S结构。 　　需要知道客户端脚本和服务器端脚本。 　　大一以上的学生应该都知道。 　　需要有一个微博帐号。没有玩过微博就要开发微博应用，应该不可能吧。能先喜欢上微博，那样更好，做出一个好应用会让你很有成就感。玩中出现的想法会让你始终带着问题去学习。 　　至于PHP，需要了解其一般的语法。如果你已经有过其他语言编程的经历，像我一样，花半个上午的时间翻翻随便一本教材即可。如果在下面的程序中有不明白的了，再翻书看明白就行了。如果提前已经有了更多准备，那更好。","title":"PHP+新浪微博开放平台+新浪云平台（SAE）开发微博应用基础"},{"content":"2011年开始，云计算的出现，使得整个IT行业内出现了“云手机、云输入、云经济、云管理、云物流、私有云、公有云、混合云”等多个红得发紫的云概念，甚至被认为有望在继大型计算机、个人计算机、互联网之后，为IT产业带来第四次革命。 在这种情况下，很多知名的主流IT公司都在搞云计算，而且这些高端业务和新业务的发展非常快速，云计算技术等人才变得非常急缺。 据了解，现在百度、阿里巴巴、瑞星、微软等企业都在大规模招聘云计算研发人才。但鉴于云计算发展还没有完全成熟，多数人才技术与实战经验均同样处于上升期，所以实际上，包括多数知名企业在内的很多职位都还虚位以待，这对于很多求职者来说都是机会与挑战并存。同时，这也很有可能会引起想进入“云计算”开发领域的人产生培训需求。 针对市场上出现的需求，国内IT培训机构领军企业北大青鸟APTECH表示，近期培训市场上，JAVA培训很有可能会持续升温。 据了解，JAVA语言作为云计算的主力支持语言呈现出来的简单、高性能、安全等特点将会更好完全发挥云计算高可靠、高拓展的优势。除此之外，JAVA对虚拟技术的支持也将完全满足云计算的需要。换言之，想从事云计算相关工作，必先首先掌握JAVA开发。 目前，北大青鸟APTECH已经推出了学士后JAVA课程，且市场反应良好。据了解，北大青鸟APTECH学士后JAVA课程以面向对象和Java Web作为基础，用Java企业级框架技术作为提升踏板，学习者不但可以将Java技术的代码级性能与安全优化技术发挥到极致，同时可以胜任各种行业的企业级应用。  ","title":"JAVA将在“云”下迅速升温"},{"content":"2010年8月27日下午，由中国电子学会云计算专家委员会主办、CSDN承办的“高端云计算课程”在中关村软件园进行了免费的公开课程，公开课上座无虚席，原定几十人的教室，最终挤满了上百人。本次高端课程以“普及云计算，利用云计算，发展云计算”为基本原则，旨在为云计算领域培养和选拔更多更优秀的技术和管理人才奠定坚实的基础。  在本次公开课上，中科院计算所副研究员查礼博士做了主题演讲，解密了基于Hadoop的大规模数据处理系统的组成及原理。   Hadoop的组成部分   Hadoop是Google的MapReduce一个Java实现。MapReduce是一种简化的分布式编程模式，让程序自动分布到一个由普通机器组成的超大集群上并发执行。 Hadoop主要由HDFS、MapReduce和HBase等组成。具体的组成如下图：     Hadoop的组成图 1. Hadoop HDFS是Google GFS存储系统的开源实现，主要应用场景是作为并行计算环境（MapReduce）的基础组件，同时也是BigTable（如HBase、HyperTable）的底层分布式文件系统。HDFS采用master/slave架构。一个HDFS集群是有由一个Namenode和一定数目的Datanode组成。Namenode是一个中心服务器，负责管理文件系统的namespace和客户端对文件的访问。Datanode在集群中一般是一个节点一个，负责管理节点上它们附带的存储。在内部，一个文件其实分成一个或多个block，这些block存储在Datanode集合里。Namenode执行文件系统的namespace操作，例如打开、关闭、重命名文件和目录，同时决定block到具体Datanode节点的映射。Datanode在Namenode的指挥下进行block的创建、删除和复制。Namenode和Datanode都是设计成可以跑在普通的廉价的运行Linux的机器上。HDFS采用Java语言开发，因此可以部署在很大范围的机器上。一个典型的部署场景是一台机器跑一个单独的Namenode节点，集群中的其他机器各跑一个Datanode实例。这个架构并不排除一台机器上跑多个Datanode，不过这比较少见。     HDFS体系结构图 2. Hadoop MapReduce是一个使用简易的软件框架，基于它写出来的应用程序能够运行在由上千个商用机器组成的大型集群上，并以一种可靠容错的方式并行处理上TB级别的数据集。 一个MapReduce作业（job）通常会把输入的数据集切分为若干独立的数据块，由 Map任务（task）以完全并行的方式处理它们。框架会对Map的输出先进行排序，然后把结果输入给Reduce任务。通常作业的输入和输出都会被存储在文件系统中。整个框架负责任务的调度和监控，以及重新执行已经失败的任务。   Hadoop MapReduce处理流程图   3. Hive是基于Hadoop的一个数据仓库工具，处理能力强而且成本低廉。    主要特点：   存储方式是将结构化的数据文件映射为一张数据库表。 提供类SQL语言，实现完整的SQL查询功能。 1.可以将SQL语句转换为MapReduce任务运行，十分适合数据仓库的统计分析。   不足之处：   1.采用行存储的方式（SequenceFile）来存储和读取数据。 2.效率低：当要读取数据表某一列数据时需要先取出所有数据然后再提取出某一列的数据，效率很低。 3.占用较多的磁盘空间。   由于以上的不足，查礼博士介绍了一种将分布式数据处理系统中以记录为单位的存储结构变为以列为单位的存储结构，进而减少磁盘访问数量，提高查询处理性能。这样，由于相同属性值具有相同数据类型和相近的数据特性，以属性值为单位进行压缩存储的压缩比更高，能节省更多的存储空间。    行列存储的比较图 HBase是一个分布式的、面向列的开源数据库，它不同于一般的关系数据库,是一个适合于非结构化数据存储的数据库。另一个不同的是HBase基于列的而不是基于行的模式。HBase使用和 BigTable非常相同的数据模型。用户存储数据行在一个表里。一个数据行拥有一个可选择的键和任意数量的列，一个或多个列组成一个ColumnFamily，一个Fmaily下的列位于一个HFile中，易于缓存数据。表是疏松的存储的，因此用户可以给行定义各种不同的列。在HBase中数据按主键排序，同时表按主键划分为多个HRegion。   HBase数据表结构图 “高端云计算课程”培训将于2010年9月10日正式开始，将会介绍典型云计算平台核心算法，并透过案例讲解企业云计算发展与建设规划。  ","title":"解读：基于Hadoop的大规模数据处理系统"},{"content":" 随着科技的迅速发展，拉动企业信息化建设的发展，而在线CRM系统有利于促进企业信息化得发展，也因此逐渐得到了企业的青睐，然而对于在线CRM系统的使用却因为了解不多导致出现一些令在线CRM系统瘫痪的行为，下面由企强在线总结一下不利于在线cRM系统的行为和方案： 　　行为一：培训不足。销售经理常常想当然地以为CRM系统就跟文字处理一样简单，其实不然。培训不足的结果就是没有多少人愿意去用这个系统，员工还被它弄得稀里糊涂。 　　行为二：忽视对高管层的培训。企业高管层往往认为CRM系统只是适用于销售团队的一种应用而已，实际上，CRM的正常运转与公司文化的转变大有关联，因为它要求公司上下都接受并理解因它而来的新理念。   　　行为三：希望销售代表充当数据录入员的工作。客户数据库对企业来说是一笔财富，所以有些公司就希望销售代表能详细录入与客户相关的所有数据，无形当中销售代表可以用来跑销售的时间就少了。 　　行为四：销售代表拒绝提供有关客户的完整信息。有的销售代表担心一旦自己把客户的所有信息都提交给了CRM系统，自己日后如果跳槽就很被动了。所以他们只是给个大概的信息，这样企业的客户数据库就不会像预期的那么有用了。 　　行为五：没有准备充足的资金帮助销售代表购买笔记本电脑和智能手机。销售代表对移动设备的需求非常地高，这是他们保证工作效率的基础之一。 　　行为六：每个季度末进行IT设施维护活动。IT团队通常在每个季度末进行设施维护活动，但此时正是销售团队最需要用到CRM系统的时候。 　　行为七：一股脑购买全套软件。CRM供应商有时候能成功说服销售经理购买一整套软件，但却没有计划如何逐步把这个新技术介绍给买方。其结果就是买方的销售人员被复杂的系统弄得不知所措。 　　行为八：管理层的支持不到位。当管理层对CRM系统心存疑虑时，销售代表一眼就能看出，他们对CRM系统就不会正眼相看了。 解决以上八种令在线CRM系统瘫痪的方案：    1、解决方案：给与CRM系统相关的所有团队提供在线培训、课堂学习以及后续的在线模板。    2、解决方案：鼓励高管层使用CRM系统，以重获销售情况预测与各种报告。    3、解决方案：请一家数据录入公司帮忙，而公司自己的销售代表只负责录入关键数据。    4、解决方案：制定奖励系统，鼓励销售代表提交所有有用的信息。    5、解决方案：即使IT预算有困难，也要将为销售团队购买移动设备列为第一考虑对象。    6、解决方案：要不另设设施维护时间，要不把CRM系统移至云计算。    7、解决方案：通过先推进一些试验项目，逐步把这项新技术介绍给公司的销售代表们。    8、解决方案：在CRM的实施问题上，取得高层的共识。","title":"企业注意：令在线CRM系统瘫痪的行为"},{"content":"专访福昕软件总裁熊雨前：亚马逊投资背后 http://www.sina.com.cn  2011年12月07日 10:22  新浪科技微博 福昕软件董事长兼总裁熊雨前 　　新浪科技讯 12月7日上午消息，美国亚马逊公司今天宣布战略投资全球PDF软件方案与服务提供商福昕软件，福昕软件董事长兼总裁熊雨前(微博)接受新浪科技独家专访时表示，亚马逊认为福昕提供的PDF文档技术已经成为其业务中不可缺少的一部分，为了获得稳定、可靠的技术支持，亚马逊选择了战略投资福昕软件(微博)。 专访福昕软件总裁熊雨前：亚马逊投资背后媒体来源：新浪科技 　　2001年，福昕软件在福建省福州市成立，目前在美国、欧洲、日本、韩国、中国台湾均设有分公司。福昕软件是全球第二大PDF电子文档技术提供商，拥有一整套完全自主知识产权的PDF软件核心技术，提供PDF从生成、编辑、加工、保护、搜索、显示、打印等完整处理流程的解决方案。 　　熊雨前表示，福昕软件获得亚马逊的战略投资是一个逐步的过程。最初双方只是有业务往来，随着合作内容的深入，亚马逊觉得业务发展迫切需要福昕软件PDF的支持，因此主动提出战略投资福昕软件。 　　故事还得从亚马逊推出kindle电子书说起。2009年，亚马逊kindle刚出来不久，受到市场好评。由于全球约有80%的电子文档采用PDF文件格式，所以支持阅读PDF文档成为kindle很重要的功能。 　　亚马逊在刚推出kindle时，PDF文档技术由其他PDF文档技术公司提供。不过在亚马逊使用的过程中，该公司的技术表现并不够出色，出现了很多问题。 　　“因为这个厂商的PDF技术并不是为了移动平台而设计，在移动平台上的体验缓慢，搜索缓慢，经常死机，有些文件还会经常打不开。”熊雨前说，亚马逊一直在选择替代方案，2009年他们开始接触福昕软件。 　　赢得亚马逊的信赖并不容易。前前后后，亚马逊对福昕软件进行了一年多的考察。“这个过程是非常曲折的，亚马逊向福昕提出了很多的要求，包括性能测量、对比，安全性测试等，同时亚马逊还让我们确保，这个技术是我们自己开发的。” 　　为了打消亚马逊的疑虑，福昕软件豁了出去，向亚马逊公开了PDF文档技术的源代码。熊雨前回忆，福昕软件特地邀请亚马逊的工程师来到北京研发中心，并在一台与外界隔绝的电脑上公开了源代码。 　　熊雨前说，“亚马逊的工程师给予这个技术高度评价，并向亚马逊高层汇报，说这确实是福昕自己开发的，并且是一流的。这样亚马逊才放心下来，正式与福昕软件签约。” 　　进入2011年，亚马逊加大了对kindle投资，不仅仅推出多款新的电子书，还推出平板电脑kindle Fire，“今后亚马逊还可能向其他平台发展”。熊雨前指出，在双方合作的过程中，亚马逊认为福昕软件提供的PDF文档技术已经成为其业务中不可缺少的一部分，为了获得稳定、可靠的技术支持，亚马逊提出战略投资福昕软件。 　　另一方面，熊雨前认为这对福昕软件也是一件好事。“亚马逊在在线内容分发、市场渠道以及云计算基础架构上都是全球一流的，如果能与亚马逊合作，对于福昕迅速做强做大，也是很有好处的。” 　　“我不方便透露具体金额，因为这牵扯到商业机密，但可以透露的是，亚马逊只占有少数股份，是福昕软件的战略投资者。”熊雨前表示。 　　据悉，福昕PDF阅读器在全球已经拥有超过1亿用户，每月下载量达到500万。公司2010年销售收入750万美元，保持着每年100%的增长速度。(罗亮) 　　以下是专访实录： 　　新浪科技：各位新浪科技网友，大家好。我们今天有幸请到福昕软件的董事长兼总裁熊雨前先生，给他做一个独家的采访。首先请熊总跟新浪科技的网友打声招呼。 　　熊雨前：新浪科技的网友们，大家好。 　　新浪科技：首先请熊总给我们介绍一下福昕软件，因为很多人对于你们还不是特别的熟悉。 　　熊雨前：福昕软件是2001年在福州成立的，目前在北京、美国硅谷、日本、韩国和台湾设有分公司，我们也正在建立欧洲分公司。我们公司是主要做 PDF核心技术通用软件。可能很多的网友对福昕软件的名字没有听过，或者不熟悉，但是我想会有很多的网友其实已经用过我们的产品了。主要原因是，我们一开始是一个核心技术提供商，也就是说我们做出技术以后，我们授权给世界上很多的知名大厂商。其实有一些浏览器用我们的PDF核心技术，有一些阅读器、电子书 也有我们的核心技术，有一些操作系统甚至也捆绑了我们的核心技术。 　　新浪科技：我们今天听到一个消息，说美国互联网公司亚马逊，投资了福昕软件。请熊总简要给我们介绍一下整个投资细节。 　　熊雨前：我先介绍一下投资背景。2009年，亚马逊开始跟我们接触。主要是因为当时他们的kindle产品刚出来不久，受到市场上的广泛好评。大家知道PDF是电子书格式中非常重要的一种。曾经有人统计过，有80%的电子内容是以PDF的形式存在的。那么PDF的阅读就变成kindle一个非常重要的功能。 　　亚马逊之前使用的是Adobe的技术来显示PDF，在阅读器上显示PDF。但是在使用过程中，他们发现了很多的问题。最主要的是这些技术并不是为移动平台设计的，在移动平台上的体验非常差，比如说速度非常慢，经常死机，有一些文件打不快，有一些文件打开了，但是和桌面上显示的不一样。那个时候，Adobe可以说是PDF技术的一个技术提供上的垄断者。亚马逊花了比较长的时间来寻找替代的解决方案，最后它找到了福昕。 　　在2010年，通过一年多的考察，亚马逊终于决定使用福昕的技术，在kindle上显示PDF。这个过程确实是非常曲折的，他们提出了非常多的 要求，包括一些性能测试、对比，一些安全性的测试等等，同时他们还提出来要求我们确保是我们自己开发的，而不是借用了其他人开发的产品。 　　为了打消他们的顾虑，我们特地请亚马逊的工程师来到北京，在我们的研发中心，在一台完全和外界隔绝的一台电脑里面，看了我们的所有的源代码。这些工程师回去以后，对我们的技术是高度评价，回去跟他们的上司报告，说这确实是全球一流的，而且完全是我们自主开发的技术。从那以后，他们就非常快地跟我 们签约了。 　　进入2011年，亚马逊在kindle方面又加大了投入，包括不仅仅是有电子墨水的电子书，现在也出了平板电脑，今后可能还会向其它的平台发展，包括像kindle的桌面应用。不同的桌面平台，还有互联网应用，这样情况下PDF的技术需要跨平台，需要支持各种各样不同的应用环境。因此他们跟我们来谈进一步深入的合作，不光是在客户端的合作，也包括在云计算里面服务器的合作。 　　在这样背景下，亚马逊觉得我们的技术已经成为它的生意里面，不可缺少的一个环节，因此他希望能够投资我们，确保他们能够稳定可靠地获得技术支 持。同时福昕觉得，亚马逊无论是在在线内容分发，还是市场通路，以及云计算的技术架构方面，都是全球一流的。这方面如果能够和亚马逊深度合作，对于我们公 司迅速的做强做大也是非常有好处的。在这样背景下面，福昕和亚马逊达成了战略投资协议。亚马逊作为一个战略投资伙伴，进入福昕。 　　新浪科技：能否透露一下这个战略投资的金额或者级别大概是多少？ 　　熊雨前：投资金额恐怕不方便透露，因为这属于商业机密，尤其牵涉到股份的时候。不过，可以说他们是我们的战略投资者，拥有少部分的股份。 　　新浪科技：福昕软件现在的业务发展状况，是一个怎么样的情况。我听说你们很大的一部分收入都来自海外，作为一家中国的软件公司，为什么很多收入会来自海外？ 　　熊雨前：福昕软件在中国名气不大的原因之一，可能也就是我们的主要市场，战略的重点是在海外。有几个不同的原因，可能大家都知道中国通用软件市场的发展，可能还是处在一个前期，大家对知识产权保护的意识还非常薄弱。同时大部分国产软件，它的用户体验以及质量，赶不上国际先进的软件。在这种情况下，中国通用软件市场发展非常的缓慢，通用软件企业也生存得非常艰难。 　　另外一个原因，因为我曾经在美国工作过一段时间，在工作期间，我花业余时间写了一个小的软件。这个软件以共享软件的形式，我们建了一个网站，在网站上来卖。我开了一个信用卡收帐的帐号，同时把这个软件上传到各个共享网站，类似于新浪下载这样的网站。在不长的时间之内，就积累了不少客户资源。曾经有一段时间，年收入超过我工资的3倍。但是我不用花太多时间在上面，我只是需要每天去看一下有多少单子，建立起这么一个自动销售的网站。所以说，这样一个小小的创业经历也给了我信心。就是说，如果你能够开发出切合市场需求的产品，无论你有没有品牌，无论你有没有资金，无论你在什么地方，你都是可以取得收益的，在这个市场上占领一席之地。 　　在这主要是两个背景下面，一个是国内的市场不发达，另外一个是国际市场，我觉得是有信心去做，所以最后我们决定是以国际市场为主。事实上一开始 我们也是采用共享软件的方式，通过免费阅读器的分发来推销一些我们收费的产品。但是从两年前开始，我们就改变策略，因为我们觉得PDF电子文档的应用是特别适合企业使用。其实在国外，包括Adobe的主要市场也是在企业。可以说在企业界，在美国和欧洲的企业界，绝大多数员工应该人手都有一份Adobe的产品，那么这个市场非常广阔，我们为了能够去占领这个市场，所以我们在2009年开始，直面跟Adobe竞争，开始在美国和欧洲来建立这样的一个针对企业的销售团队。当然这个成本是比较高的，确实成本和我们之前做共享软件是完全不一样的，对我们的市场宣传、品牌运作和销售，以及服务都提出了非常高的要 求。现在我们这个公司仍然在投资期，可能引入亚马逊这样的投资伙伴，对我们公司进一步的扩大市场宣传，进一步的扩大我们的销售队伍，同时提高我们的服务水 平是非常有用的。 　　新浪科技：刚才听熊总介绍了一下咱们在海外市场的一些业绩。您在去拓展海外市场的时候，尤其是去赢得像微软、英特尔等这种大企业客户的时候，你们如何跟Adobe这样的企业竞争？两家企业其实规模上相差很大。 　　熊雨前：这个我们有一些体会，特别从2011年开始。2011年可以说是我们打基础的一年，福昕刚刚建立起一个企业销售团队。2011年的时候，我们的企业销售团队和服务团队就开始了比较规范的运作，通过各种途径，我们接触到了大企业的相关决策人员。 　　福昕主要的宣传途径来自两个方面。第一个方面是我们免费的阅读器福昕PDF阅读器，这是我们非常好的一个宣传。很多大企业都是因为有工程师使用了我们的阅读器，他对这个阅读器印象比较深刻，他知道我们肯定是拥有自主的，不依赖于Adobe的技术核心。 　　第二种的宣传途径是我们自己要去做推广，包括做广告，在网络上做广告，参加各种行业的会议，参加各种展会等等。同时我们还通过一些合作伙伴，已经有的一些合作伙伴，来帮我们去介绍他们产业链的其它伙伴，通过这种方式，我们可以接触到很多大的企业。 　　我们一般开始接触的大企业，首先第一个我们要给他造成一个印象，就是我们是非常专业的公司。我自己曾经参与过几个这样的第一次的介绍会。一般国外的大企业，他新引进一个新的供应商的时候，他先要找各部门的人来，让你们介绍一下你们公司。在介绍公司的过程中，他们可能会有很多问题，也不排除有一些技术性的问题，当然也有一些财务方面的问题，有一些法律方面的问题等等。 　　技术问题是我们表现的最好机会，我自己也参与过几次。我经常跟我们的销售人员讲，我说这个知识是可以帮助你销售的，因为我们只做PDF，所以说我们的人员对PDF都非常熟悉。所以那些厂商第一次接触我们，就感觉这是一个非常专业的公司。接下来，我们要表现出我们的专业，我们还要体现出我们的服务。 　　我的印象非常深刻，在很多时候，价钱并不是他们最关心的，特别是对大公司来讲。他们最关心的是购买了这个技术和授权以后，会不会对他们的事业有帮助，会不会造成问题，会不会对用户造成困难。为此，我们专门在美国和日本、台湾，现在还要在欧洲建立这样的服务团队。我们实际上还是一个比较小的软件企业，但是我们现在提供七天24小时的电话服务，在美国这个非常非常少见。 　　曾经一个服务的人员跟我们报告说，有一家大公司在很晚的时候给他们打了一个电话，打了电话我们问他有什么需要服务的，然后他说没事，他只是确认一下我们确实是有七天24小时的服务。打完以后，他们对这个印象非常深刻。 　　在开发方面，我们是非常重视对用户特定需求的高效反应。在这方面，我们最明显的一个体现就是我们的安全反应。无论是Adobe还是福昕，都有可能有安全漏洞，特别是Adobe之前发生了非常多的安全漏洞，福昕也可能有。因为这都是大型的软件，非常复杂的软件，完全不出漏洞是不可能的。关键就是发现了漏洞以后，能否非常迅速得去弥补。 　　那么跟Adobe每一个季度发一次的补丁的做法不同，我们的所有漏洞都是在两个星期之内发布补丁，大部分的漏洞我们在两天之内就发布。因为对大企业用户，他非常关心安全问题，他通过了解我们这样的一些做法，特别是亲身体验了这个服务以后，对我们的印象非常好。因此我现在可以说，在技术授权这个市 场，我们现在的市场已经可以和Adobe相抗衡了。 　　新浪科技：福昕软件从2001年建立到现在也有10年的历史了。您创业十年，能否跟我们分享一下创业感受。 　　熊雨前：其实创业成功的路有非常多条，这个也只是我自己的这一条路的一点感想，不一定适合所有的人。我觉得中国软件企业，第一点确实说还是要做内功，就是去除浮躁的心理，踏踏实实做开发。今后的软件市场是一个全球竞争的市场，不能够光靠保护或者靠关系，或者靠地域等条件来帮助你们发展，有好的技术，好的产品，恐怕是第一位的。 　　还有一个我自己感受比较深的，就是质量。中国的软件公司大部分对质量虽然口头上都讲是非常重视的，但事实上在具体做的时候，假如你有一百个人，你是否舍得请50个测试人员。你只有请100个人的钱的时候，这个确实是一个非常现实的问题。 　　我们在跟国外的一些大公司进行合作的时候，我们了解到了软件工程方面的一个新思路，就是面向测试的开发。这个开发人员开发出来是为了测试。正因为是为了测试来做开发，所以说一开始就要由测试人员来参与。很多大公司里都是这样，很多公司都是测试人员超过开发人员，其中还包括一些开发人员还是做测试开发的，他并非是去开发功能，而是去开发他的测试工具。所以这方面中国的软件企业，观念上要有一些改变。如果质量做不好的话，你再怎么去宣传，都是可能短时间内能带来一些效益，长期来讲是没有竞争力的。 　　最后一点，我觉得我们的软件企业，在培养人才方面可能要花更大的工夫。现在很多的软件企业指望着需要什么样的人，就去挖别人的人才。确实对于像我们这样的通用软件开发商来讲，中国通用软件的产业并不发达，无论你做哪个领域的，如果你想要找到有经验的人才，非常的难。 　　我们现在是从大学就开始培养了，我们在福建跟当地的一些大学联合培养。虽然说大部分我们培养的人，不一定到我们公司来做，但是通过这样的一个活动可以提高整个社会人才的素质，最后所有的公司都会受益。 　　新浪科技：刚才谈到了中国的软件企业，也分享了一下福昕创业十年的成功经验。其实像中国通用软件企业再去拓展海外市场的时候，您会提出哪些意见？ 　　熊雨前：国内市场是比较难的，但是国际市场从某种意义上讲更难。第一点就是你离市场比较远，你不知道市场上要什么东西。这个我们福昕是有一点小小的优势，因为我在美国工作过。我们跟美国的这些客户也好，或者合作伙伴也好，关系都非常紧密，经常沟通。同时我们比较早就在美国建立了分公司，有专门的人，而且从事市场研究、销售以及服务的都是美国当地人。这方面我们确实是做到了和市场结合比较紧密。 　　第二点我觉得还是强调一下质量和用户体验，就是产品本身要好。如果产品本身不好的话，这个对于美国人来讲，首先第一点他愿意付钱，但是他绝对不愿意为一个不好的产品来付钱，产品要好。 　　第三个我觉得要敢于尝试。虽然说刚才讲到了有困难，市场隔的很远，然后产品竞争的要求非常高，但是还是要去尝试。 　　新浪科技：咱们回来谈一下中国的市场。其实很多的国外厂商，都把目光投向了中国，他们觉得下一个十年或者二十年，中国是一个必争之地。福昕软件在中国自己的家门口，会有怎么样一个发展策略？ 　　熊雨前：我们对中国市场还是非常重视的。当然中国市场在一开始的时候，我们认为不成熟，但是最近，特别是近两年以来，我们认为中国市场的潜力逐渐的在变成现实的市场。 　　主要是两个原因。第一个原因就是政府对知识产权的保护和软件正版化的支持，不光是法律执法上面加大力度，同时在资金扶持上面也加大力度，这是非常重要的。所以整个大的环境在改善。 　　第二点就是对我们特定的应用来讲，之前大家做文档交换的时候，包括政府的公文交换，都是用比如说office文档，一个word送过来送过去， 这个word文档和在这边可能和另外一个机器上显示的可能不一样的，有的可能用的是老版本的word，可能打不开。所以说之前就没有文档交换格式概念，或者文档交换标准概念。 　　最近两年我们很欣喜的看到，产业界、政府以及学界都了解到了文档交换格式的重要性，从2010年开始，国家有一个核高基项目，就是版式文档交换标准的制定。这是一个非常重要的项目，作为核高基重点扶持的软件方面里的六个项目之一。无论是在政府部门，还是用户单位，这个需求确实是起来了。 　　有了整个好的知识产权保护和正版化的环境，再加上用户的需求起来，我觉得中国的PDF和电子文档的市场，会在接下来的几年发展非常快。因此我们 投入了很大的力量，来做中国市场的准备工作，包括一些宣传的工作。但是更重要的是我们参与了中国国家标准的制定工作。中国作为一个非常大的市场，需要有一些能够自主掌握的标准，包括刚才讲的版式文档的标准。福昕想通过参与这个标准的制定和前期的开发，能够在接下来的电子文档应用大潮里面，能够拿到相当的市场份额。 　　新浪科技：能不能给我们一个具体的数字，现在福昕很多的收入都来自海外，在您的预期之内，比如说五年之内、十年之内，福昕在中国的收入要占到一个怎样的比例？ 　　熊雨前：我是想在三年之内，在国内的收入应该占到现在收入的一半，当然国外也会有发展。但是我认为国内的收入的发展速度应该会比国外更快，因此可能在三到五年之内，我们认为中国国内的市场收入能占到30%到40%，如果发展好的话有可能超过一半。 　　新浪科技：我们现在还要关注一个比较大的背景，就是一个云计算以及移动互联技术的浪潮，福昕在这股浪潮当中做了哪些准备，未来打算在这个浪潮里面做哪些工作？ 　　熊雨前：福昕是比较早进入移动互联领域的。我们在五六年前就开始将我们的PDF技术移植到移动平台，我们应该说是第一个完全全平台支持的PDF 提供商。Adobe移动平台的PDF还没开始的时候，我们就已经提供了全功能的PDF阅读。到目前为止，我们是唯一的一个在各个平台提供相同的用户体验的PDF技术提供商。包括像亚马逊的合作，其实就包括了移动平台，移动互联的合作。 　　接下来，我们会进一步开发在各个平台上更高级的应用，不光是有面向消费者的应用，我们还有面向商务的应用。因为PDF在商业中使用的是非常广泛的，特别是商务文档和数字采集。这方面我们会提供更先进的PDF的移动操作平台。在云计算方面，这个也凑巧，其实在国外云计算基础建设和运营成功的角度来 讲，亚马逊应该说是全球排名第一的。那么我们跟亚马逊的合作，应该对双方在云计算方面的发展，应该都会很有帮助。同时我们也知道，软件即服务的趋势，这是 一个大的潮流，这方面我们也会有所动作。 　　新浪科技：最后一个问题，熊总您带领你的团队也有十年的创业经验了，因为很多企业做到十年的时候，基本上进行上市。您对您的团队有一个怎样长远的目标？未来的融资计划能不能披露一下。 　　熊雨前：我们做基础软件的研发，发展速度可能不像一些面向消费者的厂商那么快，但是我们的发展步伐还是非常坚实的。我们建立起来一个非常高的竞争门槛，我们积累了很多的核心技术。当然我们的市场才刚刚开始，无论是国外的企业市场，还是国内市场，都刚开始做了一到两年的时间，所以还有非常大的空间。 　　我认为在可预见的将来，我们主要的任务应该还是去扩大市场，宣传品牌，将公司的价值体现出来。我们现在是有技术，有产品，我们是有潜力，但是还 没有完全体现这个价值来。那在我们的价值得到更好的体现的时候，那个时候可能上市或者其它的一些安排就水到渠成了。目前并没有一些刻意的去追求。 　　新浪科技：感谢熊总接受新浪科技采访。谢谢！ 分享到: 专访福昕软件总裁熊雨前：亚马逊投资背后 媒体来源：新浪科技 播放视频 > 相关报道：","title":"专访福昕软件总裁熊雨前：亚马逊投资背后"},{"content":"      在多次交谈中，云投资回报（ROI）的问题被提了出来。很多文章都写过这个主题，每篇都采取了不同的态度。在我的脑海中那些有形的好处和无形的好处比如敏捷性、快速响应、配备基础设施/应用系统的速度等是我今天要特别关注的。        服务器效率      专用服务器公认的平均使用率（真正被使用的时间）是10-15%。我曾跟很多CIO验证了这个数字，大部分都是认可的。这意味着专用服务器在85%的时间里在消耗能源、占据空间和管理资源，但对公司却没有任何实质上的贡献。把应用通过虚拟化从硬件中脱离出来并且允许多个应用在这个虚拟环境下运行可以提高服务器的使用率。亚马逊创建的容量运用曲线也说明了这点，虽然只是着眼于需求的增加，但显然不总是如此。       在一篇题为“清除云计算中的空气”的文章里，麦肯锡声称通过标准化和咄咄逼人的虚拟化，任何地方的使用率可以达到30-35%。意思就是说使用半个服务器就可以做到，意味着可以在能源消耗、维护和空间上节省50%。同时还意味着需要更少的业务资源来管理环境，而且很明显资本支出也变低了。      原文作者： Christian Verstraete       原文链接：http://www.enterprisecioforum.com/cn/blogs/christian/%E4%BA%91%E6%8A%95%E8%B5%84%E5%9B%9E%E6%8A%A5%EF%BC%88roi%EF%BC%89%EF%BC%8C%E9%80%9A%E8%BF%87%E5%9B%9B%E4%B8%AA%E6%96%B9%E9%9D%A2%E6%9D%A5%E5%AF%BB%E6%B1%82%E5%9B%9E%E6%8A%A5","title":"云投资回报（ROI），通过四个方面来寻求回报"},{"content":"2011年开始，云计算的出现，使得整个IT行业内出现了“云手机、云输入、云经济、云管理、云物流、私有云、公有云、混合云”等多个红得发紫的云概念，甚至被认为有望在继大型计算机、个人计算机、互联网之后，为IT产业带来第四次革命。 在这种情况下，很多知名的主流IT公司都在搞云计算，而且这些高端业务和新业务的发展非常快速，云计算技术等人才变得非常急缺。 据了解，现在百度、阿里巴巴、瑞星、微软等企业都在大规模招聘云计算研发人才。但鉴于云计算发展还没有完全成熟，多数人才技术与实战经验均同样处于上升期，所以实际上，包括多数知名企业在内的很多职位都还虚位以待，这对于很多求职者来说都是机会与挑战并存。同时，这也很有可能会引起想进入“云计算”开发领域的人产生培训需求。 针对市场上出现的需求，国内IT培训机构领军企业北大青鸟APTECH表示，近期培训市场上，JAVA培训很有可能会持续升温。 据了解，JAVA语言作为云计算的主力支持语言呈现出来的简单、高性能、安全等特点将会更好完全发挥云计算高可靠、高拓展的优势。除此之外，JAVA对虚拟技术的支持也将完全满足云计算的需要。换言之，想从事云计算相关工作，必先首先掌握JAVA开发。 目前，北大青鸟APTECH已经推出了学士后JAVA课程，且市场反应良好。据了解，北大青鸟APTECH学士后JAVA课程以面向对象和Java Web作为基础，用Java企业级框架技术作为提升踏板，学习者不但可以将Java技术的代码级性能与安全优化技术发挥到极致，同时可以胜任各种行业的企业级应用。   高效程序员的40个好习惯和行为方式 五年程序员人生的点点滴滴 给IT新人的15个建议，也是老程序员的反省和总结 放宽心！IT骨干依然很吃香，不管国内国外，做好你的职业规划 无需怀疑：移到开发者的前景和“钱景”一片光明 程序员水平10分级,你的水平属于哪一级？ Java编程语言的几个认识误区 不是每个程序员都是适合创业,即使你工作了十年 软件开发人员猛如虎  华为终端中国区手机销量已达千万,80%为智能机 程序员不要做“沙和尚”，挑死担没功劳，No！  71道经典Android面试题和答案--重要知识点都涉及到了  ","title":"JAVA将在“云”下迅速升温  高效程序员的40个好习惯和行为方式 五年程序员人生的点点滴滴 给IT新人的15个建议，也是老程序员的反省和总结  放宽心！IT骨干依然很吃香，不管国内国外，做好你的职业规划  无需怀疑：移到开发者的前景和“钱景”一片光明  程序员水平10分级,你的水平属于哪一级？  Java编程语言的几个认识误区  不是每个程序员都是适合创业,即使你工作了十年  软件开发人员猛如虎   华为终端中国区手机销量已达千万,80%为智能机  程序员不要做“沙和尚”，挑死担没功劳，No！   71道经典Android面试题和答案--重要知识点都涉及到了"},{"content":"    xx智能教学平台是在xx网第一代网络教学平台及知识库系统的基础上，通过对国内外网络教育行业前沿的探索,以及对差异化竞争优势的分析和价值发掘，自主研发的运行于教育云计算网络的智能教学产品。     在此平台上能够开展线上线下相结合的混合式教学活动，使学生不出家门就可以上网络课堂，突破了时间空间、教育资源分配不均等限制。     通过平台进行专业测评，全面掌握学生的学习状况，准确找出薄弱环节，然后根据学生的基础、知识点掌握、思维能力等个性化差异，设置个性化的教学方案，开展个性化教学及辅导服务。      平台支持知识内容的碎片化处理及存储，支持知识点到知识点，知识点到知识群的网状结构，在学习的过程中，能够精确定位到出现的薄弱知识环节，通过智能组装相关知识，迅速推出微课程。      智能机器人在教学过程中及时提供智能助教服务，方便学生的学习及辅助教师的教学工作。      支持机构的管理及机构内教学资源及经验的共享，实现知识资源的聚集增长和资源的合理分配，增强机构的核心竞争力。      并且能够提供学习、教学过程跟踪，智能分析和统计服务，实现社区化的家校互通。","title":"为产品写的产品介绍"},{"content":"云计算是指在互联网中以服务形式交付的应用和提供这些服务的数据中心中的硬件和系统软件。这些服务本身被称为SaaS（Software as a Service，软件即服务）。 一些厂商使用的IaaS（Infrastructure as a Service，基础设施即服务）和PaaS（Platform as a Service，平台即服务）等术语来描述他们的产品，但我们尽力避开这些术语，因为他们的公认定义仍然未确定。 “低级”的基础设施和更高层次的“平台”之间的界线并不清晰；二者非常非相似而非有很大不同，我们通常将他们放在一起考虑。类似的，高性能计算社区中的相关术语“网格计算”提出提供长距离的计算和存储共享的协议，但这些协议并没有提供超越社区的软件环境。 数据中心的硬件和软件我们称之为云。当云以现收现付的方式向公众提供服务，我们把它称为公共云端；这些出售的服务称作效用计算（公用运算）。私有云端是指一个企业或者其他组织的内部足够大的受益于云计算的优势的数据中心，它并不向公众提供服务。 因此，云计算是SaaS和效用计算的总和；但不包括小型或中型数据中心，即使这些依赖于虚拟化管理。公众可以是SaaS和效用计算的用户或供应商。我们专注于SaaS提供商(云用户)和云提供者,它受到关注程度比不上SaaS用户。 下图反应了云提供者和云用户的关系。在某些情况下，同一参与者可以扮演多个角色；例如，一个云提供商也可能在云基础设施上部署自己的面向客户的服务。 从硬件配置和定价的角度来看，云计算中有三个新颖之处： 能够满足需求的无限计算资源的出现和足够迅速地应对负载激增，省去了云计算用户预先的计划配置。 云用户预先投入的节省允许公司从小开始，当需求增加时再增加硬件资源。 在短期需要使用计算资源的时候付费，当不需要机器和存储的时候它们。 我们认为，在低成本的地方建设和经营非常大的规模，商业计算机数据中心是云计算所必需的关键推动者。已经发现了5-7个降低电力本，网络带宽，运营，软件和硬件这些非常大的经济规模成本的因素。与传统的数据中心相比，结合这些因素和统计复用能够提高资源利用率，这意味着在低于一个中型数据中心的成本下提供服务，云计算仍能获得丰厚的回报。 根据我们提出的定义，我们能够清楚地识别云计算和非云计算的例子。考虑一个托管在ISP的面向公众的互联网服务，它可以根据四个小时的通知为其服务分配更多的机器；但由于公共互联网上的冲击负载比这更迅速，因此这是不是云计算。相反，在考虑企业内部的数据中心，其应用程序的修改只能通知管理员。在这种情况下，大负荷激增的分钟刻度是高度不可能的，所以只要分配可以跟踪预期的负荷增加，这种情况下，满足云经营的必要条件之一；企业数据中心可能仍然无法满足成为云其他条件，如出现无限的资源或细粒度的计费。一个私人的数据中心，也不能从规模经济中获益。 从云计算中忽略私有云在博客中已造成相当大的争议。除了成千上万的机器组成的数据中心（如谷歌或微软经营的非常大的数据中心），大多数数据中心只拥有公共云的潜在优势的一个子集，如下表所示。因此，我们相信，在云计算的定义中包括传统的数据中心，将夸大所谓的私有云，这就是为什么将它们排除在外。然而，在这里我们描述了私有云可以通过超负荷计算或混合云计算的到公共云的优势。 公共云和私有数据中心的比较 优势 公共云 传统数据中心 无限的计算资源的需求 是 否 云计算用户预先的计划配置的节省 是 否 根据短期需要付费使用计算资源 是 否 由于非常大的数据中心的规模经济 是 通常否 由于不同组织的工作量复用而提高利用率 是 根据公司规模而定 通过资源虚拟化简化操作和提高利用率 是 否","title":"什么是云计算？"},{"content":"大家都知道，微软正在进军孵化器领域，之前在以色列发布了首个自己管理并运营的孵化器。Azure孵化器与 Kinect 孵化器不同，微软就是这个新项目的所有者及运营者，现在打算将触角伸及全球，包括印度和中国，但这个孵化器不是YC的复制品，不参与股权，不为创业公司提供现金，那到底要干嘛？本周五，中国区孵化器将会宣布其首批特殊的创业公司，选择的都是那些已经有了产品和终端用户的云计算公司。 在中国，利用市场清晰且已被证明的市场拉拢公司比较典型，所以不难发现微软就在朝这个方面发展，据微软加速器总监David Lin透露：这个孵化器还有一个关键不同，就是孵化器与微软的研发园区坐落在同一个地方，在特拉维夫和班加罗尔也如此。 据Lin透露，微软北京研发园区是微软亚太地区研发总部（ Microsoft Asia Pacific R&D HQ），10万平方米的园区内有工程师及科学家共2000多人，有20个顶级内部导师，包括6位IEEE会员以及经验丰富的经理，他们在软件、IT、技术方面都有丰富的专业经验。挑选的也是已经拥有产品与用户的相对成熟的创业公司，微软将之归类为A级创业公司，发展到这个水平的公司更适合微软现在提供的资源以及培训。 借助中国区孵化器，微软就有机会在成长中的中国区云计算市场占领一席之地，其实微软不是第一家对孵化中国创业公司感兴趣的美国企业，就在今年，一家中国大财团以及美国金融机构联合发布了有清华背景的首家硅谷-中国科技孵化器InnoSpring，另外还有Global Accelerator Network （前身TechStars Networks）成员之一的Chinaccelerator，它同时也是去年Tech Crunch Beijing冠军Order With Me的孵化器）。 微软同时也在利用这个孵化器推广自己的云计算平台Windows Azure，所挑选的创业公司事实上适用于多个平台，包括开源平台，据了解，所挑选的其中七家公司事实上都是基于开源技术。 下面是首批创业公司 Snack Studio 一个设计团队，专门设计高质量WP7应用。   Microcare 一家为移动App网络提供高品质服务的创新团队，其领先服务平台Devs Desktop Real Device Testing Suite专为应用开发商提供定制化服务。   Fotoable 一家移动多媒体公司，致力于与照片有关的应用，专注于相册管理，特效以及动画制作。   Unidust 一家与Siri类似的Android语音助手，用户可以通过它与手机对话，让手机操作变得更简单，帮助解决生活问题。   EachCloud 一个网页书签工具，用户可以剪接摘要或者网络中的一些东西，剪切相同内容或者有相同爱好的用户可以找到对方甚至成为好友。     BanBao Windows Phone的免费个性化社交信息挖掘聚合平台，将你的好友，新闻，微博在一个地方展现，以便你在同一个地方访问任何信息。   OpenXLive 一个移动游戏社交网络平台，功能包括排行榜，业绩，多玩SNS整合等。   ApeHills 为日本提供一些教育娱乐应用以及语言学习应用。   FeiYan 允许用户将团购券，虚拟礼物通过短信发送给客户。   Atom 提供社会协作工具，帮助中小型企业协调软件。   Via TC （annie 供雷锋网专稿，转载请注明！)","title":"微软Azure加速器正式入驻中国 本周五公布首批创业公司"},{"content":"为了使openstack的同行们能够很快的安装部署openstack Essex，vpsee于7月2日完成了onestack项目，可以很方便的在ubuntu上安装部署openstack Essex。 下面是相关的连接和具体内容： OneStack：Ubuntu 12.04 (或11.10) 一键安装部署云计算平台OpenStack Essex：http://blog.csdn.net/hilyoo/article/details/7696169 OneStack：Ubuntu 12.04 上一键自动部署 OpenStack： http://www.vpsee.com/2012/07/onestack-all-in-one-installation-tool-for-openstack/ onestack项目：http://code.google.com/p/onestack/   有时间可以自己试试。","title":"OneStack：Ubuntu 12.04 (或11.10) 一键安装部署云计算平台OpenStack Essex"},{"content":"背景介绍： 据思科公司的研究数据显示，预计到2015年，将有69%的美国人拥有五件以上的联网设备，而联网设备使用量将达150亿台。 　　　 　　　 　　　 　 随着智能设备的飞速发展，我们身边有越来越多的电子产品接入了互联网。在今年的IDF 2012信息技术峰会上，英特尔公司全球副总裁兼中国区总裁杨叙在开场白时候就表示，今年的关键词包括：协作、创新、PC、个人计算、数据中心、互联、云计算等。并重点突出了互联、个人计算和云计算。由此可见，一个全新的数字化互联时代已经到来。 智能设备推动了互联网和数据中心的发展，但爆炸式的增长同样带来了管理与资源分配等方面的诸多问题。面对越来越复杂的问题，云计算应运而生。从三年前开始，云计算在我国的落地之声就不绝于耳，于此同时IT厂商也纷纷推出自己的解决方案来加速云实施。目前，已经有相当一部分大中型企业开始应用私有云及混合云，而针对小型企业的公有云项目也开始启动。 作为云计算的主要推动力，IT企业有哪些云计算案例可供分享呢？ 采访： 1、请介绍一下您对国内云计算的看法？ 目前，云计算在中国处于起飞阶段，云计算已经成为信息产业“炙手可热”的时髦名词,被越来越多的政府机构和企业接受并使用。一方面是政府主导的云计算发展战略，北京“祥云计划”，内蒙古“草原硅谷”云计算规划，上海”云海计划“等相继推出；另一方面是国内外IT厂商为抢得未来巨大的云计算市场，Google,微软，IBM和国内浪潮，宝德等厂商利用自身优势，整合上下游产业，纷纷推出各自的云计算战略与解决方案，“云计算大战”在中国如火如荼的上演。 2、现阶段云计算的特点都有哪些？其优、缺点都是什么？ 云计算是基于互联网等网络，统一组织和灵活调动各种ICT信息资源，通过虚拟化方式共享IT资源，实现IT资源共享，统一调度和大规模计算的信息处理方式。它主要的特点包括  资源池集中管理：快速，弹性，按需分配服务，有效提高IT资源利用率和降低IT成本；  服务可计量：服务提供者按照用户使用量进行计费，有效缩短扩容的周期  广泛的网络访问：无需部署软硬件，通过互联网即可获得云平台计算资源 不足之处：  数据安全：由于资源数据集中存储与调度，数据的安全管理成为发展云计算亟待解决的问题，平台的稳定性、可用性、服务质量等方面也是云计算发展中存在的障碍  云计算统一标准：目前云计算提供商各自为战，缺乏统一的云计算发展的规范和标准，难以形成产业的规模化和产业集群效应。 3、贵公司有哪些云计算相关的产品和技术？ 宝德经过十五年的发展，现已成长为国产服务器前三强、中国云计算的精锐企业。宝德加大对云计算的研发力度，包括云服务器（观澜湖系列密集计算云平台），云存储，加大对上下游产业链的整合，推出宝德云计算---PowerCloud,全面覆盖了云计算各个层级MaaS、PaaS、IaaS、SaaS和CaaS，为政府、互联网、教育、广电、安全、金融、电信、税务、交通、电力、医疗等行业提供尖端的云计算产品和服务。 4、请介绍一、二个云计算相关案例。简要介绍客户需求、收益以及方案特点。 宝德在数据容灾、服务器集群虚拟化等IT整体解决方案方面有着丰富的实战经验，为云计算平台的部署奠定了坚实的基础。 PPS云平台成功案例 PPS作为在线视频播放软件，主要面临的挑战是高并IP发访问量、异构环境下的共享访问，视频文件的海量存储与在线无缝扩展等。 通过搭建统一的数据存储与调度平台，实现数据统一集中存储，通过服务器集群，存储集群虚拟化技术，实现支撑高密度IP访问量与负载均衡海量数据存储与备份，有效提高视频点播的客户体验，降低IT成本和避免单点故障。 5、在方案实施过程中遇到过哪些问题？又是如何解决的。 在该方案实施过程中，客户最关心的问题是，如何支撑高并发访问量，如何提供资源利用率与数据安全问题。宝德提供的云计算平台采用服务器集群，通过虚拟化技术与负载均衡技术，可支持5万独立IP并发访问量，通过存储集群及虚拟化，搭建海量存储平台，加上资源智能管理平台，实现数据的安全备份与灾难恢复。 6、用户对云计算方案如何评价？是否还有新的诉求点？ 据客户反馈，通过云计算平台，大大提高客户IT管理效率，降低IT建设与运维成本，灵活方便的扩容，稳定安全的平台，这样的平台能更好的提高视频点播的体验。 7、您认为哪些行业更加看重云计算？ 首先是政府行业，政府搭建公共云服务平台，教育云，医疗云，交通云等，这样更有利于转变政府职能，更好的为公众提供更贴心，更便捷的服务。 其次是互联网行业，随着互联网，物联网的发展，大数据时代的来临，对高密度计算，海量数据处理提出了更高的要求，而云计算的特点正好适应了这些诉求。 最后是制造业，云计算能最大程度的解决制造业面临的信息孤岛问题，极大的推动产业结构的升级与优化，推进产业整合进程。 8、您觉得未来云的应用会是什么样。云计算会朝哪方面发展？ 未来的云计算应用更关注于行业云，云计算将根据不同行业的特点与应用需求，建立不同的云计算平台 云计算的发展趋势，我认为有以下几个方面： 一、 与物联网，私有云与公有云并举，，三网融合的发展紧密的相连，云计算应用将逐步服务于大众，而不仅限于企业与政府。 二、 云安全将会更加受到重视，并且会有法可遵循 三、 计算环境的新定义将改变客户的期望","title":"浅谈云计算在中国的发展"},{"content":"什么是CRM? CRM就是客户(Customer)关系(Relationship)管理(Management). 当企业的业务繁忙的时候, 靠OUTLOOK和简单的单个人的报表显然不能满足日常业务的需要, CRM就是来满足这个需求的, 从我的观点来看, CRM主要有以下用途: 1. 相对于OUTLOOK, CRM的WEBMAIL能在线管理邮件, 能导入邮件, 这对于业务的连续性非常有帮助. 很多公司的人员变动或者仅仅是电脑出问题了后, 大量的业务邮件丢失, 造成业务的断层. 2. 相对于PPT来说, CRM的报表能几乎实时地反映业务的进展, 显示最优先要处理的业务, 做到实时提醒业务员和老板他们最应该处理和关心的业务. 这是PPT和个人的努力完全没有办法办到的. 3. 相对于公司的日常沟通, CRM能提供把所有的资料(文档, 说明书, 价格表和甚至培训内容等)放在一起, 放在一个大家都能看到的地方, 极大地方面使用. 4. CRM还提供了一个集中办公的环境, 提供一个统一的强大的服务器(如果架服务器的话), 免除了个人电脑的相关的速度, 杀毒, 保密的一系列问题. 5. CRM还提供了向其它业务的接口, 可以使用WEBERP(ERP), ASTERISK(呼叫中心)等无缝集成到一个统一的平台, 使内部管理更加系统化, 清晰化. 6. 部分CRM的其它功能模块(人力资源, 发票…)也有可能给企业的运营更加高效. 主要的免费CRM的选择 VTigerCRM ( www.vtigercrm.com ) 印度人开发的CRM系统, 基于SUGARCRM, 有超过后者的趋势, 但是现在开发好像比较慢. 此CRM系统最大的特点就是全免费, 完全不任何费用. 只是如果你要技术支持的话, 那就要付费, 我觉得值得付点费用(如果有钱的话). 这点我觉得甚至是一个优点, 本来很多的收费的CRM的技术支持都不怎么好. 反正软件不要钱, 他们支持的好就付费, 支持不好就不付费, 可以说是按你的满足度来付费的. 赞一个. 比较有特色的就是5.10RC里面的面板和强大的流程再造功能, 一打开界面, 显示的就是当时的最重要的客户和相关的业务情况, 对于我们这些做精力的来说, 非常有用. 缺点主要就是开发太慢了, 新版本的中文支持不太好. SUGARCRM (www.sugarcrm.com ) 最有名, 也是用得最广的免费开源CRM.功能强大, 稳定. 他们的网站上的付费服务是基于云计算服务的, 就是他们提供服务器来运行, 用户只要上他们的网就行了. 但是一般企业, 只要不是移动办公, 一般用不上. 作为最有影响力的开源CRM, 其功能和性能一流, 对中文的支持非常好. 作为一款真正商业运营的开源CRM, 可以说非常有前途. SalesForce.com CRM (www.SalesForce.com ) 不是免费的, 但还是要说一下, 是一款商业动作很成功的公司. 试用版功能中规中矩, 据说功能非常强大, 但是好像都是一些比较高端的功能, 对于我这个还处在CRM推进中的使用者来说, 这些功能都太遥远了. 我现在要做的是, 让我未来的团队能把CRM用出点样子, 不要搞得四不样, 不要”画虎不成反类犬”. 反正不推荐. C3CRM ( www.c3crm.com ) 据说是中国人开发的, 好像跟以上的一款产品非常相似, 也是免费开源的. 功能不详. 易客CRM ( www.crmone.cn ) 一款商业运作的开源CRM 照我看就是C3CRM或者 SugarCRM+VtigerCRM, 不过做的还是比较”精致”的. 发给我的试用版一直用不了, 只是看了网上的演示. 这个易客CRM跟C3CRM是什么关系现在还没有弄明白, 不过他们的论坛倒还不错, 大有成为中国的开源CRM的论坛之势(http://www.c3crm.com/bbs/index.php ). 里面的资料不少, 但是很多也是下载不了. Compiere ERP & CRM ( www.compiere.com ) 这个没时间试, 以下是拷下来的一点介绍: Compiere是一个全球性的开放源代码项目 开放源码的 Compiere ERP & CRM，没有任何软件许可费用。 有足够的帮助，包括软件安装、帮助文档与实施、支持、培训等等，以便您能够让 Compiere ERP & CRM 充分发挥其作用。 OpenCRX (http://www.opencrx.org/ ) 一个比较不错的CRM, 与其它业务的集成做的比较好. 另有一个相关网址可以看一下 http://www.digital-worx.de/home.html 写在最后: CRM不是一个固定资产, 是一个流动资产, 需要实施者的大力推动的严格管理, 要不就很可能失败. CRM的资料准确性和及时性非常重要, 如果CRM提供不了最有效的资料, 就不能成为业务的指导, 反而是一个拖累. 对于CRM的实施, 要跟ERP实施一样, 主要还是要注重人的做事方式的改变, 把业务流程优化, 把做事的方式改一改. 从我的观点来说, 就是要让业务员主动地从CRM里面来获得有用的客户资料, 知道他的最重要的客户是什么, 最有潜力的方面是哪些, 再每天去好好地维护这些客户资源. 当然, 选择开源的CRM有一个好处就是能自己开发业务流程, 更好地为企业经营服务. 不要间ERP式的生搬硬套毁了你的生意. 总之, CRM是帮助业务员来更好地管理最重要的客户的, CRM本身并不能带来客户, 也不可能带来业绩. 但是CRM是能影响业务的,有好的方面, 当然也有要克服的坏的方面. 还是要再罗嗦一下: CRM的实施必须以强有力的领导为保证, 否则就有可能是一场灾难. 综上所述，选择建议如下：   SalesForce XTools sugarCRM VTigerCRM","title":"开源免费CRM"},{"content":"《程序员》杂志是中国最具影响力、最权威的IT专业技术期刊，是国内唯一一本定位于职业开发者、项目经理、CTO&CIO的技术高端杂志。该杂志在2012年7月刊对联科集团“风起亚洲”公有云平台进行了专栏报道，全文内容如下（原文PDF链接：http://www.clustertech.com/cn/news/csdn.pdf）：   随着移动互联网和云计算的兴起，社交网站（SNS）、电子商务网站、手机游戏等渐渐成为现代人生活中不可或缺的一部分。支撑这些应用的背后，公有云的作用不可小觑。TechTarget中国发表了2012年全球云计算服务商排名榜[1]，其中除了有中国用户所熟悉的亚马逊等厂商外，还有一个名为Joyent的公司在欧美赫赫有名，卻未为中国用户留意。其实自2004年起Joyent就一直提供基础架构即服务（IaaS），那时这种服务还未被人称为“云计算”。社交网站LinkedIn早已使用其服务，每月推出数十亿页面，还有超过25%的Facebook应用程序也都运行在Joyent之上[2]。该技术到底有何优异之处可以吸引到如此多的Facebook开发者？我们中国的电子商务、社交网站或手机游戏开发者们是否也能使用到该技术呢？ 答案是肯定的！联科集团（中国）有限公司于2010年与Joyent宣布成立战略联盟，推出名为“风起亚洲Fengqi.Asia”公有云平台，向亚洲的云服务和游戏服务供应商提供云计算软件、服务和支持的整体解决方案。目前风起亚洲云在中国大陆、香港及新加坡均有成功案例。 风起亚洲云的SmartOS与同类热门云平台相比，性能优异。以下是基准测试结果[3]： 表1 风起亚洲云平台与其他公有云平台对比 类别 基准测试 风起亚洲超过： 国外某知名A云平台 国内某知名G云平台 磁盘I/O测试 IOZone: 写 +589% +392% IOZone: 读 +1513% +1228% 内存I/O测试 RAMSpeed: 整型 +11% +27% RAMSpeed: 浮点型 +32% +18% CPU测试 SciMark 稀疏矩阵 +73% +174% SciMark 稠密矩阵 +53% +131%   事实上，风起亚洲云技术有累计超过8年的公有云服务经验，不间断地为数以千计的客户在游戏、移动应用程序和网页托管等领域提供服务。历经考验的云技术使得风起亚洲云能在众多IaaS服务提供商中脱颖而出，获得客户的青睐。简而言之，风起亚洲云有如下优点： Lean Virtualization技术——大大减少了虚拟化过程中的浪费，并把用户的资源放在应用服务上而非虚拟化上。 自动扩展的弹性计算——按实际使用情况免费和自动扩增4倍于平常的CPU资源（CPU Bursting），以轻松应对意外的流量高峰。 精准优化——独有的DTrace技术可对应用进行实时进程描绘，让客户应用进行重点优化云上系统架构，帮助客户将每月数据存储和带宽的支出降至最低。 现阶段有些公有云厂商在提供IaaS服务时，仍存在诸多问题，例如将大量计算资源浪费在虚拟化上，数据流量等多种服务都要额外收费等。这样一来，客户产品性能提升和成本降低的幅度都很有限。而风起亚洲云提供面向实时Web应用的优化虚拟环境，与复制硬件的传统虚拟机相比，可大幅降低成本并提高应用性能。比如，风起亚洲云的一位新加坡客户，从事电子商务业务，需要5部计算机共240 GB的内存来处理每秒5000次的并发访问。使用风起亚洲云后，6部虚拟机共24GB内存即可解决问题，总体成本降低了80%，应用扩展性也大大增加。此外，风起亚洲云还集成了Node.js开发及运行环境，可以大幅降低“实时数据密集型应用”的时间延误，而这是在社交网站、游戏、移动应用以及其他高性能计算领域中的亟需关注的关键问题。 据IDC预计，中国IaaS市场将保持高速发展，到2016年其规模将超过10亿美元[4]。包括中国在内，世界各地企业都在寻求技术创新，更快地推出新产品和建立核心竞争力。基于Joyent技术的风起亚洲云提供了经过实践检验的云技术，可以立即满足网络游戏提供商、手机应用及电子商务网站等客户的需求, 并提供高性能且可扩展的稳定计算能力。有关基准测试的详细结果，以及申请免费试用，请参考链接：http://fengqi.asia/cn/csdn-dev.html。   [1] http://www.searchcloudcomputing.com.cn/showcontent_60744.htm [2] http://www.bloomberg.com/apps/news?pid=conewsstory&tkr=2726:JP&sid=ag23P5rgpA38 [3] http://fengqi.asia/cn/benchmark.html [4] http://www.idc.com.cn/about/press.jsp?id=NjAz","title":"【媒体报道】风起亚洲公有云—《程序员》杂志企业专栏报道"},{"content":"最近，没有哪家技术性网站不提到所谓的云计算的。云计算其实就是以服务的形式提供计算资源（计算机和存储）。这又涉及到以一种简单、透明的方式动态地将服务延伸到更多的计算机和存储的能力。所有这些都类似于效用计算（utility computing）背后的思想。在效用计算中，计算资源被看作一种计量服务，就像更传统的公共设施（例如水或电）一样。它们的区别不在于这些思想背后的目标，而在于组合到一起、使这些思想成为现实的现有技术。 云计算背后最重要的概念之一就是可伸缩性，而实现它的关键则是虚拟化（virtualization）。虚拟化在一台共享计算机上聚集多个操作系统和应用程序，以便更好地利用服务器。虚拟化还允许在线迁移，因此，当一个服务器超载时，可以将一个操作系统的一个实例（以及它的应用程序）迁移到一个新的、不那么繁忙的服务器上。 从外部看，云计算只是将计算和存储资源从企业迁出，并迁入到云中。用户定义资源需求（例如计算和广域网、带宽需求），云提供者在它的基础设施中虚拟地装配这些组件，如图 1 所示。 图 1. 云计算在 Internet 中迁移资源 但是，为什么您会心甘情愿地放弃对自己资源的控制，而让它们虚拟地存在于云中呢？原因有很多，但我相信最重要的两个原因是成本和可伸缩性。云计算的目标是使这些资源比您自己所能提供和管理的资源更廉价。云计算除了降低成本外，还有更大的灵活性和可伸缩性。云计算提供者可以轻松地扩展虚拟环境，以通过提供者的虚拟基础设施提供更大的带宽或计算资源。 云计算在环保方面的优势是，它可以在不同的应用程序之间虚拟化和共享资源，以提高服务器的利用率。图 2 显示了一个例子。在这个例子中，不同的应用程序使用了 3 个独立的平台，每个应用程序都在它自己的服务器上运行。在云中，可以在多个操作系统和应用程序之间共享（虚拟化）服务器，从而减少服务器的数量。更少的服务器意味着需要更少的空间（减少数据中心占用的空间）和更少用于制冷的电力（减少碳污染）。 图 2. 虚拟化和资源使用 但是，有得必有失，云计算并非没有缺点。本文后面会探索其中的一些问题。但是现在，让我们更深入地探究云计算。 云计算剖析 当您深入观察云时，您会发现，它实际上并不是一个单独的服务，而是一个服务集合，如图 3 所示。这些层定义了提供的服务的级别。 图 3. 云计算的层次 我们从最低级的服务开始，即基础设施（Infrastructure-as-a-Service 或 IaaS）。IaaS 就是将基础设施（计算资源和存储）作为服务出租。这意味着虚拟计算机不仅具有有保证的处理能力，而且为存储和 Internet 访问预留了带宽。实际上，IaaS 具有在有特定服务质量约束的情况下出租计算机或数据中心的能力，使之能执行任意操作系统和软件。 顺着栈往上看，上一级的服务是平台（Platform-as-a-Service 或 PaaS）。PaaS 类似于 IaaS，但是它包括操作系统和围绕特定应用的必需的服务。例如，除了虚拟服务器和存储外，PaaS 还提供一个特定的操作系统和应用程序集（通常是作为一个虚拟机，即 VM，或文件，例如 VMware 的 .vmdk 格式），以及对必要的服务（例如 MySQL 数据库或其他专用本地资源）的访问。换句话说，PaaS 就是 IaaS 加上一个用于给定应用的定制软件栈。 最后，在 图 3 顶部是可以提供的最简单的服务：应用程序。这一层被称作 Software-as-a-Service（SaaS），它是从一个集中的系统部署软件，使之在一台本地计算机上（或从云中远程地）运行的一个模型。由于是计量服务，SaaS 允许出租一个应用程序，并计时收费。 这是高度概括的云计算的视图。这个视图忽略了云的其他一些方面，例如data-Storage-as-a-Service（dSaaS），后者以计量服务的形式提供存储，消费者按使用的容量（使用的存储的容量）和利用率（存储的带宽需求）付费。另外还有云服务，它为互操作性和外部应用程序编程接口（API），例如 Web 服务，提供了内部机制。 云计算现状 最近几个月，对云计算和相关基础设施的投资呈爆炸式增长。这样巨大的投资表明，对云中资源的虚拟化存在着巨大的需求。去年已经有了很多新的服务，图 4 展示了其中一部分。 图 4. 云计算各层及相关产品 这绝不是一份详尽的产品类别，因为变化非常频繁。但是，这的确给出了一些产品的概览，并展示了它们之间的区别。本文后面的 参考资料 小节包括了其中一些产品的链接。 Linux 和开放源代码在云中的应用 现在让我们来探索一下，Linux 和开源社区如何为云计算领域做出贡献。您可能已经猜到，Linux 和开放源代码扮演着极其重要的角色。 Software-as-a-Service SaaS（软件即服务）就是以服务的形式访问 Internet 上的软件。一种早期的 SaaS 方法是 Application Service Provider（ASP）。ASP 提供对 Internet 上存放或交付的软件的订阅。ASP 交付软件，并根据软件的使用收费。这样一来，您就不必购买软件，只需随需租用软件。 SaaS 的另一个方面是在 Internet 上使用远程执行的软件。这种软件可以是本地应用程序所使用的服务（并定义为 Web 服务），也可以是通过 Web 浏览器看到的远程应用程序。远程应用程序服务的一个例子是 Google Apps，它通过一个标准的 Web 浏览器提供一些企业应用。要远程地执行应用程序，通常需要依赖于一个应用服务器来公布所需的服务。应用服务器 是一个软件框架，它公布软件服务的 API（例如事务管理或数据库访问）。具体的例子有 Red Hat JBoss Application Server、Apache Geronimo 和 IBM? WebSphere? Application Server 等。另外还有很多其他的应用服务器，参考资料 小节给出了一份详细的列表。 SaaS 的另一个最近的例子是 Google 的 Chrome 浏览器。这个浏览器是作为新桌面的理想环境，除了具有传统的 Web 浏览体验外，还可以通过它来（以本地或远程方式）交付应用程序。（要了解更多信息，请参阅 参考资料）。 Platform-as-a-Service PaaS 可描述为一个完整的虚拟平台，它包括一个或多个服务器（在一组物理服务器上虚拟而成）、操作系统以及特定的应用程序（例如用于基于 Web 的应用程序的 Apache 和 MySQL）。在某些情况下，这些平台可以预先定义和选择。而在另一些情况下，可以提供一个 VM 镜像，该镜像包含所有的特定于用户的应用程序。 PaaS 一个有趣的例子是 Google App Engine。App Engine 是一个服务，通过它可以在 Google 的可伸缩性极佳的架构上部署 Web 应用程序。App Engine 为可通过 Internet 引用的 Python 应用程序提供一个沙盒（将来还会支持更多的语言）。除了支持用户认证、镜像操作和电子邮件发送外，App Engine 还提供了 Python API，用于持久地存储和管理数据（使用 Google Query Language 或 GQL）。Web 应用程序运行时所在的沙盒将限制对底层操作系统的访问。虽然 App Engine 限制了应用程序可用的功能，但是它支持有用的 Web 服务的构造。请参阅 参考资料 小节，了解更多信息。 注意：在一定的带宽和存储约束范围内，在 App Engine 中部署应用程序是免费的。但是，如果要用 App Engine 构建生产 Web 站点，则需要评估使用费。 PaaS 的另一个例子是 10gen，它既是一个云平台，又是一个可下载的开放源代码包，可用于创建您自己的私有云。10gen 是类似于 App Engine 的一个软件栈，它提供与 App Engine 类似的功能 — 但有一些不同之处。通过 10gen，可以使用 Python 以及 JavaScript 和 Ruby 编程语言开发应用程序。该平台还使用沙盒概念隔离应用程序，并且通过自己的应用服务器的许多计算机（当然，是在 Linux 上构建）提供一个可靠的环境。 Infrastructure-as-a-Service IaaS 是以服务的形式交付计算机基础设施。这一层与 PaaS 的不同之处在于，只提供虚拟硬件，而没有软件栈。客户提供一个 VM 镜像，该镜像在一个或多个虚拟服务器上被调用。IaaS 是作为服务的计算的最原始的形式（除了对物理基础设施的访问）。最著名的商业 IaaS 提供程序是 Amazon Elastic Compute Cloud（EC2）。在 EC2 中，可以指定一个特定的 VM（操作系统和应用程序集），然后将应用程序部署到它上面，或者提供要在服务器上执行的 VM 镜像。然后，只需根据计算时间、存储和网络带宽付费。 Eucalyptus 项目（Elastic Utility Computing Architecture for Linking Your Programs To Useful Systems）是 Amazon EC2 的一个开源实现，它与商业服务接口兼容。和 EC2 一样，Eucalyptus 依赖于 Linux 和 Xen 进行操作系统虚拟化。Eucalyptus 是加利福尼亚大学（Santa Barbara）为进行云计算研究而开发的。您可以从该大学的网站上下载它（见 参考资料），或者通过 Eucalyptus Public Cloud 体验它，不过后者有一些限制。 另一个 EC2 风格的 IaaS 是 Enomalism 云计算平台。Enomalism 是一个开放源代码项目，它提供了一个功能类似于 EC2 的云计算框架。Enomalism 基于 Linux，同时支持 Xen 和 Kernel Virtual Machine（KVM）。与其他纯 IaaS 解决方案不同的是，Enomalism 提供了一个基于 TurboGears Web 应用程序框架和 Python 的软件栈。 其他云开发 除了前面已经讨论过的开发外，还有其他一些基于 Linux 的开放源代码包，它们在云环境中也比较有用。Hadoop 是一个开放源代码 Java? 软件框架，它类似于 PaaS，但是着重于在一组联网的服务器上操纵大型的数据集（受 Google MapReduce 的启发，后者支持大型数据集的并行处理）。因此，它在 Web 搜索和广告应用中派上用场 — 特别是在 Yahoo! 上。Hadoop 还提供一些子项目，这很像 Google 应用程序。例如，HBase 提供类似于 Google BigTable 数据库的功能，Hadoop Distributed File System（HDFS）提供类似于 Google File System（GFS）的功能。 问题和挑战 云计算的问题显而易见 — 其中最重要的两个问题是保密性和安全性。保密性可以通过加密来解决，但是在选择云计算服务时，要审慎一些。在 Web 刚开始发展时，即使是电子商务也受到了怀疑。在全球，每年要发生价值上万亿美元的电子商务事务，所以云计算可以收益于当今所有提供 Web 安全的技术（例如安全套接字层或 SSL）。 结束语 云计算的风暴已经开始，推动云计算的 Linux 开源开发也在迅猛发展。随着云计算领域出现巨大的投资，向集中式数据中心的转型已显而易见。有趣的新技术和架构即将到来！","title":"Linux 上的云计算"},{"content":"商场便是战场，云时代企业的变革本事就是在打一场没有硝烟的仗，虽然这场战役对于传统的CIO的职业生涯来说是一场挑战，甚至是威胁，但是，云CIO们必须成为这场战役的“战略家”，统筹全局，精通防御和进攻，以保持企业战斗力和竞争力，带领企业直面转型的挑战。“云”对CIO角色定位的改变应当是积极且极具活力的。 请点击下面的链接来观看此视频： http://www.enterprisecioforum.com/cn/video/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BF%83%E4%BD%BF%E4%B8%AD%E5%9B%BDcio%E8%BD%AC%E5%9E%8B","title":"云计算促使中国CIO转型"},{"content":"【编者按】：本文编译自TechCrunch，原作者RYAN LAWLER，本文是其就周一索尼宣布斥资3.8亿美元收购美国云游戏公司Gaikai对未来云游戏的发展所做的一些评点，对于云游戏能否终结下一代游戏主机作者并没有给出明确的结论。 当前的这一代游戏主机看起来是有点老掉牙了，但是有迹象表明到2013年末PlayStation或者Xbox的替代者就有可能会横空出世。不过这一周发生的一件有趣的事情可能会改变主机厂商对他们的硬件和软件服务的看法：本周一，索尼宣布斥资3.8亿美元收购美国云游戏公司Gaikai。 当然，关于新的游戏主机的硬件、芯片和规格的谣言只有当它真正发布的时候才会得到证实。所有的迹象表明我们看到的老一代游戏主机都在进行着同一类型的硬件开发工作——包括提高性能、下一代CPU和GPU的引入来提高游戏性和图形能力。但如果我是微软和索尼的话，至少现在我不确定我会看好一个强大的主机来增强其新的游戏平台。事实上，我会反其道而行之，开发一个尽可能简单的主机，然后将所有的涉及到性能以及图像等方面的东西交给云端来处理。 索尼的这次收购GaiKai可能会成为云游戏将要崛起的一个先兆。不过对于很多人来说，恐怕还不知道GaiKai是干什么的吧：Gaikai提供的云游戏服务可以让玩家无需配备高性能主机就玩上大型游戏，目前支持40多款流行主机游戏。玩家只需利用家中的接收设备接收来自于云端的游戏内容和数据信息，而操纵杆、手柄等设备的操作信息也会反馈到云端，整个游戏的主机就是千里之外的云服务器。也就是说，我们使用普通笔记本甚至是手机、平板电脑等设备的浏览器就可以玩上PS3游戏，不用考虑是否拥有游戏主机，真正做到随时随地玩PlayStation。但是我认为GaiKai对索尼即将推出的下一代主机的影响将会更大。 云游戏机目前还是哑巴盒子，因为它需要更智能的网络 游戏机制造商曾经一直依靠剃须刀/剃须刀片的销售方法来销售他们的游戏系统:以近乎亏本的方式推出他们的硬件系统，然后长期内通过卖游戏和授权来将损失的钱赚回来。游戏机厂商为了满足消费者的需求，他们不得不在最新的硬件产品上投入较大的资金来提升用户的游戏体验，短期内用于游戏主机CPU和GPU等方面的升级的成本固然相对较高，但是随着时间的推移，游戏和授权所得的利润足以弥补这类成本。大致来说，这几乎就是目前游戏主机行业的一大趋势。 但是如果这些公司并不需要本地硬件来处理游戏而将这一负担交给云端的话又将怎样呢？老实说，云游戏并不是一场革命性的创举，因为现在已经有很多公司都开始这么做了。像GaiKai.OnLive等都可以让你通过云服务在你的电脑、手机以及OnLive的99美元流媒体游戏盒上面玩各种云游戏，同时这些公司还在计划让一些联网的电视以及其它设备支持他们的服务。 OnLive的99美元流媒体游戏盒非常的吸引我，而且我觉得它还可以是微软和索尼在推出下一代主机的一个很好的借鉴。 不过就目前来说，云游戏的想法还是比较科幻。原因很简单，就是我们的网速还不够快。Gaikai官方发布的信息中注明玩云游戏的网速需求为“下行速度5Mbps以上”，也有部分游戏只需要3Mbps的下行速度。5M的下行速度要求虽然不算太过分，但这里指的是你的网络与Gaikai服务器连接时获取的下行速度，对于许多人而言，要么是网速达不到要求，要么是存在一定的网络连接障碍，即使能够达到5M的网速要求，在使用Gaikai时也不能够开启其他占用网速的应用。因此即使现在许多宽带用户的带宽已经达到了5M的标准，Gaikai仍旧会让你“再试一次”。 所以，要想实现电子游戏的无主机化云端化，我们还需要等待网络基础服务的进一步发展。 基于云计算的游戏所面临的问题 如果将所有的游戏处理过程都放到云端的话，用户只需要通过电脑、手机或者其它设备就可以玩各种大型游戏，这种做法在短期内无疑会大幅减少各类游戏主机的销售量，但是它忽略了很多游戏主机都是在亏本销售的。没有人在头几年推出新的游戏硬件设备的时候就能盈利。当然，如果谁能推出一款主机能保持稳定的网络连接和图形处理能力，而且价格还很合理的话，相比一些高性能的主机GodBox299美元的售价来说它将会相当有竞争力。 但是最大的问题就是现有的网络架构等并不能完美的支持基于云计算的游戏，我们不得不面对这样的现状：很多玩家即使是认同Xbox Live的玩家现在仍被DSL网络连接的速度所困扰，DSL连接并不支持云游戏的高清画质显示。既然是云服务，网络连接状况就必然会对服务质量产生影响。 更重要的是没有人可以证明基于云计算的游戏可以真正的实现规模化发展。虽然OnLive有数百万的用户，但是相比Xbox Live的日登陆用户数量来说就相形见绌了。提供计算能力的类型必须服务于数以百万计的玩家同时游戏是一个很大的问题。相比索尼的此次收购GaiKai来说，微软可能比索尼走的更快一步，这家软件巨头已经在Microsoft Azure上建立了一个巨大的虚拟云计算平台来为日后的云游戏提供支持。而对于索尼来说，这一笔巨大的投资却仅仅是为了获得基础设施来为支持云游戏做准备。 最后，云游戏的潜在成本最终还会转嫁给消费者，网络服务提供商开始推出分层宽带计划，对于用户来说就需要缴纳更多的宽带使用费用。因为云游戏需要高清显示，这也意味着即使对于一些休闲玩家来说每个月都会要多出不少的带宽使用量，而且微软和索尼也不会站出来为云游戏客户的带宽费用买单。万一哪天网络服务提供商们财迷心窍对用户采取流量计费，打通一款数十小时的RPG游戏可能就得付上和PS4主机价格一样多的上网费用，如此说来的话，买一台主机还是更为保险一些。 新玩家 新商业模式 与此同时，一些潜在的低成本游戏主机进军云游戏平台的话有可能会打开一个全新的客户市场，特别是低于100美元的售价会相当有竞争力，而且潜在主机厂商进军云游戏行业也会促使微软和索尼不得不开发一些并不是完全依赖其主机的一些游戏服务来同这些厂商竞争。 让游戏成为一种流媒体服务而不是购买各种游戏同时也在开创一种潜在的全新商业模式。Xbox Live使用的是会员收费模式，订阅游戏也是一样，你可以免费获得这款游戏，但是你每月需要支付一定数量的会员费用，而这一切对于MMORPG（大型多人在线角色扮演游戏）游戏来说并不新鲜。不需要物理下载或给消费者的发送游戏光盘,对于云端游戏来说订阅服务可能变得更受欢迎。 相信微软和索尼已经在为推出他们的下一代游戏主机而努力，我只是想说,这新一代主机不一定非得是高性能或昂贵的,也许只要支持云游戏就行，特别是如果他们想以较低的成本获得更多的用户的话，推云游戏宜早不宜迟。 让我们试想一下，在接下来某年的（或许就是2013年）的E3游戏展上，索尼举行PS4发布会其发言人介绍介绍PS4以及最新的PS4游戏的时候告诉你：“打开你们的PS3和Gaikai，找到最新的那款游戏。没错，这就是PS4游戏；没错，把你们的PS3当做PS4吧。”或许现在云游戏并不能对现有的主机产生多大的影响，但是从微软和索尼等主机巨头开始在云游戏上展开布局可以看出未来云游戏的发展前景还是相当大的，不过云游戏到底能不能终结下一代游戏主机就得留给时间去印证了。 Via  TC （流云 供雷锋网专稿，转载请注明！)","title":"云游戏能否终结下一代游戏主机？"},{"content":"云计算的相关知识   1．云计算的发展历史：是由亚马逊网络商业公司创造出来的. Amazon的巨大的网络商业需要巨大的计算机力量的支撑。这个设备系统的能力，到了晚上就闲置了。怎么能把晚上闲置的资源给利用起来，降低开支，增加利润呢？不知是谁联想到像图书馆的资源共享。为何不在晚上，不把这样强大的资源，租出去，让全社会共享，又为Amazon巧劈全新的巨大财源 2．云计算的理论基础：云计算的前身 –并行计算机，分布式计算和网格计算 3．云计算的应用分三个层次：把软件作为服务，把平台作为服务和把基础设施做为服务，不同的层次适合不同的需求。 4．云计算的特点:       a) 云里雾里，你不知道在那里；你交钱我完你事，你不需要知道在那里；       b) 可公开租用，谁都可以来；       c)  可大可小，可称“斤”论“两”，灵活组合；","title":"关于云计算"},{"content":"1. Amazon：http://awschina.com.cn/ username：j***e 2. Google：http://cloud.google.com/index.html 通过一个专用的叫做gcutil的linux工具，在shell上申请主机、建立web服务器等操作。如： gcutil getinstance my-first-instance 3. Microsoft：http://www.windowsazure.com/zh-cn/ 4.阿里云：http://www.aliyun.com/ 另外，淘宝的开放平台也做的很不错（似乎与阿里云是两个不同的产品）username：j***e 虚机：申请通过后，可以ssh登陆，fdisk后，fsck.ext4 /dev/**, mount /dev/** /datadisk 存储：API和SDK包 5.Baidu： 6. Sina：http://sinacloud.com/ PAAS 先行，SAE做的不错，宣传很好。IAAS这部分还没完全在线提供 7.盛大：http://www.grandcloud.cn/","title":"[置顶] 云计算概览——产品形态"},{"content":"第 1 部分: 基础架构即服务 本文介绍三个云类别中的第一个：基础架构即服务（infrastructure as a service，IaaS）。IaaS 的一些关键概念包括： 云爆发（cloudbursting） 多租户计算（multi-tenant computing ） 资源共用（resources pooling） 虚拟机监控程序（hypervisor） 最重要的是了解 IaaS 与众不同的两个方面：弹性和虚拟化。 IaaS 的价值 对于企业而言，IaaS 的巨大价值通过云爆发（cloudbursting） 概念实现 — 云爆发是指当需要的计算资源最多时将任务卸载到云环境的过程。云爆发促成的资本节约潜力巨大，因为企业无需额外投资利用率很低的服务器，那些服务器一年中只有两三次使用 70% 的容量，其余时间仅有 7-10% 的负荷。 但是，对于要在这方面利用 IaaS 优势的企业而言，IT 部门必须能够构建和实现能够将一些流程重新分配到一个 IaaS 云的软件。要构建和实现能够管理这种再分配流程的软件，需要考虑 4 个重要事项： 事实证明，如果某个供应商可能会停业，那么针对该供应商的专有 IaaS 进行开发将是一个代价不菲的错误。 编写良好的资源分配软件通常比较复杂，需要顶尖的开发人员资源，这种资源的成本不会低廉。预先为您能找到的最好资源准备更多预算将为您自己和您的组织节约大量时间、减少挫折并消除预料之外的费用。 您需要将什么发送到云并在云中处理？将个人身份、财务信息和医疗保健之类的数据发送到云将使您面临违反美国 Sarbanes-Oxley (SOX) Act、Payment Card Industry (PCI) 或 Health Insurance Portability and Accountability Act (HIPAA) 法规的风险。 务必理解转移企业日常运营关键流程的危险。一个好主意是事先绘制一张包含三列的表，第一列是涉及合规性关键数据的流程，第二列是涉及业务关键任务的流程，第三列是涉及非关键任务的流程。然后，计划在第一阶段只让软件卸载第三列中的项目。 另外，组织需要注意云计算市场的供应商锁定（lock-in）状态。拥有可以从数据中心移动到云环境和在供应商的云之间移动的虚拟机（VM）对于企业而言可能是一种资产，但这需要供应商支持一种标准文件格式，而供应商通常不愿意那样做。 而实际情况是，目前没有一种公开规范或位于一个标准组织之下的规范。换句话说，目前没有一种真正标准化的格式，这种情况的结果至多是使事情变得复杂，原因是没有人保证您的构建基于的格式将来会受到支持。但是，有一点值得注意，假如这种新格式的规范是公开的，或者您拥有访问它的权限，那么将一种虚拟设备移植到另一种格式通常是可行的。令人感到欣慰的是，最近在对 Open Virtualization Format (OVF) 的支持方面取得了重大进展，OVF 很有可能成为标准。另一个有希望的候选项是 Virtual Machine Disk (VMDK) 格式。VMDK 最初是 VMware 的一种专有格式，但现在它公开了，并受到了几个第三方组织的支持。 基础架构即资产 为展示云计算的演变过程，我们来回顾一下汽车工业在过去 50 年内的发展历程。在上世纪 60 年代到 70 年代，汽车制造商的相对优势完全取决于马力和扭矩。但是，到了 80 年代，事实证明这种模式不利于市场和环境，这迫使模式从基础架构即资产转移到基础架构即服务。 类似地，大量成功的公司在过去 50 年之内花费大量宝贵时间和资源来构建基础架构，其目标是通过创建一个更大、更快、更强的网络来获取战胜其竞争对手的竞争优势。IT 行业中的 “基础架构即资产” 范式拥有上世纪六七十年代的 “暴力跑车（muscle cars ）” 所拥有的相同或类似的低效率和不利特征。对于企业计算，这些低效率包括： 大量未使用的计算能力和容量，它们耗费的成本与大型、昂贵的数据中心中的硬件消耗的大量空间相关联。 昂贵的人力资源需求，包括要求基础架构资产（服务器、路由器、交换机等）所在的数据中心的网络管理员进行 24 小时监控。 旨在应对高水平能源浪费的 Green Computing 计划的一个巨大障碍。 为帮助您理解云计算的这三个类别，我创建了一个跨概念矩阵供您参考（参见 表 1）。范式（paradigm） 是大多数用户遵循的模式。如前所述，IaaS 标志着从 “基础架构即资产” 到 “基础架构即服务” 的转变。云计算的其他两个类别（见 表 1）也标志着范式转变。对于 Platform as a Service (PaaS)，转变来自 “平台即资产” 范式，该范式的特征是大量采购许可。同样的转变也适用 Software as a Service (SaaS)，这种转变是从 “软件以许可形式作为组织资产” 到 “软件以服务形式提供”。本系列第 2 和第 3 部分将分别讨论 PaaS 和 SaaS。 表 1. 三个云计算类别的跨概念矩阵 IaaS 的主要方面 与其将互联网想象成一个单一的全球云，将其想象为由许多云组成的一个系统（比如一个暴风雨云）可能更准确。通过这种比喻，就可以从逻辑上断定：闪电是云际通信的天气系统等价物。假设那些云以一种系统方式相互交互，创建一个单一结果：互联网，从这个意义上讲，上述比喻可能更准确。 但互联网不太可能只由一个云组成 — 至少在不远的将来不太可能 — 原因是云计算标准缺乏，且企业也没有进行长期投资以消除供应商锁定的明显尝试。不管怎样，如果它不是有利于资本主义精神的创新，云计算也无法发展到今天的程度。也许有一天，互联网真的能成为一个单一、互联的云，在那个云中：虚拟机可以轻松转移到 “那个云”，而不必担心文件格式；互联的 VM 集群可以跨服务提供商得到管理 — 只需通过一个界面即可实现。但在此之前，我们还是认为互联网由很多云组成。（具有讽刺意味的是，我正在使用 Apple MobileMe 云来存储这篇文章，这样我才能跨几个设备处理它。） 了解弹性基础架构 弹性是 IaaS 的首要关键方面。为了阐述弹性的概念，我需要您展开想象。假设云由一些粘在一起的棉花糖簇组成，这样人们就可以坐在它们上面。每个棉花糖都能承载一定数量的人，具体取决于组成云的棉花糖簇的数量和那些簇中包含的棉花糖的数量。随着越来越多的人登上棉花糖云，您可以通过粘贴更多的棉花糖来扩展棉花糖簇，增加表面面积。您可能已经明白，人代表需要计算资源的应用程序，比如承载网站并运行软件的资源。棉花糖簇代表 VM 集群，每个棉花糖代表一个 VM。 尽管这听起来有点像 Seuss 博士的书中可能出现的内容，但它提供了一种方法来理解许多黑魔法（dark art）考虑的一个概念：弹性集群化（elastic clustering）。集群化几个物理服务器来形成一个虚拟云称为云集群化（cloud clustering），如果它真是一种黑魔法，则精通程度通过一位艺术家的系统设计的可伸缩性来衡量。 我们来看一个例子。假设您是一位为美国政府工作的统计研究员。政府有点人手不足，您刚刚接受一个任务，需要编辑最近的美国人口统计的所有数据。您负责制定必要的统计数据，以便议会能够制定关于经济恢复资金分配和从现在起三天内的税收金额的重要决策。毋庸讳言，这是一项非常重要的工作，您的时间有点紧张。而且，您必须处理的数据量简直是个天文数字，您刚刚发现，编辑那些统计数据需要的计算资源需要 IT 部门三周时间才能准备好！ 这种问题正是您可以使用 IaaS 轻松缓解的。事实上，使用 IaaS，您可以在一小时之内完成全美人口普查数据分析。您首先创建一个服务器的单个实例，这个服务器包含在数据上运行查询需要的数据库软件。这个实例称为一个映像。 当您部署映像并将数据导入数据库之后，就可以根据需要复制那个映像任意多次，并开始运行您的数据处理任务。当任务运行时，您可以手动或自动添加和移除资源。例如，如果计算任务的运行速度不够快，只需将更多机器实例副本添加到集群。 理解弹性概念之后，现在我们来看看 IaaS 的第二个主要方面：虚拟化。 机器虚拟化 Sergey Brin 和 Larry Page — Google 的创始人 — 早在 1995 年就有了正确的想法，当时他们每天晚上都在斯坦福大学的计算机科学大楼后面的废料箱里翻检，找出被人忽略的计算机零件。他们将那些随意的、基于 x86 的计算机零件带回宿舍，将它们添加到托管具有传奇色彩的 “爬网蛛” 的 Frankenstein 机器上，爬网蛛 — 两次 — 记录下了斯坦福市的整个网络 。 今天，Google 预计在 12 个主要数据中心拥有超过 100 万台 x86 服务器，在各大洲拥有约 20 个小型数据中心。那是一个非常大的云。两个系统设计关键因素曾在 1995 年允许他们伸缩他们的 “宿舍怪兽”，而它们仍然适用今天的 Google 网络中的一百多万台服务器。直到今天，Google 仍然继续使用廉价的 x86 零件，而不是许多公司数据中心中昂贵得多的企业服务器组件。其次，故障转移、冗余性、监控、集群化和其他基础架构管理任务通过在操作系统层之下运行的一个虚拟系统来处理，而不是使用负载平衡器之类的独立硬件来处理类似任务。 IaaS 很容易定位，因为它通常是独立于平台的。IaaS 有一个硬件和软件资源组合组成。IaaS 软件是低级代码，独立于操作系统运行 — 称为虚拟机监控程序 — 并负责管理硬件资源的库存并根据需要分配上述资源（见 图 1）。这个过程称为资源共用（resource pooling）。 虚拟机监控程序实现的资源共用使得虚拟化成为可能，虚拟化使 多租户计算（multi-tenant computing） 成为可能 — 多租户计算概念指由几个组织共享的一个基础架构，这些组织在安全需求和遵从性问题方面有类似的兴趣。 图 1. VMs、虚拟机监控程序和计算机之间的关系 通过 IaaS，您拥有提供处理、存储、网络和其他计算资源的能力，您可以在那里部署和运行任意软件，比如操作系统和应用程序。大多数云计算用例遵循您已经习惯的基础分层结构：一个软件解决方案堆栈或平台被部署在一个网络基础架构上，一些应用程序在那个平台之上运行。但是，虚拟化使得云范式独一无二。 第 2 部分: 平台即服务 平台即服务 (PaaS) 常常是最容易让人迷惑的云计算类别，因为很难识别它，常常把它误认为是基础设施即服务 (IaaS) 或软件即服务 (SaaS)。在这个分三部分的文章系列的第二部分中，了解 PaaS 的特点以及如何在企业中应用它。 PaaS 的独特特点是，它让开发人员可以在驻留的基础设施上构建并部署 web 应用程序。换句话说，PaaS 让您能够使用云基础设施似乎无穷的计算资源。 当然，计算资源的数量看起来无穷只是幻想，限制取决于基础设施的规模。但是，正如在本系列的第一篇中了解到的，Google 基础设施大约包含超过一百万台基于 x86 的计算机。另外，因为用于 PaaS 的基础设施是弹性的（第 1 部分中讨论过这个概念），在需要时云可以扩展以提供更多的计算资源，所以无穷的资源并不完全是想像。 PaaS 对于开发人员的意义 开发人员常常误以为云计算只适用于网络管理员。但是，这个错误的观念忽视了云计算可能给开发和质量保证团队带来的许多好处。 在软件开发过程中，一些东西常常会出问题。以我的经验，设置服务器环境以驻留开发团队要构建的 Web 应用程序可能会带来许多争吵。即使在最大的企业中，通常一位网络管理员要负责为几个开发团队服务。在不使用 PaaS 的情况下，设置开发或测试环境通常需要完成以下任务： 获取并部署服务器。 安装操作系统、运行时环境、源代码控制存储库和必需的所有其他中间件。 配置操作系统、运行时环境、存储库和其他中间件。 转移或复制现有的代码。 测试并运行代码以确保一切正常。 在很多情况下，管理员已经非常忙了，所以让他们抽出时间部署新环境会很困难。对于客户机和服务器端的 web 应用程序开发人员来说，另一个主要问题是在本地复制运行时环境以便执行测试。 现在，想像一下您是使用 PaaS 的开发团队的成员。在这种情况下，您会有一个虚拟机 (VM)，其中包含完整的服务器环境，可以把它放在 USB 闪存驱动器中带在身边。 我希望您把注意力转到第 1 部分中给出的概念交叉矩阵上，使用它作为参考分析 PaaS。表 1 再次给出这个矩阵。 表 1. 三类云计算的概念交叉矩阵 PaaS 的主要成分 了解 PaaS 的最好方法可能是把它分解为主要组件：平台和服务。现在，考虑提供的服务，这称为解决方案堆。也就是说，PaaS 的两个主要成分是计算平台和解决方案堆。 为了说明这两个 “成分”，我们进一步研究一下它们的定义。按照最简单的形式，计算平台 是指一个可以一致地启动软件的地方（只要代码满足平台的标准）。平台的常见示例包括 Windows?、Apple Mac OS X 和 Linux? 操作系统；用于移动计算的 Google Android、Windows Mobile? 和 Apple iOS；以及作为软件框架的 Adobe? AIR? 和 Microsoft? .NET Framework。要记住的重点是，计算平台不是指软件本身，而是指构建并运行软件的平台。图 1 提供一张示意图以帮助理解这种关系。 图 1. 云计算分类与 PaaS 元素之间关系的图形化解释 既然理解了计算平台的概念，现在就来看看什么是解决方案堆。解决方案堆由应用程序组成，这些应用程序有助于开发过程和应用程序部署。这些应用程序是指操作系统、运行时环境、源代码控制存储库和必需的所有其他中间件。 选择提供商 解决方案堆也反映不同 PaaS 公司的差异，在决定采用 PaaS 之前，需要深入考察各个提供商提供的解决方案堆。 在与某家 PaaS 提供商签约之前，您应该问几个基本问题： 它支持哪些框架和语言？理想情况下，PaaS 应该支持基于此平台选用的语言的任何框架。 可以创建多少个应用程序？大多数 PaaS 提供商会根据您签订的计划或服务包限制可以构建的应用程序数量。要确保提供商提供的计划或服务包能够满足您的需要。 允许哪些内容类型？支持 PaaS 的基础设施通常涉及多租用者计算 的概念，也就是说许多 “租用者” 分享单一服务器上的 “空间”，这些空间由系统管理程序 管理的 VM 实例分隔。PaaS 提供商可能会对要驻留的应用程序和内容的类型加以限制。 支持哪些数据库类型？如果您的数据要随应用程序转移，这个问题就是非常重要的。必须确保提供商提供的数据库与您想要用来导入数据的格式兼容。 它是否支持 SSL (HTTPS)？这个问题对于确保安全性非常重要。如果您打算通过应用程序处理事务，但是发现不支持 SSL，您就遇到大麻烦了。 PaaS 剖析 既然已经了解了 PaaS 的基本知识，现在研究一下在比较 PaaS 提供商时应该考虑的特性： 应用程序开发框架。健壮的应用程序开发框架应该基于广泛使用的技术。理想情况下，您应该避免厂商锁定。使用 Java? 技术等开放源码框架通常比较好。 容易使用。PaaS 应该附带容易使用的 WYSIWYG 工具，应该有预先构建的部件、现成的 UI 组件、拖放工具和对某些标准 IDE 的支持。这应该会促进快速的迭代式应用程序开发。 业务流程建模 (BPM) 工具。需要使用强大的 BPM 框架对业务流程进行建模，围绕业务流程构建应用程序。 可用性。应该能够在任何时候从任何地方访问并使用所选的平台。 可伸缩性。平台应该足够智能化，能够利用底层基础设施的弹性计算能力处理应用程序将承受的负载。 安全性。为了有效地防御安全威胁，平台应该解决跨站点脚本、SQL 注入、拒绝服务和通信流加密等问题，并让安全措施完全融入应用程序开发中。另外，平台必须支持单点登录功能，让您能够把它与现有的内部应用程序或其他云应用程序集成起来。 包容性。平台应该能够包容、嵌入和集成在相同平台或其他平台上构建的其他应用程序。 可移植性。平台应该不限制底层基础设施类型，允许公司把应用程序从一个 IaaS 转移到另一个。 移植工具。为了轻松、快速地把数据从陈旧的内部应用程序迁移到基于新平台的应用程序中，平台的工具包中必须有批量导入转换工具。 API。为了执行各种任务，比如用户身份验证、存储和获取文件（例如 Web 应用程序文件和资产）甚至直接调用数据库，平台应该有文档齐全的 API。这让企业能够灵活地创建和定制软件应用程序以与平台交互，从而满足公司的特殊需要。 避免厂商锁定 厂商锁定 (Vendor lock-in) 意味着消费者依赖于某一厂商，除非花费巨大的转换成本，否则无法使用另一厂商的产品。当采用像云计算这样的正在流行起来的新技术时，会增加出现厂商锁定局面的机会。早期的使用者必须很清楚他们将处于什么境地，然后才能够签署长期的 IaaS 和 PaaS 协议。 避免厂商锁定的方法之一是通过 API 和平台技术的标准化。Simple Cloud（见 参考资料）等组织已经开始与参与这个开放源码项目的各种规模的厂商协作，力求让云中的 PHP 保持一致。为了创建 Simple Cloud，Zend Technologies、Microsoft、IBM 和 Rackspace 正在共同努力，其目标是跨不同的平台提供一个抽象层。 Simple Cloud API 的目标是为文件存储、文档存储和简单队列服务创建通用的接口。这让开发人员能够编写出可跨主要云平台移植的应用程序。参与云计算标准化的厂商应该得到赞扬，应该鼓励他们继续努力。在选择为您的公司提供 PaaS 服务的厂商时，我强烈建议优先考虑支持标准化的提供商。标准化会让 IT 部门的工作更轻松，更重要的是，这会节省公司的资金。 为了避免 PaaS 市场上出现厂商锁定，需要支持相同底层 API 的服务提供商。答案很简单：坚持采用专有技术的服务提供商必须同意支持 Simple Cloud 等标准化项目。 第 3 部分: 软件即服务 软件即服务 (SaaS) 为商用软件提供基于网络的访问。您有可能已经使用过 SaaS，即使您当时并不知道。SaaS 的示例包括 Netflix、Photoshop.com、Acrobat.com、Intuit QuickBooks Online、Gmail 和 Google Docs。可能不太明显的 SaaS 实现包括移动应用程序市场中的相当一部分。 SaaS 为企业提供一种降低软件使用成本的方法 — 按需使用软件而不是为每台计算机购买许可证。尤其是考虑到大多数计算机在差不多 70% 的时间是空闲的，SaaS 可能非常有效。企业不必为单一用户购买多个许可证，而是让许可证的使用时间尽可能接近 100%，从而尽可能节省成本。 为了方便，表 1 再次给出本系列第 1 部分中提供的三类服务的概念交叉矩阵。 表 1. 三类云计算的概念交叉矩阵 SaaS 推动 ROI 的四个因素 SaaS 给软件厂商提供了新的机会。尤其是，SaaS 软件厂商可以通过四个因素提高 ROI： 提高部署的速度 增加用户接受率 减少支持的需要 降低实现和升级的成本 部署的速度 在过去，部署传统的桌面应用程序需要很大的工作量。实际上，我曾经多次听到桌面应用程序开发人员把更新他们的应用程序称为 “部署噩梦”。正如 Tariq Ahmed 在 Flex 4 in Action (Manning Press) 的第 1 章中指出的，“要想让数千甚至数万客户机同时运行软件的某一版本，后勤方面的复杂性是非常高的。” Ahmed 说，复杂性这么高，以致于大多数桌面软件开发公司甚至认为这根本不合理或不可行。过去受到这个问题困扰的开发商应该考虑部署软件的 SaaS 版本。但是，妨碍传统软件开发公司进入 SaaS 市场的最大障碍是让桌面应用程序能够作为 SaaS 应用程序运行。在许多情况下，这需要在某种程度上重新编写软件，一些公司觉得这么做成本太高。 这正是向云计算转移的过程比较缓慢且平缓的主要原因之一。在大多数情况下，符合逻辑的解决方案是分阶段地把软件转移到云中，首先以 SaaS 的形式提供原应用程序的高度简化的版本。考虑到开发商对版本控制的控制水平，这么做是很合理的。在这里，分析一下 SaaS 的特点会很有帮助。 您可以看出在云计算与过去的 “LAN 计算” 之间有许多相似之处。典型的 LAN 架构由站内的许多工作站组成，它们常常被称为哑终端，它们通过连接强大的大型机（常常由 IBM 提供）运行应用程序，见 图 1。 图 1. 显示在基本 LAN 中客户机终端与大型机系统的关系的简单示意图 这种计算类型过去非常适合企业，因为 IT 部门能够完全控制版本，可以非常方便地多次部署更新。同样，过去妨碍桌面软件应用程序开发商进行版本控制的后勤障碍在云中也不存在，因为软件在开发公司能够直接访问的基础设施上运行。 考虑到 SaaS 必须能够服务的客户机数量，SaaS 基础设施的规模要比 LAN 大得多。但是，底层的概念是相同的。图 1 所示的大型机能够驻留足够多的软件实例，从而为本地网络中连接它的所有客户机提供服务；而 图 2 所示的云由许多不同的计算机资源组成，它们共同提供计算能力，从而运行为世界各地的客户机提供服务所需的许多软件实例。 图 2. 显示在 SaaS 中客户机设备与云的关系的简单示意图 增加接受率 如果您走出企业，看看 SaaS 对于一般消费者的意义，就会发现以前一些软件的许可证费用太高，而现在 SaaS 让一般消费者能够以合理的价格使用它们。一个好例子是 Adobe 以 SaaS 的形式提供 Adobe? Photoshop?。尽管这项工作是 Adobe 正在做的试验，但是已经取得了一些效果。例如，我注意到在需要执行简单的照片编辑任务时，在我的朋友和家庭成员中越来越多的人开始使用 Photoshop.com 进行基本的照片编辑，而不是启动全功能的版本。出现这种趋势的原因是，不需要完整版本中的功能的人现在可以省钱。与此同时，过去不使用 Photoshop 的人也开始使用 Photoshop.com 了，这给 Adobe 带来了争取新的长期客户的机会，扩大了潜在客户的范围。 SaaS 提供的多种业务模型尤其有吸引力。例如，Intuit 以 SaaS 的形式提供 QuickBooks Online，按月收取服务费。作为经常旅行的企业主，我发现这种服务非常有用，尤其是因为我的业务伙伴住在 400 英里外的另一个州里。同时，Adobe 在 Photoshop.com 和 Acrobat.com 中应用了 SaaS，以 freemium 服务的形式提供软件 — freemium 服务是指一种基于许可证软件产品的 SaaS 缩略版的业务模型。 freemium SaaS 基于的收入模型是，预计免费用户中的一部分最终会觉得软件很有用，他们会升级到启用了更多特性的 SaaS 付费版本，或者购买包含所有特性和功能的桌面版本的许可证。这种方法往往比通过 “受限制的演示” 模式试用软件更好，因为演示模式要求用户在桌面计算机上安装他们可能不会购买的应用程序。另外，如果免费用户中升级的比例低于预期，还可以通过广告进一步补充这个模型。随着云计算的发展，传统的桌面软件厂商经常使用这种方法适应市场的变化。 减少支持的需要 大型客户服务中心的成本很高，不得不支持多种平台会导致支持问题增加，而 SaaS 可以大大缓解这些难题。首先，部署的简便性让开发人员能够在发现 bug 之后很快进行修复，这意味着大多数 bug 可以在大量用户遇到它们之前被修复，这会减少客户支持部门接到的电话数量，提高客户满意度，降低客户流失的可能性。 另外，传统桌面软件应用程序的开发商常常必须支持多种平台。例如，开发商可能必须支持 Windows? 7 和 Apple Mac OS X 10.6 操作系统，添加对第二种操作系统的支持差不多会让开发成本加倍；而且，如果支持这些操作系统的许多不同版本，问题会更多。支持操作系统的多个版本还会产生限制。 例如，如果您要构建一个在 Windows 7 上运行的程序，但是它必须与 Windows XP 兼容，就必须非常小心，要确保特性和功能在这两个版本上都能够运行；否则，就必须把项目分为两个分支，为每个版本开发单独的代码，这会不可避免地降低生产力和效率，延长完成项目的预期时间。让业务执行官心跳加速的最快方法之一是，告诉他后两年的预期开发进度要减慢一半儿。另外，支持不同的操作系统和这些操作系统的不同版本会增加预算；这个问题和其他因素导致目前软件开发项目的失败率非常高。 降低实现和升级的成本 SaaS 推动 ROI 的第四个因素与第一个因素有点儿相似。但是，部署的速度 是指快速、简便地部署应用程序更新所带来的好处。与之相反，降低实现和升级的成本 是指开发公司由于能够控制版本和运行软件的基础设施所获得的经济利益。 因为开发商可以控制运行软件的平台（平台通常对于用户完全透明），所以他们不必负担在多个平台上测试和部署 bug 补丁和新特性的额外开销，这会节省大量资金。这让 SaaS 应用程序的升级成本更低。节省的大量时间和资金让开发商有机会更好地响应客户的请求并增强易用性，从而提高客户满意度，降低客户流失的可能性，这会带来间接的经济利益。 SaaS 和用户体验设计 SaaS 应用程序代表着一种新一代应用程序设计方式。尽管在我目前看到的文档中没有明确地指出，但是看起来 SaaS 程序也带来了一种新的 UI 设计方式，这种方式与大多数其他行业中的产品设计流程更一致。这种方式包含一个称为用户体验设计 (UXD) 的流程，在这个流程中由产品团队而不是开发团队设计 GUI。 UXD 的主要目的是，确定哪些特性会让应用程序对于目标客户最有价值，并在设计中融入这些知识。尽管对于是否应该在所有类型的软件的开发中都执行这个流程有争议，但是在 SaaS 应用程序开发中这种做法非常普遍。出现这种现象的原因可能是，SaaS 可以实现的业务模型与传统软件不同，需要执行 UXD；而且通过开发 SaaS 可以节省大量时间和资金，让开发商有能力执行 UXD。 SaaS 对于开发人员的意义 正如您看到的，完全成熟的云计算对于企业和消费者来说都是巨大的转变，必须克服很多难题。因此，这个转变过程会花费一段时间，要经过几个阶段的渐进迁移。在这次计算模式演变期间，软件开发商必须能够适应变化的环境，从而继续满足企业和消费者的需要。 随着云计算的发展，企业必须能够适应变化的环境，而软件程序员需要扩充他们的技能并了解 SaaS 编程模型，从而适应企业的要求。云计算不仅仅是通过虚拟化提供可伸缩的基础设施和平台可移植性。它还把软件提升到全新的水平，可以认为它代表着新一代计算机编程模型。这一论断可能比较大胆，但是考虑到本文中讨论的 SaaS 提供的机会，这并非没有根据。 例如，一般消费者能够负担软件费用意味着潜在客户更多。能够控制平台、基础设施和软件版本会直接节省成本。显然，SaaS 很快会带来某种程度的 “民主”，也就是说中小型的开发企业也能够与大型开发商在同一领域中竞争。 结束语 在阅读之后，我希望您对云计算对于您的职业前途和企业意味着什么有了更清晰的认识。","title":"云计算服务模型"},{"content":"根据美国科技博客了解到，过去几年一批云计算公司涌现并兴盛，后来者的生存空间遭到挤压。对于初创公司而言，若希望受到人们的关注，获得资金支持并取得成功，需要具备独特的竞争优势。 以下是该博客总结出的创立于2011年，且有机会在2012年实现快速发展的10家云计算初创公司。 1. AppFog 2011年多家专注于PaaS(Platform-as-a-Service)平台即服务模式的初创公司成立，AppFog是其中之一。其他公司相比，AppFog有些独特，因为其采用开源PaaS项目Cloud Foundry。AppFog的前身为PHP Fog，在可以支持多个新编程语言后，公司选择更名。2012年该公司将在大力发展Cloud Foundry的同时，致力于提供最佳的用户体验。 2. Bromium Bromium产品仍处于保密状态，但其计划使用虚拟化技术(Virtualization Technology)打造确保所有类型终端（如台式机、手机和平板电脑）安全连接企业网络的产品。在确保云服务器安全的同时，企业消费化(consumerization)的来临意味着终端安全同样重要。Bromium联合创始人之一的西门·克洛斯比(Simon Crosby)还帮助创建了XenSource，并担任Citrix Systems公司数据中心与云部门首席技术官。 3. Cloudability Cloudability提供简单但极具价值的服务：通过分析用户提供的云服务套餐流量等信息，为其提供相关数据报表，帮助用户更好地管理云服务支出。随着云服务的普及，企业需要使用简单的工具记录开支情况并节省开支。 4. CloudSigma 云端基础设施即服务(infrastructure-as-a-service)市场激烈，初创公司需要和亚马逊旗下云计算公司亚马逊网络服务(Amazon Web Services)和网络托管服务提供商RackspaceRackspace进行竞争，但是CloudSigma并不畏惧。 5. Kaggle Kaggle是一个致力于解决大规模数据难题的“众包”(crowdsourcing)平台，汇聚全世界逾1.7万顶尖科学家的智慧，共同解决那些最深奥的问题。 6. Nebula Nebula并不是唯一一家推出开源OpenStack云计算平台商用版本的公司，其将OpenStack和一个最佳化的硬件平台相连接，并注重提高硬件的即插即用性(Plug-and-play)。Nebula的创始人包括美国航天局(NASA)前首席技术官克里斯·坎普（Chris Kemp）。 7. Parse Parse致力于成为移动应用的PaaS专家，原因是越来越多的人生活已经离不开移动设备。相对于竞争对手Stackmob、Heroku和AppFog，Parse的优势并不明显，但其已经制定正确方案。 8.Zillabyte Zillabyte仍处于保密状态，其希望向用户提供Data sets和算法服务。该服务将首先关注网络数据以及基于文本的算法，随后关注新型数据和算法。Zillabyte由三人共同创办，包括两位前谷歌软件工程师和一位前英特尔工程师。 9. SolidFire 闪存阵列初创公司SolidFire的目标客户是基于SSD存储的供应商，其推出的全固态存储设备可以为云服务供应商提供高性能、高效率存储服务。 10. ScaleXtreme 每个人需要服务器管理软件，但不是每个人都需要传统软件供应商提供的大型、昂贵的软件，或管理软件。ScaleXtreme为用户提供云服务，管理物理服务器和云服务器。该公司表示，部分云服务提供商有意使用其增值服务为用户提供更好的体验。 11、象过河软件公司 中国云计算公司：郑州象过河软件技术有限公司是是一家面向企业、政府信息化整体解决方案提供商，是“河南省云计算联盟”发起人和常任理事单位，公司联合河南电信公司、SUN公司联合建设“河南省云计算实验”室，并对社会开放。公司提供面向中小型企业管提供系列管理软件的云服务（官网：http://www.siyouyun.net ）。","title":"2012年最值得关注的10家云计算公司"},{"content":"    2011年3月曾经写了一篇《三种云计算模式之间的关系探讨（一）》（参见：http://blog.sina.com.cn/s/blog_753daa3b0100pd99.html），之后很长时间一直在继续思考这样的话题，但都没有能够说服我自己的观点出来，所以，宁愿不写。最近随着对云计算认识的加深和思考的深入，发现从技术实现的角度来谈他们三者的关系可能并不合适。这三种模式：IaaS、PaaS和SaaS或许都只是云计算发展和演进的一个切入点而已。可能重要的不是他们三者的关系，而是给他们各自满足了IT资源的三个不同需求。严格地来讲，这三者都只是云计算生态系统的三个模块。根据我们的理解，云计算其实是所有IT资源通过网络以服务的方式提供给客户的一种商业模式。基础设施、平台和应用软件等是IT资源的三个主要构成。因此完整的云计算应该是包含了这三者的，而且不仅仅是这三者。     对一般用户来讲，容易接受的是软件应用，即SaaS，因为不需要大量的专业知识就可以直接使用。这部分用户数量最大，需求最旺盛，但需求种类也是纷繁复杂。这也是云计算价值最大的一块，不光可以让成千上万的开发组织或者个人开发者获得收益，也让更多的消费者得到了极大的满足。SaaS在初期可以不用构建在IaaS上或者PaaS上，但在未来将不可避免地会采用cloud-native或cloud-ready的方式进行开发，即必定会构建在IaaS上或者PaaS上。为何这么说？逻辑很简单，PaaS或者IaaS给SaaS提供了更多的价值。 一者是因为IaaS或者PaaS所能给SaaS模式带来的弹性扩展等优势，也让开发企业或者个人能够更专注在自己的核心业务上从而能够更好地发挥自己的优势。例如Zynga，作为一家曾经创造了成长奇迹游戏公司，它最大的竞争理念就是“快”，怎么获得这个优势呢？他们的迭代开发是一方面，另一方面就是他们的开发都是基于IaaS平台的，初始是使用AWS，后来自建了自己的基础设施云。而使用应用来调动PaaS资源或者IaaS资源也应该是以后发展的主流，例如Dropbox，实际上就是S3的资源调动工具。     至于PaaS，相对的用户群就比较专业，主要是针对一些IT应用软件的开发组织或者个人开发者的。它提供了一些开发工具、SDK、数据库等，并提供了开发所需要的一些计算、存储资源。正如以前在（一）中所说， 其也不一定就要基于IaaS平台，但未来是一定基于IaaS的。逻辑是和SaaS最终必定会构建在IaaS上或者PaaS上一样，都是价值驱动的。PaaS这块可以做的工作很多，可以说多数工业级的解决方案都可以利用PaaS来进行解决，例如渲染、3D设计等。Cloudfoundry、GAE等给我们提供了PaaS的范本。    那么从上面的分析可以得出，无论是SaaS还是PaaS，最佳的承载方式都是在IaaS上，正如I所代表的基础设施的字面含义一样，这是云计算时代应用和平台的基础，只有有了这个基础，PaaS和SaaS类的模式才能如虎添翼，得到大发展。Salesforce.com的十多年的发展验证了这个说法。作为云计算高地的美国的发展经验也表明，在以AWS为首的公有云基础设施提供商的逐渐成熟下，会更好地激发出PaaS和SaaS的发展。在这里不具体展开了。    综上所述，现在的云计算的三种模式并不是相互独立的。对客户而言，他们一起满足了各种客户的不同需求；从技术上来说，他们有着紧密的内部联系，虽然都不是不可或缺，但却是一个有机整体的不同部分，缺少任何一块，都会使云计算这个系统残缺不齐，而不能成为共生互补的生态系统。","title":"三种云计算模式之间的关系探讨（二）"},{"content":"hive函数参考手册 原文见：https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF 1.内置运算符 1.1关系运算符 运算符 类型 说明 A = B 所有原始类型 如果A与B相等,返回TRUE,否则返回FALSE A == B 无 失败，因为无效的语法。 SQL使用”=”，不使用”==”。 A <> B 所有原始类型 如果A不等于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。 A < B 所有原始类型 如果A小于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。 A <= B 所有原始类型 如果A小于等于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。 A > B 所有原始类型 如果A大于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。 A >= B 所有原始类型 如果A大于等于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。 A IS NULL 所有类型 如果A值为”NULL”，返回TRUE,否则返回FALSE A IS NOT NULL 所有类型 如果A值不为”NULL”，返回TRUE,否则返回FALSE A LIKE B 字符串 如果A或B值为”NULL”，结果返回”NULL”。字符串A与B通过sql进行匹配，如果相符返回TRUE，不符返回FALSE。B字符串中 的”_”代表任一字符，”%”则代表多个任意字符。例如： (‘foobar’ like ‘foo’)返回FALSE，（ ‘foobar’ like ‘foo_ _ _’或者 ‘foobar’ like ‘foo%’)则返回TURE A RLIKE B 字符串 如果A或B值为”NULL”，结果返回”NULL”。字符串A与B通过java进行匹配，如果相符返回TRUE，不符返回FALSE。例如：（ ‘foobar’ rlike ‘foo’）返回FALSE，（’foobar’ rlike ‘^f.*r$’ ）返回TRUE。 A REGEXP B 字符串 与RLIKE相同。 1.2算术运算符 运算符 类型 说明 A + B 所有数字类型 A和B相加。结果的与操作数值有共同类型。例如每一个整数是一个浮点数，浮点数包含整数。所以，一个浮点数和一个整数相加结果也是一个浮点数。 A – B 所有数字类型 A和B相减。结果的与操作数值有共同类型。 A * B 所有数字类型 A和B相乘，结果的与操作数值有共同类型。需要说明的是，如果乘法造成溢出，将选择更高的类型。 A / B 所有数字类型 A和B相除，结果是一个double（双精度）类型的结果。 A % B 所有数字类型 A除以B余数与操作数值有共同类型。 A & B 所有数字类型 运算符查看两个参数的二进制表示法的值，并执行按位”与”操作。两个表达式的一位均为1时，则结果的该位为 1。否则，结果的该位为 0。 A|B 所有数字类型  运算符查看两个参数的二进制表示法的值，并执行按位”或”操作。只要任一表达式的一位为 1，则结果的该位为 1。否则，结果的该位为 0。  A ^ B 所有数字类型 运算符查看两个参数的二进制表示法的值，并执行按位”异或”操作。当且仅当只有一个表达式的某位上为 1 时，结果的该位才为 1。否则结果的该位为 0。 ~A 所有数字类型 对一个表达式执行按位”非”（取反）。 1.3逻辑运算符 运算符 类型 说明 A AND B 布尔值 A和B同时正确时,返回TRUE,否则FALSE。如果A或B值为NULL，返回NULL。 A && B 布尔值 与”A AND B”相同 A OR B 布尔值 A或B正确,或两者同时正确返返回TRUE,否则FALSE。如果A和B值同时为NULL，返回NULL。 A | B 布尔值 与”A OR B”相同 NOT A 布尔值 如果A为NULL或错误的时候返回TURE，否则返回FALSE。 ! A 布尔值 与”NOT A”相同 1.4复杂类型函数 函数 类型 说明 map (key1, value1, key2, value2, …) 通过指定的键/值对，创建一个map。 struct (val1, val2, val3, …) 通过指定的字段值，创建一个结构。结构字段名称将COL1，COL2，… array (val1, val2, …) 通过指定的元素，创建一个数组。 1.5对复杂类型函数操作 函数 类型 说明 A[n] A是一个数组，n为int型 返回数组A的第n个元素，第一个元素的索引为0。如果A数组为['foo','bar']，则A[0]返回’foo’和A[1]返回”bar”。 M[key] M是Map<K, V>，关键K型 返回关键值对应的值，例如mapM为 \\{‘f’ -> ‘foo’, ‘b’ -> ‘bar’, ‘all’ -> ‘foobar’\\}，则M['all'] 返回’foobar’。 S.x S为struct 返回结构x字符串在结构S中的存储位置。如 foobar \\{int foo, int bar\\} foobar.foo的领域中存储的整数。 2.内置函数 2.1数学函数 返回类型 函数 说明 BIGINT round(double a) 四舍五入 DOUBLE round(double a, int d) 小数部分d位之后数字四舍五入，例如round(21.263,2),返回21.26 BIGINT floor(double a) 对给定数据进行向下舍入最接近的整数。例如floor(21.2),返回21。 BIGINT ceil(double a), ceiling(double a) 将参数向上舍入为最接近的整数。例如ceil(21.2),返回23. double rand(), rand(int seed) 返回大于或等于0且小于1的平均分布随机数（依重新计算而变） double exp(double a) 返回e的n次方 double ln(double a) 返回给定数值的自然对数 double log10(double a) 返回给定数值的以10为底自然对数 double log2(double a) 返回给定数值的以2为底自然对数 double log(double base, double a) 返回给定底数及指数返回自然对数 double pow(double a, double p) power(double a, double p) 返回某数的乘幂 double sqrt(double a) 返回数值的平方根 string bin(BIGINT a) 返回二进制格式，参考：http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_hex string hex(BIGINT a) hex(string a) 将整数或字符转换为十六进制格式。参考：http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_hex string unhex(string a) 十六进制字符转换由数字表示的字符。 string conv(BIGINT num, int from_base, int to_base) 将指定数值，由原来的度量体系转换为指定的试题体系。例如CONV(‘a’,16,2),返回。参考：’1010′ http://dev.mysql.com/doc/refman/5.0/en/mathematical-functions.html#function_conv double abs(double a) 取绝对值 int double pmod(int a, int b) pmod(double a, double b) 返回a除b的余数的绝对值 double sin(double a) 返回给定角度的正弦值 double asin(double a) 返回x的反正弦，即是X。如果X是在-1到1的正弦值，返回NULL。 double cos(double a) 返回余弦 double acos(double a) 返回X的反余弦，即余弦是X，，如果-1<= A <= 1，否则返回null. int double positive(int a) positive(double a) 返回A的值，例如positive(2)，返回2。 int double negative(int a) negative(double a) 返回A的相反数，例如negative(2),返回-2。 2.2收集函数 返回类型 函数 说明 int size(Map<K.V>) 返回的map类型的元素的数量 int size(Array<T>) 返回数组类型的元素数量 2.3类型转换函数 返回类型 函数 说明 指定 “type” cast(expr as <type>) 类型转换。例如将字符”1″转换为整数:cast(’1′ as bigint)，如果转换失败返回NULL。 2.4日期函数 返回类型 函数 说明 string from_unixtime(bigint unixtime[, string format]) UNIX_TIMESTAMP参数表示返回一个值’YYYY- MM – DD HH：MM：SS’或YYYYMMDDHHMMSS.uuuuuu格式，这取决于是否是在一个字符串或数字语境中使用的功能。该值表示在当前的时区。 bigint unix_timestamp() 如果不带参数的调用，返回一个Unix时间戳（从’1970- 01 – 0100:00:00′到现在的UTC秒数）为无符号整数。 bigint unix_timestamp(string date) 指定日期参数调用UNIX_TIMESTAMP（），它返回参数值’1970- 01 – 0100:00:00′到指定日期的秒数。 bigint unix_timestamp(string date, string pattern) 指定时间输入格式，返回到1970年秒数：unix_timestamp(’2009-03-20′, ‘yyyy-MM-dd’) = 1237532400 参考：http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html string to_date(string timestamp) 返回时间中的年月日： to_date(“1970-01-01 00:00:00″) = “1970-01-01″ string to_dates(string date) 给定一个日期date，返回一个天数（0年以来的天数） int year(string date) 返回指定时间的年份，范围在1000到9999，或为”零”日期的0。 int month(string date) 返回指定时间的月份，范围为1至12月，或0一个月的一部分，如’0000-00-00′或’2008-00-00′的日期。 int day(string date) dayofmonth(date) 返回指定时间的日期 int hour(string date) 返回指定时间的小时，范围为0到23。 int minute(string date) 返回指定时间的分钟，范围为0到59。 int second(string date) 返回指定时间的秒，范围为0到59。 int weekofyear(string date) 返回指定日期所在一年中的星期号，范围为0到53。 int datediff(string enddate, string startdate) 两个时间参数的日期之差。 int date_add(string startdate, int days) 给定时间，在此基础上加上指定的时间段。 int date_sub(string startdate, int days) 给定时间，在此基础上减去指定的时间段。 2.5条件函数 返回类型 函数 说明 T if(boolean testCondition, T valueTrue, T valueFalseOrNull) 判断是否满足条件，如果满足返回一个值，如果不满足则返回另一个值。 T COALESCE(T v1, T v2, …) 返回一组数据中，第一个不为NULL的值，如果均为NULL,返回NULL。 T CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END 当a=b时,返回c；当a=d时，返回e，否则返回f。 T CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END 当值为a时返回b,当值为c时返回d。否则返回e。 2.6字符函数 返回类型 函数 说明 int length(string A) 返回字符串的长度 string reverse(string A) 返回倒序字符串 string concat(string A, string B…) 连接多个字符串，合并为一个字符串，可以接受任意数量的输入字符串 string concat_ws(string SEP, string A, string B…) 链接多个字符串，字符串之间以指定的分隔符分开。 string substr(string A, int start) substring(string A, int start) 从文本字符串中指定的起始位置后的字符。 string substr(string A, int start, int len) substring(string A, int start, int len) 从文本字符串中指定的位置指定长度的字符。 string upper(string A) ucase(string A) 将文本字符串转换成字母全部大写形式 string lower(string A) lcase(string A) 将文本字符串转换成字母全部小写形式 string trim(string A) 删除字符串两端的空格，字符之间的空格保留 string ltrim(string A) 删除字符串左边的空格，其他的空格保留 string rtrim(string A) 删除字符串右边的空格，其他的空格保留 string regexp_replace(string A, string B, string C) 字符串A中的B字符被C字符替代 string regexp_extract(string subject, string pattern, int index) 通过下标返回正则表达式指定的部分。regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 2) returns ‘bar.’ string parse_url(string urlString, string partToExtract [, string keyToExtract]) 返回URL指定的部分。parse_url(‘http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1′, ‘HOST’) 返回：’facebook.com’ string get_json_object(string json_string, string path) select a.timestamp, get_json_object(a.appevents, ‘$.eventid’), get_json_object(a.appenvets, ‘$.eventname’) from log a; string space(int n) 返回指定数量的空格 string repeat(string str, int n) 重复N次字符串 int ascii(string str) 返回字符串中首字符的数字值 string lpad(string str, int len, string pad) 返回指定长度的字符串，给定字符串长度小于指定长度时，由指定字符从左侧填补。 string rpad(string str, int len, string pad) 返回指定长度的字符串，给定字符串长度小于指定长度时，由指定字符从右侧填补。 array split(string str, string pat) 将字符串转换为数组。 int find_in_set(string str, string strList) 返回字符串str第一次在strlist出现的位置。如果任一参数为NULL,返回NULL；如果第一个参数包含逗号，返回0。 array<array<string>> sentences(string str, string lang, string locale) 将字符串中内容按语句分组，每个单词间以逗号分隔，最后返回数组。 例如sentences(‘Hello there! How are you?’) 返回：( (“Hello”, “there”), (“How”, “are”, “you”) ) array<struct<string,double>> ngrams(array<array<string>>, int N, int K, int pf) SELECT ngrams(sentences(lower(tweet)), 2, 100 [, 1000]) FROM twitter; array<struct<string,double>> context_ngrams(array<array<string>>, array<string>, int K, int pf) SELECT context_ngrams(sentences(lower(tweet)), array(null,null), 100, [, 1000]) FROM twitter; 3.内置的聚合函数（UDAF） 返回类型 函数 说明 bigint count(*) , count(expr), count(DISTINCT expr[, expr_., expr_.]) 返回记录条数。 double sum(col), sum(DISTINCT col) 求和 double avg(col), avg(DISTINCT col) 求平均值 double min(col) 返回指定列中最小值 double max(col) 返回指定列中最大值 double var_pop(col) 返回指定列的方差 double var_samp(col) 返回指定列的样本方差 double stddev_pop(col) 返回指定列的偏差 double stddev_samp(col) 返回指定列的样本偏差 double covar_pop(col1, col2) 两列数值协方差 double covar_samp(col1, col2) 两列数值样本协方差 double corr(col1, col2) 返回两列数值的相关系数 double percentile(col, p) 返回数值区域的百分比数值点。0<=P<=1,否则返回NULL,不支持浮点型数值。 array<double> percentile(col, array(p~1,,\\ [, p,,2,,]…)) 返回数值区域的一组百分比值分别对应的数值点。0<=P<=1,否则返回NULL,不支持浮点型数值。 double percentile_approx(col, p[, B]) Returns an approximate p^th^ percentile of a numeric column (including floating point types) in the group. The B parameter controls approximation accuracy at the cost of memory. Higher values yield better approximations, and the default is 10,000. When the number of distinct values in col is smaller than B, this gives an exact percentile value. array<double> percentile_approx(col, array(p~1,, [, p,,2_]…) [, B]) Same as above, but accepts and returns an array of percentile values instead of a single one. array<struct\\{‘x’,'y’\\}> histogram_numeric(col, b) Computes a histogram of a numeric column in the group using b non-uniformly spaced bins. The output is an array of size b of double-valued (x,y) coordinates that represent the bin centers and heights array collect_set(col) 返回无重复记录 4.内置表生成函数（UDTF） 返回类型 函数 说明 数组 explode(array<TYPE> a) 数组一条记录中有多个参数，将参数拆分，每个参数生成一列。   json_tuple get_json_object语句：select a.timestamp, get_json_object(a.appevents, ‘$.eventid’), get_json_object(a.appenvets, ‘$.eventname’) from log a; json_tuple语句: select a.timestamp, b.* from log a lateral view json_tuple(a.appevent, ‘eventid’, ‘eventname’) b as f1, f2 explode示例： 数组 SQL 返回 myCol  [1,2]  [3,4] SELECT explode(myCol) AS myNewCol FROM myTable myNewCol 1  2  3  4","title":"hive 数据类型与函数参考手册"},{"content":"MongoHQ服务是类似于Amazon S3的云服务，只不过它专注于在云中托管MongoDB实例。可以访问http://mongohq.com来注册服务。小于16MB的数据库是免费的，可以用它来运行本章的示例。在线用户界面易于使用，让你可以快速地浏览数据。 设置好MongoHQ账户之后，应该使用在线的用户界面创建名为Lifestream的数据库。你会得到数据库服务器的名称和端口号，对于每个MongoHQ数据库，这些信息是不同的。还必须输入访问数据库的用户名和密码。在线界面将提供数据库登录的详细信息。 在下面的示例中，会把完整的Lifestream应用程序所需的所有文件放在一起。首先，需要得到配置信息，测试到MongoHQ服务的连接，并验证最基本的功能可以实际工作。在第9章，构建了图片上传功能。现在，可以将它放到一边，集中精力完成用户注册功能。介绍将用户添加到系统的基本概念是引出其余功能必不可少的。在本示例中专注于核心功能，下面将完成一个非常简单的用户注册功能。这里不使用密码，而是为每个物理设备分配一个唯一的令牌。最终，将使用OAuth令牌进行用户注册，但现在要实现一个唯一的设备令牌。下面是具体操作步骤。 (1) 进入lifestream/server文件夹(继续使用和第8章、第9章一样的文件夹结构)，运行下面的npm模块安装命令。 npm install connectnpm install mongodbnpm install knox  npm install uuid  npm install oauth npm install url npm install requestnpm install cookies 前面已经安装了一些模块，npm将报告已安装的版本信息或将模块升级到最新的版本。 (2) 新建一个名为config.js的文件来存储服务器的配置信息，将下面的代码插入到文件中，用自己的配置信息替换突出显示的内容。  exports.mongohq   = {   username:''YOUR_DB_USERNAME',       password: 'YOUR_DB_PASSWORD',  name:     'YOUR_DB_NAME',  host:     'YOUR_DB_HOST',  port:     YOUR_DB_PORT} exports.amazon  = {   s3bucket: 'YOUR_S3_BUCKET_NAME',  keyid:    'YOUR_AWS_KEY_ID',      secret:   'YOUR_AWS_SECRET'} exports.twitter = {   keyid:  'YOUR_TWITTER_KEY_ID',   secret: 'YOUR_TWITTER_SECRET'} exports.facebook = {   keyid:  'YOUR_FACEBOOK_KEY_ID',  secret: 'YOUR_FACEBOOK_SECRET'} exports.server = 'YOUR_IP_ADDRESS'exports.max_stream_size = 100 代码片段位于lifestream/server/config.js (3) 使用下面的更新版本替换lifestream/server文件夹下common.js文件的内容。 var util                        = exports.util                  = require('util')var connect         =exports.connect       = require('connect')var knox                        = exports.knox                  = require('knox')var uuid                        =exports.uuid                  =require('node-uuid')var oauth                   =exports.oauth             =require('oauth')var url                         =exports.url                       =require('url')var request         =exports.request       = require('request')var Cookies         =exports.Cookies       = require('Cookies') var config = exports.config =require('./config.js')  // JSON functions exports.readjson = function(req,win,fail) {  var bodyarr= []; req.on('data',function(chunk){   bodyarr.push(chunk);  })  req.on('end',function(){    varbodystr = bodyarr.join('');   util.debug('READJSON:'+req.url+':'+bodystr);    try {      varbody = JSON.parse(bodystr);      win&& win(body);    }    catch(e){      fail&& fail(e)    }  })} exports.sendjson = function(res,obj){ res.writeHead(200,{   'Content-Type': 'text/json',   'Cache-Control': 'private, max-age=0'  });  var objstr= JSON.stringify(obj); util.debug('SENDJSON:'+objstr);  res.end(objstr );} // mongo functions var mongodb = require('mongodb') var mongo = {  mongo:mongodb,  db: null,} mongo.init = function( opts, win, fail ){ util.log('mongo: '+opts.host+':'+opts.port+'/'+opts.name)   mongo.db =     newmongodb.Db(     opts.name,       newmongodb.Server(opts.host, opts.port, {}),     {native_parser:true,auto_reconnect:true});  mongo.db.open(function(){    if(opts.username ) {     mongo.db.authenticate(       opts.username,       opts.password,       function(err){          if(err) {           fail && fail(err)          }         else {           win && win(mongo.db)          }        })    }    else {      win&& win(mongo.db)    }  },fail)} mongo.res = function( win, fail ){  returnfunction(err,res) {    if( err ){     util.log('mongo:err:'+JSON.stringify(err));      fail&& 'function' == typeof(fail) && fail(err);    }    else {      win&& 'function' == typeof(win) && win(res);    }  }} mongo.open = function(win,fail){ mongo.db.open(mongo.res(function(){   util.log('mongo:ok');    win&& win();  },fail))} mongo.coll = function(name,win,fail){ mongo.db.collection(name,mongo.res(win,fail));} exports.mongo = mongo 代码片段位于lifestream/server/common.js 这个common.js的更新版本支持MongoDB验证，这需要使用MongoHQ的云数据库服务。 (4) 在文件夹lifestream/server下新建一个名为server.mongo.js的文件，将下面的代码插入到该文件中。 var common  = require('./common.js')var config  = common.configvar mongo   = common.mongovar util\t\t\t\t\t= common.utilvar connect\t\t= common.connectvar knox\t\t\t\t\t= common.knoxvar uuid\t\t\t\t\t= common.uuidvar oauth\t\t\t\t= common.oauthvar url\t\t\t\t\t\t= common.urlvar request\t\t= common.requestvar Cookies\t\t= common.Cookies// API functionsfunction search(req,res){  var merr = mongoerr400(res)  mongo.coll(    'user',    function(coll){      coll.find(        {username:{$regex:new RegExp('^'+req.params.query)}},        {fields:['username']},        merr(function(cursor){          var list = []          cursor.each(merr(function(user){            if( user ) {              list.push(user.username)            }            else {              common.sendjson(res,{ok:true,list:list})            }          }))        })      )    }  )}function loaduser(req,res) {  var merr = mongoerr400(res)  finduser(true,['username','name','following','followers','stream'],           req,res,function(user)  {    var userout =       { username:  user.username,        name:      user.name,        followers: user.followers,        following: user.following,        stream:     user.stream      }    common.sendjson(res,userout)  })}function register(req,res) {  var merr = mongoerr400(res)  mongo.coll(    'user',    function(coll){      coll.findOne(        {username:req.json.username},        merr(function(user){          if( user ) {            err400(res)()          }          else {            var token = common.uuid()            coll.insert(              { username:\t\treq.json.username,                token:\t\t\t\t\t\ttoken,                followers:\t\t[],                following:\t\t[],                stream:\t\t\t\t\t[]              },              merr(function(){                common.sendjson(res,{ok:true,token:token})              })            )          }        })      )    }  )}// utility functionsfunction finduser(mustfind,fields,req,res,found){  var merr = mongoerr400(res)  mongo.coll(    'user',function(coll){      var options = {}      if( fields ) {        options.fields = fields      }      coll.findOne(        {username:req.params.username},        options,        merr(function(user){          if( mustfind && !user ) {            err400(res)          }          else {            found(user,coll)          }        })      )    }  )}function mongoerr400(res){  return function(win){    return mongo.res(      win,      function(dataerr) {        err400(res)(dataerr)      }    )  }}function err400(res,why) {  return function(details) {    util.debug('ERROR 400 '+why+' '+details)    res.writeHead(400,''+why)    res.end(''+details)  }}function collect() {  return function(req,res,next) {    if( 'POST' == req.method ) {      common.readjson(        req,        function(input) {          req.json = input          next()        },        err400(res,'read-json')      )    }    else {      next()    }  }}function auth() {  return function(req,res,next) {    var merr = mongoerr400(res)    mongo.coll(      'user',      function(coll){              coll.findOne(          {token:req.headers['x-lifestream-token']},          {fields:['username']},          merr(function(user){                      if( user ) {              next()            }            else {              res.writeHead(401)              res.end(JSON.stringify({ok:false,err:'unauthorized'}))            }          })        )      }    )  }}var db\t\t\t\t\t= nullvar server\t= nullmongo.init(  {    name:\t\t\t\t\t\t\tconfig.mongohq.name,    host:\t\t\t\t\t\t\tconfig.mongohq.host,    port:\t\t\t\t\t\t\tconfig.mongohq.port,    username:\t\t\tconfig.mongohq.username,    password:\t\t\tconfig.mongohq.password,  },   function(res){    db = res    var prefix = '/lifestream/api/user/'    server = connect.createServer(      connect.logger(),      collect(),      connect.router(function(app){        app.post( prefix+'register', register)        ,app.get(  prefix+'search/:query', search)      }),      auth(),      connect.router(function(app){        app.get(  prefix+':username', loaduser)      })    )    server.listen(3009)  },  function(err){    util.debug(err)  }) 代码片段位于lifestream/server/server.mongo.js   (5) 在文件夹lifestream/server下新建一个名为accept.mongo.js的文件，将下面的代码插入到该文件中。  var common  = require('./common.js')var config  = common.configvar util\t\t\t\t\t= common.util  var request\t\t= common.request  var assert\t\t\t= require('assert')var eyes\t\t\t\t\t= require('eyes')var urlprefix\t\t= 'http://'+config.server+':3009/lifestream/api'var headers\t\t\t\t= {}function handle(cb) {  return function (error, response, body) {    if( error ) {      util.debug(error)    }    else {      var code = response.statusCode      var json = JSON.parse(body)      util.debug('  '+code+': '+JSON.stringify(json))      assert.equal(null,error)      assert.equal(200,code)      cb(json)    }  }}function get(username,uri,cb){  util.debug('GET '+uri)  request.get(    {      uri:uri,      headers:headers[username] || {}    },     handle(cb)  )}function post(username, uri,json,cb){  util.debug('POST '+uri+': '+JSON.stringify(json))  request.post(    {      uri:uri,      json:json,      headers:headers[username] || {}    },     handle(cb)  )}module.exports = {  api:function() {    var foo = (''+Math.random()).substring(10)    var bar = (''+Math.random()).substring(10)    // create and load    ;post(      null,      urlprefix+'/user/register',      {username:foo},      function(json){        assert.ok(json.ok)        headers[foo] = {          'x-lifestream-token':json.token        }    ;get(      foo,       urlprefix+'/user/'+foo,      function(json){        assert.equal(foo,json.username)        assert.equal(0,json.followers.length)        assert.equal(0,json.following.length)    ;post(      null,      urlprefix+'/user/register',      {username:bar},      function(json){        assert.ok(json.ok)        headers[bar] = {          ‚x-lifestream-token':json.token        }    ;get(      bar,       urlprefix+'/user/'+bar,      function(json){        assert.equal(bar,json.username)        assert.equal(0,json.followers.length)        assert.equal(0,json.following.length)    // search    ;get(      null,      urlprefix+'/user/search/'+foo.substring(0,4),      function(json){        assert.ok(json.ok)        assert.equal(1,json.list.length)        assert.equal(json.list[0],foo)    ;})  // search    ;})  // get     ;})  // post    ;})  // get    ;})  // post  }} 代码片段位于lifestream/server/accept.mongo.js   这是一个验收测试，用于测试运行中的服务器。每个测试案例都在前一个测试案例的回调函数中运行，要确保测试按顺序运行。 (6) 安装expresso测试框架，需要用它来运行accept.mongo.js脚本。 npm install expresso (7) 打开一个新的终端窗口，并启动服务器。 node server.mongo.js21 Mar 13:39:47 - mongo: flame.mongohq.com:27044/lifestream (8) 打开另一个新的终端窗口，运行验收测试。 expresso accept.mongo.jsDEBUG: POST http://192.168.100.112:3009/  lifestream/api/user/register: {\"username\":\"707915425\"}DEBUG:   200: {\"ok\":true,     \"token\":\"0C257205-AB94-4768-9FCC-A1B1321AD2A5\"}DEBUG: GET http://192.168.100.112:3009/      lifestream/api/user/707915425DEBUG:   200: {\"username\":\"707915425\",      \"followers\":[],\"following\":[],\"stream\":[]}... 服务器和验收测试都会生成调试输出，按顺序显示HTTP请求和响应。 (9) 转到MongoHQ网站，检查user集合的内容。在user集合中，应该看到两个文档 警告：验收测试需要一个真实的网络连接，因为服务器必需和远程的MongoHQ服务通信，以存储和检索数据。这就是它被称为验收测试而非单元测试的原因。根据定义，验收测试要有外部依赖。   示例说明 本章中的应用程序是一个完整的应用程序，包含许多不同的功能，它依赖很多npm模块。前面几章已经用过大多数的模块。以前没有用过的模块包括url、request和 cookies模块，这些模块都是处理HTTP请求的辅助模块。 本章还介绍了使用config.js文件存储服务器配置的概念。这只是前面章节中所使用的keys.js文件的扩展。创建用于生产的应用程序时，从实现中分离出配置，并且不在代码中嵌入配置的设置是一个好主意。 在本章的前面注册了MongoHQ，在前面的章节中也应该有Amazon、Twitter和Facebook的键，可以使用这些键来填写设置。 本章的common.js文件包括了前几章的所有实用功能。这些实用功能让你很容易在HTTP API中处理JSON的请求和响应，以及使用MongoDB的API。还有一个额外的功能。为了使用MongoHQ服务，需要登录到数据库。可以使用下面的代码。   mongo.db.open(function(){    if( opts.username ) {      mongo.db.authenticate(        opts.username,        opts.password,        function(err){          ... 为了更便于管理，在本章中添加新功能时，服务器端的代码会存储在单独的server.*.js文件中。该示例的文件名为server.mongo.js。通过本章的介绍可以比较这些文件，以帮助理解。服务器端的代码遵循前面章节中使用的结构。首先，有主要的API函数，然后是一些实用功能，之后是connect模块配置。 在本示例中，实现了搜索函数、用户注册及获取用户详细信息的函数。搜索函数使用MongoDB的正则表达式搜索功能，寻找一个与给定前缀相匹配的用户名。这仅仅是在应用程序中实现用户搜索功能的一个简单方法。代码使用mongoerr400实用函数处理MongoDB出现错误，如果出现问题，将HTTP 400状态码返回给所有客户端。在本节的后面会解释这是如何工作的。下面的代码解释了搜索函数的工作原理。       coll.find(        {username:{$regex:new RegExp('^'+req.params.query)}},        {fields:['username']},        merr(function(cursor){          var list = []          cursor.each(merr(function(user){            if( user ) {              list.push(user.username)            }            else {              common.sendjson(res,{ok:true,list:list})            } 这段代码中的第一行粗体行显示了在MongoDB中如何使用正则表达式查询。它遵循标准的MongoDB查询语法。查询的值是作为HTTP请求的参数提供的，由传递到函数的req对象暴露。 第二行粗体行显示了如何限制从MongoDB结果返回的字段。这样，可以避免返回每个用户的所有数据。如果只是想要匹配的用户名列表，返回数据的所有字段就是资源浪费。 查询的结果作为cursor对象返回。为了使用该对象，要为它的each函数提供一个回调。对于结果集中的每一项，都会调用回调函数。这和传统的SQL数据库游标工作的方式非常相似。当所有的项都被返回之后，将得到一个空(null)的对象，这是停止的信号。if语句检查用户参数是否为空，如果为空，返回JSON结果。否则，它持续追加用户名到JSON结果中。 loaduser函数将大部分的工作交给finduser实用函数。这个函数不返回纯粹的数据库结果，因为这样做可能会公开内部系统的细节，如MongoDB的id字段。相反，loaduser函数只返回指定的数据集。以这种方式显式地过滤数据可能看起来有点偏执，但它是一个很好的安全经验法则。 继续向下阅读脚本文件，在实用函数部分的finduser实用函数，完成实际到数据库中寻找用户的工作。关键的代码是调用集合对象的findOne函数，执行用户搜索。       coll.findOne(        {username:req.params.username}, 用户名被指定为HTTP请求的参数。在API使用的URL结构中，对于针对用户的请求，用户名必须是URL路径的一部分。 注册函数与finduser函数非常相似，不同之处在于：如果用户不存在，它会执行一个操作。如果无法找到给定的用户名，说明用户不存在，可以注册。注册是由下面的insert操作执行的。             var token = common.uuid()            coll.insert(              { username: req.json.username,                token:     token,                followers:[],                following:[],                stream:    []              }, token是一个特殊的字段，用来验证用户的身份。uuid模块提供了一种方式，可以生成一个长的、随机的、唯一的字符串，特别适合作为令牌。因为这个示例的重点放在构建应用程序，而不是用户管理功能，所以没有实现密码系统。相反，代码采用了一条捷径。注册使用了先到先得的机制。令牌返回到客户端应用程序，客户端永久保存它。此令牌可以用来访问API。实际上它是一个永久的登录令牌。在生产环境中不应使用这种设计，但在这里可以用它模拟用户管理的逻辑，从而演示注册和认证，以及后来与Facebook和Twitter的集成。在开发过程中，需要删除全部现有的登录。可以通过删除并重新安装应用程序来实现这一点。如果在浏览器中测试示例，则只需要从本地存储系统中删除user项。 用户名的值来自于标准Node请求对象的json属性，这看起来相当奇怪。json属性是collect实用函数注入请求对象中的自定义属性，它包含了请求提交的任何JSON内容的解析值。collect函数截获HTTP的POST请求，通过使用common.readjson函数取得其内容。 function collect() {  return function(req,res,next) {    if( 'POST' == req.method ) {      common.readjson(        req,        function(input) {          req.json = input          next()        },        err400(res,'read-json')      )    }    else {      next()    }  }} collect函数特殊的另一个原因是，它实际上是connect模块中间件函数。中间件函数可以对HTTP请求做一些处理，然后将请求向前传递给其余的服务器。它处于请求的中间，因此而得名。connect模块是中间件函数的堆栈，每个函数都对请求做了一些工作。在前面的章节中，使用标准的router中间件定义自己的URL终点。在本示例中，建立了自己的中间件！ 要定义connect中间件函数，需要编写一个函数，使用一些配置参数(collect还没有用到)，并返回一个函数。函数接受三个参数：请求、响应和一个特殊的next函数。这是体现JavaScript强大功能的另一个示例：可以使用函数来动态构建另一个函数。 collect中间件函数的实际工作是在动态函数中完成的。检查POST请求，读取JSON信息，并设置req对象的自定义json属性。处理完后，调用特定的next函数。这样connect知道中间件已经完成处理工作，可以将请求传递到下一阶段进行处理。 如果出现错误该如何处理？因为正在建立一个可以独立于应用程序使用的API，所以需要确保很好地遵循HTTP协议。这意味着，如果是因为输入而产生错误，就需要返回一个400 BadRequest的状态代码。可以使用err400实用函数来执行这项任务，该函数创建了一个函数来完成实际工作。这样，就可以为代码不同的部分定义相应的错误消息。此外，mongoerr400函数针对MongoDB的错误创建了一个特殊的错误处理函数。正如在代码中看到的，可以使用这些函数，通过调用它们来为每个顶层API函数创建自定义的错误函数，如下所示。   var merr = mongoerr400(res) 注意：在本示例中的错误处理代码总是返回400 Bad Request的状态代码。严格地说，如果是因为你而导致的错误(例如，如果数据库连接中断)，应该返回一个500 Internal Server Error的状态代码。collect中间件函数不是该服务器代码中唯一的中间件函数。还有一个auth中间件函数用来处理用户身份验证。只有登录的用户才可以调用某些API。这可以防止其他用户访问他人的私人资料。auth中间件函数处于这些API调用之前，用于检查请求是否来自已经登录的用户。这就是为什么代码的connect部分被分成两个路由器部分：第一个是未经验证的动作，如登记和查询；第二个是已通过验证的动作，如获取用户的详细信息或关注其他用户。 auth函数与finduser函数类似，都是通过用户名查找用户。它也需要一个自定义的HTTP头X-Lifestream-Token，其中包含的注册令牌必须与用户存储的令牌匹配。如果验证失败，返回HTTP401状态代码，表示这是未经授权的访问。否则，调用next函数，请求开始处理。下面的代码执行令牌搜索。         coll.findOne(          {token:req.headers['x-lifestream-token']},          {fields:['username']},          merr(function(user){                   if( user ) {              next()            }            else {              res.writeHead(401)              res.end(JSON.stringify({ok:false,err:'unauthorized'}))            }          })        ) 最后一部分代码，在创建到MongoDB数据库的连接后，设置了connect中间件堆栈。这些按顺序放在一起的函数实现了API结构的中间件。 不应该只是手动测试该服务器。也应该使用一套标准测试来验证API操作正常与否。可以通过构建验收测试实现这一点。使用Node的expresso模块，构建单元和验收测试。虽然应该创建单元测试和验收测试，但该示例的重点是验收测试。单元测试和验收测试之间的区别是什么呢？验收测试依赖于外部资源，而单元测试则不是。为了测试服务器可以正常使用MongoHQ(外部资源)工作，需要验收测试。 验收测试的代码位于accept.mongo.js脚本中。主服务器运行时，在一个单独的终端中运行该脚本。expresso模块将运行，测试任何被放置在特殊exports变量中的函数。在本示例中的代码只有一个主要测试：api函数。此函数包含了一组测试，按顺序运行并执行API的操作。 在此使用了common.js文件以避免重复代码。handle、get和post函数是实用函数，用来跟踪HTTP的请求，当它们到达时输出结果。因此，可以运行测试，看看直接会发生什么，这对于调试是非常有用的。 测试本身是API调用的序列。运行测试时，会注册两个用户，会请求它们的数据，并执行了一个搜索。     ;post(      null,      urlprefix+'/user/register',      {username:foo},      function(json){        ...        headers[foo] = {          'x-lifestream-token':json.token        }    ;get(      foo,       urlprefix+'/user/'+foo,      function(json){        ...    ;post(      null,      urlprefix+'/user/register',      {username:bar},      function(json){        ...        headers[bar] = {          'x-lifestream-token':json.token        }    ;get(      bar,       urlprefix+'/user/'+bar,      function(json){        ...    // search    ;get(      null,      urlprefix+'/user/search/'+foo.substring(0,4), 使用约定格式化代码，避免了很多恼人的缩进。因为每个测试必须在前一个测试的回调中执行，所以通常会在屏幕右侧结束代码缩进。为了避免这种情况，可以在行开始的地方使用分号(;)字符。这使你能重置缩进级别。要确保正确关闭了所有的括号，这样它们和注释在结尾以相反的顺序列出。还有其他的方法，通过使用各种库来解决这个格式的问题。它们在更复杂的情况是有用的，但在目前这种情况下，有一个简单的线性执行流程与约定，很容易就可以保持代码相对整洁。   《移动云计算应用开发入门经典》试读电子书免费提供，有需要的留下邮箱，一有空即发送给大家。 别忘啦顶哦！","title":"移动云计算中开发和测试用户注册服务器"},{"content":"从目前来看，如果我们想要完整的认知云计算，应该从“服务”和“平台”两面去理解，即云计算涵盖云计算平台和云计算服务这两个概念。 如前所述，云计算服务代表一种新的商业模式，对于任何一种商业模式而言，除了理论上可行之外，还要保证实践上可用。对于云计算服务来说，要面向海量用户提供永远在线、随时访问的可用服务，而且支持多用户按需获取服务资源，并保证服务的可靠性，就要求底层IT系统能够支持这样的服务模式。 因此，伴随着云计算服务理念的发展，云计算也形成了一整套技术实现机制，而云计算平台则是这套机制的具体体现。 云计算平台在本质上类似一个操作系统，管理着一个“可扩展的网络超级计算机”。这个操作系统通过一些技术将大量分布于各地的计算机通过网络连接起来，使之在逻辑上以整体的形式呈现。在不同的应用需求出现时，系统可快速调动各种软、硬件资源协同工作，完成计算、存储和沟通任务，而用户无需关注实现细节。网络超级计算机的“可扩展”性，就是指根据需要可对计算资源进行添加或者删减，同时这个虚拟的计算机所展现出的性能会相应呈近似线性的变化。 云计算平台和云计算服务的关系，如同底层基础和上层建筑。通过搭建“平台”，可以将大量计算资源集中起来，协同工作，对上层“服务”的运行进行支撑。而“服务”的丰富和扩展，又对底层“平台”提出不断发展的要求。虽然如此，仍需要明确的是，这两者之间并没有必然的对应关系。 云计算服务以商业服务模式为主要的推动力，底层技术平台的选择可以起到辅助和提升的作用，它仍然可以运行在传统的底层架构（非云计算平台）之上。同样，云计算平台强调的是通过先进的技术手段构建全新的基础平台或是改造旧有的底层架构，它可以为所有的应用或计算服务提供底层支撑而并不局限于云计算服务，比如现在很多人正在研究如何把用于科学研究中大规模模拟计算的并行计算框架在云计算平台上实现，又或者将云计算平台用以解决企业面临的海量数据存储或系统管理问题。 尽管如此，由于云计算平台本身在设计上就针对了“大用户”、“大数据”和“大系统”的问题——这也是提供云计算服务会遇到的典型问题，提出了解决办法，所以由云计算平台支撑的云计算服务，不仅可以提高服务的效率，而且还会充分发挥出平台的能力和优势。可以说，云计算平台在目前更适合推广云计算服务，只有二者的完美结合，才能实现在大规模用户聚集的情形下以较低的服务成本，提供高可用和高可靠的服务，从而保持业务的持续发展性和在商业竞争中的优势。 如果我们从更深的层次来看，云计算的出现，是信息社会向智能化社会转化的必然。随着社会和经济的发展，人们对信息的需求朝着更全面、个性化和深层次的方向发展，简单信息的需求已经转化为对有用信息和知识的需求，这就对信息服务系统质量和服务水平提出了更高的要求。所有的这些都在驱动着另一场变革的开始——将服务和知识带给所有人。 “云计算”就是推动这场变革的力量。 在熊彼特的创新理论中，经济变革以创新、企业家的活动和市场力量为中心。作为经济变革的关键因素，创新所产生的市场力量能够比凯恩斯所说的“看不见的手”和价格竞争带来更好的结果。社会学家曼努埃尔·卡斯特（Manuel Castells）认为，“信息主义的精神”是一种“创造性的破坏”的文化，而且已经被加速至光电信号在线路中的处理速度，“熊彼特在网络企业的网络空间遇到了韦伯（Weber）。” 过去的三十年间，ICT产业的成长像杰克脚下的那个通天豆茎，快速将人们的生活带到一个全新的世界。对于单机系统来说，信息存储空间越来越大，主频处理速度也越来越快，但存储和CPU的发展在高处总有个天花板，如C++标准委员会主席赫伯（Herb Sutter）所说，“尽管摩尔定律预言了指数式增长，但我们很清楚这种增长不可能永远维持，毕竟硬件有物理极限约束，光速不可能更快。这种增长最终会减慢然后终结。”[7]人们对硬件性能快速增长的需求，似乎就这样困在了各种大小体积的方块中。 云计算将“光电信号”有选择地进行了聚集，以更加有目标的创新意识，影响着这个社会的方方面面。这取决于使用云的方式不同，用户——个人、企业和跨国公司——拥有几乎无限可能的创造力。 “有了云计算，用户可以方便地通过租用来获得各种有特色的应用，进入软件开发和部署环境，使用类似数据存储和处理的联网计算基础设施。”[8]人们可以不再需要购买、安装计算机和软件，各个公司也不再需要部署自己的服务器和信息管理系统，如前文所述，从“买计算机”到“买计算”，“买服务器”到“买服务”，云计算极大简化了信息制造、存储、传输和获取的流程，将信息流转演变成为一种社会的公共基础设施。无论是企业还是个人用户，都能通过云计算节约成本、享受便利。 就像印刷术的发明，云计算在加速知识传播的同时，也极大降低了知识的传播成本。而且在云计算中，通过对数据的集中和整合、转换，使信息变成了知识，知识变成智慧。在这样的过程中，生产效率极大提高，创新成本获得极大降低。 从更宏大的角度来说，云计算的真正影响在于民主和平等。在云计算的推动下，“计算”的使用将会更加便捷和廉价，或许将来每个人以一本书的价格即可拥有一个云的终端——背后的支撑是一个超级计算机的能力。基于如此简单即可使用的巨大计算能力，无论是个人还是公司，无论是大企业还是资源有限的新创公司，都有了公平的创新机会，都可以在平等的基础上检测业务的可行性。 所以，云计算不仅给了普通人梦想的机会，还有实现梦想的力量。云计算降低了信息服务的获取成本、实现了IT服务的规模化生产，并促进了整个社会的创新进程。其核心意义同每一场变革最根本的核心意义一样——使生活更加方便、成本更加低廉、知识更加民主化。     本文节选自《云计算：大数据时代的系统工程》 姚宏宇  田溯宁 著 电子工业出版社出版","title":"云计算：大数据时代的系统工程(二)"},{"content":"我们每个人都同时存在于多个组织结构之中，要承担着不同的角色分工。为了达成一个统一的目标，所谓“组织”必须考虑如何合理、有效地进行规划、分工、协调、制衡等，以期顺利达成目标。 云计算创新性地将大量计算资源组织在一起，协同工作，意味着云计算必须在信息技术的层面，给出一种针对大规模系统的科学管理办法。我们已知面对大规模系统时，单纯人工管理的无力，于是云计算采取了一种自动化管理的办法，即机器管理机器。这意味着在一个大的数据中心里，只需少数人员的巡视就能完成所有的日常维护工作。 美国管理学教授斯蒂芬·罗宾斯将管理描述为“一个协调工作活动的过程，以便能够有效率和有效果地同别人一起或通过别人实现组织的目标”。“效率”是指以尽可能少的投入获得尽可能多的产出，而“效果”是指尽可能达成组织目标。 对云计算来说，这直接指向了从根本上要面临的两个挑战：在增加节点、扩大系统规模的同时，如何保证系统性能的近线性提高？系统任何一个部分都有可能出问题，如何保证系统的稳定运行？除此之外，云计算还面临第三个根本问题，在面临不同的业务需求时，如何快速将资源重新组织，以新的架构适应变化？ 作为云计算技术的具体实现，云计算平台应对这三个挑战的就是其三个根本的技术思想：弹性、透明和积木化。而为了实现这三点，云计算平台还包含另外三个技术思想：动态、通用和多租赁。 动态是指，当组织内个体情况发生变化时，可以及时察知信息，进行调整，即“控制”管理来确保系统设计的正常运行；通用意味着，针对不同的业务性质，底层系统都能提供支撑，即便需要调整，也不必大动；而多租赁则保证在底层系统所构建的“云”上，可以支持各种应用，每种应用又都支持大量用户。 弹性、透明、积木化、动态、通用和多租赁，是云计算平台的六大核心技术思想。依此，云计算平台可在实现包括服务器、存储、网络、应用等在内的虚拟化基础上，将事件驱动及协同合作机制相结合，设计出具有自动监控、反馈和处理机制的智能服务管理平台系统，基于这种跨平台、可扩展的系统，对大规模计算资源进行自动化智能管理和监控。而且系统负责对所有服务器上运行的软件服务提供自动部署、自动升级、自动配置、可视化管理和实时状态监控，还可以根据环境和需求的变化或异常情况的出现，对之进行动态调度和自动迁移。 这意味着，对于上层多变的应用需求而言，云计算平台提供了一个行之有效的支撑环境，并实现了IT自动化管理，以机器管理机器。 很明显这是一个系统工程，非单项技术可独立完成，需要综合使用多种技术或架构理念来实现目标。所以说，云计算在技术上的革命性，一是给出了一种资源组织的方法，使整个IT系统的结构发生了变化；二是创新性地将各种信息技术组合起来，完成了一件系统工程的工作。 从云计算发展环境来看，中国和美国在两方面存在较明显的差异：社会环境和行业发展状况。 社会环境的差异性主要体现在信用体系上。美国的信用体系比较完善，表现之一就是更重视保护消费者合法权益。美国涉及对消费者权益保护的法律主要有《消费信用保护法》、《统一消费信用法典》、《隐私权法》和《信用机会平等法》等，因此对于数据隐私的保护性做得比较好。另外，各方面也比较关注在云计算发展过程中，应用所产生的安全问题。美国支付卡行业安全标准委员会（PaymentCardIndustry Security Standards Council）曾在2011年表示将关注通过云计算来进行的在线零售或其他支付方案中的卡类数据安全风险。这种关注，是美国社会信用体系建设的一部分，背后是整体社会对诚信问题的重视。 如果简单将本地数据放于“云”中的行为与将资金存放于银行中相比，我们会较容易理解社会信用体系的重要性。银行业服务的发展也经历了一个从无到有，从简单到复杂的过程。在现代银行业中，由于一些显而易见的原因（比如风险问题），在任何司法管辖区，监管都是金融系统的关键部分。各种有关银行经营和财务状况的审慎要求，使银行违约的可能性大大降低。这样，当资金的安全性可以得到保障时，即银行的信用值得信赖时，人们才会倾向于使用银行所提供的付款、投资、借款和风险管理服务。 同样，在整个社会的信用体系较为完善的情况下，当云计算服务商提供一些“云”服务的时候，如果用户觉得此提供商的信用值得信赖，就会愿意选择尝试其服务。美国用户对公有云的安全问题并非毫不担心，但在信用体系较为完善的情况下，社会诚信度相对较高，用户会乐于尝试一些公有云服务。 相比之下，中国目前社会整体的信用体系建设仍处于快速发展的过程，用户对于数据在外部“云”中的存放仍有明显的顾虑，这种顾虑也影响了用户对某些公有云服务的接受。 行业发展状况的差异会更具体，这包括中国的IT系统普遍较新，成熟度不太高，以及中国各行业中系统的条块分割较为严重，而美国的企业IT系统使用相对比较成熟。 在中国，企业IT系统的使用期普遍较短，在建立时也多是为解决某些特定目标而进行的设计，通用性不强。企业发展较快的时候，企业本身战略会相应做出调整，折射到系统层面，对IT系统的要求就会发生相应改变。 另外，以中国国内的国企和政府机构为典型的组织机构，在IT系统的建设和使用上还有一个普遍特点，即条块分割比较严重。     本文节选自《云计算：大数据时代的系统工程》 姚宏宇  田溯宁 著 电子工业出版社出版","title":"云计算：大数据时代的系统工程（三）"},{"content":"云已经从概念到现实。一些初创公司已经按年购买计算和存储需求，而对于虚拟化也希望同样如此。明年我们可能会看到这个愿望成真，我们将看到大的IT公司收购初创公司，以帮助企业将工作负载过渡到云上，更多的公司提供企业级的 IaaS的应用程序和更可行的混合云模型，使云计算在明年爆发式增长。让我们来看看明年会发生什么。 1. 公共云可处理企业应用 有传言称，财富1000强公司已经有一些在亚马逊的公共云上进行测试和开发， 甚至纳斯达克（NASDAQ）也是AWS的一个客户。然而，在关键任务的应用程序方面受到严格监管的金融和医疗行业，许多公司不会在公共云中保存任何数据 或应用程序。比如一些银行甚至不允许员工使用AWS，更不用说进行部署。 这对于亚马逊（和微软Azure）来说是一个巨大的障碍。AWS去年和 Eucalyptus达成协议，使企业能够将Eucalyptus私有云和AWS组成一个混合模型，更容易地在某些工作上进行操作。像 CloudVelocity这样的创业公司声称他们可以“克隆”内部的工作负载到AWS上，并提供完整的安全。这是一个大的承诺，并且需要检验，明年将会 看到更多这样的声明。 与此同时，企业软件巨头VMware和微软同样必须向他们原有的客户证明他们的云技术是符合标准的，并且具有新的前景。 2. 不成则败的惠普 在过去的几年里，所有的旧硬件厂商——戴尔、EMC、惠普和IBM都争相证明其与云计算这个新世界的关联性。 惠普在即将到来的一年中将最热闹，首席执行官Meg Whitman恳求投资者等待惠普的一个“多年的转变”。他们将怎么做并不是很清晰，惠普多年的管理混乱以及最近收购Autonomy的可疑举动，已将其 推到十字路口。这项111亿美元的收购旨在构建惠普在大数据和云计算方面的信誉。可以肯定的说，它并没有达到预期的效果。 现在，惠普推出了其基于OpenStack的计算云。惠普如果想成功翻身，它的企业客户基础必须仍然巨大，并且他们有足够的信心使用惠普的云服务，否则其终将失败。 3.OpenStack是时候大放光彩了 现在，Rackspace已经不再将自己定位在OpenStack“父亲”的 角色上， OpenStack已经变成多个厂商共同管理，是时候看看OpenStack与AWS在公共云端上的竞争了，以及它与CloudStack、 Eucalyptus和OpenNebula等其他开源云之间的竞争。 2012年对于OpenStack来说是丰收的一年，惠普、 Internap、红帽和Rackspace都推出了基于OpenStack的云服务。Nebula的OpenStack设备全面上市的日期正在越来越 近，还有其他的选择也即将到来，如亚马逊和谷歌API兼容的私有云。可以看到更多的服务公司正在围绕OpenStack构建服务，例如Mirantis刚 刚推出了自己的自助OpenStack的服务。 虽然很多人说OpenStack在这场盛宴中迟到了，但重要的是要记住，无论如何大肆宣传，我们仍然处在云计算的初级阶段，任何事情都有可能发生。一些新公司，甚至一些传统公司都可以站起来，成为亚马逊的一个有力竞争对手。 4. 基础设施不再局限于数据中心 早在2008年，谷歌就推出了“数据中心是计算机”的想法，其推出的Spanner数据库横跨5个数据中心同步内容，我们清楚地进入一个新的基础设施设计领域，来支持我们最喜爱的Web服务。现在的数据中心还不是一台计算机，只是连接在网络上的一堆设备。 不只是谷歌有这种想法。Facebook也有进行了类似的努力，向运营商租赁光纤，所以它可以扩展其基础设施更接近边缘。我们将看到更多的数据中心运营商交易，他们将不得不扩展他们数据中心之外的基础设施，探索如何在大型分布式网络中保持同步。 5. 软件定义的一切都没有变得更容易 软件定义网络是2012年的大热门词汇，但我们也看到了软件定义存储和软件定义的数据中心的出现。基本思想是把虚拟化给计算带来的灵活性同样赋予网络、存储和数据中心。你不能从没有网络和存储的服务器上解放你的应用程序。 但是，就像任何新的领域可能会破坏一些厂商的既得利益，软件定义的网络给很多营销人员投下了阴影。尽管我们期望看到了很多生产部署网络虚拟化的表现，但我们不认为我们会看到很大的进展。","title":"云计算领域的5大变革"},{"content":"1、到官网下载 mongodb 最新发布版，目前最新 2.2.2 ，点击下载地址：mongodb 下载链接, 或者打开终端 输入如下图命令 2、下载完成后，找到存放下载文件的目录，解压所下载的文件，如下图： 此命令执行完后，会在同级目录下生成名称为 mongodb-osx-x86_64-2.2.2 的文件夹 3、因为安装包存放在临时的目录中，最好新创建一个目录来存放 mongodb, sudo mkdir -p nosql/mongodb 然后再把解压的mongodb 目录 转移到新创建的目录中去，如下图： 4、使用命令 mkdir -p /data/db 在“/”下创建data/db目录，这个是放置mongoDB数据的目录。 设置/data/db目录权限 sudo chown -R 你的系统登录用户名 /data 5、进入mongodb 的 \"bin\"目录，使用命令“./mongod”启动mongoDB server，启动成功后，会看到如下提示信息： 6、打开另一个终端窗口，进入\"bin\"目录，运行命令\"./mongo\"，这时可以看到mongoDB的控制台在终端上出现了，这时就可以使用任意mongoDB的命令操作mongoDB数据了 如下图： 配置完成，进入 mongodb 世界。。 参考文档： http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/  官方介绍的安装方法 http://yanghao.org/blog/archives/232 http://jrkui.iteye.com/blog/1497110 http://articles.csdn.net/shangwuzhuanqu/MongoDBzhuanqu/shouyelunbotuyoucexi/2012/0927/2810376.html 在windows 上安装 mongodb","title":"在 mac os x 10.8.2 安装 mongodb 2.2.2"},{"content":"来源：汉唐月博客 作者 刘黎明 声明：本文拒绝SaaS博士之流转载和点评;欢迎任何非商业目的的转载和二次编辑;任何形式商业用途请联系作者本人;任何转载需全文转载并保留来源和声明，引用需注明来源。   2012就快过去，云计算在这一年里在产品和技术领域继续突飞猛进，可以说是热闹甚至喧嚣的一年。按照Gartner的炒作周期图，在中国应该已经接近炒作顶点。在这一年里，无论中国或全球，关于云计算的开源、大数据、SDN毫无疑问是极受关注的话题，但是，本文与这些话题无关。本文关注的不是云计算全产业链，也不是关注全球趋势，本文关注限于中国的IaaS和部分PaaS话题。 本文也不关注概念辨析、具体的技术，甚至不讨论真云假云。当然，还是有一定的尺度和标准，比如NIST对云计算的定义，但本文更多的内容是来自于个人的主观认识和经验。一些看了可能会说“胡说八道”，另一些人特别是文中所涉可能会说“too naïve，造谣”。由于所有信息不是来源于严谨的调查和统计，也许离事实差距甚远，但仍希望读者能藉此文窥得中国IaaS之现状，特别是2012年末的现状。如果能对中国IaaS行业有所助益，或对相关同仁有所启发，也不枉一贯沉默寡言却要滔滔不绝的码字万余。 本文来源于9月份的“点评阿里云盛大云代表的IaaS产业”，不知道搜索引擎是不是会判断两篇文章雷同，但显然不到半年的时间，不会发生巨大的变化。内容上将以修订和补充稳住。同样，PaaS在中国可能不是可以忽略的，但在整个非SaaS云计算服务市场仍旧不是主流，本文将略为提及。 对于9月份的点评已经了解过的读者，如果不想浪费时间重新来过，可以关注几个主要的不同：对中国IaaS产业相对于全球领先水平的评价；对中国Iaas产业发展面临的问题的评价；ucloud、中国移动云、七牛云存储的进入；关于华为云和亚马逊AWS的预测；关于年度IaaS事件盛大硬盘事件、阿里云IO事件、世纪互联微软合作事件评价；中国IaaS魔力象限。 对于时间紧迫的读者，请原谅本文的冗长；对于习惯严谨或技术出身的读者，请原谅本文的粗放和调侃。 1 IaaS回顾 1.1 云计算在中国有多久 现在是2012年12月，要问中国的IaaS走过了多少时间了？2年？3年？不对，是差不多5年的时间。 总有一些公司或者在公开场合或者是私下场合说，我们公司做了5年6年云计算，也总有一些猎头跟我说我们要找资深的云计算业内专家，好吧，如果这些人说的是SaaS的话，我承认，可以有。可事实上他们都说的是云计算特别是IaaS，我要说，真没有。如果非要说云计算这个词IaaS这个词还没有产生还没有传入中国，就有人开始做了，那这蛋扯的太远。事实上，Cloud Computing这个单词在2006年之前在英文中并不存在。2006年前后，Cloud Computing这个单词开始偶尔出现。2007年末，Cloud Computing出现的频率迅速增加。2008年初，Cloud Computing在中文中开始被翻译为“云计算”2008年开始。2008年上半年，中国人搞懂云计算这个单词意思的不超过10个。 有人会说，我干数据中心10几年了，还有人说，我干xen虚拟化5年多了，还有人说，我干分布式存储快10年了，所以我进云计算领域很多年了。不好意思，我们对云计算包括IaaS的定义不同。 1.2 谁先开始干云计算和IaaS的 哪个公司或者哪些人是中国最早做云计算的人？这里不讨论云计算概念产生之前的SaaS。阿里云？盛大云？绝对不是，连候选名单都进不了。阿里云公司成立时2009年的事情，而且成立的时候还没有开始做任何事情，只是把阿里软件改了个名而已。盛大云是2010年初开始招兵买马，公司也是那时成立。两家公司推出服务已经是2011年的事情了。那么还有做得更早的？对的，世纪互联（后来独立出来的云快线）是最早开展IaaS实践的公司。如果狭窄点说到虚拟化技术，那么最早的应该是IBM和Intel在中国的部分研发人员接触最早。世纪互联2008年初开始进行IaaS探索，并推出了现今通用的“云主机”一词，2009年初推出云主机beta版，2009年底重组为云快线，2010年底推出云主机2.0。世纪互联云快线今安在？2011年9月解散。世纪互联在IDC算是低调的企业，但其云快线影响力从解散后人员的流向和现今各大云主机网站上对云主机的图形和文字说明（所有做云主机IDC公司都相当程度借鉴了云快线网站和PPT中的内容）可见一斑。 1.3 还有谁都参与进来了 世纪互联云快线属于起了个大早干了个晚集，可能还没赶上。随后就是长江后浪推前浪，前浪死在沙滩上。2011年初阿里云和盛大云推出的IaaS服务，迅速吸引了各大媒体和开发者、中小站长的眼球，也把云计算在中国推向了影响力的巅峰。 2011年下半年，上海世纪互联依靠第三方的技术和平台，推出云主机。2012年，杭州网互联LinkCloud、西部数码、太平洋电信陆续推出云主机，如今个主要IDC服务商均有云主机在售。 到底有多少家IDC已经推出了云主机？没有明确数字，因为中小服务商和地方性服务商太多。从百度和谷歌搜索引擎来看，购买了云主机付费关键词的有近20家，其他以云主机为标题和业务的不下50家。 顺便说一下，2006年是国外IaaS起步的时间，中国起步落后了两年，但现在，整个产业至少落后3年。原因？在其他文章有表述，但真分析起来太多太复杂，远离了本文的主题。 再补充一下，还有一些将要或准备进入IaaS领域的，将在预测章节讨论。这里贴两个2010年的预测。目前看，其中市场规模基本正确，只是2013年的规模目前还不能确定。而2011年可能进入IaaS的企业预计太乐观，近一半的企业尚无产品推出。当然，也没有预测到一些创业公司的成立。 中国IaaS潜在企业       1.4 中国Iaas产业相对于全球的水平 2009年11月，同是我的一篇文章《云计算产业链初成 中国落后两年》谈到“纵观整个云计算市场，占主导的还是基础设施及服务、平台即服务、软件即服务市场，这些市场在国外也仅仅是刚刚兴起，国内企业又遇到一次追赶信息产业制高点的机遇。”，最后的结论是“云计算之于中国，可怕的不是现在落后两年，二是五年后落后五年。PC变革和互联网变革，充分体现了中国人的勤劳和模仿能力，云计算变革，一个泱泱大国能否摆脱笨重的身躯和思维，走在世界前列？” 如今三年已经过去，那个可怕的目标已经基本提前达成“中国云计算产业落后全球领先地区四年”。这就是我对中国云计算特别是IaaS领域相对于全球领先地区的发展水平的评估结论。 三年前落后两年，三年后落后四年。也就是说我们花三年的时间只前进了别人一年的路，也就是说我们离世界领先地区的发展水平的差距不是缩小了，而是拉大了。是不是有很多人和公司不服气？是不是有很多人很沮丧。 差距在哪里？美国IaaS服务产值2012年应该超过20亿美元，中国有没有2亿美元？美国IaaS用户超过50万，中国有没有5万？美国的中大型企业和政府机构已经开始使用公有云服务，中国的企事业单位对私有云的态度怕也是难以捉摸的。在产品和技术领域更是毫无亮点，公有云和私有云软件与解决方案，拥有自主知识产权的创业公司和开源项目，有多少来自于中国公司？ 很多人会问，为什么会这样？政府和企业不可谓不重视，个人和公司不可谓不感兴趣。标准答案肯定是没有的，IT产业不可能是一朝一夕三五年就能达到全球领先水平。下面分析几个国内IaaS发展面临的问题。 1.5 IaaS在中国发展面临的问题 中国的企业和创业公司虽然做出了很多努力，但迄今仍未在IaaS领域获得土匪猛进的发展，究其原因是多方面： l  不同骨干网运营商之间网络连接状况较差 l  骨干网运营商与第三方独立IDC企业的商业关系不透明不规范不市场化 l  中国的人力成本包括初级技术人员相对低廉 l  政府和国有企业没有严格的财务控制和资金利用效率目标 l  互联网服务的准入、创新、内容受到严格监管 l  信息的发布和快速传播受到抑制 l  传统行业和IT互联网行业的垄断性企业与政府和监管部门关系密切 请注意，这里根本没有提到安全问题、标准问题，这两个经常被提前的问题对于云计算产业的发展的影响微乎其微。但并不意味着这两个问题上没有可以做的工作和创业机会。 2 IaaS现状 上面说了，如今已经从事IaaS业务的大小公司不下几十家，且不管严格从定义上来说谁不是谁是云计算和IaaS，暂且认为号称有云主机业务的就算，没有云主机业务的根据其产品的影响力决定是否纳入，网盘之类的不算。这里就把这些IaaS公司分个三六九等。 2.1 以阿里云盛大云万网云为代表的第一阵营 阿里云盛大云万网云在第一阵营基本无人有异议，这三家不仅是最知名的IaaS厂商，也是市场影响力和客户基数最大的厂商。这三家还有一个共同点，他们在从事IaaS业务之前，都已经是知名公司，而且其IaaS严重依赖其母公司和其他业务。当然，他们也有不同，如果非要排个座次的话，阿里云排第一，盛大云排第二，万网云排第三。说是这三家在第一阵营，并不一定代表他们做的很好，相反，都还是不及格，包括排第一的阿里云，因为我非常非常遗憾的看到，阿里云对于IaaS行业的发展至今还是负面作用大于正面作用。 2.1.1 阿里云 先说阿里云。阿里云排第一，不是阿里云本身做的好，而是相对其他厂家，阿里云没有做得更差，或者可以说，矮子里拔将军吧。这样的评价，业内很多人都很吃惊，阿里云的人更是会嗤之以鼻：“什么？阿里云现在客户最多！我们的平台几次推倒最先进！阿里云的技术实力和带宽质量，加上万网的经验，绝对国内第一国际先进！” 说万网的优势，最大的优势，而且都是很重要的优势有这么几个： 庞大的财力。财力对于做IaaS当然很重要。大家都知道做托管可以不要什么本钱，租个机房零卖就好了，但是建机房确实很费钱的，当然做IDC不是都要做机房的。但是做IaaS虽然投入不像做机房一次性投入那么大，但由于都投入在人才和设备上，相对机房这样的硬货，IaaS的前期投入基本都是投入在软货上。投入机房好理解，不干IT的都能了解，因为财力投入都变成了房子和很多年才能折旧完的制冷设备上。而人才和设备投入就不一样了，人才投入那是费用，投进去就没了，设备折旧也就两三年的事情。IaaS比托管起步要多一些财力投入，因为通常要做一些技术开发工作，投入一些自有设备。而阿里云由来自国内最大的互联网公司之一的财力投入，也许对很多其他公司是笔大投入，对阿里，就是毛毛雨了。但并不是说需要很多人很大一笔钱才能开始起步。但是有钱，绝对是个优势，可以有充足的技术人员，可以等待平台的完善和成长，可以等待盈利的时间更长。技术实力是由庞大的财力决定的，不做单独讨论。 市场知名度和影响力。阿里云凭借阿里巴巴在中小站长和电子商务站长中的知名度和影响力，迅速聚集了一批客户。作为中国顶级的互联网公司，其做任何事情都会得到业界的关注，也更容易在初期开拓市场。看看饭否在新浪微博发布后的表现就明白，大公司的影响力的重要性不逊于财力的重要性。 BGP带宽。阿里巴巴集团凭借前几年以保障电子商务安全为名，申请下来的BGP网络，是一种半垄断优势，也是中国顶级互联网企业里少数认识到BGP网络重要性并付诸行动的公司。这一点，其他具有同等能力的顶级互联网公司逊色不少。这一点，也是绝大部分IDC企业也不具备的硬条件。 基础设施运营经验。阿里巴巴作为国内顶级互联网公司，而且是做电子商务的，在机房管理、网络管理上积累了不少经验，这些对于做IaaS是比不可少的。 收购万网。收购万网为其带来的不是客户和IDC运营经验，主要是牌照问题，客户能够备案了。否则将步盛大后尘，备案服务比较麻烦。   按理说具备了这么多条件和优势，不做成顶级IaaS服务商就没道理了。我这里说他们是IaaS服务商肯定阿里的高层不高兴，因为他们的设计至少是PaaS服务商，IaaS只是个基础。甚至一度要放弃IaaS，押宝阿里云OS和手机，可惜现实的重锤砸碎了这个计划，阿里云OS和搜索、输入法等应用基本没有收入。IaaS的收入也是云主机一家独大。云主机支撑了阿里云的绝大部分收入，这里就从云主机为代表的IaaS说说为什么阿里云过大于功： 没有甚至没有打算建立起共赢生态系统。以阿里巴巴的知名度和国家数亿的补贴，加上上述所说的优势，其获得了大量的资源和庞大的客户。但是，阿里云至今未开放产品接口，也未建立一个其他上下游厂商、合作伙伴共赢的生态系统，甚至到目前为止还未看到阿里云由这样的意向。相反，其产品体系相对封闭，从IaaS到PaaS到应用全都设计，包括安全等产品都是自己开发提供，未能让合作伙伴获益。包括阿里云OS和其他应用在内，都是为了将客户流量和数据留在阿里云，当然，百度腾讯也在做同样的事情。 其产品模型并没有展示出云计算的特性和优势并让传统IDC客户更广泛受益。目前看，阿里云的主要获取客户手段是BGP带宽和价格，而这两个都是资源导向。其强多了传统IDC的虚拟主机、VPS、小托管客户，但其对客户带来的价值方向并没有超远传统IDC服务商。这也是我初期看好盛大云的原因，盛大云产品模型在当时更好反映了云计算的商业模式。其初期的产品模型更类似传统IDC主机，计费不够灵活。 性能等问题让IaaS的目标客户不能树立起对IaaS的信心。如上所述，其产品模型更多沿用了传统IDC的产品模型。至少在前两年是这样，现在也在试探性对客户的需求进行投票。但是我认为一个领导型的厂商，除了重视客户的现有需求，也要挖掘潜在需求和推广创新性的需求解决方法，这一点我没有看到阿里云有想法和作为；另一个很重要的一点是，阿里云由于在前期一直是技术主导，而且是完美主义者主导，对传统IDC和中小站长的理解和服务经验欠缺，导致现在的云主机性能问题以解决，主要是磁盘的IO性能，尽管其采用了昂贵的SAS硬盘，IOPS有保障，但是IO吞吐带宽成逐渐下降趋势，基本不能满足中等规模应用的要求。最为IaaS领域的领导厂商，都不能让目标用户基本能用，这是对云计算和IaaS产业的极大遏制。导致目前云主机仍然是个人站长的玩乐场，整个云主机产业无法吸引到中型客户。 战略摇摆不定。阿里云虽然IaaS服务一直没有中断，但从09年成立至今，阿里巴巴集团的对阿里云的战略定位已经数次改变，而且没有一次是定位于IaaS服务。因为大企业都觉得IaaS太基础，太初级，没品味，嘴里不承认，心里都这么想。最开始定位于PaaS，后来是阿里云OS和移动互联网，现在是数据平台。这些定位都符合阿里巴巴集团的战略，确唯独不符合IaaS战略。阿里巴巴作为互联网贸易中介服务商，确实需要一个PaaS扩大非电子商务地盘，需要阿里云OS抢占移动互联网入口，其庞大的交易数据也需要更为庞大并能产生更大价值。所以，也就有了现在的口号“打造数据分享第一平台”，试问阿里云的产品有几个跟数据分享有关系？当IaaS的利润不够丰厚，阿里集团需要阿里云的其他定位，云主机等基础产品还能不能持续加强是个疑问，一如当初的百度有啊，做不做都无所谓，做好了是锦上添花，做不好换个行业比如视频也可以。特别是最近，云OS从阿里云分离出来，集团重申了对云OS的支持、重视，和财务投入2亿美元。没有提到对阿里云的财务投入问题，意味着阿里云将会面临着较紧迫的营收增长和盈利压力。 备案服务雾里看花。由于阿里云自身没有IDC运营资质，好在由集团旗下的万网提供备案。代备案也是IDC行业的普遍现象。但由于阿里云迄今为止的所有十几款产品，包括阿里云OS和手机在内，唯有云主机有些起色和收入，而云主机又属于IDC业务的自然延伸，导致阿里云和万网的关系极其微妙，其备案服务政策也数度调整。从基本无法备案，到200元备案，到搞活动取消200元备案费用，到传闻寻找第三方代备案服务商，到现在万网自主上市与万网阿里云和并的传闻并存，其中的博弈和变数另外人不得而知。而备案服务是IDC和云主机的基础服务，而且行规是免费服务，这个服务需要稳定下来。背后折射的是阿里云和万网的定位需要有明确的区分。我想这也是阿里云打出了“数据分享第一平台”这块牌子的苦衷，阿里集团旗下不可能存在两家主业是IDC和云主机、IaaS业务的公司。   2.1.2 万网 万网长期处于国内IDC行业的领先阵营，在所有IDC业务中除了托管可能都能占据前两名。其在云主机领域，开始关注的时间较早，但行动的步伐则较慢。这与万网对传统IDC业务的熟悉和稳重的企业风格有关。如果不是投入阿里阵营，其在云主机领域不可能有现今的地位。因为其在研发上的投入极为谨慎，也没有自有的BGP带宽。很可能处于比西部数码略好的境地。而现在则有了超越盛大，并有与阿里云平起平坐之势。 万网的优势： 稳固的IDC领头羊地位和客户群。万网的域名在国内首屈一指，其他服务也排名前列，拥有大量的中小用户。其在IDC行业的影响力堪比阿里在电商领域的影响力。 阿里巴巴的BGP带宽支持。这个不用说了，带宽质量和IP数量无后顾之忧。 阿里云的云计算平台支持。万网的基础云计算平台采用阿里云，虽然未必能够多出彩，起码可以保证投入产出的风险最小，也符合万网的风格。阿里云的云平台虽然并未达到我的预期，却是中小用户基本可用的。而且阿里云也在不断改进其平台。   万网的劣势吧，还真没多少，有一个也是和他的优势相关： 对中大型客户的理解和渗透力。万网的IDC地位依赖于其在个人和中小客户中的影响力，而中大型客户基本都在世纪互联等手上。云主机更是一个替代主机托管和主机租用的产品，而不是一个虚拟主机VPS级别的产品。这种错位延伸可能会导致万网对云主机等IaaS产品的理解和定位偏差。及时能跨过这一关，其人才和企业战略能否适应这个客户群体，还有待观察。 与阿里云的配合和差异化。由于阿里云目前的营收主要靠云主机，且能够获得用户量的也只有云主机一个产品，虽然其推出了10多个产品。所以阿里云不管自己标榜的是要做数据分享的第一平台还是什么，依靠和发展IaaS是其不得不做得选择，否则阿里云基本上在集团内失去了存在的价值。而云主机与传统IDC业务的天然关系，让万网不大可能完全放弃云主机与IaaS。就像当初淘宝云团队和阿里云团队的竞争一样，如今万网IaaS业务与阿里IaaS业务的竞争，也是必须解决的问题，当然，也是风险。两者，应该只能有一家获得集团的支持。   2.1.3 盛大云 盛大云在创立之初，本来是最被看好的，其产品模式令人感觉确实发挥了云计算的精髓。而那时，阿里云不过是照搬了万网卖服务器托管和租用的界面和产品模式，我想起产品负责人应该来自万网。但现在的形势，完全不同了，问题已经多余优势，其在BGP带宽、自有机房、无IDC经验、无资质上带来的问题，已经严重影响了客户的信心，虽然后来盛大云在各方面有所改进，但是失去的信心和口碑是10倍的努力也不一定能招回来的。 上次，也就是9月份，盛大云还能排在第2位，主要是还考虑到其创立初期带来的IaaS产品模式上的创新。现在盛大云在产品上可能进步了，但鉴于盛大云在人气上的下降和口碑上的未能恢复，降到第一阵营的第三位。 盛大云，其初期优势主要有这么几个： 庞大的财力。其同样在初期建立了一只有实力的技术团队，也从国外引入了人才，也同样获得了政府上亿的财政资助。 市场知名度和影响力。盛大作为曾经的中国首富拥有的企业，及时现今退出了一流互联网和游戏企业行列，依然有着巨大的知名度和影响力。在初期也吸引到了大批的用户。   盛大云目前的劣势则更多： 数据中心和带宽问题。由于盛大云长期采用租赁机房，采用第三方CDN服务。这样做确实能够降低运营成本。但要从事IaaS业务，着就变成了一个巨大的劣势。没有自主运营的机房甚至是租赁的机房，没有高质量的多线和BGP带宽资源。 基础设施运营经验。同样，大量的基础设施外包，导致其内部的机房运营、网络管理经验欠缺。 IDC服务经验。不像阿里云收购万网后，多少对IDC服务有所认识。盛大云与IDC的距离更远，而且从国外聘请的人才也对国内IDC政策和形势短期内不清楚或者适应，导致其初期备案和售后被众多客户诟病。 云主机性能和稳定性不足。特别是在华东节点运营的第一年，其云主机稳定性欠缺，网络质量也不够好经常波动，磁盘IO性能也很低，低到运营中小网站都有问题，所有大批用户外逃并失去信心。虽然后来华北节点在这些方面均有所改善，但失去的信心要想找回来，要比刚开始建立信心难上10倍。这里折射出盛大网络集团层面的问题，盛大和陈天桥先生对新业务的容忍期通常不会超过一年，盛大云至今还有投入可能主要还是政府的财政支援。盛大云成立和起步要比阿里云稍微，其推出产品却比阿里云早，说明了内部对盛大云的脚步要求极快，超出了正常的要求。IaaS服务明显不同于网游，其对技术、资源、服务体系的要求带来的准备周期，肯定长于在一个成熟的游戏公司内推出一块游戏的周期。这是欲速则不达的例证。   2.2 以LinkCloud UCloud华云为代表的第二阵营 首先要说明的是，第二阵营并不意味着这些企业没有成绩或者产品差，身处第二阵营的主要不利因素是：1 可继承的基础差；2 现阶段获得的客户数量相比第一阵营少。其中第一个因素是决定性因素，通过分析这些IaaS厂家背后的实力、投入、可继承的客户技术和影响力、产品的性价比、获得的客户数量，我发现其实第二正营的投入产出比目前比第一阵营大。所以他们放入第二阵营真正的原因是可继承的基础差，没有庞大的财力、市场知名度、存量客户为基础，尽管用有效的投入取得了相对不错的产出，总体实力和影响力仍然在市场上处于二线阵营。第一第二阵营的排名与百度云主机自然排名是非常接近的。 第二阵营有一个最大的共同点，就是他们都具备一定的研发力量，因此具备了长期发展的基础和可能性。这个研发力量可能是1个技术人员，也可能是十几个，不过，都算是有了自主研发力量。 2.2.1 LinkCloud 第二阵营中以LinkCloud的势头最为强劲，对第一阵营的盛大云与万网形成了一定冲击，且其产品性价比和口碑目前强于盛大云和万网。相对来说，盛大云目前是走下坡路，万网看似稳健实则在云计算上也较急功近利因此主要是转化存量用户。通过研究LinkCloud和阿里云发现，两家在同一座城市，选择LinkCloud的用户清楚的指导自己为何选择以及看重什么，而选择阿里的用户只是模糊的表示阿里巴巴和阿里云是大公司因而产品肯定不错。可以得出的判断是阿里云和早期的盛大云一样，主要靠的是公司的信誉和知名度，以及相对比盛大云做得好一点。这与盛大云一样危险，知名公司的产品如果没有特点，上述所指出的问题不能在近期解决的话，一两个小小的缺口即可导致客户的持续不可挽回的流失。 以LinkCloud西部数码华云为代表的第二阵营，其实也就这三家家。基本上，云主机市场知名度也是按这个顺寻，除了第一阵营，就是LinkCloud云主机、西部数码云主机、华云。这其中又以LinkCloud风头最盛，西部数码由于传统IDC业务的基础也有些影响力，华云目前的影响力比起前两家则要相差不少。LinkCloud最值得关注，并不只是其市场推广带来的知名度较大，更重要的是LinkCloud的研发实力在第二阵营中遥遥领先，超过万网，接近盛大云，以及其性价比和性能的领先。 LinkCloud相对以研发和创新见长，其灵活的计费模式，包括小时计费、流量计费、免申请试用，目前国内即时盛大云、万网云、阿里云，也只是在调研和筹划中。LinkCloud尽管看起来来势迅猛，但其最大软肋是其背后的支持力量单薄，其母公司网银互联作为浙江一线全国二线IDC厂商每年利润当有限，以及杭州所处的商业环境，其能否坚持投入和支持LinkCloud直至LinkCloud盈利，乃是一个未知数。 2.2.2 Ucloud 由盛大云前联席CEO季昕华创立，目前产品包括云主机、云硬盘、CDN、云数据库等，但并非所有产品和所有功能均可用。 Ucloud作为一个由互联网行业人士创立的IaaS企业，更强调产品的性能和功能，目前看在这两方面做得不错。 2.2.3 华云 华这其中变数最大的华云，目前看，华云在研发和产品上投入较大，已推出云主机、云存储、云CDN，但在市场动作和口碑上还未有建树，虽然其前身蓝芒科技也属于全国二线IDC厂商，但其IDC行业软件开发背景和其倾力转型云计算，后面的变数和行业影响也有较大的想象空间。   2.2.4 西部数码 西部数码则主要依靠其IDC传统业务和代理商的影响力，但其5、6月份的软文中所说西部数码代理系统是国内第一个实现实时开通云主机的平台，则未免贻笑大方。不能实时开通，根本就算不上云主机，而第一和第二阵营的其他厂商早已实现。LinkCloud的技术策略比如采取KVM平台才不采用开源虚拟化管理平台，产品策略比如坚持稳定和透明的价格体系，都让其在第二阵营中遥遥领先，也能够对比第一阵营有自己的明显特色。 西部数码虽然进展较慢，但和万网云是同一类型，属于稳步小幅推进，这是由于他们在传统IDC业务上的优势低位决定的，所以将逐步小幅扩大到一定市场份额，这个一定是多大是由其投入和技术等实力决定的。 西部数码之所以下降一名，是一个很可笑的理由：其云主机提供共享IP。共享IP通常是虚拟主机的标志。虽然独立的云主机确实可以使用共享IP提供服务，但是由于没有看到西部数码关于此事的正式说明，所以让我无法肯定其声称的云主机是基于硬件虚拟化的独立主机，还是虚拟主机或VPS。还有一个不可笑也很好解决的理由：其官网云主机的架构用了云快线的架构图，且未有格式和颜色上的修改。   2.3 以ViaCloud和太平洋电信为代表的第三阵营 第三阵营，如同第二阵营，也只有两个个遥遥领先，就是上海世纪互联的ViaCLoud云主机和太平洋电信。论知名度，他们其比第二阵营的华云不差甚至还有甚之。但是，其知名度主要靠百度付费广告，其广告开销也比华云要高。如果他们在研发上也有如此投入的话，即可进入第二阵营。但是，上海世纪互联ViaCloud和太平洋电信臻云均选择了使用第三方的现成的完整平台，这成为其被归入第三阵营的最大原因。而这个平台目前的客户数量很少，其存在的前景未知。相比其他靠人工开设云主机的第三阵营，和广告投放不如它的厂家，ViaCloud和太平洋电信也可以说是遥遥领先的了。这里包括的是所有号称云主机的厂家，但除了ViaCloud，估计大部分厂家都处于线下手工处理客户请求的阶段，他们主要是靠现有的IDC资源和一些开源软件的直接手工使用。 2.3.1 ViaCloud ViaCloud属于上海世纪互联，也获得了上海地方政府的支持。但上海世纪互联本身投入的力量较少，在研发上尤其如此。其业务发展主要依靠搜索引擎付费排名。 2.3.2 太平洋电信臻云 太平洋电信情况和viacloud类似，其业务主要在南方。 2.3.3 七牛云存储 除了从事云主机服务的企业，做云存储的企业现在也要放在第三阵营，比如七牛云存储、又拍云存储。他们都有一定的用户，但大部分属于试用。 2.3.4 八度网络 八度网络作为一家蛰居安徽的传统IDC服务商，已经做出了转型IaaS服务的大量工作。 2.3.5 中国移动 9月份的预测显然小看了移动推出云计算服务的速度，在12月份，中国移动已经推出服务，包括云主机、云存储、云监控等。但是由于其服务还没有获得市场认知，只能放在第三阵营。 2.3.6 蓝汛 蓝汛早期与Joyent进行技术合作提供云主机，随着Joyent的离开主要着眼于私有云的托管。但由于IaaS本身还是IDC的延伸，其IDC业务近几年也还在逐步建立中，其云产品未见其原有客户范围之外的影响力。在2009和2010年，其对云计算和云主机的理解和定位、策略可能与其他厂商有差异化，以项目型线下销售为主。如今已经发布了在线自助服务的云主机服务，显示其策略有所变化。 2.3.7 其他 除北京世纪互联和蓝汛而外，网宿等传统IDC厂商也对云计算所有关注，有实际行动的诸如云派、首都在线、鹏博士电信通、互易中国等数十家IDC服务商有云主机服务，还有一个瑞豪开源做xen vps好久了。 也包括stdyun为代表的创业公司, 这些公司可能以开源或自主研发的系统为基础提供基本的IaaS产品，但在产品功能、服务上还处于起步阶段。     2.4 以华为为代表的第四阵营 第四正营不是和前三个阵营同一个评价维度，而只是潜在进入者。随时可以转化为第一、第二、第三阵营。 在前三个阵营中，有做的好的有做的不那么好的，有处于上升势头的又处于下降形势的，有靠传统业务影响力的有新兴势力，形形色色差异很大。但他们却有一个共同点，就是已经明确的在IaaS行业里参与竞争，已经出牌了。还有一个阵营，很特殊，范围广，实力也不小，唯一的共同点是他们都还没有出牌，有的有进入市场的意向，有的只是有这个可能意向都还不明显。这个阵营主要包括准备或者可能进入IaaS的企业，大大小小肯定比现在已经进入的企业数量要多。比如： 2.4.1 华为 华为排第一，是因为华为是最有可能进入的。为什么最，是因为他们有一个正式的业务团队已经运作了一年，公开的IaaS网站已经在运营，只是没有全面开放服务。据了解，包括云主机、云存储、云桌面、云会议四个产品。团队大约200人，目前组织架构上在企业业务产品线。虽然网站公开，但产品价格一直未有公开，也就是不能自助购买。 2.4.2 世纪互联 9月份预测，世纪互联自云快线失败后，已经基本上丧失了独立推出云服务的可能，亚马逊AWS由于过于偏重于IaaS，且亚马逊与世纪互联曾有业务纠葛，最有可能仍然是联手微软推出Azure服务。 没过两个月，世纪互联牵手微软。当然，现在只是合作意向，azure在中国区推出预计还需要大半年时间，最快明年年中推出服务。 2.4.3 中国电信 中国电信，其实，在一些地方网站上，已经挂出了云主机业务，当然，不能在线购买，要打电话过去，但是好像也没见推广过。而最新的说法是明年上半年电信的云主机业务正式推出。电信内部的云计算标准10年就开始了，准备不可谓不周密。但IaaS业务，毕竟不是技术和标准的事儿，其云主机到底何时能推出，能有多大竞争力，并不乐观。   2.4.4 百度 百度老大，李彦宏先生，前两年最著名的云计算评语就是“云计算是新瓶装旧酒”，好像是对着旁边坐着的马云说的。今年不同了，百度要做云计算平台，李彦宏已经数度亲自站台为云计算做广告，广告语就不重复了，大意是“百度云计算是新瓶装新酒”。李彦宏先生据说是技术出生（有人根据这句话认为本人不属于IT圈，或者不了解这些大佬， IT圈的人就不能有点幽默感？看不出这里有幽默感的，恕我文字水平不够），但其市场营销意识看来功力也不浅。不过期最近推出的云，真正能用的是个网盘，其他能使用的服务都属于开放平台中为站长继承百度应用设计的服务。上半年曾见过百度的云主机的公开文档，但至少最近没有动静。不知道是遇到了困难，还是正在加紧筹备。不过在其产品列表里明确的有虚拟机产品，我想BAE发展应该也不顺利。其作为PaaS服务构建的BEA、云测试、LBS等开发服务，加上运营、推广、变现服务在产品完整性上完全盖过新浪SAE、盛大云引擎、阿里ACE体系，但是影响力连有先发优势的SAE都不如，不用提阿里云和盛大云的IaaS服务。因为PaaS有先天不足，见后文。 2.4.5 腾讯 腾讯，通常都是看着别人做的有点规模了，不声不响，一推出就能迅速抢占一个山头。当然，偶尔也有失利的时候。可以看见的是，腾讯正加紧整合期IDC资源，BGP网络建设应该已经提到日程，内部的类IaaS服务平台一年前已经开始，可能部分服务内部也在使用了。但还没有看到其提供IaaS类服务的迹象，最有可能的是先充实其开放平台，或者推出PaaS服务。 2.4.6 新浪 新浪在openstack上的投入，有两个期望，一个是推出公有云IaaS服务，一个是提供私有云软件和解决方案服务。从目前释放的信息看，其有意推出云主机之类的典型IaaS服务。现在已经推出的是SAE paas服务和应用商店快速建站服务。 2.4.7 其他 第四阵营除上述几家外，还可以包括： l 网易 网易也在内部有一个很小的研究团队，大概10人左右，据称有意进入IaaS市场。 l 搜狐 搜狐内部有一个分布式存储研发团队，已经推出了企业网盘。据称还有一个PaaS开发团队，将于2013年推出内部PaaS服务。 l 京东 京东有一个网盘服务，内部也在尝试私有云方案，公有云短期当不会推出。 l 完美时空 完美时空据称对私有云也有兴趣。 l 360 360内部应当也有一个几个人规模的私有云研究团队。 l 三大运营商 三大运营商，电信联通移动，都有一支不小的云计算研究和标准团队，主要偏向内部私有云，同时为包括IaaS PaaS SaaS在内的公有云服务大平台做准备。目前，至少电信已经成立了独立的云计算事业部或者子公司。 l 金山 金山成立的金山云目前主要专注于快盘，据称要进入企业级存储服务，可能是备份或云存储。 l ezCloud 由世纪互联前总裁雷紫东创立的IaaS服务公司，包括云主机、云安全、云存储。   3 PaaS 无论是在国内还是国外，PaaS都不是一个主流的云计算细分行业。在国内，PaaS还算不上一个行业。不知道是不是PaaS天生只能是封闭和专有的，至少目前我看到的PaaS服务都是封闭的和专有的，而且这个封闭和专有的程度远超IaaS。即时全部使用开源技术，或者将PaaS平台开源，也改变不了其专有的属性。因为他要求开发和部署者采用迥异于当前的开发和部署环境，而且可迁移性几乎不具备。 就国外来说，最具特色的要数Joyent的服务。其平台都采用开源技术构建，提供了一个优雅的开发部署环境。奈何，其Solaris出身的不幸，以及Ruby和Python并未占据更大的开发者份额的现状，阻碍了其发展的想象空间。Google App Engine 和 微软Azure 确实是很知名的了，但GAE一直接受度不高，Azure不但加入IaaS特性及微软体系以外的开源组件，显示了他们现阶段的无力。 之所以大型企业钟情于PaaS，还是由于其能建立一个封闭的生态圈，更有可能留住流量和网络应用。这些企业也过于自行自身企业现有平台的价值和对开发者的影响力。 就国内来说，无论是推出有一段时间的新浪SAE，还是阿里云ACE和盛大云云引擎，其赢得的客户数量和市场影响力知名度，在IaaS服务面前，都是可以忽略的。在新浪SAE web服务器更独立、百度推出虚拟机之前，尽管新浪和百度都用其所有资源支持站长利用这些PaaS服务建立应用，这些PaaS难以建立实际位置。但是，我欢迎这种新产品的尝试，创新和革新有时候就隐藏在这些不被主流认可的技术和模式中。 4 年度Iaas事件 2012年IaaS行业内发生了诸多事情，但是有影响且有代表意义的是盛大磁盘事件、阿里云IO事件、世纪互联微软合作事件。这三个事件自发生以来一直酝酿单独行文，但始终未能成行，标题已拟好：从盛大磁盘事件看产品战略；从阿里云IO看技术架构和决策；从世纪互联微软合作看跨国云服务商入华。不能完整说明上述三个事件的影响、意义和教训，下文仅做简要评点。 4.1 盛大磁盘事件 2012年年中，盛大云部分磁盘出现物理损坏，影响到包括背包兔在内的部分网站无法访问和恢复。 4.1.1 事件暴露了IT业界对云主机和云计算的误解 云主机不会宕机，云主机不会丢失数据，云计算能解决大数据问题，等等简介，都是不符合实际情况的。既和媒体和部分公司的误导有关，也和用户自己的臆想有关。还是请有误解的人去复习NIST关于云计算的定义，在此不作展开。 顺便说一下，云计算与高可靠高可用无关；虚拟化!=云计算，IaaS也不一定非要用虚拟化；云计算与大规模无关，“没有几千台服务器不叫云计算”？，超大规模数据存储和处理是很火，云计算和规模有没有一毛钱的关系呢？如果非要说有，那就是服务商的规模通常大于客户需求的规模。 4.1.2 事件暴露了背包兔在内的互联网公司运营水平低下 首先申明一下盛大云在产品特性上说的可能不够直白，但是背包兔这样的网站自身除了没有详细了解盛大云主机的特性外，也忽略了基本的IT运维常识：分布式、核心数据备份。填上掉不下免费馅饼，云主机也不是便宜却万能的保险箱。技术和产品虽然在进步，却不可能突变到价格降低还能达到客户不切实际的臆想。没有预案，没有分布式架构，没有核心数据备份，这样的互联网公司肯定是运营成本压缩到不能再低，包括人力和人才成本。 也许有人和公司说，等等，我们的云主机就是绝对可靠用不丢失数据永不宕机的云主机。Really？任何情况下？不要说永远和绝对，即使是相对，你也是牺牲了别的指标。 4.1.3 事件暴露了盛大云在产品战略和技术架构上的盲从和急功近利 盛大云初期的产品布局，是照着AWS打造的。但是，做这些决定前，却没有搞清楚中国的国情和用户习惯。单线、多线、BGP、备案，等等，上线很久可能都没有搞清楚这些事情。这里仅举一个例子，云主机和云硬盘的定位。AWS的单个云主机是不可靠的，亚马逊也不提供可靠性保证，也就是说云主机随时可能会宕机甚至消失，服务器关机后启动已经不是原来那台服务器了而是新的（重启不会），很不可靠，甚至不靠谱，对不对？AWS靠EBS来弥补存储的持久性问题，并推荐客户采用跨数据中心的分布式架构，当然，都是需要额外成本的。 理论上，服务依赖于架构而不是单个硬件，是对的。但是在中国，面向中小用户，这个理论好不好使？盛大云已经给出了答案。 4.2 阿里云IO事件 阿里云IO事件不是一个集中爆发的通常意义上的事件，而是大家的持续的对阿里云磁盘性能低下的抱怨。阿里云断电事件、双11营销事件更像传统概念的事件定义，但在此不作讨论。 4.2.1 事件暴露了中小用户对知名度的重视 阿里云除了IO性能较低，备案收费也曾是中国首创，但是仍然获得了大量的中小用户，究其原因，除了阿里云吸收了阿里系的用户数据进行营销外，则是中小用户对大公司和知名品牌的额外信任，另外则是盛大云的相对不给力。 中国人认为大的就是好的有名的就是好的，还记得三株口服液吗，脑白金就不用说了。 4.2.2 事件暴露了阿里云的技术决策来自于极度自负的技术理想主义者或非技术人员 关于阿里云的IO较低的问题，官方解释是为了保持数据的可靠性磁盘存了多份所以IO性能降低了。拿优势解释劣势是没有问题的，问题在于阿里云的架构设计人和决策人是否在决策时，就知道问题所在。从目前获得的信息来看，这个问题不是事先预知和主动选择的结果，而是问题发生后经过调查研究得到的解释性结论。 关于阿里云的飞天系统和后羿系统，关注阿里云技术架构的都会有所了解。我不知道飞天在设计之初是不是抱着打败CAP定律做最好的架构之类的想法，我不能说这些想法不切实际，创新往往就来源于不切实际，但显然后果是预计不足的。也许，在阿里云，没有远大理想的项目是被人鄙视的。但是，对普通人来讲，架构通常没有最好，只有最合适。 在产品战略没有定义出来之前，就要做一个通用的完美的大一统的系统，无疑具有极大的风险和不确定性。 4.2.3 事件暴露了互联互通的重要性和垄断性 BGP带宽显然是阿里云的不能说唯一但却是最重要的优势。能具有合法且稳定的BGP带宽的，在中国一个手指头都能数出来。不管其他方面如何，BGP带宽还是不错的，是阿里云把BGP带宽带给了中小用户。 4.3 微软世纪互联合作事件 微软和世纪互联于2012年年末达成协议，将在上海的一家数据中心联合提供azure服务。此事件虽然目前对行业影响不大，因为合作还未有产品推向市场，但是它具有代表意义，即跨国公司进入中国市场的路径。 4.3.1 事件暴露了中国中立IDC产业资源和技术上的脆弱性 这次合作采用的是上海浦东数据中心，显然，这不是世纪互联自建或者此前就已经运营的数据中心。可以认为世纪互联并没有现成的可以满足azure潜在需求的有质量有规模的数据中心。当然，也有可能是必须和上海的公司和政府合作的考虑。 世纪互联愿意且急迫需要和微软合作，除了这个合作确实可能带来品牌和营收价值外，也是因为在云快线之后世纪互联再也不能找到合理的云计算服务路径了。即使是上市IDC企业，也没有资源和能力能够在云计算上积累技术和培育市场。 4.3.2 事件暴露了互联互通的重要性和垄断性 合法且稳定的BGP带宽，一个手都数的出来，其中就包括世纪互联。跨国企业如果没有获得数据中心建设、运营资质和BGP链接的授权（这几个授权现阶段基本是不可能），只能寻求本土具有这些资质的企业，而且最好是私营和上市企业。这些条件相加，在中国几乎没得选择。 4.3.3 事件暴露了中外互联网基础设施格局和监管的巨大差异 没有没有资质的限制，依照这些跨国公司自身的数据中心规划和建设能力、运营能力、网络交换能力，当然在大部分本土IDC运营商之上。但是在中国的互联网基础设施格局和监管制度下，外企在中国出了提供基础支持几乎做不了任何事情。所以，有一家公司很好预测，google的云计算服务在相当长时期内不会进入中国。 5 2012年度中国Iaas魔力象限 魔力象限这个词，至少英文词，是gartner提出的。这里的分析和描述，也借鉴了gartner的思路（希望不要遇到知识产权问题）。这个话题本来是一个独立的文章来覆盖，这里就做个简要描述。 5.1 象限说明 魔力象限给出四类IaaS服务商的图形化竞争力位置，这些服务商的市场发展较快，且差异化较明显： 5.1.1 领先型 在当前目标下进展很好，且有很好的未来战略。 5.1.2 挑战型 较好地服务于现有市场需求；战略和野心不足。 5.1.3 战略型 理解市场趋势或拥有改变市场规则的战略，但是当前执行力不够好。 5.1.4 细分型 成功地专注于细分市场；不够专注且创新性不足；表现不如对手。 5.2 象限分布图 象限总计收入15家，均为公开发布产品，其中新浪以PaaS和应用商店计入，七牛以云存储计入。象限图反应的是企业在整体IaaS+PaaS市场内表现，而不是在某个细分市场的表现；例如某个企业可能是某个细分市场的领导者，但在象限图内可能属于挑战者。 6 IaaS预测 2010年，曾有一些预测，主要包括IaaS市场规模和参与者，规模基本正确，参与者由于市场的复杂性，有对有错。本文大部分内容主观性较强，代表了个人观点。而预测，如果说不算谣言的话，那就是主观中的主观，权当娱乐了。主要有下面这些方面： 6.1 PaaS在5年内不能成为主流。 即PaaS业务本身的客户数量和业务营收是传统IDC和IaaS的零头，其影响力也仅限于技术爱好者，其上产生的全球排名10W内独立网站将屈指可数。 6.2 纯PaaS服务将向IaaS/PaaS混合体发展 纯PaaS服务在推出前期依赖公司的输血，在吸引开发者驻留和建立封闭生态圈不大成功后，处于持续发展和营收的需要，将发展IaaS业务。这也应当是一个潜在的趋势，阿里云和盛大云也推出了PaaS服务。 6.3 阿里云在2013年上半年面临众IDC企业的冲击和蚕食 阿里云目前的上升势头还将持续半年到一年，从2012年上半年开始会被陆续进入的原IDC公司蚕食。IDC公司可能通过自主研发或者合作的形势寻找到能够提供云计算业务的办法，因为IaaS就是IDC业务的自然延伸。阿里云可能在2013年下半年停止上升趋势，可能会出现下降趋势，但5年内仍会有一块稳固的市场份额。这个结论有个前提，阿里云在发展放缓和停滞时，仍能获得集团的全面支持，包括带宽和盈利前的资金投入以及协调万网的资质支持。没有这个前提，三年内也就迅速面临盛大一样的解散危机，就是下一个预言。 6.4 阿里云或在三年内面临合并与解散的可能性 鉴于阿里巴巴集团旗下不可能同时存在两家IaaS为主业的公司，也不会允许阿里云如万网所期望成为一家研发和技术支持公司，阿里云只有一条路，不是现在标榜的“数据分享第一平台”，而是建立一个生态系统的IaaS/PaaS平台，并迅速实现盈利。这已经不是阿里集团允许阿里云亏损几年的问题，而是万网面临生存危机问题，阿里云着眼于IaaS/PaaS业务对万网绝对是压力和威胁，万网会从集团和市场两个层面给阿里云压力，或专注于技术或转型。现在阿里云发展良好，只是给了万网压力，却未能动摇万网在IDC领域的低位。没有万网的支持，阿里云资质暂时看不到解决的办法，如果上个预言达成，阿里云在业务规模和营收上停止增长，而万网在市场上有所成就，再联系现在阿里云和云OS分家，给了云OS2亿美元的支持却没有提到阿里云，再加上万网独立上市，万网吃下阿里云不是不可能。届时万网的态度将决定阿里云是被合并还是解散。阿里云持续的营销或许可以看成这个焦虑的外在延伸。 6.5 万网或3年内合并阿里云 这是从上个预言导出的附带预言，万网独立上市，阿里云被万网合并，阿里巴巴在万阿里云上的投入也算有了兑现的机会，人员也可安排，结局总好过阿里软件。同阿里软件一样，阿里云在集团内是一个在技术和业务上都相对独立的单元，其他业务都有自己的技术团队和技术架构，包括在云的各个层面。以万网在研发布局上的谨慎，阿里巴巴集团必须给予其他条件，才可能达成这件有难度的交易。 6.6 盛大云在2013年下半年面临解散的危险 盛大云目前内部可能在努力，但在客户层面新用户的发展几近停滞，可以认为其发展势头开始向下。盛大集团本身对新业务容忍时间一般为1-2年，但盛大云收到国家和上海本地的大量财政补助，容忍3年应该不成问题。从2011年开始计算，2013年下半年到2014年上半年为其发展的关键期，如果自身不能实现盈利，政府资助不再继续，将面临解散的危险。 6.7 华为云服务面临不确定性 华为云服务，就像华为互联网服务一样，与华为设备制造的基因不符合。而在当前阶段，其企业网部门还在为成为主流企业基础设施软件服务商而努力。华为云服务有可能不能获得足够的资源支持，由于面临着与运营商正面竞争的风险也可能不能够获得足够的战略支持。当一件事情全力以赴都不一定能做好的时候，如果在战略层面以尝试的心态去做，显然会有很大的不确定性。当然，华为云服务部门的同学们是十分努力的。 6.8 网易云夭折于上线前 网易云如果着眼于IaaS，从目前其公司的支持和投入力度看，上线很成问题。   6.9 搜狐或于2013年末推出PaaS服务 搜狐目前已经有企业网盘服务，但网盘未被定义在本文描述的IaaS和PaaS服务中。搜狐内部正在研发私有云，或与2013年末或者2014年推出PaaS服务。 6.10 华为云百度云腾讯云网易云将昙花一现 华为云从IaaS，可能会捎带上SaaS，百度云腾讯云从PaaS切入，可能捎带上IaaS，他们背后的庞大体量并不足以让其在IaaS领域有天然的优势，如果网络互联互通和IDC业务准入不发生彻底改变，他们在宽带和资质上就很难取得突破，IDC和IaaS的利润率较低，PaaS业务不能带来预想的战略结果，那么可能作为开放平台一部分的PaaS业务得以持续，IaaS业务可能被边缘化或消失。 6.11 IDC厂商将在2013年加速进入IaaS 尽管目前已经有数十家IDC厂商已经或者正在从事云主机业务，但2013年将会是IDC厂商加速进入IaaS和PaaS的一年，较有实力IDC厂商将会以自主开发或合作、购买的形式加入IaaS。 6.12 电信联通公有云IaaS服务或继续酝酿一年 此前即使以三大运营商动作最快的电信来看，其自主推出IaaS服务，虽然从不同渠道传出一些2013年上半年推出云主机的声音，但个人认为未来一年仍将处于酝酿期。但显然移动已经占有了先机，这与移动较早开始相关自主技术研究有关。但这一动作未必能加快电信和联通推出公有云IaaS服务的速度。 6.13 亚马逊AWS云计算服务或于2013年年底进入中国 尽管亚马逊AWS三年前就开始调研，最近一年也做了不少准备，但是中国的IDC政策环境就如女人的心思版难以捉摸，估计亚马逊也伤透了脑筋，假设宏观环境能够按照近期主管部门释放的信息那样，放开和鼓励第三方从事电信接入服务，亚马逊AWS有望在2013年年底在中国提供服务。   参考资料： 关于周期图的解释，可以参考《云计算炒作路线图》。 关于云计算和IaaS的概念和尺度，参考《云计算概念与定义-NIST版》 关于虚拟化技术的解释，参考蒋清野《虚拟化、云计算、开放源代码及其他》 关于中国互联网数据中心的解释，参考《为什么在中国“公有云”落地那么难》 原文来自 汉唐月","title":"中国iaas产业2012年度点评"},{"content":"    近年来，城市生活节奏越来越快，都市领导精英们已不满足于拥有平凡的办公桌，他们需要一个更能体现自己身份的智能办公桌。这一背景下，云桌以连续的高增长的趋势来到人们的视野。市场需求在不断变化，特别是高级商务智能办公桌都显示出了强劲的实力，而云桌的加入，也使原本竞争激烈的办公家具市场更加受人瞩目。随着云桌的出现，重新诠释了高端商务智能办公桌的全新理念，让都市领导精英们更能体现自身的不同，傲视群雄。     云桌不同于普通意义上的办公平台，它是商业交流、高端高效等多功能为一体的智能平台，既可以作为商业交流的平台，为领导者精英们提供无与伦比的尊贵身份，又可以营造一个智能超凡的工作环境。     作为高级商务智能办公平台的代表，云桌的屏幕输入、语音控制等多种功能更能体现领导者精英们的超凡气质，而在其极具征服力的外表之下蕴藏着设计者的超凡用意，让领导者、高端人士与传统平庸环境拉开距离，为领导者、高端人士打造最最贵的体验。     云桌独特的豪华设计，更能彰显其品牌寓意，满足领导者、高端人士的需求，为领导者、高端人士提供更能体现尊贵身份的办公平台。     不是谁都可以成为“云桌办公”，云桌办公代表着一种领先的创意，强势的科技文化，云桌办公，让领导者对云办公有全方位的新认知，让云桌站在行业的制高点。     云桌办公是云计算下和智能环境相融合的办公环境，云桌代表着进步创新的办公环境，云桌致力于帮助领导者、高端人士在进化创新的办公环境中能够创造出与众大同的思路！让领导者、高端人士办公环境能够与时俱进，环境决定思路，环境塑造结果！","title":"看云计算下的云桌如何办公！！！"},{"content":"很多人觉得云计算应该是个具体的事物，所以初听到云计算时，总会先问一句：“什么是云计算”？ 什么是云计算？问的人轻松，回答的人却很费力，仿佛描绘一种味觉，感觉强烈，却不知如何抓住要领呈给面前的人看个仔细。倘若尽心给出一种解释，或画出一张架构图，听众可能还是一脸茫然，回答的人多半会急得皱眉跳脚，也有人会撂下一句：“你记得是IaaS、PaaS和SaaS即可”。 话虽好说，理却难明。即使听懂了解释，还是有许多人会不知道“云计算”缘何而来，用于何处。  “云计算”一词最早被大范围的传播应该是在2006年。2006年8月，在圣何塞举办的SES（搜索引擎战略）大会上，谷歌的CEO施密特（EricSchmidt）在回答主持人提出的一个有关互联网的问题时说：“……现在出现了一种新的商业模式……人们还没有意识到这个机遇有多大。这种模式的前提是，数据服务的架构应该在他们称为‘云计算’的服务器上，即在某处的云里，如果你有合适的浏览器或接入方式，那么不论你有什么设备，你都可以访问这些数据。” 很多人认为云计算自此出现，因为从此之后各种有关云计算的概念层出不穷，“云计算”开始流行。 但2006年出现的只是“云计算”这个词，仿佛一个幕后工作人员忽然被主持人介绍到台前拿了奖，在媒体长篇累牍的报道下，一夜成名。而实际上，云计算本身无论是商业模式还是技术都已经发展了很长时间，并在实践的过程中逐步演进。在2006年时，云计算本身未必发生质变，但既然人们对云计算的认知发生了质变，所以将其理论化、体系化势在必行。德国政治学家伊丽莎白·诺艾尔-诺依曼（ElisabethNoelle-Neumann）提出过一种“沉默的螺旋”（spiralof silence）的理论，认为人们在表达想法和观点的时候，如果觉得自己的观点是公众中的少数派，就不愿意传播自己的看法，但如果看到自己赞同的观点受到广泛欢迎，就会乐于公开表示自己的观点或态度。这样，多数派的声音会越来越大，形成一种螺旋式上升的模式。云计算概念的忽然兴起或许就与此相仿。 虽然谷歌为云计算命名，但真正明确云计算商业模式的是亚马逊。在施密特态度鲜明地提出“云计算”这个词的几个星期之后，亚马逊推出了EC2（动态计算云）服务，将“云”这个名词包含在内。 亚马逊是个神奇的公司，销售包括图书、DVD、电脑、软件、电视游戏、电子产品、衣服、家具、计算资源等一切适合电子商务的“商品”。在推出EC2的时候，亚马逊也面临不少“这个零售商为什么想做这些”的质疑，但CEO贝索斯对商业的概念理解明显要宽泛很多。贝索斯无疑认为不管是“PC+软件”，还是这种从“云”里取得服务的方式，不仅关乎技术的问题，还都是一种“商业模式”。最早时，为了让网站能支持大规模的业务，亚马逊在基础设施建设上花了很大功夫，自然也积累了很多经验。为了将平时闲置的大量的计算资源也作为商品出售，贝索斯的亚马逊公司先后推出了S3（简单存储服务）和EC2等存储、计算租用服务。贝索斯表示，“我们认为在某一天这也会是一项非常有意思的业务，所以我们这么做的目的很简单：我们认为这是个好业务。”[1]虽然媒体认为这是贝索斯安全度过 互联网泡沫之后的一笔冒险赌注，“亚马逊的CEO想要用他网站背后的技术来运行 你的业务，但华尔街只想他看好自己的店面。”[2]但EC2确实影响了整个行业，也影响了很多人，当时业界明显受到了震动。 在亚马逊之前，虽然有不少服务按现在来看都有云计算服务的特征，但即使是谷歌所提供的服务，仍然可以看做是互联网服务意义内的一种商业模式。而亚马逊推出IaaS（基础设施即服务）之后，仿佛给互联网世界开了一扇窗，告诉人们，还可以这样来运营计算资源，还有一种新的商业模式，叫云计算。而那些与传统互联网服务形似神离的服务模式，也终于可以独立出来，找到自己归属的阵地——云计算服务。 云计算起源于互联网公司。虽然互联网公司给人的印象大多是钱多烧不完，但其实多数互联网公司都很注重成本控制。尤其是早期不少互联网公司都起源于学生宿舍，费用的掣肘使这些公司尽可能合理地利用每一个硬件，最大程度地发挥机器的性能。所以早期的互联网公司都会自己选主板、硬盘等配件，然后进行组装，完成服务器硬件的设计。这种传统沿袭下来，就是现在硬件定制化日趋流行的原因。如今谷歌、Facebook都会自己动手设计和生产服务器，以最少的配件最大可能地支持特定功能需求，并降低服务器的能耗。 对于硅谷工程师而言，超级家电连锁店Fry's或许是最值得逛的“购物天堂”。硅谷有不少Fry's的连锁店，由于Fry's占地面积很大，东西齐全且便宜，理论上一个技术人员可以在这里买到所有的零配件，然后组装一个主板，所以这里很受工程师的欢迎。雅虎的工程师们也曾是Fry's的常客。 2000年，互联网经济处于第一波热潮中。这时全球互联网用户人数已经从1995年的几千万增至数亿，并仍在不断快速增长。快速增长的用户数量，使许多网站感受到了系统支撑的压力。雅虎也一样。当时雅虎经常面临的一个问题是，一个频道设计完成之后，在上线之前测试可支撑一定数量的用户（比如10万人），但第二天一上线就出现达到指标的情况。怎么办？只有增加设备，尽可能提高系统对服务的支撑能力，因此即刻购买设备然后连夜组装机器的情形并不少见。到Fry's选买配件是不少工程师的工作内容之一，当然也是乐趣之一。雅虎的共同创始人之一大卫·菲洛（DavidFilo）至今还喜欢组装机器，不知道是不是一种习惯使然。 为了支撑业务运转，满足用户需求，服务器的整体性能在不断上升，相应地，服务器的数量也在不断增加。这很自然会引出一个问题，数十台机器可以手动组装维护，上千台机器如何处理？甚至，如果机器数上万呢？人能管理的机器数量始终有限，即使劳作不休，所能承受的负荷也有一定的极限。每一个大型互联网公司，都曾遇到过这个问题：如何管理和维护成千上万台服务器？ 很多事情在讲述的时候似乎很有意思，但当时经历的时候会让人觉得绝望。“大系统”的压力对于系统维护工程师而言，就是这样的事情。2000年初，笔者(注：此处指姚宏宇博士。)当时在雅虎公司编程之外做的最多的两件事，现在听起来或许还有些“土”：一件是组装机器，一件是维护机器，而这只是为了保证在足够多且可靠的硬件支撑下，业务系统能够有效应对不断快速增长的用户需求。在当时，笔者加班到晚上十点钟左右是常有的事，然后还要从加利福尼亚州的桑尼维尔（Sunnyvale）开车回家，再和朋友一起找地方吃饭。由于住的地方位于南圣何塞（SouthSan Jose），附近是越南人聚集地，太晚的时间只有越南米粉（Pho）可以吃，于是以越南米粉果腹的时间持续有半年之久，以致现在对“牛肉粉（BeefPho）”产生排斥感。吃完饭之后回去还要继续工作，凌晨两、三点才能睡觉。美股的开盘时间是东部时间9:30~16:00，这意味着在此之前必须保证交易网站服务的正常运行，所以必须每天早上6点准时起床，来检查系统的运行状态。很多人每天都会收到大量邮件，但早上刚起床就看到上万封邮件和几百条呼叫（Pager）信息，并且全部来自机器的情况并非人人都有体会，虽然是专职于此的技术人员，这种极大的压力状况还是很容易让人产生无力感，持续下去会有崩溃的感觉。怎么办？只有把雅虎财经频道大部分的底层代码进行重写，找回些生活。 现在看来，大量用户带来的大流量的压力，以及大系统的问题不仅对于每一个互联网公司来说仍然普遍存在，而且已经开始越来越多的出现在其他传统企业中。谷歌在1998年时的访问量约为每天1万次，但到2007年时，日访问量已达到5亿多次，机器数量也已经超过50万台。对于大多数互联网企业而言，虽然服务器规模不至于如此庞大，但随着用户规模的增加，少则数百台，多则上千台的服务器仍然对企业的运维管理能力提出了挑战。 对于企业来说，随着系统越来越大，维护人员却不能对应成比例增长——企业要考虑人力成本，还要顾及运维效率的问题——即便如此，雅虎在某一阶段有过半的成本都耗在旧有设备和系统的维护上，而无法把大部分资金投入到新业务的开发中。公司能创造新价值的部分越来越少，创新也越来越少，只能求变。 除了大规模系统的维护之外，海量数据的存储问题同样是互联网公司头疼的问题所在，随着网络技术和服务的快速发展，用户平均在线时间的延长和用户网络行为的多样化，导致各类数据在不断涌现，移动终端的出现更是扩充了网络服务的内容与范围，这些都大大增加了互联网公司需要承载的数据量。大量的用户数据对每一个公司而言都是宝贵的信息财富，但是如果只是购买邮箱存储设备一年就要花费几亿美金的话，每个CEO都会再权衡一下，于是雅虎后来有了Hadoop的研发。 因此，在流量和服务器数量都高速增长的情况下，“一个能够与网页增长速度保持同步的系统”[3]必不可少，这也是谷歌三篇有关分布式的论文*(注：这三篇论文分别是有关GFS（GoogleFile System）分布式存储系统、MapReduce分布式处理技术和BigTable分布式数据库的论文，下文也有所提及。)之所以具有重要指导意义的原因——一切均出自实践。 随着信息经济的发展，许多传统企业现在也在加速向互联网化转型。最初存在于互联网企业的压力也出现于其他组织机构中，对大数据的管理和处理需求也在这些组织中产生。比如一个政府部门，如果考虑到信息中心和各垂直部门的信息资源，可能会有数千台服务器和数百套业务系统需要整合和管理，而且多数分布于不同的地理位置。如何对这些资源进行集中统一管理？ 或许，这些组织也可以考虑选择云计算。 对于大多数中小型组织，甚至于个人而言，云计算的魅力来自那些灵活、弹性和随时随处可用的云计算服务，比如亚马逊的计算资源租用服务，或者一些针对企业和个人的“云存储”服务。这些服务是大多数人与云计算最直接的接触，也形成了他们对云计算的直观认识。但是我们知道，云计算应该包含两方面的内容：服务和平台。云计算既是商业模式，也是技术。 美国加州大学伯克利分校在一篇关于云计算的报告中，就认为云计算既是指在互联网上以服务形式提供的应用，也是指在数据中心里提供这些服务的硬件和软件，而这些数据中心里的硬件和软件则被称为“云”[4]。 云计算服务代表一种新的商业模式，SaaS（软件即服务）、PaaS（平台即服务）和IaaS（基础设施即服务）是这种商业模式的代表表现形式，美国国家标准与技术研究院（NIST）就曾于2011年发布过一份《云计算概要及建议（草案）》 （DRAFTCloud Computing Synopsis and Recommendations）的报告，对SaaS、PaaS和IaaS等进行了详细说明。很多人认为SaaS必须运行在PaaS上，PaaS必须运行在IaaS上，但实际上三者之间并没有绝对的层次关系，它们都是一种服务，可以有层次叠加关系，也可以没有。 对于任何一种商业模式而言，除了理论上可行之外，还要保证实践上可用。因此，伴随着云计算服务理念的发展，云计算也形成了一整套技术实现机制，而云计算平台则是这套机制的具体体现。 但云计算服务和云计算平台之间并没有相互依存的必然关系。即如果以传统的底层架构，或类似超级计算等实现的服务具备云计算服务的三个特点：大用户群、永远在线，以及随时随地可接入，也可称为云计算；而云计算平台本身在设计上就针对了“大用户”、“大数据”和“大系统”的问题提出了解决办法，这也是在提供云计算服务时会遇到的典型问题；所以，以云计算平台支撑的云计算服务，不仅可以提高服务的效率，而且还会充分发挥平台的能力和优势。 很多人会把服务和平台模糊起来进行介绍，也有很多人因此会混淆对云计算的认知。看到云计算，眉眼之间都觉得熟悉，便以为是旧识，不待招呼细聊，引手就向别人介绍，这是云计算，以前是…… 按照“选择性认知（selectiveperception）”的理论，人们在处理信息时都有一种选择性倾向。人们不可能吸收他们所观察到的所有信息，而只能从接收到的零碎信息中依据自己的兴趣、背景、经验和态度主动地进行选择性接受。因而知识结构、看问题的视角和商业利益的各不相同，就使各个群体对云计算形成了多种解读方式。 从技术角度而言，云计算最早的出身，应该是超大规模分布式计算。比如雅虎为了解决系统对大规模应用的支撑问题，而设计的超大规模分布式系统，目的就在于将大问题分解，由分布在不同物理地点的大量计算机共同解决。但随着技术不断的发展和完善，云计算在解决具体问题时，借鉴了不少其他技术和思想，包括虚拟化技术、SOA（面向服务架构）理念等，所以很多人乍看之下会觉得相似。但云计算与这些技术有根本性的差别，不仅体现在商业应用上，还体现在实现细节上，本书将在之后的章节对此进行较为详细的说明。 我们知道，所有科学的认识都是以一种层次递进、螺旋上升的方式发展的，每一种技术都有其适用的场景和范围，比如量子力学不会否认经典力学在一些物理问题上的作用。所以，对于云计算来说，糅合了各种技术不代表云计算比其他技术更优秀，而是说明云计算技术确实是针对“大用户”、“大数据”和“大系统”发展出来的一种新的实现机制。 另外，为了区分云计算的部署使用方式，现在经常提到的还有“公有云（PublicCloud）”、“私有云（PrivateCloud）”和“混合云（HybridCloud）”的概念。 公有云通常是指开放给公众使用的云基础设施。可以是企业、院校、政府机构，也可以是一些合作机构来持有、管理和运营公有云。私有云通常是指为一个客户单独使用而构建的云基础设施，因而提供对数据、安全性和服务质量的最有效控制，并可以控制在此基础设施上部署应用程序的方式。通常，多数中小型企业可以从不同服务商提供的各种公有云服务中受益，而鉴于现在企业所需面对的用户量、数据量及系统复杂度都在快速增长，即便是一个小企业所面临的压力，从过去的大型企业的角度来看也都已经是“大”问题，因此通过建设私有云来应对系统压力、满足业务系统需求，正在成为越来越多企业和组织的选择，并且随着企业规模的增加，私有云建设所能带来的收益也在愈发突显。 从现实情况看，公有云和私有云的区别主要体现在商业应用方面，技术上应该是互通的，区别不大。技术层面最根本的区别是访问权限和访问模式的控制，即可访问的范围决定了“云”的业务性质。如前所述，通常意义下，私有云所面向的是一个组织机构，而非公众，但这界限其实并不绝对和清晰。比如谷歌的云操作系统，对内使用而言是私有云，而对外提供GoogleApp Engine时，就变成了公有云的PaaS服务。混合云也并非半“私有”半“公有”，而是在某一块资源不够的情况下，从另一处借用而已。比如游戏服务提供商Zynga有自己的“云”运行服务，但在用户使用高峰期时，又会租用亚马逊的IaaS服务。 长远来看，公有云是云计算的最终目的，但私有云和公有云会以共同发展的形式长期共存。好比银行服务的出现，货币从个人手中转存到银行保管，是一个更安全、方便的过程，但也会有人选择自己保管，两者并行不悖。       本文节选自《云计算：大数据时代的系统工程》 姚宏宇  田溯宁 著 电子工业出版社出版","title":"云计算：大数据时代的系统工程"},{"content":"云计算降低了创业门槛，提高了生产力。最耳熟能详的故事就是Instagram利用Amazon云服务来实现其架构。在2012年8月，其每日活跃用户已超过老牌网站Twitter。据称，在这么大的一个系统中仅有3名工程技术人员（Instagram被Facebook收购时共13名员工）。可见，云计算平台在这个新兴应用的快速成长中发挥了多么重要的作用。 2012年，国内的新浪、阿里巴巴等公司的云计算平台都得到了较快的发展，很多新兴应用也开始选择云平台，享受到节约初期硬件投入的成本、时间成本与人力成本的好处。而大型应用在云平台的选择上则表现谨慎，目前国内可见的迁移到云平台的 典型案例还不多。考虑到国情的特殊及对国内云厂商的诚信，大型系统对云计算平台存在数据安全的顾虑，担心数据的私密性能否得到保证。另外，在数据可靠性方 面，虽然不同的云平台对数据的可靠性都有一定的SLA可用性承诺，但目前的云平台运营时间都较短，数据可靠性需要更长的时间来验证。 在未来一年，除一些数据安全性不太敏感的应用，如图片CDN及部分垂直应用的数据外，开发商仍然面临两难的选择。一方面云计算的数据安全顾虑不能完全消除，对公有云的选择存在顾虑，关键核心业务很难迁移到云平台上。另一方面，如果选择私有云，针对大部分应用场景自行搭建一套类似OpenStack的体系，并不能带来运营人力成本及时间上的收益。 如果把未来技术方向按使用云和不使用云进行区分，有以下几种做法： 使用Amazon Web Services平台； 使用OpenStack或者类似开放公有云网络； 使用OpenStack或者类似开放体系搭建私有云； 仅部分使用云或不使用云。 前两种可能短期内很难有获得广泛安全信任的厂商出现，而第三种私有云对于大部分组织来说发挥的价值有限。虽然所有开发厂商都希望生产效率能得到提高，以便适应业界的用户需求及行业态势的瞬息万变，在业务上赢得先机，但如何利用好云计算平台是摆在国内云服务厂商及应用开发商面前的一道难题。 大数据与离线计算市场 过去一年里，大数据在业界得到了飞速发展，行业也对大数据的方向有了更深刻的认识。在公有领域，大数据集中化的趋势比较明显，百度、腾讯、阿里巴巴、新浪、360等公司掌握了互联网领域最有价值的数据。在数据利用及挖掘方面，由于商业化的成熟，搜索引擎走得较早，类似用户的喜好、年龄、购买习惯、性格等都可以通过搜索的历史数据分析得出。但在更多其他领域中，数据的价值才刚刚体现。在2012年，我们看到了淘宝指数这样的数据产品上线，但相对整个电商或者行 业数据挖掘来说，目前展现及利用的只是冰山一角，更多有价值的信息需要进一步构建体系去挖掘与展现。在社交网络如微博中，由于内容完全由用户创造 （UGC），用户的交互及参与度更高，相关数据挖掘的空间及价值更大。在微博上，目前的数据价值主要服务于个人消息流阅读，而在未来，经济、金融、传播、 社会科学等多个方面的更多数据的潜力有待挖掘。 开放平台与应用市场 在通用应用领域，由于用户的使用时间集中停留在几个大的平台上，独立的应用脱离这些平台很难获得快速发展，因此未来的所有新兴应用，需要考虑好如何利用开放平台的基础来获得更快的发展。由于平台应用的托管需求，开放平台、云计算平台与应用产生了一个稳定的组合。开放平台提供API及服务体系来帮助应用访问数据及获取用户，云计算平台解决应用托管及扩展的问题，应用则可以低成本地转化创意及获得收益。目前开放平台厂商从提供IaaS到PaaS不同级别的服务，而应用开发商可利用PaaS平台来协助进行更多精细化的运营。 但开放平台目前还存在若干不足，从平台开放规则来看，大部分开放平台对于开放规则并没有明确的约定，因此，应用厂商可能担心开放平台的开放力度和政策的延续性。另外，从应用角度来看，目前大部分开放平台的应用还是以浅层次应用为主。浅层次的应用通常以获取平台的流量入口为主要目的，例如微博开放平台中，这类应用以内容推广或向好友发送邀请等方式获取流量。而在强调个性化及用户体验的时代，这种应用思 路通常效果不佳。从开发角度来看，大部分开放平台的文档、问答、社区、工具等配套设施存在良莠不齐的现象，大部分重量级的应用通常会通过内部的渠道获得技 术支持，但这对于小的开发商并不是一个不利因素。 在技术层面，开放平台一直面临开放与安全监管问题，未有效管理的开放会造成用户对开放平台 的不信任，进而也会影响整个生态圈。目前成熟的开放平台大多采用类似Facebook或微博这种基于OAuth Open API的方式，而OAuth协议本身也需要跟随业界的发展去改进。随着移动应用的飞速发展，未来移动方向的开放平台目前已经看到不少新的尝试，或许更多不 同的开放平台模式会在国内产生。 计算机语言 根据业内权威的Tiobe的计算机语言排名， 编程语言在过去一年并无大的变化。在服务端领域，依旧是以C/C++、Java、PHP开发语言为主。PHP解决了Web快速开发的需求，C/C++以高性能网络服务为主，Java则擅长处理规范化的业务逻辑并且也有不错的执行效率。对于行内的新人来说，选择任何一门老牌语言都是一个不错的选择。 从趋势来看，几年前受到小范围关注的函数式编程语言并没有得到业界的采用，选择并坚持使用Erlang、Scala等语言的公司并不多。而被Tiobe在 2009年视为黑马的年度语言Go，也未能得到足够的发展，目前的排名被挤出50名之外。计算机语言领域缺乏变化，一方面老牌语言形成的工具、框架、体 系、生态是影响计算机语言选择的主要原因；另一方面，由于云平台出现，在一定程度简化了应用开发的复杂度，因此这些语言的开发效率的瓶颈并不严重。 数据库 虽然身处大数据时代，但大部分业务在线实时处理的数据依然存在关系型数据库如Oracle或MySQL中。与之相关的是，技术人员需要思考未来数据是使用关 系数据库存储，还是要迁移到云存储的方案上。大部分云存储的缺点通常是IOPS（即每秒能处理的事务数）偏低。而使用传统的解决方案，存储的伸缩性、管理 成本又是一大问题。 在数据库领域，一直都是国外系统占据垄断地位，而我们也看到国内一些大型的厂商（诸如淘宝、腾讯等）在利用自身的技术力 量进行定制的数据库与存储方面的基础平台或组件的研发。虽然存在一些争议，但自定义的组件可以根据业务场景进行特殊的优化，一方面可以提高性能及单位资源利用率，另一方面在极端情况下可以有更稳定的表现。另外，这些组件由于对专业能力要求高，可以吸引更多高端的人才加入，而这些人才未来可以给组织带来更大的贡献。","title":"[置顶] 云计算的意义与选择"},{"content":"    写这个博客，是 因为看到了一篇微博，说Apple将要推出其最新的产品iWatch，我联想到Google公司的不务正业，发了一条感慨：“Google、Apple这些公司真是厉害，特别是google，貌似不务正业，研发自动驾驶汽车、眼镜等等，实际上，他们在布局未来的无处不在的互联网。互联网如何无处不在？ 除了覆盖广外，还需要大量的方便接入的终端和应用！自动驾驶汽车、眼镜包括Apple将要推出的iWatch都是终端。” 联想到我所从事的云计算行业的远景，有更多的感慨。      随着IT技术的发展，人们跟网络的联系是越来越紧密了， 这两年移动互联网因为智能手机的大发展而让我们越来越认识到这个趋势。 可以肯定的是， 人们未来的衣食住行等日常生活是越来越离不开网络了，发展到最后，很可能是人们都有一个能够和网络保持联系的接口。现在智能手机充当了这个角色。因为它具备了输入和输出以及网络连接的功能，而且相对于其他普遍的网络接口如PC、Pad之类的，携带相对方便、技术相对成熟。 但目前的状况，还需要接口终端本身要具有一定的处理能力和存储能力，芯片技术的发展让终端本身的体积保持合适的同时，让处理能力却变得越来越强大。 但随着云计算的发展，情况将进一步发生变化。     云计算将要打破的是终端的能力限制。 之前的比拼终端CPU\\存储等硬件能力将会被大大弱化，因为多数应用都会在云计算平台上运行。 按照目前的技术能力，应该是可以实现的了，但目前还受限于网络的带宽，在国内尤其明显，因此还没有具备大规模使用的能力。 那么如果这些问题已经得到解决，人们和网络的联系将会大大增强。 但存在疑问的是，手机将仍然是最佳的人和互联网的接口终端吗？     这个是要画一个大大的问号的。 因为人们的天性，是不喜欢过多的束缚的。 人们更喜欢跟身体联系紧密的，如手表、眼镜等就属于比手机更加方便易携带的终端， 因为他们可不需要攥在手里、放在口袋或包里。 Apple和Google们的逻辑可能正在于此。 但近阶段这些终端可能无法取代手机，因为手机有足够用的屏幕（解决了输出问题，触控屏还解决了输入的问题），而眼镜和手表等可能还不具备这样的条件。 但我相信这样的问题会在下个几年或者十几年里解决掉，目前不是已经有kinect这样的终端和增强现实这样的技术了吗？ 只要他们的成本足够低、带宽的限制足够小，用眼镜或者手表方便地输入输出应该就会很简单。 而一旦这样的情况出现，手机作为人和互联网的连接的最佳的接口终端将会成为历史。但这种最佳的终端是不是手表或者眼镜呢？ 我不确定，大家发挥想象力吧！","title":"人和互联网联系的最佳终端是什么？"},{"content":"作者：刘旭晖 Raymond 转载请注明出处 Email：colorant at 163.com BLOG：http://blog.csdn.net/colorant/ 更多云计算相关项目快速理解文档  http://blog.csdn.net/colorant/article/details/8255910 == 是什么 ==   目标Scope（解决什么问题）   为分布式系统提供高可靠性的协同工作机制   官方定义   ZooKeeper is acentralized service for maintaining configuration information, naming,providing distributed synchronization, and providing group services.   个人理解   基本上ZooKeeper提供了一个简化并支持特定功能的分布式文件系统接口，加上数据同步，变更通知，客户端Cache等辅助机制。基于这样的接口，用户可以自己在此之上构建逻辑，来实现各种分布式系统系统工作所需的各种功能，如配置管理，名称服务，Master选举，同步，锁等，类似于google的Chubby，但是没有内建锁的支持。   == 如何实现 ==   核心思路，架构   zookeeper的核心思想是提供一个非锁机制的Wait Free的用于分布式系统同步的核心服务，提供简单的文件创建读写操作接口，其系统核心本身对文件读写并不提供加锁互斥的服务，但是提供基于版本比对的更新操作，客户端可以基于此自己实现加锁逻辑。客户端可以连接任意zookeeper服务节点来读写数据，zookeeper内部会分为Leader和Follower角色。     Zookeeper使用简单的同步策略，通过以下两条基本保证来实现数据的一致性： 全局串行化所有的写操作 保证同一客户端的指令被FIFO执行（以及消息通知的FIFO）   客户端尽可能通过Cache和消息通知机制来减少与服务器之间不必要的信息沟通，来减轻服务器负担     数据更新操作需要服务器Leader节点协同Slave节点通过ZAB协议（基本就是两阶段提交）进行全局广播来实现，因此随着Slave节点增加，性能是下降的。   数据读操作可以由任意服务器节点提供，如果不是Lead节点，读操作本身不保证数据是最新的，但是可以通过一个Sync（大概就是一个空的写操作）+read的模式来实现对最新数据的读取（由前述两条基本保证可推得）   Zookeeper自身文件系统维护在内存中，通过定期Snapshot和Log记录来实现灾难恢复   zookeeper对用户暴露简单的API接口，读写创建Znode数据节点，Znode节点分为普通节点和临时节点，零时节点当创建它的客户端连接结束/丢失以后会自动删除。API主要包括   Create : 创建node Delete : 删除node Exists : 判断node是否存在 get data : 读取node内存储的数据 set data : 向node写数据 get children : 获取一个node的子node列表 Sync : 等待数据更新的同步完成     适用领域   需要一个中心服务提供协同工作原语支持的分布式系统。能够将协同工作部分简单的剥离（或者添加）使用外部服务的场合。   细节   Snapshot创建时不Block数据更新操作，因此不保证精确再现zookepper某一个特定时间点的状态，不过由于串行化更新操作和数据更新的幂等特性，只要完整数量的LOG被顺序更新（可以重复），由非精确状态再现的Snapshot是可以恢复得到精确的最新状态的。   == 相关项目 ==   上下游项目 Hbase : 使用Zookeeper做Master选举等 Hadoop2.0 (YARN) BookKeeper: Zookeeper内置项目，基于Zookeeper实现的一个Log记录系统   类似项目 chubby   == 相关文献 ==   项目主页 http://zookeeper.apache.org   Paper 论文   ZooKeeper: Wait-freecoordination for Internet-scale systems A simple totallyordered broadcast protocol 作者：刘旭晖 Raymond 转载请注明出处 Email：colorant at 163.com BLOG：http://blog.csdn.net/colorant/ 更多云计算相关项目快速理解文档  http://blog.csdn.net/colorant/article/details/8255910 == 是什么 ==   目标Scope（解决什么问题）   为分布式系统提供高可靠性的协同工作机制   官方定义   ZooKeeper is acentralized service for maintaining configuration information, naming,providing distributed synchronization, and providing group services.   个人理解   基本上ZooKeeper提供了一个简化并支持特定功能的分布式文件系统接口，加上数据同步，变更通知，客户端Cache等辅助机制。基于这样的接口，用户可以自己在此之上构建逻辑，来实现各种分布式系统系统工作所需的各种功能，如配置管理，名称服务，Master选举，同步，锁等，类似于google的Chubby，但是没有内建锁的支持。   == 如何实现 ==   核心思路，架构   zookeeper的核心思想是提供一个非锁机制的Wait Free的用于分布式系统同步的核心服务，提供简单的文件创建读写操作接口，其系统核心本身对文件读写并不提供加锁互斥的服务，但是提供基于版本比对的更新操作，客户端可以基于此自己实现加锁逻辑。客户端可以连接任意zookeeper服务节点来读写数据，zookeeper内部会分为Leader和Follower角色。     Zookeeper使用简单的同步策略，通过以下两条基本保证来实现数据的一致性： 全局串行化所有的写操作 保证同一客户端的指令被FIFO执行（以及消息通知的FIFO）   客户端尽可能通过Cache和消息通知机制来减少与服务器之间不必要的信息沟通，来减轻服务器负担     数据更新操作需要服务器Leader节点协同Slave节点通过ZAB协议（基本就是两阶段提交）进行全局广播来实现，因此随着Slave节点增加，性能是下降的。   数据读操作可以由任意服务器节点提供，如果不是Lead节点，读操作本身不保证数据是最新的，但是可以通过一个Sync（大概就是一个空的写操作）+read的模式来实现对最新数据的读取（由前述两条基本保证可推得）   Zookeeper自身文件系统维护在内存中，通过定期Snapshot和Log记录来实现灾难恢复   zookeeper对用户暴露简单的API接口，读写创建Znode数据节点，Znode节点分为普通节点和临时节点，零时节点当创建它的客户端连接结束/丢失以后会自动删除。API主要包括   Create : 创建node Delete : 删除node Exists : 判断node是否存在 get data : 读取node内存储的数据 set data : 向node写数据 get children : 获取一个node的子node列表 Sync : 等待数据更新的同步完成     适用领域   需要一个中心服务提供协同工作原语支持的分布式系统。能够将协同工作部分简单的剥离（或者添加）使用外部服务的场合。   细节   Snapshot创建时不Block数据更新操作，因此不保证精确再现zookepper某一个特定时间点的状态，不过由于串行化更新操作和数据更新的幂等特性，只要完整数量的LOG被顺序更新（可以重复），由非精确状态再现的Snapshot是可以恢复得到精确的最新状态的。   == 相关项目 ==   上下游项目 Hbase : 使用Zookeeper做Master选举等 Hadoop2.0 (YARN) BookKeeper: Zookeeper内置项目，基于Zookeeper实现的一个Log记录系统   类似项目 chubby   == 相关文献 ==   项目主页 http://zookeeper.apache.org   Paper 论文   ZooKeeper: Wait-freecoordination for Internet-scale systems A simple totallyordered broadcast protocol","title":"Zookeeper 快速理解 ."},{"content":"3、         目标实现     我们从一个用户的角度来考虑这个问题吧。要实现“自助服务”，首先就需要在客户和“云”之间建立“窗口”，保证客户能够方便地访问和使用，这个窗口可以是Web网页，也可以是某个客户端应用，例如DropBox，就有网页客户端和针对不同终端系统的客户端软件。     其次，需要有足够大的通道，保证内容和消息的传递和通讯，这就需要有不同形式和适用于不同场景的网络接入方式和传送机制，让用户能够随时随地地和网络保持连接，而且速度最好要足够快，这才能确保用户有良好的使用体验。我们现在流行的有线接入（光纤、同轴线缆等）、蜂窝网络（GPRS、3G、LTE等）、无线网络（Wifi、WiMax等）等已经比较普遍，在某些环境下甚至要用到卫星、微波等方式。     再次，“云”后台要健壮、可靠并有足够的弹性和智能，这才能保证“自助服务”所获得的资源和服务的质量。云计算的数据的处理和保存都在云端，所以，系统要足够健壮，这就需要云平台在架构设计阶段就要考虑这个问题。冗余备份技术是当前互联网中提升系统健壮性方面用得最多的了，实现简单，但缺点是代价高昂，恢复速度较慢；而考虑到经济型，云计算采用大量的X86体系的元器件，失败几率相当高；而即使使用昂贵的硬件，失败仍然不可避免，基于这样的考虑，在云计算架构设计时就采用“假定失败”机制（Design for failure），把失败当成常态，让系统在部分失败时能够迅速地自我修复。在可靠性方面，目前用户数最多、系统最稳定的Amazon也只能达到99.95%的可靠性，这虽然对一般业务，例如web、视频等，已经足够；但对可靠性要求比较高的业务来讲，例如银行业务、BOSS系统等，99.95%的可靠性远远不够，让人充满希望的是，Amazon在其规划中的目标是能够达到11个9，如能够实现，则对绝大多数的业务来讲，这都是一个相当不错的指标了，也可以达到银行业务、BOSS系统的系统安全性要求。弹性即平台的各个模块和部件必须要能够自由地组合和分散，例如，你可以通过网络配置一台1G CPU，2G内存的虚拟服务器，也可以配置上万亿次/秒计算能力、内存数百T的超级计算机。云平台还需要足够的智能，它不光能够有自我检测、自我愈合的能力，还要能够预测并动态调整资源的分配，只有这样，才能轻松应对各种复杂的网络情况，让客户使用无忧，放心地“自助服务”。     还有，要实现“自助服务”，还需要让客户对自己的使用情况有一个实时的了解，这就需要一系列的辅助系统，例如客户管理系统、计费系统、监察和控制系统等。客户管理系统让客户能够配置自己想要的资源和服务，并能够有计量工具实时地计量自己的使用情况，以帮助客户制定使用策略；计费系统让客户能够实时地理解自己的成本支出；监察和控制系统则可以实时地通过系统检测，预测、建议乃至自动化配置网络资源，从而帮助客户实现网络的弹性需求，提升系统的使用体验。     当然，在目前这个阶段， 特别是在中国， 网络带宽普遍不大、网络环境复杂多样，为了增加云计算平台的可用性和提升客户的使用体验，还需要在网络传输方面做出改善，如基于CDN（内容传送网络）技术开发相关的云传送网络。     因此，根据上面的分析， 我们就对云计算平台所需要的一些基本部件就有了一个大概的图景，如图一所示。 图一  云计算的基本结构     需要说明的是，图一所示的云计算的基本结构显然并不全面，例如，没有涵盖目前云计算中被大众认为的很重要的应用壁垒，即安全。对于这个问题，我的回答是这不会是云计算成为主流IT技术的拦路虎，实际上，云计算平台的安全机制应该是比传统网络平台更有优势的，我在4.3.1.2会具体讨论。","title":"云计算生态系统（三）"},{"content":"全球互联的今天，不需要怀疑云计算是否能给企业用户带来便捷的应用，作为全球IT业的领导者Google（谷歌）、Amazon（亚马逊）、Microsoft（微软）等IT巨头已经为云计算的应用做出了榜样，虽然部分应用仅仅是刚刚起步，但已经可以预想未来便捷快速的web应用，云计算代表未来计算机服务的发展方向，它将广泛应用已经是大势所趋，越来越多的企业用户已经开始关注云计算服务。亚马逊宕机事件等一系列云服务提供商影响较大的网络故障，使得企业用户对云计算的安全性忧心忡忡，大型企业仍对云计算望而却步，首要的问题是安全，能够把企业的数据、甚至整个业务架构，交给云计算服务供应商吗？  针对新一代信息技术的发展进行跟踪研究，关注云计算环境企业信息化面临的风险，研究如何建立安全应对风险，云计算环境信息系统运维管理和信息安全管理的改进，探讨如何进行云审计以鉴证安全措施的效率和效果。","title":"云计算安全与审计实践"},{"content":"根据NIST的权威定义，云计算有SPI， 即SaaS、PaaS和IaaS三大服务模式。 这是目前被业界最广 泛认同的划分。PaaS和IaaS源于SaaS理念。PaaS和IaaS可以直接通过SOA/Web Services向平台用户提供服务， 也可以作为SaaS模式的支撑平台间接向最终用户服务。 1. SaaS：提供给客户的服务是运营商运行在云计算基础设施上的应用程序，用户可以在各种设备上通过搜客户端界面访问，如浏览器。消费者不需要管理或控制任何云计算基础设施，包括网络、服务器、操作系统、存储等等；    2. PaaS：提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置； 3. IaaS: 提供给消费者的服务是对所有设施的利用，包括处理、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、储存空间、部署的应用，也有可能获得有限制的网络组件（例如，防火墙，负载均衡器等）的控制。 SaaS(Softwareas a service)，国内通常叫做软件运营服务模式，简称为软营模式。 PaaS(Platformas a Service), 意思是平台即服务。 IaaS （Infrastructure as a Service），即基础设施即服务。","title":"云计算的三大服务模式"},{"content":"作者：刘旭晖 Raymond 转载请注明出处 Email：colorant at 163.com BLOG：http://blog.csdn.net/colorant/ 更多云计算相关项目快速理解文档  http://blog.csdn.net/colorant/article/details/8255910 == 是什么 ==   目标Scope（解决什么问题）   为分布式系统提供高可靠性的协同工作机制   官方定义   ZooKeeper is acentralized service for maintaining configuration information, naming,providing distributed synchronization, and providing group services.   个人理解   基本上ZooKeeper提供了一个简化并支持特定功能的分布式文件系统接口，加上数据同步，变更通知，客户端Cache等辅助机制。基于这样的接口，用户可以自己在此之上构建逻辑，来实现各种分布式系统系统工作所需的各种功能，如配置管理，名称服务，Master选举，同步，锁等，类似于google的Chubby，但是没有内建锁的支持。   == 如何实现 ==   核心思路，架构   zookeeper的核心思想是提供一个非锁机制的Wait Free的用于分布式系统同步的核心服务，提供简单的文件创建读写操作接口，其系统核心本身对文件读写并不提供加锁互斥的服务，但是提供基于版本比对的更新操作，客户端可以基于此自己实现加锁逻辑。客户端可以连接任意zookeeper服务节点来读写数据，zookeeper内部会分为Leader和Follower角色。     Zookeeper使用简单的同步策略，通过以下两条基本保证来实现数据的一致性： 全局串行化所有的写操作 保证同一客户端的指令被FIFO执行（以及消息通知的FIFO）   客户端尽可能通过Cache和消息通知机制来减少与服务器之间不必要的信息沟通，来减轻服务器负担     数据更新操作需要服务器Leader节点协同Slave节点通过ZAB协议（基本就是两阶段提交）进行全局广播来实现，因此随着Slave节点增加，性能是下降的。   数据读操作可以由任意服务器节点提供，如果不是Lead节点，读操作本身不保证数据是最新的，但是可以通过一个Sync（大概就是一个空的写操作）+read的模式来实现对最新数据的读取（由前述两条基本保证可推得）   Zookeeper自身文件系统维护在内存中，通过定期Snapshot和Log记录来实现灾难恢复   zookeeper对用户暴露简单的API接口，读写创建Znode数据节点，Znode节点分为普通节点和临时节点，零时节点当创建它的客户端连接结束/丢失以后会自动删除。API主要包括   Create : 创建node Delete : 删除node Exists : 判断node是否存在 get data : 读取node内存储的数据 set data : 向node写数据 get children : 获取一个node的子node列表 Sync : 等待数据更新的同步完成     适用领域   需要一个中心服务提供协同工作原语支持的分布式系统。能够将协同工作部分简单的剥离（或者添加）使用外部服务的场合。   细节   Snapshot创建时不Block数据更新操作，因此不保证精确再现zookepper某一个特定时间点的状态，不过由于串行化更新操作和数据更新的幂等特性，只要完整数量的LOG被顺序更新（可以重复），由非精确状态再现的Snapshot是可以恢复得到精确的最新状态的。   == 相关项目 ==   上下游项目 Hbase : 使用Zookeeper做Master选举等 Hadoop2.0 (YARN) BookKeeper: Zookeeper内置项目，基于Zookeeper实现的一个Log记录系统   类似项目 chubby   == 相关文献 ==   项目主页 http://zookeeper.apache.org   Paper 论文   ZooKeeper: Wait-freecoordination for Internet-scale systems A simple totallyordered broadcast protocol","title":"Zookeeper 快速理解"},{"content":"移动应用程序的市场竞争非常激烈。要让用户在众多的应用程序中注意到你的作品，需要努力的工作和持续的努力。你需要尝试本节中所述的部分或全部销售和推广战术。如果你是为了乐趣或是为了丰富你的履历表而开发应用程序，那么推广方式可以更自由一些。但是推广应用程序仍是值得的：如果你的应用程序十分流行，以至于潜在客户或雇主听说过它们，那么他们就更有可能看重你。 如果编写应用程序是你的主要业务，情况就不同了。为了最有效地利用有限的时间和资源，需要追踪所做的所有工作及其效果。你需要花费时间和资金来运用以下战术： ●   追踪花的每一分钱和每分钟。 ●   使用电子表格跟踪在应用程序上的全部投资。 ●   把时间折算成每天的承包率。 ●   每周汇总一次数据来监控投资情况。 把资金投入不起作用的广告是没有意义的。在营销的过程中，会得到一个非常痛苦的教训：将投入增加一倍，通常只换来百分之几的销量增长。更好的做法是找出合适的营销渠道，将资金和时间投入到这些渠道中。 在开始创建广告文案文本和信息，以及开始为徽标和其他创意付费之前，需要知道你在销售什么。是什么使你的应用程序与众不同？为什么会有人买它？如果你像我一样，在骨子里是一个工程师，那么这些问题将会使你畏缩，觉得找不出这些问题的答案！的确是这样。坐在办公桌前是不可能回答出这些问题的。你需要走出办公室，与人交谈。你需要看到有人在使用你的应用程序。这个过程要重复进行。在早期阶段，发布或构建设计概念之前，就应该让很多人尝试你的应用程序，这样就能够知道其他人对应用程序的看法，而这对你来说会是宝贵的信息。他们的观点可能与你的观点完全不同。测试用户那些看起来是无用的评论很可能向你指出独特的卖点。 注意：不要秘密的开发，试图“完善”你的应用程序。这样不会知道市场上需要什么样的产品。走出去，找出用户真正感兴趣的。 从与试用用户的交谈中，会对应用程序的独特之处形成自己的看法，并知道使用哪些信息进行营销最为有效。过度细化这个过程没有意义。现在你可以发布应用程序并评估结果。结果是否支持你对应用程序及其用户群的看法？数据是否显示一些完全不同的东西，例如你根本不知道存在的充满热情的用户群？不要害怕在推出应用程序后继续完善和调整应用程序。 有一个书面的营销计划很重要。在应用程序上线前的每个星期，你应该为非开发的营销和推广活动做好计划。持续几个月的博客推广可以建立忠实的读者群体，这样的效果比在发布应用程序时进行广告突击会好很多。你的目标应该是让用户知道你是谁，在开发什么，以便使他们准备好在你的应用程序发布时购买。 你可能很容易把重点放在代码和工程方面。不过，为了从应用程序中赚到钱，还需要走出去销售它们。下面介绍一些实用的战术来实现这些销售目标！ 标准战术 你的应用程序需要有一个网站。如果应用程序是现有的网站或服务的扩展，这是很容易的。而如果应用程序是你的主产品，则仍然需要创建一个网站。这个网站是一个与用户交互的地方，他们可以管理自己的账户，并获得你的支持。它也可作为在线推广的营销基地。应用程序如果没有网站，那么即使有优秀的图形设计，仍会显得不够专业。 你的网站需要有一个用户论坛。不管应用程序是多么易用，问题是难免的。你希望有一个地方可以让用户互相帮助。论坛不仅可以解决这个问题，还可以帮助你建立一个宝贵的常见问题的列表，这比你自己随意猜测要可靠多了。论坛还是你与忠实用户互动和为他们提供特别优惠的地方。维护和管理应用程序的论坛需要花费工作和时间。需要把这部分预算计入每周的活动中。一个管理良好的论坛将很有价值，值得建立。 利用社交媒体来推广应用程序是现在标准的做法。因此，你应该确保有Twitter和Facebook账户，并使用更有针对性、用户更可能对你的应用程序更感兴趣的社交媒体，如Quora网站。维护自己在社交媒体中的影响需要一定的时间和精力，也需要为此做好计划。如果你不保持与用户互动，应用程序将无法获得长远的成功。至少，需要为订阅的用户群提供定期的更新。在高端，你可以建立强大的影响力，这有助于巩固客户群。如果应用程序侧重于技术，应该利用旧的社交媒体的优势，如Google Groups或Internet Relay Chat，许多面向技术的用户更乐意使用这些沟通手段。 此外，关注面向市场的邮件列表的效果很好。电子邮件仍然是Internet上最常用的沟通手段。邮件列表的订阅者往往是真正的粉丝，可以直接向他们的收件箱发送邮件。每月的新闻邮件可以提供使用提示、技巧、行业新闻和对你的应用程序所在领域有用的信息。它可以链接到辅助的应用程序和服务。像这样包含高质量内容的邮件会为你创建良好的口碑。使用像MailChimp等服务将邮件发送到邮件列表中的电子邮件，可以避免垃圾邮件黑名单和用户订阅管理等问题。也需要为此预算时间。如果应用程序很成功，或者有营销预算，那么可以逐渐将这部分工作外包。一个好的营销人员可以帮你建立并保持活跃用户量。 注意：你可以看到，当应用程序越来越更成功时，编码占用的时间会越来越少。这是直接利用应用程序谋生不可避免的结果。 当推出应用程序之后，需要处理一些标准的推广活动。例如，需要将应用程序提交到所有的应用程序目录和评论网站，如www.appstorehq.com和http://bestapps.com。将应用程序提交到这些网站是一个吃力不讨好的工作；如果负担得起，应该外包它。 你还需要为应用程序开发一个标准的简短宣传材料，包括文字和图片。然后应该为每个要链接到的目录创建一个着陆页。通过使用单独的页面，可以跟踪每个目录的有效性。还可以为A/B测试使用不同的版本，在着陆页上尝试不同的内容。然后，可以使用这些内容，在应用程序商店列表中来描述应用程序。 在任何成功推出的应用程序中，还有一个重要的手段是博客。需要有一些博客来评论你的应用程序。不要担忧没有读者。甚至不定期更新的博客都有足够的读者。标准的做法是写一封礼貌而简短的电子邮件，说明你的应用程序的关键点，并提供免费下载，让博主可以使用并评论。你可以使用应用程序商店的优惠券支付博主下载应用程序的费用。不用说，要选择内容与你的应用程序相关的博客。要让博客介绍你的应用程序，没有什么万能的方法。你需要逐渐与他们分别建立良好的关系。 注意：不要指望从博主那里得到积极的回应，特别是从流行博客的博主，因为他们会收到很多这样的请求。选择那些不太受欢迎的博客，他们会受宠若惊为你的应用程序写评语。这些博客仍然是有价值的，并会继续在网上流传，为你的应用程序和网站提供基本流量。 获得传统媒体的报道也是很有挑战性的。你需要通过http://prnewswire.com发布一篇新闻稿。不过，如果没有这部分预算，可以自己将新闻稿发送到你认为相关的媒体网站。确保应用程序的网站有“宣传资料袋”(这是一个页面，包含应用程序的基本细节、你的介绍和你的背景，以及以前的新闻稿页面列表)。编写有效的新闻稿并获得传统媒体的报道，这是一个庞大的主题，值得仔细研究。 需要将应用程序提交到可以找到的尽可能多的移动应用程序比赛。移动行业会议通常会有相关的比赛(但要小心那些收费很高的比赛，它们通常不划算)。这有两个好处。首先，你可能会赢，甚至得到安置。至少，你会出现在参赛作品列表中。其次，会有专业人士来审查你的应用程序，并进行极为严格的评估。从参赛作品中，你可能会得到非常有价值的反馈。在提交应用程序来进行比赛时，可以重用你发送给博主的邮件内容和提交给目录的内容。许多比赛还需要应用程序的YouTube演示视频。创建这样的一个视频很值得，因为你可以在其他推广活动中重复使用。我在网站http://mobileapps.listkitty.com上维护一个最新的移动比赛名单，可能会对你有用。 如果你的主要收入来自应用程序的销售，而不是广告或在应用程序内的销售，就需要考虑提供应用程序的精简版本，使用户可以先试用。精简版本应该大大降低功能，并以各种方式加以限制。你可以使用这个版本来促使用户购买完整版本。但是精简版本仍然应该有用，否则可能不会被应用程序商店接受。 注意：精简版还有另一种的危险：负面评论。免费软件大多都受到这个问题的困扰，精简版本尤为严重。因为对软件满意的用户不会卸载应用程序，所以除非他们主动返回应用程序商店来评价你的应用程序，否则他们没有机会这样做。另一方面，那些不满的用户，在卸载它时可能会评价你的应用程序。普通用户只是试用你的应用程序，或没有你的应用程序的服务账户，这必然会降低用户的体验，导致他们发布负面评论。因此，虽然精简版可能会有助于促进销售，但它也可能会适得其反。需要仔细权衡这一点：你的目标用户善变吗？应用程序满足了他们的重要需要吗？如果事情不是按着你的计划进行，就要准备撤下精简版。 最终的标准战术几乎不需要说明：需要为应用程序制定合适的价格！为此，应该以类似应用程序的价格为基准价格。如果你的价格高于或低于预期的价格太多，会损害你的利润。游戏类的应用程序一般相当便宜。扩展现有服务的应用程序可以更贵一些。如果你的服务在某些方面是独特的，或具有很高的价值，就可以提高它的价格。 昂贵战术 如果你有营销预算，那么推广应用程序时，就有了额外的选择。然而，你要小心衡量和跟踪每一份资金投入的地方。有可能将大量资金花费到在线广告上而得不到任何成果，这种情况并不少见。本小节提供了一些网站链接来作为所讨论服务类型的示例。提供这些链接并不表示赞同这些服务。此外，你需要自己研究，才能找到适合自己的预算和需求的服务。 宣传应用程序最主要的地方是应用程序目录网站，这样可以针对那些真正在寻找应用程序的目标用户。根据网站的情况，每个月可能要为一个应用程序的广告支付数百或数千美元。 也可以将目标定为高端读者的内容网站，如http://alistapart.com，这是特别针对iPhone应用程序打广告的网站。对于这种类型的广告，真的需要使用广告网络，如http://fusionads.net。这种营销战术非常昂贵。只有当你正在推广一个品牌，或有非常明确的收入模式时，使用这种战术才合理。 也可以在其他应用程序内宣传你的应用程序。有些网络提供了这种服务，但是费用会很高。使用这种战术时，你是在向针对性很强的用户群做广告，他们肯定有智能手机。 www.admob.com是这类广告的市场领导者。通过使用这种战术，可以很快生成大量的广告浏览器，所以你需要确保自己的营销机构准备好来处理潜在客户的涌入。对这种类型的推广，还需要准备支付可观的费用。 要创建一个持续的营销活动(包括社交媒体和主要内容网站)，可能需要借助应用程序推广机构，如www.apalon.com。通常，这样的服务提供了一定范围内的固定价格推广套餐，可以让你的应用程序出现在多个相应站点中。 如果有预算，这是将应用程序推广的繁重工作外包的一种很划算的方式。这些机构已经开发了媒体关系，这使他们在推广应用程序时比你自己努力要高效得多。这是他们提供的一部分价值。 最后，根据你的业务，可能会发现离线推广应用程序也很有用。传统的媒体，如报纸、电台和电视等拥有大批观众，如果你的公司或客户是知名品牌，这可能是吸引用户的正确方式。不是只有国家级媒体才有用，地区媒体也可以收到良好的效果。作为应用程序的开发人员，可以提出这样的营销策略作为建议，但最好把具体实现方法留给专家。 游击战术 如果是独立的开发人员，没有预算，该怎么办呢？如何让人们购买你的应用程序？这时你需要一些游击战术！如果遵循传统规则，你是没有机会的。相反，你应该努力尝试那些用钱买不到的东西，想方设法让用户喜欢你。 可以为应用程序做的最重要的事情是为它建立一个社区。这个社区由圈内的忠实用户组成，他们会因为喜欢你的应用程序而免费推广它。他们周围的普通用户会对你的应用程序产生好感。你需要从头创建这个社区。 为应用程序社区奠定基础的方法之一是招募测试用户。你要亲自向这些用户介绍，并说服他们试用你的应用程序。你给他们提供尚未在应用程序商店提供的预发布版本。在任何情况下，进行独立的用户测试都是至关重要的，但你也可以利用开发过程中的这个测试，为社区的发展播下种子。你需要让这群人感觉到他们在参与一件很有意义的事。你需要准备与他们持续保持沟通，无论是面对面还是通过电话，同时需要认真采纳他们的反馈。这样，你将使他们感觉到自己也是应用程序的专用所有者。社区建设本身就是一门复杂的艺术。关于这方面，也有一些书和许多博客。做一些研究，掌握窍门，并开发自己的粉丝群。 社区如此宝贵的原因之一是它能够帮助宣传你的应用程序。让你的忠实粉丝在Twitter上转发你的公告；而喜欢你的Facebook状态消息，是在线应用程序推广的一个重要因素。还可以更进一步。为信息的传播者提供奖励非常有效。奖励可以很简单，从tweet转发比赛，到提供应用程序商店的购买信贷。在奖励方法上发挥创意，让它们适合你的用户群和应用程序。通过建立一种激励措施来推广游戏，可以大大提高你的应用程序产生的影响。 还可以改进奖励战术，为发现错误的人提供奖励。这看起来有些危险，有悖常理，但实际上却可以取得巨大的成功。发现错误的用户几乎都是真正的用户，他们真正关心你的程序，会找出包含错误的边缘情况。奖励他们应用程序商店或其他相应服务的礼券。对于高科技的人群，我发现，thinkgeek.com礼券很受欢迎。通过公开奖励发现错误的人，使用户感觉到你对自己的应用程序和业务的诚意。而且你得到了免费的质量保证！ 奖励模型有许多的用途。dropbox.com文件共享工具已成为使用奖励进行病毒式营销的金牌标准。仔细看下该模型的工作方式。当你介绍一个朋友到Dropbox，并且他(或她)通过你的推荐注册之后，你会获得额外的免费存储空间。而你的朋友也会得到比自己直接注册更多的免费存储空间。你的推荐不会被视为不当行为，因为现在是在帮助朋友。这是一个令人难以置信的强大方法，可以用在自己的应用程序中。 这种方法的关键是在应用程序中始终有一个分享屏幕。这是一个方便访问的网页(也许是顶级菜单项)提供了许多分享选项。你可以提供电子邮件、短信、社交网站分享、社会新闻以及其他任何适合自己客户群的信息。应该使用社交网站友好的大图标，并使该页面简单而直观。应用程序中的这个页面可以产生比大多数其他形式的推广多得多的用户。 有人收到下载和购买你的应用程序的邀请后，你需要帮助此人克服存在的任何疑虑。这时你建立的支持网站和在线社区就能够发挥作用了。不同的用户会受不同媒体类型的影响。你需要提供应用程序的完整文字说明和幻灯片演示。为此，可以使用一些服务，如http://slideshare.net。还可以重复使用为参赛作品创建的视频演示。你需要得到一些来自你最狂热的粉丝的心声，这些真的有用，即使它们可能有点俗气！ 销售数字产品时，肯定会遇到盗版问题。那些越狱的用户和那些有手机root权限的用户可以从一些不道德网站下载破解的应用程序。这就是生活。你要么整夜失眠，担心销量受损，要么将它当作市场的另一个挑战。问题的事实是多数盗版者买不起你的应用程序。他们要么是未成年，要么不能使用信贷。不过，你可以这样思考：现在这个时代你必须争取每个细小的网上关注，争取每一位用户，甚至是盗版者也是有一定价值的。他们可能会说服他们更有道德的朋友来购买你的应用程序。如果他们真的很喜欢它，可能会在自己的博客中大加赞赏。他们可能会提高你的“免费”用户的数量。你应该向他们进行推广。不要害怕使你的应用程序成为“pesterware”，让盗版的版本不断弹出窗口，要求用户购买正版产品。虽然破解者可能从破坏应用程序的版权感到乐趣，但他们没有兴趣费力地重新编码来消除弹出窗口。所以要将盗版转变成你的优势，接受它的发生并采取行动，而不是因此失眠。 游击战术中最困难的是发布高价值内容的博客。这里没有神奇的方法。真的要做一些繁重的工作才获得一定的成效。然而，有着大量用户群体的博客所带来的潜在价值是巨大的，而且可以持续多年。你可以撰写与你的应用程序相关的博客，肯定会有用。当然，你应该控制在每篇博客中销售应用程序的冲动。这一主题已经有很多书介绍，所以你可以找些这样的图书阅读。对此我给出的一个意见是数量有时会胜过质量。你写的越多，效果越好。你永远无法预知哪篇文章将流行。一名记者朋友曾经对我说，对每一篇文章都应该“发表后忘记”，一周发帖一次绝对是最低要求。 还有最后一个很简单的游击战术：在电子邮件签名中推广应用程序。在你发送的每封电子邮件底部包括一个到你的应用程序的链接，你会惊奇地发现这有多有效。 总结 上面介绍了销售应用程序的多种战略和战术。不过这只是一个起点。现在你应该知道自己在什么地方欠缺知识，应该到哪里去寻找更多信息，以及如何为你的应用程序策划、执行和运作基本的营销活动。 即使是开发人员，也不应该害怕接触这些营销活动。你可能会发现它们比想象的更有趣。当你从第一次销售中感受到兴奋感后，会体验到一些特别的东西，几乎会上瘾。运作营销活动将提高你的专业水平，所以不应该回避。如果你有条不紊地进行这些活动，是不会有什么问题的。   《移动云计算应用开发入门经典》试读电子书免费提供，有需要的留下邮箱，一有空即发送给大家。 别忘啦顶哦！","title":"移动云计算中选择推广应用程序的战术"},{"content":"自从CLOUDtable推出以来，关注‘云桌’的人士疑问该产品算是‘云桌平台’还是‘桌体电脑’要多长时间才会分别销售。 环境形势的变化不会令云桌感到压力。云桌创始人张海宏（denops·zhang）告诉我们，云桌在短时间内不会有争食销售的问题。所以选择此时上市。 “请看看他们推出的云桌CLOUDtable产品，一款全黑色，能够使云桌成为了市场之王的云桌第四代产品，市场飞速增长，”他说，“他们本可以在向后推迟云桌上市时间，只是希望市场能够购买到一种‘解渴’云桌机型，用于云桌办公，但是对他们来说保持创新与适当时机出击更为重要。” 来自市场调查公司的其他数据显示，云桌选择在‘云桌平台’市场顺流而下创造云桌办公的时机非常适当。 报告称，在全球云计算设备市场（定义为网络智能计算），其用户端外形分为以分米为单位的移动型和以米为单位的固定型，桌体平面属性是固定使用方式的大型用户端，一云多屏是主要表现，云桌正是基于固定使用方式的大型云办公设备，与其竞争的并不多见，云桌选择在现在的时刻上市无疑时机非常适合！ 他表示，云桌必须在2013年之前推出云桌，其原因在于此时没有竞争的产品来分食云桌的销量，不如云桌自己独自出手。“尤其是在移动电脑市场可供消费者选择的产品数量大增的环境下，竞争产品正在进入你死我活的境界，因为云桌准备充足，他要根据平板电脑的市场损益程度，适时推出‘桌体电脑’，如果云桌此时再不进入市场，就太不知时机的价值了。”A  ","title":"天时地利人和的云桌CLOUDtable"},{"content":"ADN新开了云计算Cloud和移动计算Mobile相关技术的博客 摘要: 除了面向AutoCAD，基础设施，建筑业和机械制造业之外的DevBlog之外，ADN又新开了云计算Cloud和移动计算Mobile相关技术的博客，欢迎大家订阅，地址是http://adndevblog.typepad.com/cloud_and_mobile/阅读全文  posted @ 2012-06-27 13:50 峻祁连  AutoCAD中程序创建Ribbon界面执行AutoCAD命令 摘要: 在基于AutoCAD做二次开发时，常见的教程讲的都是在DLL中定义一些自定义命令，然后通过netload命令加载这个DLL，通过执行自定义命令的方式来执行我们的自定义功能。这样的方式在在学习中是显得很...阅读全文  posted @ 2012-06-18 15:39 峻祁连  在线研讨会网络视频讲座 - 方案设计利器Autodesk Infrastructure Modeler 2013 摘要: 我以前对伽利略项目做个一点介绍，大家都很感兴趣，现在这个产品正式发布了，名称叫Autodesk Infrastructure Modeler简称AIM，注意不要和AIMS（Autodesk Infra...阅读全文  posted @ 2012-06-14 10:41 峻祁连  Autodesk 产品二次开发技术研讨会将在上海广州北京相继举行 摘要: 6月到7月我们准备在上海、广州、北京举行三次技术研讨会，讨论新技术，展望未来。届时我也会介绍一些云计算和移动计算方面比较酷的东西，欢迎所有对Autodesk产品开发感兴趣的有关开发人员参加，不论您是否...阅读全文  posted @ 2012-06-12 15:43 峻祁连  有些垃圾网站转载都不会 摘要: 有时会看到我的文章被转载，只要保留作者信息和原文链接，并且忠实于原文都是很欢迎的。这里的忠实原文应该是最基本的了吧，转载嘛，最简单的也就是拷贝粘贴吧，可发现有些垃圾网站，连拷贝粘贴都做不好，弄的文章句子都念不通，这个太没专业精神了，比如下面这个： 这都什么和什么啊，这帮人弄这个垃圾网站有什么用啊！！ 原文在这里：http://www.cnblogs.com/junqilian/archiv...阅读全文  posted @ 2012-06-01 23:10 峻祁连 ","title":"峻祁连6月博客一览"},{"content":"Google在举行 Google I/O开发者大会上，首席工程师 Peter Magnusson介绍了企业云服务软件Compute Engine，旨在吸引消费者和挑战亚马逊公司的WebService服务，在此服务中包含了企业云服务五大关键趋势，如果Google美梦成真，对开发者，对用户都将产生深远影响。 1）忘记Web和Native，云才是王道 Magnusson说：“你已经没必要担心Web和Native到底谁胜谁负了，这不过是个短期问题，我们可以同时拥有两者”。一些小团队必须研究客户，根据反馈进行相应优化，但最终，Google欲通过云端实现诸多可能，无论是特殊界面还是特定应用，都没关系。 Magnusson说：“我们现在差不多处于拐点，一些知名小应用比如Instagram的退出要是没有一个精心管理的云设施便无法实现。新的云服务希望提高弹性，将灵活性扩张到更多类型的应用中，我们正在努力建立未来的全球云计算机”。 2）托管服务是趋势 Google App Engine 提供的一些早期服务便是现在 Compute Engine的雏形，虽然开发者解决了一些计算问题，但许多App Engine应用在基础设施中任何地方都可以处理流量问题，不但代价高昂，还会让人迷惑不解，Google认为，这样的时代即将过去，那么接下来会是什么呢？在Google看来，未来开发者只需操心自己的产品，未来的趋势就是托管服务。 现在的AppEngine应用已经超过100万个，需要大量的工程师来管理这些基础设置，如果通过托管方式，那么就会节省许多成本，公司无需使用自己的机器与管理人员，省下的成本可以转给客户。 3）服务具有更高计算能力 在大会上，Urs Hölzle高级副总裁对Compute Engine做了一次精彩的演示， Institute for Systems Biology利用庞大的60万个遗传分析计算核，以以前从未有过的速度进行计算，所有这一切都在Google的基础设施上进行。 Magnusson说：“有许多创业公司都要求有60万个核，Google这个演示似乎是在告诉创业公司和其它企业：不要担心，有我在。 4）无需精通一切就能开发应用 有了一家基础设施公司来管理计算，托管应用并灵活处理规模，开发商无需任何知识都精通。如果Google梦想成真，必将降低人们编程门槛，更多人将参与到应用开发中。 Magnusson说：“Google自己提供最基本的搜索，邮件，日历，地图应用，剩下的则交给其它应用，Google现在托管的应用超过100万个，预计在几年内，应用数量将超过1000万，所以Google云服务是为数百亿的应用而设的。 5）服务与应用一同扩张。 Google的主要目标是吸纳新应用，最终，Google希望为开发商节省成本，管理项目，所以，Google的容量将会随开发商的应用一同扩张。 Via RWW （annie 供雷锋网专稿，转载请注明！)","title":"Compute Engine揭示企业云服务5大关键趋势"},{"content":"　　云计算的定义是什么？云计算是怎么定义的，下面这篇文章将为大家讲述这个问题。        长定义是：“云计算是一种商业计算模型。它将计算任务分布在大量计算机构成的资源池上，使各种应用系统能够根据需要获取计算力、存储空间和信息服务。” 　　短定义是：“云计算是通过网络按需提供可动态伸缩的廉价计算服务。” 　　对云计算的理解 　　提供资源的网络被称为“云”。“云”中的资源在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。这种特性经常被称为像水电一样使用IT基础设施。[1] 　　有人打了个比方：这就好比是从古老的单台发电机模式转向了电厂集中供电的模式。它意味着计算能力也可以作为一种商品进行流通，就像煤气、水电一样，取用方便，费用低廉。最大的不同在于，它是通过互联网进行传输的。 　　云计算是并行计算(Parallel Computing)、分布式计算(Distributed Computing)和网格计算(Grid Computing)的发展，或者说是这些计算机科学概念的商业实现。云计算是虚拟化(Virtualization)、公用计算(Utility Computing)、IaaS(基础设施即服务)、PaaS(平台即服务)、SaaS(软件即服务)等概念混合演进并跃升的结果。 　　总的来说，云计算可以算作是网格计算的一个商业演化版。 　　云发展(Cloud Development)概念是由利科国际咨询集团(Liek Group)总裁胡治军先生提出的在云时代、云社会当中基于云计算理论的发展模式，这个模式的应用要远远超越于互联网模式应用给人们带来的巨大发展动力和发展潜能。 　　云发展的核心思想价值，是在于它将所有对云计算技术应用的理念的总概括，代表了云时代、云社会当中总的发展模式，发展理念与发展方向，是当今最先进、最前沿、最科学、最全面、最系统的文化思想理论。 　　中国云发展产业联盟(CCDUN),(简称：中云联)，由利科国际咨询集团《著云台》团队打造，是为中国云计算服务商及所有研发或销售云计算相关产品与服务的IT公司(软硬件厂商、咨询服务企业、系统供应商、网络服务商)、为云计算研究的专家和学者、为云计算研发一线工作者设立的非官方、独立于运营商与厂商的非盈利性网络社区。         以上为大家讲述的便是云计算的定义，关于云计算，后期会写更多的文章，谢谢朋友们的支持！","title":"云计算的定义"},{"content":"谷歌最擅长的是精简计算机，只利用必要资源运行程序，上周 I/O 大会上，Google 宣布推出自家的云计算服务：Google Compute Engine，目标直指当前的云服务巨头亚马逊。而国外专家预计 Google将从亚马逊手里抢走一批坚定的云服务粉丝，而Google抢客户的关键手段在于性能优势。 Google自家开发者也在博客里宣布Google云服务依靠3个证书来对抗包括亚马逊在内的云服务供应商。 规模：Google内部我们每天处理大量的计算任务，像索引网页、一天内处理数十亿搜索查询。但利用Google数据中心，Google Compute Engine减少了管理大量任务的时间、简化了计算流程，你可以发布许多计算机集群、成千上万的内核。 性能：许多人对云端表现不佳习以为常，但我们的用户将受益于谷歌数据中心的效率和连续运行的稳定性。例如，我们有成熟的网络老保证云端的连续性，即使在一个分享的云端你不会突然掉线、你可以随意调整一个应用程序而不用担心它出问题。 低价：从节约成本的角度看，云端计算是非常有市场的。因为我们数据中心非常经济的规模和效率，跟其它云端服务商相比，我们Google Compute Engine在同样的价格上可以提供多50%的计算量。 当比试规模的时候，很少有公司能达到10万个服务器、77万个可用内核容量的标准；而Google被报道光服务器就有100万台，而貌似唯一能与之抗衡的只有亚马逊。当比试价格的时候，虽然Google称 “Google Compute Engine在同样的价格上可以提供多50%的计算量。”但亚马逊也可以做到，所以到时候只是看Google怎么打破它的低价底线。但最重要的却是性能！ 性能恰恰是Google的王牌！ 如果Google能够解决亚马逊用户面临的输入/输出、网络性能不一致的问题，我们可以保证Google在这个回合可以赢，因为输入/输出问题是许多同类科技公司想解决的问题，如果Google率先解决了，那预计在2013年中期亚马逊会有一大批的粉丝迁徙到Google这里来，而且有些EC2用户也会撤退出来。 另一种可能，如果Google的性能不比亚马逊AWS好，或者Google Compute Engine service有一些主要限制，大部分用户会安安静静地呆在亚马逊AWS那边，另一部分用户会冲着Google的规模和体验过去，然后就是两家开始打持久战的时候了。 Via  gigaom （济慈 供雷锋网专稿，转载请注明！)","title":"Google云计算凭什么打败亚马逊：性能第一"},{"content":"今天开始学习Hadoop,开始看书，找些资料。去图书馆借了《实战Hadoop--开启通向云计算的捷径》一书。图书馆里有关Hadoop的书太少了。","title":"中国云•移动互联网创新大奖赛"},{"content":"安装git sudo suapt-get updateapt-get install git 获取快速安装脚本 git clone git://github.com/StackGeek/openstackgeek.gitcd openstackgeek使用基础脚本安装依赖包 ./openstack_base_1.sh完成脚本使用后，编辑interface vim /etc/network/interfaces修改为 auto eth0 iface eth0 inet static  address 10.0.1.20  network 10.0.1.0  netmask 255.255.255.0  broadcast 10.0.1.255  gateway 10.0.1.1  dns-nameservers 8.8.8.8auto eth1完成设置后，进行下一步。 /etc/init.d/networking restart./openstack_base_2.sh 几分钟完成。需要创建新的分区。 root@precise:/home/kord/openstackgeek# fdisk /dev/sdbDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0xb39fe7af.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won't be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)Command (m for help): nPartition type:   p   primary (0 primary, 0 extended, 4 free)   e   extendedSelect (default p): pPartition number (1-4, default 1): 1First sector (2048-62914559, default 2048): Using default value 2048Last sector, +sectors or +size{K,M,G} (2048-62914559, default 62914559): Using default value 62914559Command (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks.root@precise:/home/kord/openstackgeek# pvcreate -ff /dev/sdb1  Physical volume \"/dev/sdb1\" successfully createdroot@precise:/home/kord/openstackgeek# vgcreate nova-volumes /dev/sdb1  Volume group \"nova-volumes\" successfully createdroot@precise:/home/kord/openstackgeek# 安装Mysql ./openstack_mysql.sh 设置默认密码(这里使用的是f00bar) Enter a password to be used for the OpenStack services to talk to MySQL (users nova, glance, keystone): f00bar 安装时，需要提供密码。 mysql start/running, process 8796#######################################################################################Creating OpenStack databases and users.  Use your database password when prompted.Run './openstack_keystone.sh' when the script exits.#######################################################################################Enter password: Mysql开始运行后，可以登录任意Openstck mysql -u root -pf00barmysql -u nova -pf00bar novamysql -u keystone -pf00bar keystonemysql -u glance -pf00bar glance 安装keystone 使用脚本方式安装。 ./openstack_keystone.sh 你会被提示一个token，OpenStack里的服务输入的密码，您的电子邮件地址。电子邮件地址是用来填充用户的数据库中的信息。 Enter a token for the OpenStack services to auth wth keystone: r4th3rb3t0k3nEnter the password you used for the MySQL users (nova, glance, keystone): f00barEnter the email address for service accounts (nova, glance, keystone): user@foobar.com然后 source stackrc 接着我们可以看到用户和结果 . ./stackrckeystone user-list 例如 +----------------------------------+---------+------------------------+--------+|                id                | enabled |         email          |  name  |+----------------------------------+---------+------------------------+--------+| b32b9017fb954eeeacb10bebf14aceb3 | True    | kordless@foobar222.com | demo   || bfcbaa1425ae4cd2b8ff1ddcf95c907a | True    | kordless@foobar222.com | glance || c1ca1604c38443f2856e3818c4ceb4d4 | True    | kordless@foobar222.com | nova   || dd183fe2daac436682e0550d3c339dde | True    | kordless@foobar222.com | admin  |+----------------------------------+---------+------------------------+--------+ 安装Glance ./openstack_glance.sh 这时候会被要求下载个ubuntu could img，我是使用迅雷下载，而后放里面的。估计，如果网速不如的话会压力的。 glance index 就可以看到 ID                                   Name                           Disk Format          Container Format     Size          ------------------------------------ ------------------------------ -------------------- -------------------- --------------71b8b5d5-a972-48b3-b940-98a74b85ed6a Ubuntu 12.04 LTS               qcow2                ovf                       226426880 安装Nova 依旧使用脚本 ./openstack_nova.sh 需要填写一些关于网络的资料，以及IP地址等等 #############################################################################################################The IP address for eth0 is probably 10.0.1.35. Keep in mind you need an eth1 for this to work.#############################################################################################################Enter the primary ethernet interface IP: 10.0.1.35Enter the fixed network (eg. 10.0.2.32/27): 10.0.2.32/27Enter the fixed starting IP (eg. 10.0.2.33): 10.0.2.33#######################################################################################The floating range can be a subset of your current network.  Configure your DHCP serverto block out the range before you choose it here.  An example would be 10.0.1.224-255#######################################################################################Enter the floating network (eg. 10.0.1.224/27): 10.0.1.224/27Enter the floating netowrk size (eg. 32): 32 完成安装后，输入命令 nova image-list 输出 root@precise:/home/kord/openstackgeek# nova image-list+--------------------------------------+------------------+--------+--------+|                  ID                  |       Name       | Status | Server |+--------------------------------------+------------------+--------+--------+| 71b8b5d5-a972-48b3-b940-98a74b85ed6a | Ubuntu 12.04 LTS | ACTIVE |        |+--------------------------------------+------------------+--------+--------+ 安装Horizon ./openstack_horizon.sh 然后 env |grep OS_PASSWORD","title":"Ubuntu Openstack Django 十分钟快速部署openstack 云计算"},{"content":"官方网站www.openstack.org最受欢迎的一个社区，由Rackspace和NASA发起的开源云计算社区，各大主流IT巨头参与计划，国内新浪的SAE贡献不少。 OpenStack被誉为21世纪的Linux开源社区，可以预见其的发展前景是何其广阔。 OpenStack的核心项目从前期的两个增加到如下： Cloud compute (Nova) 项目源码：https://github.com/openstack/nova Cloud storage (Swift)  项目源码：https://github.com/openstack/swift Image delivery and registration (Clance) 项目源码：https://github.com/openstack/glance Identity (Keystone)      项目源码：https://github.com/openstack/keystone DashBoard (Horizon)   项目源码：https://github.com/openstack/horizon Network Connectivity (Quantum)  项目源码： https://github.com/openstack/quantum OpenStack的宗旨是搭建一个通用的云计算平台，是IaaS组建，让建立云计算平台更容易。 看到www.openstack.org.cn中的简报上，citrix公司已经投入CloudStack，有人又开始猜测了，总之很多猜想，云计算平台OpenStack是第一选择，CloudStack是第二选择，但CloudStack的成熟度高。 COSUG 谷歌讨论组里面有很多关于OpenStack的信息，其主要采用python开发，我也在学哦，哈哈，感觉python简洁，粘合度高，国内的豆瓣就是主要采用python开发，django是python开发的web框架，管理功能非常强大。","title":"二、OpenStack简介"},{"content":"Windows的数据执行保护机制 如果我们将 DEP 配置为保护计算机上的所有应用程序和程序,并且某些32 位应用程序存在兼容性问题,则可以从软件 DEP 保护中豁免这些应用程序。 ...(4)对内核态,开启可执行保护后,可能触发0x000000FC的错误。 第(2)步的设置,应该就是Intel 的DEP方案。而(1)应该是在Copy-On-Write的时候会用到的。应用:2条关闭数据执行保护技巧 . 下面面为大家讲解如何关闭数据执行保护(dep)他是一个检测内存的溢出的保护程序,有时可能会阻拦一些正常应用程序所以为大家讲解一下如何关闭数据执行保护。 1、在系统属性中修改(这种方法并不是完全关闭数据执行保护) 在“我的电脑”单击右键,选择“属性→高级→(性能)设置→数据执行保护”,... windows 7下的dep(数据执行保护)解析  DEP(Data Execution Prevention)即“数据执行保护”,这是Windows的一项安全机制,主要用来防止病毒和其他安全威胁对系统造成破坏。...需要在DEP配置页面使用“添加”按钮,将应用程序的可执行文件加入到排除列表中。 (图2) 设置Windows7 DPE保护级别. Windows server 2008数据执行保护功能应用 :Internet中的一些网络病毒或木马,时常会通过安装在Win2008系统中的一些应用程序漏洞,来对本地计算机系统进行非法攻击;为了让应用程序连接网络更加安全,我们可以利用Win2008系统自带的数据执行保护功能来保护目标应用程序,下面就是具体的实现步骤: 首先在Win2008系统桌面中,... 什么是数据执行保护? 通过实施一系列称为数据执行保护 (DEp) 的硬件和 实施技术,帮助避免计算机在保留用于不可执行代码的计算机内存区域中插入恶意代码。 硬件实施 DEp 是某些处理器的功能,...如果您将 DEp 配置为保护计算机上的所有应用程序和程序,并且某些 32 位应用程序存在兼容性问题,则可以从 DEp 保护中豁免这些应用程序。 借助可重复的配置和数据保护策略,实现存储基础架构的标准化利用。 ...借助NetApp 的集成存储自动化功能,执行大规模配置、克隆和备份流程只需几分钟即可完成。...您可以将这些信息提供给自助服务门户的用户来反馈用量,也可以将其与财务应用程序相集成,实现在用户和业务单位之间的真正成本分摊,进行有效的成本管理。 NetApp Suncorp 案例研究我们如何构建私有云 比特网 2012-6-30 19:57 Tech OnTap 最近对云计算及相关技术给予了极大的关注,其中包括虚拟化、安全多租户、构建和保护共享基础架构的最佳方式等等。 ...I/O 频繁的 Oracle 应用程序的读取延迟已从 11 至 12 毫秒缩短为不到 2 毫秒。 ...我们的目的是在默认情况下,对我们目前正在部署的 VDI 环境执行重复数据删除。 美国“三维系统”公司首席执行官阿贝·雷琴塔尔说,利用三维打印技术,...公司设计的一款新型打印机“立方体”(Cube)定于今年五月上市,其工作原理和“饶舌男”类似,应用程序则借鉴苹果公司产品,...赫尔在加利福尼亚州南部一家名为紫外产品公司的制造企业工作,开发用于家具保护涂层的紫外线固化树脂胶技术。 镜头边框要比机背稍微凸起一些,这样做可以更好的保护镜头不被磨损。 ...相机界面与One X一样,同样把拍照快门键和录像快门键整合在画面右侧,拍照、录像无需切换,按哪个快门键就执行哪个动作,...应用程序主菜单同样是划分为三组(分组可以随意删减). 保护个人隐私,隐身模式是重头戏;这个重要功能,给我们提供了很大的便捷,...谷歌在今早刚刚上架的用于iPhone和iPad的Chrome浏览器应用程序,经过短短几个小时,它已经跃身成为iOS App Store应用程序的No.1。 ...搜索和导航操作可直接通过同一个框快速执行。 存储虚拟化给企业数据中心带来哪些利益 随着企业的IT架构越来越复杂,导致了企业的IT架构和数据中心中存在着许多孤岛,每个孤岛都要求独立的管理和保护策略,以及复杂的管理流程。...一旦执行了存储虚拟化,数据的物理位置就变得透明了。...存储可以进行分级,数据可以在分级存储中自动存储,同时,应用程序在不停机的情况下保证持续运行。 NetApp推全新FAS2220 闪存池将NetApp的虚拟存储层方法延伸到中型企业市场,可帮助客户提高应用程序性能,并且易于实施,实现“即装即用”。...全新NetApp OnCommand System Manager 2.1有助于简化、控制和自动执行NetApp存储的设置及持续管理。...NetApp一直在与精选的VAR合作伙伴密切合作提供数据保护即服务 (DPaaS). 个人“云电脑”走近市场 应用比PC简单移动运营和安全专家让移动战略绽放异彩.服务于移动架构团队的个人负责或直接影响并修改公司移动政策文件,该文件概述了公司的标准和做法,例如选择用于支持的移动平台;有效地管理和保护移动应用程序和设备;确保无线网络总是可用;并且联络其他IT功能以执行该公司的移动战略。 移动运营和安全候选人可能是具有广泛技术背景的IT专业人士. “云电脑”桌面上,同样是各种应用程序的图标,鼠标双击打开,再熟悉不过的手法。...谈:我们与每个用户都签署保密协议,承担用户隐私保护责任。当然,随着云计算普及,...“云计算”的概念,是在2006年的搜索引擎大会上,由谷歌首席执行官埃里克·施密特首先提出的,而云计算的基础就是虚拟化技术。 IE远程代码执行漏洞被利用 深度解析.原则上被操作系统回收之后需要再分配,但应用程序却仍然继续使用它,...ASLR(Address space layout randomization)是一种针对缓冲区溢出的安全保护技术,...首先找到一个小的程序碎片,什么样的碎片呢,已经加载的,已经在内存里执行的.但也有一些危险和鲜为人知的漏洞广泛存在于Web应用程序中。大多数开发人员针对这些漏洞不做任何考虑,使得Web应用程序仍然处于危险中。...最需要要保护的数据是认证凭证(credentials) 和会话ID。 ...最后,当您下订单时,即可执行安全的交易。这需要您进行登录,以便通过 SSL 验证交易。    2012年SINOCES产业与创新高峰论坛日程极大的编程灵活性和架构可扩展性可在网络上进行实时软控制、保护软件投资,...执行自动的数据包处理,使客户能在一个连续、同步的运行至完成模式中编写增值功能程序。...支持用户空间进行应用编程,这称为VortiQa平台服务包(PSP),其目的是为了简化应用程序迁移。 Flingo主席、联合创始人及首席执行官 ...目前Windows Phone7.5操作系统Mango运用了新技术“tiles”,它可使主屏上同时显示多个应用程序,并集合多种社交网络服务, ...16:55-17:15 演讲:云计算推助企业新发展目前,企业已开始认识到“云”的重要价值,比如它可以更好地保护数据. 企业的IT部门面临着数据增长带来的挑战,他们需要确保数据的存储、保护、分配以及法规遵从。此外,...无需扰乱主机I/Os即可执行系统维护 减少停机时间和业务风险 动态管理复制和备份 从所有系统和地点远程复制全部容量 运用碰撞一致的快照来做到应用程序感知的备份和恢复.","title":"应用程序执行保护及运行机制NetApp的虚拟存储层方法"},{"content":"最近云计算概念非常火热，各个巨头都把他们的焦点聚集到了云计算上面，云计算正在掀起一场巨大的变革。 云计算是一个非常抽象的概念，而且非常的新潮，所以在云计算提出至今，瞎子摸象仍然是她最合适的形容词。当时我对云计算和物联网的概念非常感兴趣，所以就从图书馆多借了几本书来看，也逐渐的了解了这个云计算的概念。但是，我并不打算在这篇文章里面写云计算的概念，这个能够搜到很多的信息，我写这篇文章的目的是为了说明我对云计算的概念完全是从一种理论开始的，不像其他东西，比如c语言等等等等，有非常成熟的，从语言到产品的一整条链。云计算在当时甚至是一种连产品都没有的概念（或许是我没有了解到），从这几年的理论到实践的历程中，我感受到了这种概念的强大活力。各种应用迅速发展，这种发展充实了我对云计算的概念。 这篇文章记录的是云计算的开始。今后我肯定会在这个方面下很多功夫，就当作一次旅程，首先就先从了解景点开始吧。","title":"云计算"},{"content":"转载：http://www.programmer.com.cn/9767/ 云计算概念发端于Google和Amazon等超大规模的互联网公司，随着这些公司业务的成功，作为其支撑技术的云计算也得到了业界的高度认可和广泛传播。时至今日，云计算已被普遍认为是IT产业发展的新阶段，从而被赋予了很多产业和产品层面的意义。由于意义多重，各种概念纷繁复杂，众多公司和从业人员的眼中都有自己的一朵云，正如徐志摩在《偶然》一诗中所说：“我是天空里的一片云，偶尔投影在你的波心”。 传统的系统设计考虑的主要是单机环境，而云计算主要考虑的环境却是数据中心。从单机到数据中心，很多设计原则发生了根本变化，极端点甚至可以说PC时代30年来一以贯之的系统设计原则到今天已完全不适用。 考虑到云计算的诸多内涵，从技术角度讲，数据中心计算 （Datacenter Computing）可能是更合适的表述。本文对数据中心计算的技术领域和设计原则的变化进行了粗浅的探讨。一家之见，仅供参考。 云计算简介 从20世纪80年代个人电脑的发展开始，PC的计算能力不断增强，用一台PC就可以存放个人需要的所有数据并完成处理工作，比如编写文档、处理邮件等。但在互联网时代，一家互联网公司提供服务时需要用到远超过个人规模的数据，这些数据的存储和处理需要成千上万台机器的协同工作才能完成。这种服务器规模不是个人能够提供的，只有大型公司或机构才能拥有，这好像又回到了更早以前的Mainframe时代。从Mainframe到PC再到云，这正是计算机技术螺旋上升的发展过程。 简单来说，云计算就是利用系统架构技术把成千上万台服务器整合起来，为用户提供灵活的资源分配和任务调度能力。这里有几个关键字：一是超大规模，包括机器的数量、用户的数量和并发任务的数量；二是资源整合，成千上万台的服务器资源能集合起来做一件事情，比如存储大量数据，或者处理一个大型任务；三是灵活与快速交付，大规模的服务器资源能进行灵活的调配，按应用需求分解成若干个虚拟的资源池，快速地支持大量的并发请求或作业。 云计算技术的出 现，使整理和加工数据的能力变得空前强大，这种能力可以帮我们找出很多看似无关的事件背后的规律，并用其来预测未来发展。结合移动和物联网等技术，还可以 更好地服务于社会和人们的日常生活，如灾难预警、智慧城市和智能交通等。这种数据处理能力是在海量数据之上发展起来的，与作为基础支撑的系统架构技术同步 发展并逐渐融合，共同组成了现在大家所看到的云计算技术。 综合系统架构和数据处理技术两方面，云计算技术自下而上可分为硬件基础架构、软件基础架构和数据智能三个层面，如图1所示。 图1 云计算技术可分为三个层面 硬件基础架构包括服务器、网络和数据中心的设计与实施等技术领域，软件基础架构聚焦于存储、计算与大规模分布式系统等技术领域，数据智能则关注数据仓库（Data Warehouse）、机器学习（Machine Learning）及数据分析与可视化（Data Analysis & Visualization）等技术领域。值得一提的是，这三个层次的划分主要以技术领域为出发点，而通常提到的云计算三个层次SaaS/PaaS/IaaS则更多地是从资源的提供形态和接口为考虑进行划分的，二者并非同一维度。 时下流行的大数据（Big Data）概念可以看成从海量数据的角度看数据分析技术和软件架构支撑，包括软件基础架构与数据智能相关技术。二者都与数据有关，但其区别在于：软件基础架构关心的主要是数据的格式、容量以及访问模式等，而数据智能更在意数据的语义。 而数据中心计算则是从体系结构的角度看待软硬件系统设计。下文将就相关的技术领域和设计原则进行讨论。 数据中心计算 技术领域与挑战 如图2所示，数据中心计算包含存储、计算、实时存储与计算、超大规模系统、体系结构以及数据中心等技术领域。存储系统的需求来自两个维度。首先，大量的无结构数据需要表（Table）、对象（Object）与文件（File）等多种存储结构进行支持；其次，访问模式的不同（如只读不写、只写少读、读写均匀等）将很大程度上影响对存储系统设计和优化的考虑。 图2 数据中心所包含的技术领域 计算系统的需求和技术特点与计算任务的类型有很大关系。数据密集型的代表是MapReduce，它对CPU和I/O的需求比较均衡。计算密集型任务与通信密集型任务都是CPU密集计算，但二者访问数据的规模不同。如果只需要少量数据则是计算密集型。而如果需要访问大量数据，比如大矩阵迭代，内存限制这些数据必须存放在多台机器上，那么往往此时系统瓶颈将转移到通信的延迟上，这类似于传统的高性能计算。 通常的存储系统和计算系统只能支持到一定级别的延迟和并发度，对于更高的要求则需要基于内存构造实时的存储与计算系统。考虑到内存的特点，在存储上更适合提供具有丰富语义的数据结构。在分布式数据结构的基础上，加入流式数据处理和触发式事件处理的模型，则可以更好地支持实时检索、OLAP、PubSub等应用。 超大规模系统主要通过分布式相关技术保证系统的可用性（availability）和可管理性 （manageability），包括系统建模、设计、开发以及运维等多方面。体系结构包括虚拟机、服务器设计等。数据中心包括机柜设计、网络规划与设计、数据中心设计与建设等，主要关注于能效比（PUE）。 系统设计原则 传统的软硬件系统主要面向单机和个人，在桌面环境中使用，我们也可以称其为桌面计算（Desktop Computing）。从桌面到数据中心，应用特点和负载模型发生了巨大变化。 在单机上，主要面向一个用户，他可能运行多项任务，任务可以分为前台任务和后台任务两种。用户对系统的响应性（promptness或responsiveness）十分敏感，所以前台任务通常优先于后台任务，而后台任务则希望被公平调度。这也是抢占式调度（Preemptive Scheduling）策略最终胜过协作式调度（Cooperative Scheduling）的原因。 在数据中心里，同样也有在线和离线两种应用类型，在线系统直接面向用户，而离线系统多用于数据处理。在线系统通常是一个大型应用服务于海量用户，用户对系统响应性仍然十分敏感。但由于用户规模巨大以及互联网服务通常免费，成本压力十分严峻，所以系统需要充分挖掘用户对响应性的容忍度。通常情况下，人对事件响应的感知能力在500ms左右，利用这一特点可以优化系统调度并节省资源。而在极限压力情况下，没有足够的资源满足所有请求，很多系统开始延长响应时间，然后在持续压力下失去响应直至崩溃。此时，为可服务范围内的请求提供正常服务，并为超过范围的请求提供快速的拒绝响应，将会给用户带来更好的体验，也能提升系统的可用性。到最后，我们会发现在线服务系统应以稳定的极限吞吐（Sustained Throughput）作为首要设计目标。当然，要在一定延迟阈值的前提保证下。 离线系统主要服务于数据处理类作业，这些作业涉及海量数据，使用者的预期并不会特别高，此时的处理效率更为重要。通常，这些作业将会以批处理的方式合并执行，提升系统的总吞吐率，即资源利用率成为首要调度目标。 在系统设计时，有一些永恒的矛盾需要做出折中考虑，例如延迟与吞吐、公平与效率。在桌面环境中，我们选择了低延迟和公平，而在数据中心环境中，我们选择了高吞吐（或稳定的极限吞吐）和高效率。在具体实现方案上，也带来了不同的选择，比如同步与异步模型、线程与事件驱动、线程池与队列等。 从桌面到数据中心，同样发生变化的还有开发模式。PC是一个开放系统，无论软件还是硬件，每个厂商都只负责系统中的一部分，都需要考虑和不同的组件一起工作。由于用户众多，需求各不相同，只能采取按层次组织的系统架构（layered architecture）以及约定俗成的标准化规范。这虽然保证了系统的通用性，以及不同来源的各种组件的有效分工和协同工作，但也带来了一些问题，例如一个功能需要穿透多层才能完成，而每层互不信任，需要执行严格的参数检查等。 更严重的是，在系统的每一层中，都可能存在一些重复的功能。以存储为例，一次写入需要经历从libc的文件流（FILE stream），到文件系统的缓冲区，再到驱动器中的缓冲区，最后到磁盘上的缓存这样的长调用流程才能完成持久化（persistency）。这个流程从其中的每一层单独来看都是合理的，但从整个系统的角度看来，存在着性能浪费。另外，由于分层带来的透明性使得数据持久化不得不通过额外的fsync操作才得以保证，从而使系统的可靠性保证机制变得更复杂。 此外，在架构设计时，我们也经常在谈机制（mechanism）与策略（policy）的分离。固定、明确的功能称为机制，通过灵活的可变的策略进行配置，从而使系统具有良好的可扩展性。但实际上，每层独立且透明，且通常也都沿用相同的设计理念，这其实并不能保证机制策略的有效分离，最后的系统往往很难取得可扩展性和性能的良好平衡。 我们可以发现分层导致了每层都倾向于变得聪明、变得复杂，但综合效果却不如人意。而在今天的数据中心环境中，如前面所说，很多时候我们其实是在做一个超大型应用，应用的特点需要被充分考虑。另外这个系统通常只有一个生产商，可以进行垂直化的设计或整合。此时，由应用层或平台的上层提供策略，而下层只需要考虑机制，这将使系统变得更加简单，从而取得更好的性能，而扩展性也可以得到很好的保证。 以SSD为例，现在的SSD在设计时通常假设由文件系统来使用。由于闪存的擦除特性，需要考虑写缓冲区，而由于缓冲区需要有预留空间也需要有复杂的置换算法和回收机制，这对性能和成本（也包括开发成本）都有很大影响。但在数据中心环境里，我们通常有完整设计的存储系统，数据组织方式和读写流程也被充分优化，对存储设备的需求就是最基本的定长块。这种情况下，SSD的逻辑其实可以做得非常简单，直接对上层暴露内部的状态（如通路、物理块），从而提高性能、降低成本。更重要的是，这将有效提高交付速度——这对于缓解服务器、网络、IDC等硬件系统的长实施周期和业务快速增长的规模需求之间的矛盾至关重要。 上层对下层的要求是逻辑简单、功能单一，而下层对上层则暴露更多细节，最复杂的逻辑判断由最上层的应用来完成，这是另一种方式的层次化。而且，层次之间也不需要维持一个物理边界（如现在应用和内核之间），可以通过函数调用的方式实现柔性的层次划分。有兴趣的读者可以参考libOS【注：Exokernel】或者in-kernel web server【注：khttpd】的一些设计思路。 从桌面到数据中心的第三个变化是评价体系。一个中等规模的数据中心通常包含数万服务器，在这样的规模下，硬件故障成为家常便饭。一般，我们通过冗余复制或者重复处理来解决硬件故障问题。在习惯了硬件故障之后，我们对软件Bug的态度也会发生变化。软件Bug中有一种偶发性Bug【注：也被称为heisenbug，意指海森堡测不准原理】最难发现也最难调试，消除这些Bug需要付出巨大的代价。但考虑到这种Bug的出现概率堪比硬件故障，我们其实可以采用同样的方式来对待。 规模增长的同时，系统的复杂度也变得越来越高，以至于很多时候已经超过一个人的直接掌控能力。要去理解系统的运行状态以保障其正常运行，在这种情况下变得十分困难。此时，我们可以利用系统冗余的特点，对一些组件进行定期重启（reboot），通过重置状态降低Bug被触发的概率【注：“Recovery Oriented Computing”】。而对于性能上的问题则更是如此，有时还需要采用数据挖掘的方法来进行优化或系统调试【注：M.K. Aguilera, J.C. Mogul, J.L. Wiener, etc., “Performance debugging for distributed systems of black boxes”, in SOSP’03】。 海量数据以及数据处理应用也带来了很大的影响。由于数据的规模以及处理算法的特点，很多时候系统只需要提供概率意义上正确的结果，不需要保证数据的绝对可靠，也不需要严格保证运行结果的可重复性。 总而言之，互联网服务规模巨大，对成本很敏感，而且业务需求的变化也异常频繁，这和PC应用的特点截然不同。现在的系统设计原则是在桌面环境中历时30余年发展起来的，但到了今天已经完全不适应数据中心环境，我们需要重新思考并总结出适用的设计原则，这体现在如下三个方面。 从单用户多任务到多用户单任务的环境变化，导致我们在系统设计时重新审视对延迟与吞吐、公平与效率的折中考虑。 自行开发全套系统成为可能，透明性不再是美德，架构由层次化向竖井式演进，系统由需求驱动而定制。 由于规模与复杂度增大，我们不再追求零缺陷，而是与故障和Bug共舞。同时数据也成为系统的一部分，这些都使得以前的确定性系统变得不确定，评价指标也由正确性（correctness）向精确度（precision）转变。 需要强调的是，这些设计原则的改变并不意味着，我们需要颠覆桌面环境的通用系统，全盘转向专用系统。以前通用系统的设计完全以桌面环境为出发点，现在则是新的环境、新的应用形态和新的业务需求，这时需要有另一种类型的通用系统。这就像现在的NoSQL系统，提出之时是专用的，但正逐渐变得通用。 总结 互联网服务区别于传统行业最显著的特点是超大规模的数据以及快速迭代的开发方式，通过数据可以分析用户行为，而快速迭代则使数据分析结果更快生效，从而优化运营或适应用户需求的变化。可以说，数据规模和迭代速度决定了一个互联网公司创新的速度，同时也是它技术水平的标志，而其中最关键的便是云计算技术。 云计算技术可分解为大数据和数据中心计算。大数据从海量数据的角度看数据分析技术和系统架构支撑，包括软件基础架构与数据智能等相关技术，而数据中心计算则是从体系结构的角度看待软硬件系统。传统的软硬件系统基于桌面环境设计，而今天的数据中心环境有了很多变化，比如应用特点和负载模型、开发模式、评价体系等，这导致了传承至今的设计原则不再适用。 本文主要从宏观上对数据中心计算的特点进行讨论，旨在理清概念、抛砖引玉，引发业界对系统设计原则的重新思考。对于具体的技术方向如存储、计算以及大规模分布式系统等，文中并没有详细描述，留待日后陆续讨论。 转载：http://www.programmer.com.cn/9767/ 云计算概念发端于Google和Amazon等超大规模的互联网公司，随着这些公司业务的成功，作为其支撑技术的云计算也得到了业界的高度认可和广泛传播。时至今日，云计算已被普遍认为是IT产业发展的新阶段，从而被赋予了很多产业和产品层面的意义。由于意义多重，各种概念纷繁复杂，众多公司和从业人员的眼中都有自己的一朵云，正如徐志摩在《偶然》一诗中所说：“我是天空里的一片云，偶尔投影在你的波心”。 传统的系统设计考虑的主要是单机环境，而云计算主要考虑的环境却是数据中心。从单机到数据中心，很多设计原则发生了根本变化，极端点甚至可以说PC时代30年来一以贯之的系统设计原则到今天已完全不适用。 考虑到云计算的诸多内涵，从技术角度讲，数据中心计算 （Datacenter Computing）可能是更合适的表述。本文对数据中心计算的技术领域和设计原则的变化进行了粗浅的探讨。一家之见，仅供参考。 云计算简介 从20世纪80年代个人电脑的发展开始，PC的计算能力不断增强，用一台PC就可以存放个人需要的所有数据并完成处理工作，比如编写文档、处理邮件等。但在互联网时代，一家互联网公司提供服务时需要用到远超过个人规模的数据，这些数据的存储和处理需要成千上万台机器的协同工作才能完成。这种服务器规模不是个人能够提供的，只有大型公司或机构才能拥有，这好像又回到了更早以前的Mainframe时代。从Mainframe到PC再到云，这正是计算机技术螺旋上升的发展过程。 简单来说，云计算就是利用系统架构技术把成千上万台服务器整合起来，为用户提供灵活的资源分配和任务调度能力。这里有几个关键字：一是超大规模，包括机器的数量、用户的数量和并发任务的数量；二是资源整合，成千上万台的服务器资源能集合起来做一件事情，比如存储大量数据，或者处理一个大型任务；三是灵活与快速交付，大规模的服务器资源能进行灵活的调配，按应用需求分解成若干个虚拟的资源池，快速地支持大量的并发请求或作业。 云计算技术的出 现，使整理和加工数据的能力变得空前强大，这种能力可以帮我们找出很多看似无关的事件背后的规律，并用其来预测未来发展。结合移动和物联网等技术，还可以 更好地服务于社会和人们的日常生活，如灾难预警、智慧城市和智能交通等。这种数据处理能力是在海量数据之上发展起来的，与作为基础支撑的系统架构技术同步 发展并逐渐融合，共同组成了现在大家所看到的云计算技术。 综合系统架构和数据处理技术两方面，云计算技术自下而上可分为硬件基础架构、软件基础架构和数据智能三个层面，如图1所示。 图1 云计算技术可分为三个层面 硬件基础架构包括服务器、网络和数据中心的设计与实施等技术领域，软件基础架构聚焦于存储、计算与大规模分布式系统等技术领域，数据智能则关注数据仓库（Data Warehouse）、机器学习（Machine Learning）及数据分析与可视化（Data Analysis & Visualization）等技术领域。值得一提的是，这三个层次的划分主要以技术领域为出发点，而通常提到的云计算三个层次SaaS/PaaS/IaaS则更多地是从资源的提供形态和接口为考虑进行划分的，二者并非同一维度。 时下流行的大数据（Big Data）概念可以看成从海量数据的角度看数据分析技术和软件架构支撑，包括软件基础架构与数据智能相关技术。二者都与数据有关，但其区别在于：软件基础架构关心的主要是数据的格式、容量以及访问模式等，而数据智能更在意数据的语义。 而数据中心计算则是从体系结构的角度看待软硬件系统设计。下文将就相关的技术领域和设计原则进行讨论。 数据中心计算 技术领域与挑战 如图2所示，数据中心计算包含存储、计算、实时存储与计算、超大规模系统、体系结构以及数据中心等技术领域。存储系统的需求来自两个维度。首先，大量的无结构数据需要表（Table）、对象（Object）与文件（File）等多种存储结构进行支持；其次，访问模式的不同（如只读不写、只写少读、读写均匀等）将很大程度上影响对存储系统设计和优化的考虑。 图2 数据中心所包含的技术领域 计算系统的需求和技术特点与计算任务的类型有很大关系。数据密集型的代表是MapReduce，它对CPU和I/O的需求比较均衡。计算密集型任务与通信密集型任务都是CPU密集计算，但二者访问数据的规模不同。如果只需要少量数据则是计算密集型。而如果需要访问大量数据，比如大矩阵迭代，内存限制这些数据必须存放在多台机器上，那么往往此时系统瓶颈将转移到通信的延迟上，这类似于传统的高性能计算。 通常的存储系统和计算系统只能支持到一定级别的延迟和并发度，对于更高的要求则需要基于内存构造实时的存储与计算系统。考虑到内存的特点，在存储上更适合提供具有丰富语义的数据结构。在分布式数据结构的基础上，加入流式数据处理和触发式事件处理的模型，则可以更好地支持实时检索、OLAP、PubSub等应用。 超大规模系统主要通过分布式相关技术保证系统的可用性（availability）和可管理性 （manageability），包括系统建模、设计、开发以及运维等多方面。体系结构包括虚拟机、服务器设计等。数据中心包括机柜设计、网络规划与设计、数据中心设计与建设等，主要关注于能效比（PUE）。 系统设计原则 传统的软硬件系统主要面向单机和个人，在桌面环境中使用，我们也可以称其为桌面计算（Desktop Computing）。从桌面到数据中心，应用特点和负载模型发生了巨大变化。 在单机上，主要面向一个用户，他可能运行多项任务，任务可以分为前台任务和后台任务两种。用户对系统的响应性（promptness或responsiveness）十分敏感，所以前台任务通常优先于后台任务，而后台任务则希望被公平调度。这也是抢占式调度（Preemptive Scheduling）策略最终胜过协作式调度（Cooperative Scheduling）的原因。 在数据中心里，同样也有在线和离线两种应用类型，在线系统直接面向用户，而离线系统多用于数据处理。在线系统通常是一个大型应用服务于海量用户，用户对系统响应性仍然十分敏感。但由于用户规模巨大以及互联网服务通常免费，成本压力十分严峻，所以系统需要充分挖掘用户对响应性的容忍度。通常情况下，人对事件响应的感知能力在500ms左右，利用这一特点可以优化系统调度并节省资源。而在极限压力情况下，没有足够的资源满足所有请求，很多系统开始延长响应时间，然后在持续压力下失去响应直至崩溃。此时，为可服务范围内的请求提供正常服务，并为超过范围的请求提供快速的拒绝响应，将会给用户带来更好的体验，也能提升系统的可用性。到最后，我们会发现在线服务系统应以稳定的极限吞吐（Sustained Throughput）作为首要设计目标。当然，要在一定延迟阈值的前提保证下。 离线系统主要服务于数据处理类作业，这些作业涉及海量数据，使用者的预期并不会特别高，此时的处理效率更为重要。通常，这些作业将会以批处理的方式合并执行，提升系统的总吞吐率，即资源利用率成为首要调度目标。 在系统设计时，有一些永恒的矛盾需要做出折中考虑，例如延迟与吞吐、公平与效率。在桌面环境中，我们选择了低延迟和公平，而在数据中心环境中，我们选择了高吞吐（或稳定的极限吞吐）和高效率。在具体实现方案上，也带来了不同的选择，比如同步与异步模型、线程与事件驱动、线程池与队列等。 从桌面到数据中心，同样发生变化的还有开发模式。PC是一个开放系统，无论软件还是硬件，每个厂商都只负责系统中的一部分，都需要考虑和不同的组件一起工作。由于用户众多，需求各不相同，只能采取按层次组织的系统架构（layered architecture）以及约定俗成的标准化规范。这虽然保证了系统的通用性，以及不同来源的各种组件的有效分工和协同工作，但也带来了一些问题，例如一个功能需要穿透多层才能完成，而每层互不信任，需要执行严格的参数检查等。 更严重的是，在系统的每一层中，都可能存在一些重复的功能。以存储为例，一次写入需要经历从libc的文件流（FILE stream），到文件系统的缓冲区，再到驱动器中的缓冲区，最后到磁盘上的缓存这样的长调用流程才能完成持久化（persistency）。这个流程从其中的每一层单独来看都是合理的，但从整个系统的角度看来，存在着性能浪费。另外，由于分层带来的透明性使得数据持久化不得不通过额外的fsync操作才得以保证，从而使系统的可靠性保证机制变得更复杂。 此外，在架构设计时，我们也经常在谈机制（mechanism）与策略（policy）的分离。固定、明确的功能称为机制，通过灵活的可变的策略进行配置，从而使系统具有良好的可扩展性。但实际上，每层独立且透明，且通常也都沿用相同的设计理念，这其实并不能保证机制策略的有效分离，最后的系统往往很难取得可扩展性和性能的良好平衡。 我们可以发现分层导致了每层都倾向于变得聪明、变得复杂，但综合效果却不如人意。而在今天的数据中心环境中，如前面所说，很多时候我们其实是在做一个超大型应用，应用的特点需要被充分考虑。另外这个系统通常只有一个生产商，可以进行垂直化的设计或整合。此时，由应用层或平台的上层提供策略，而下层只需要考虑机制，这将使系统变得更加简单，从而取得更好的性能，而扩展性也可以得到很好的保证。 以SSD为例，现在的SSD在设计时通常假设由文件系统来使用。由于闪存的擦除特性，需要考虑写缓冲区，而由于缓冲区需要有预留空间也需要有复杂的置换算法和回收机制，这对性能和成本（也包括开发成本）都有很大影响。但在数据中心环境里，我们通常有完整设计的存储系统，数据组织方式和读写流程也被充分优化，对存储设备的需求就是最基本的定长块。这种情况下，SSD的逻辑其实可以做得非常简单，直接对上层暴露内部的状态（如通路、物理块），从而提高性能、降低成本。更重要的是，这将有效提高交付速度——这对于缓解服务器、网络、IDC等硬件系统的长实施周期和业务快速增长的规模需求之间的矛盾至关重要。 上层对下层的要求是逻辑简单、功能单一，而下层对上层则暴露更多细节，最复杂的逻辑判断由最上层的应用来完成，这是另一种方式的层次化。而且，层次之间也不需要维持一个物理边界（如现在应用和内核之间），可以通过函数调用的方式实现柔性的层次划分。有兴趣的读者可以参考libOS【注：Exokernel】或者in-kernel web server【注：khttpd】的一些设计思路。 从桌面到数据中心的第三个变化是评价体系。一个中等规模的数据中心通常包含数万服务器，在这样的规模下，硬件故障成为家常便饭。一般，我们通过冗余复制或者重复处理来解决硬件故障问题。在习惯了硬件故障之后，我们对软件Bug的态度也会发生变化。软件Bug中有一种偶发性Bug【注：也被称为heisenbug，意指海森堡测不准原理】最难发现也最难调试，消除这些Bug需要付出巨大的代价。但考虑到这种Bug的出现概率堪比硬件故障，我们其实可以采用同样的方式来对待。 规模增长的同时，系统的复杂度也变得越来越高，以至于很多时候已经超过一个人的直接掌控能力。要去理解系统的运行状态以保障其正常运行，在这种情况下变得十分困难。此时，我们可以利用系统冗余的特点，对一些组件进行定期重启（reboot），通过重置状态降低Bug被触发的概率【注：“Recovery Oriented Computing”】。而对于性能上的问题则更是如此，有时还需要采用数据挖掘的方法来进行优化或系统调试【注：M.K. Aguilera, J.C. Mogul, J.L. Wiener, etc., “Performance debugging for distributed systems of black boxes”, in SOSP’03】。 海量数据以及数据处理应用也带来了很大的影响。由于数据的规模以及处理算法的特点，很多时候系统只需要提供概率意义上正确的结果，不需要保证数据的绝对可靠，也不需要严格保证运行结果的可重复性。 总而言之，互联网服务规模巨大，对成本很敏感，而且业务需求的变化也异常频繁，这和PC应用的特点截然不同。现在的系统设计原则是在桌面环境中历时30余年发展起来的，但到了今天已经完全不适应数据中心环境，我们需要重新思考并总结出适用的设计原则，这体现在如下三个方面。 从单用户多任务到多用户单任务的环境变化，导致我们在系统设计时重新审视对延迟与吞吐、公平与效率的折中考虑。 自行开发全套系统成为可能，透明性不再是美德，架构由层次化向竖井式演进，系统由需求驱动而定制。 由于规模与复杂度增大，我们不再追求零缺陷，而是与故障和Bug共舞。同时数据也成为系统的一部分，这些都使得以前的确定性系统变得不确定，评价指标也由正确性（correctness）向精确度（precision）转变。 需要强调的是，这些设计原则的改变并不意味着，我们需要颠覆桌面环境的通用系统，全盘转向专用系统。以前通用系统的设计完全以桌面环境为出发点，现在则是新的环境、新的应用形态和新的业务需求，这时需要有另一种类型的通用系统。这就像现在的NoSQL系统，提出之时是专用的，但正逐渐变得通用。 总结 互联网服务区别于传统行业最显著的特点是超大规模的数据以及快速迭代的开发方式，通过数据可以分析用户行为，而快速迭代则使数据分析结果更快生效，从而优化运营或适应用户需求的变化。可以说，数据规模和迭代速度决定了一个互联网公司创新的速度，同时也是它技术水平的标志，而其中最关键的便是云计算技术。 云计算技术可分解为大数据和数据中心计算。大数据从海量数据的角度看数据分析技术和系统架构支撑，包括软件基础架构与数据智能等相关技术，而数据中心计算则是从体系结构的角度看待软硬件系统。传统的软硬件系统基于桌面环境设计，而今天的数据中心环境有了很多变化，比如应用特点和负载模型、开发模式、评价体系等，这导致了传承至今的设计原则不再适用。 本文主要从宏观上对数据中心计算的特点进行讨论，旨在理清概念、抛砖引玉，引发业界对系统设计原则的重新思考。对于具体的技术方向如存储、计算以及大规模分布式系统等，文中并没有详细描述，留待日后陆续讨论。","title":"浅谈云计算与数据中心计算"},{"content":"新浪云计算： https://github.com/sinacloud/ 淘宝开源： http://code.taobao.org/","title":"大公司或大社区开源资源汇总"},{"content":"无论是在云计算平台或在非云端环境中构建一个高性能和高扩展性的系统时Caching都是一个热门的话题。2011年3月份推出了Windows Azure AppFabric Caching。它在云上提供了一个in-memory和分布式的caching服务。在2012年6月的更新版本中，cache团队宣布了WindowsAzure上一个新的caching解决方案，被称作Windows Azure Caching（预览）。并且原先的Windows Azure AppFabric Caching被重新命名为Windows Azure Shared Caching。 什么是Caching（预览） 如果你一直在使用Shared Caching你应该知道它由很多cache服务器构成。在使用之前你首先需要从开发者门户创建一个cache帐户并且指定你想要使用的大小，即用来存储需要缓存的数据能够使用的内存量。然后你可以通过cache URL通过代码添加、获取和移除这些数据。 Shared Caching是一个多租户系统，在所有的用户中托管了所有缓存的元素。因此你不知道你的数据存储在哪个服务器里。 这一caching模式可以很好地工作并且能够能够处理大部分的情况。但是它有一些问题。第一个问题是性能问题。因为Shared Caching是一个多租户系统，意味着所有的cache操作需要经过Shared Caching网关然后路由到存储你所需要数据的服务器。即使在Shared Caching系统中有一些caches，但从云服务到cache服务还是需要一定时间的。 第二个问题是，对开发人员来说Shared Caching服务是作为一个黑盒来工作的。我们只知道cache端点。这对有些人足够了，因为他们不关心任何相关的东西。但是如果你想在Shared Caching里获取更多信息和更多的控制，那是不可能的。 最后一个问题是价格和成本效益问题。你需要根据每个月你所请求的cache来付费。但当我们托管一个web role或worker role时，很少用掉虚拟机（服务实例）里的所有内存和CPU。如果使用Shared Caching我们需要为cache服务付费但同时浪费了一些本地的内存和CPU。 由于上述问题，微软为我们提供了一个新的caching模式，即Caching (预览)。Caching (预览)将我们的云计算服务（web role和worker role）的内存和CPU作为cache簇充分利用,而不再是拥有分开的cache服务。因为Caching (预览)是在虚拟机上运行，托管我们的云计算应用程序或在其附近。不需要任何网关和路由，因为它位于同一数据中心和同一机架，比Shared Caching提供了更高的性能。 Caching (预览)与我们的应用程序并排工作，初始化并作为一个Windows Service运行在虚拟机里，由我们的role里的启动任务调用，我们能够获取更多的信息并控制它们。 因为Caching (预览)利用我们现有云计算服务的内存和CPU，所以它是免费的。我们只需要为计算付费。每个机器上的资源可以被更加有效的利用。 启用Caching(预览) 在云计算服务里启用Caching(预览)是非常简单的。让我们先从Visual Studio创建一个新的windows azure cloud project然后添加一个ASP.NET Web Role。然后打开role setting界面并选择Caching page。在这里我们可以在一个role上启用和配置Caching(预览)。 为了启用Caching(预览)，打开“Enable Caching (Preview Release)”复选框。然后我们需要指定想要使用的caching 簇模式。 有两种类型的caching模式，co-located 和dedicate。co-located模式意味着我们使用运行云计算服务（web role 或worker role）实例的内存。通过使用这一模式我们必须要指定多少比例的内存将被作为cache。默认值是30%。所以确保它不会影响role业务执行。 Dedicate模式将把虚拟机里的所有内存用作cache。实际上它将为操作系统、azure托管等等储存一些。但是它将试图使用尽可能多的内存用作cache。 正如你所看到的，Caching(预览)是基于role定义的，意味着这个role的所有实例将应用同���设置并作为整个缓冲池（cache pool），你可以通过指定role的名字来使用它，稍后我将做一个演示。在一个windows azure project里我们可以拥有不止一个role启用Caching (预览)。然后我们将拥有更多的cache。例如，拥有一个web role 和worker role的情况。web role指定30%的co-located caching，worker role指定dedicated caching.。如果web role 有三个实例、worker role有两个实例，我将拥有两个cache。 如上图所示，cache 1由三个web role角色构成，cache 2由2个worker role实例构成。然后我们可以向cache 1中添加元素，从web role代码和worker role代码中获取它。但是存储在cache 1中的元素不能从cache 2中获取到，因为它们是独立的。 在Visual Studio里我们指定30% 的co-located cache并使用本地存储模拟器储存cache簇运行时状态。然后在底部我们可以指定命名的cache。本例中我们使用默认的一个。 现在我们在web role设置里启用了Caching (预览)。接下来，让我们看看如何使用cache。 使用Caching(预览) Caching (预览)只能被同一云计算服务的role所使用。如前面所提到的，如果它们都在同一个云计算服务中，能够从一个worker role里连接web role的一个cache。但是你不能从其它云计算服务使用一个Caching(预览)。这就是与Shared Caching的不同之处。如果它拥有连接URL和认证令牌Shared Caching对所有的服务都是开放的。 为了使用Caching(预览)我们需要向项目中添加一些引用并且在Web.config中添加一些配置。NuGet让一切变得简单起来。右击我们的web role项目并选择“Manage NuGet packages”，然后搜索名为“WindowsAzure.Caching”的包。在包列表中选择安装“Windows Azure Caching Preview”。 它将从NuGet库中下载所有必要的引用同时更新我们的Web.config。打开web role中的Web.config并且找到“dataCacheClients”节点。在这个节点下我们可以指定我们将使用的cache客户端。每个cache客户端将使用role名称标识并找到cache。因为之前我们只启用了该web role的Caching (预览)所以我将当前的role名复制到配置中了。 然后，在默认页面我将添加一些代码来演示怎样使用cache。我放了一个textbox到这个页面中，供用户用来输入他/她的姓名，然后点击一个按钮来为他/她生成email地址。在后台代码中，我将核实该姓名是否被加到cache中。如果加进去了将立即返回email。否则，将设置tread睡眠2秒来模拟延迟，然后将它添加到cache中并返回到页面。  protected void btnGenerate_Click(object sender, EventArgs e)    {  // check if name is specified   var name = txtName.Text;    if (string.IsNullOrWhiteSpace(name))   {    lblResult.Text = \"Error. Please specify name.\";    return;   }bool cached;   var sw = new Stopwatch();   sw.Start();   // create the cache factory and cache  var factory = new DataCacheFactory();   var cache = factory.GetDefaultCache();   // check if the name specified is in cache  var email = cache.Get(name) as string;   if (email != null)  {  cached = true;   sw.Stop();  }   else   {  cached = false;  // simulate the letancy   Thread.Sleep(2000);   email = string.Format(\"{0}@igt.com\", name);   // add to cache   cache.Add(name, email);   }sw.Stop();  lblResult.Text = string.Format(   \"Cached = {0}. Duration: {1}s. {2} => {3}\",    cached, sw.Elapsed.TotalSeconds.ToString(\"0.00\"), name, email);          }    } Caching (预览)可以被使用在当地模拟器上，所以我们按F5就行了。当我们第一次输入名字时它将使用大概2秒钟时间来返回email，因为它那时候还不在cache里。 但当我们再次输入同一个名字时，它将从cache中立即返回。 因为Caching (预览)分布在role的所有实例上，所以我们可以通过扩大我们的web role来扩大它。只需要使用2个实例并调整一些代码来在页面上显示当前实例ID，再试一次。然后我们发现即使它被添加到另一个实例中我们也可以获取这一内存。 跨Role使用Caching(预览) 正如上面所提到的，Caching(预览)能够被同一云计算服务里的所有其它role所使用。例如，让我们在cloud solution里再添加一个web role然后在其默认页面添加同一代码。在Web.config里我们添加cache客户端到最后添加的启用了Caching(预览)的role当中，通过在这里指定它的role名称。 当我们在本地开始该解决方案时我们在web role 1里指定名称并让它为我们生成email。因为该名字没有对应的cache所以将花费2秒钟时间并将email添加到cache中。 在web role 2里我们也指定相同的名字。然后你将发现它可以获取到web role 1保存的email并迅速返回。 最后我们可以将我们的应用程序上传到Windows Azure并再次测试。确保你已经更改了cache簇状态storage account到真实的azure account。 更多非常好的特性 作为一个in-memory分布式caching解决方案，Caching(预览)有一些极好的特性。第一个是支持高可用性。这是我第一次听说一个分布式的cache支持高可用性。在分布式cache世界里如果一个cache簇出现故障，它所存储的数据将被丢失。这一行为由Memcached引进并且被几乎所有的分布式cache产品所引用。但是Caching(预览)提供高可用性，这意味着你可以指定命名的cache是否自动备份。如果yes这一命名的cache的数据将在该role的其他role实例中被复制。如果一个实例故障，可以从它的备份实例中获取数据。 为了启用备份，在Visual Studio中打开Caching page。在命名的cache中启用备份，将Backup Copies的值从0改成1。 Backup Copies只能是0或1。“0”意味着没有备份也没有高可用性，“1”意味着启用高可用性备份数据到另一个实例中。 但是使用高可用性特征有一些东西需要确认。第一，高可用性并不意味着cache里的数据遇到任何故障都永不丢失。例如，如果一个启用了cache的role有10个实例，9个出现故障，大部分缓存的数据将会丢失，因为主实例和备份实例都出现了故障。但是一般说来这种情况不会发生，因为MS担保为了备份cache它将在不同的故障域里使用实例。 另一个是，启用备份意味着你为同一数据储存了两份。例如如果100MB内存够了，但如果想启用备份，至少需要200MB内存。 除了高可用性，Caching(预览)比Windows Azure Shared Caching支持Windows Server AppFabric Caching引进的更多特性。它支持带有通知的本地cache。它还支持绝对值过期以及slide窗口过期类型。 并且Caching(预览)还支持Memcached协议。这意味着如果你有一个基于Memcached的应用程序，你可以不用改变任何代码即可使用Caching(预览)。你需要做的是改变怎样连接到cache的配置。 与Windows Azure Shared Caching类似，MS也在Caching (预览)之上提供现成的ASP.NET session provider和output cache provider。 总结 当我们构建一个基于云的应用程序时caching是一个非常重要的组件。在2012年6月的更新版本中，MS提供给我们一个新的cache解决方案叫做Caching (预览)。与现有的Windows Azure Shared Caching不同，Caching(Preview)在我们部署到云的role实例内部运行cache簇。它提供了更多的控制、更好的性能和更好的成本效益。 在Windows Azure上现在有两个caching解决方案，Shared Caching 和Caching (预览)。如果你需要一个能够被很多云服务和网站使用的中央cache服务，你需要使用Shared Caching。但是如果你想要一个快速、就近分布的cache, Caching (预览)是更好的选择。 希望有所帮助， Shaun 本文翻译自：http://geekswithblogs.net/shaunxu/archive/2012/06/18/windows-azure-evolution-ndash-caching-preview.aspx","title":"Windows Azure革新——Caching（预览）"},{"content":"周，大量的思科用户反馈E2700、E3500和E4500这三种型号的Linksys路由器出现了问题。当他们尝试登陆他们的路由器，被要求需要输入/注册用户的“思科连接云”账户信息。出现这样出乎意料的“升级”可以很好的诠释思科的决定多么糟糕。 据思科称，连接云能让用户任何时间、任何地方连接他们的路由，免费传输文件、新的apps并且不断扩大新的app丰富你的互联生活。在用户勾选“自动升级固件”选项后，E2700、E3500和E4500将自动升级，这就是为什么许多用户在没有提前告知的情况下被要求用不同的账户鉴定。当拔下路由，恢复旧的用户名/密码功能，这样路由将只提供简单的菜单结构，其他的高级功能将会消失。 思科的第二个问题是思科连接云的“补充条款”。在六月27日，条款的第15段内容从附加条款中移除。大意是当你使用思科服务，思科将跟中用户的服务信息，包括但不限于状态和网络健康状况；你所使用的与服务有关的app；使用的功能；网络传输速率；历史浏览记录；服务系统的出错的频率和相关信息。但是这不能代表什么，思科有权随时更新他们的隐私条款。而下一条条款是：在某些状况，为了提供用户家庭网络的最优体验，有些更新将自动安装，这与是否设置自动更新无关。 可以想象一个8年的老用户将会多么恼怒他们的路由的被秘密更新，强制注册一个没有任何用处的云服务，需要因原来的附加隐私条款而担心隐私问题，因被告知不能回滚的旧的固件而生气。之后思科撤销了这一条，并提供旧固件的公共下载链接和更新路由器的详细指导。 公司与用户的严重脱节 投资云服务是思科对优化产品线和打造品牌存在的最后尝试。不幸的是，消费级路由既不迷人也不强大，当你在大范围内使用，其信号很糟糕。思科连接云正在试图解决这个问题，尽管与旧路由相比没提供任何新特性。 思科云服务如何工作的，看看思科的官方解释。 注意在“内建App”下没有提供云路由特性。功能有各种限制，并不能完全启用，却号称云计算，而且价格昂贵。思科连接云服务条款里叙述，如果思科发现你用其服务观看淫秽、色情或者攻击性的目的侵犯他人权益，将单方面的关闭你的账户。而且保留采取法律手段的权利。 服务是访问你的路由器的唯一方法，杀死一个将立即杀死其他的所有服务。 轻率、贪婪、敌视消费者 Linksys 曾以合理价格、广泛的兼容性、出色的性能、傻瓜式使用、打造了自己的品牌。而截至上周，购买一个新的Linksys 路由器意味着强制采用云服务，得到的却是没有任何用处、让思科窥探你的互联网记录、公司能够对你合法购买的路由进行控制。在你使用时候就像收到监视，有大量的数据上传，可能成为政府部门的证据。就是你买的路由器。 via ET （Carter_sysu 供雷锋网专稿，转载请注明！)","title":"思科的云战略：强制与贪婪"},{"content":"http://www.cnblogs.com/HappyAngel/archive/2011/10/24/2218189.html 　最近一直在找工，博客都没怎么更新了，觉得也该总结和思考些东西了，于是便有了这篇文章。谈到面试题，其实它有很多种，有偏技术的（腾讯，淘宝问得多）；有偏算法，逻辑和数学的（微软，谷歌，百度，阿里云等问得多）。我喜欢后者，最近也做了很多这方面的题目，围观了很多关注算法和面试题的博客，比如（july童鞋）。对于很多精妙的题目，常常在想这些出题的童鞋是怎么想到的，因为这些题目确实能够很深入的考察出一个面试者的逻辑，算法和思维功底。本文章主要是总结自己在做这些面试题和了解相应解法的过程中思考的一些东西，感觉这些东西在很多题目中都出现过，非常值得抽象出来专门理解。 　　一 双指针遍历 　　所谓双指针，是利用两个指针对一个有序数组进行遍历，查找出符合要求的数据集合。相信大家都接触到了这种思维模式的解题方法，只是没有注意到罢了。下面举几个例子吧。 　　例1：给定一个数组a[n]，求数组中是否存在两个数的和等于给定值sum并输出？ 　　这个问题很常见，我当年在面试微软实习生的时候就被问到了此题，解决方法有很多种，这里我就不赘述，我讲的是用双指针遍历法的。首先数组不一定有序，对数组排序是必须的。那么便来到了这样一个场景：对有序数组如何遍历来求得符合要求的数据集合？双指针的解决方法如下：定义两个指针（i 和 j），分别指向数组头和尾，那么会出现如下三种情况： 如果a[i]+a[j] == sum，那么很显然，只要输出这两个数，并把指针i+1和j-1指向下一个数即可。（这里不输出重复的组合） 如果a[i]+a[j] > sum，说明当前遍历的数值偏大，所以可以把j-1以减小和的值，在继续比较。 如果a[i]+a[j] < sum，说明当前遍历的数值偏小，同样为了加大和可以把i+1。 总的时间复杂度取决于排序即O(nlogn)。 例2：这题来自编程之美2.21只考加法的面试题，原题大致意思是写一个程序，对于一个32位整数，输出它所有可能的连续自然数之和的算式，要求是这些连续自然数之和要等于原数。例如3 = 2+1; 9 = 4+5，9 = 2+3+4等。 这题有两种解法， 其中一种便是双指针法，还有一种比较巧妙，是我同学在面试阿里云计算的时候想到的，利用了数学方法，简单来说是求出一个公式来。这里只说双指针的解法。 这里需要一个转化，把求n中所有可能的连续自然数之和归约为在数组{1,2,3,...,n}中找所有连续子序列和等于n的问题。这里同样也是这样一个场景：对有序数组如何遍历来求得符合要求的数据集合？这时的双指针可以不是一头一尾了，而是两个都指向头部，这样可以以高效的顺序遍历我们要找的所有集合。初始设i=j=1，这里同样会出现三种情况： sum[i,j] == sum， 直接输出i到j的值，并把i+1,j+1,因为只是i+1肯定是不等的，因为和小了，同样j+1只会使和变大，所以两个都要往前加（注意这里指针不用考虑减小，因为这在以前就考虑过了） sum[i,j] < sum，说明偏小，那么提高j来使得和变大才有可能相等 sum[i,j] > sum，说明偏大，那么提高i来使得和变小才有可能相等 这样，代码就出来了： ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <span style=\"font-size: 16px;\">//计算连续和为n的所有子序列 void GetAnswer(int n) {     inti=1;     intj=1;       while(i<=n/2 && j <= n)     {                   intsum = (j+i)*(j-i+1)/2;           if(sum == n)         {             for(intk=i; k <= j; k++)                 cout<<k<<\" \";             cout<<endl;             j++;             i++;         }         elseif(sum < n)         {//sum[i..j]<n,只能提高j以增大sum             j++;         }         else//sum[i..j]>n,只能提高i以减小sum             i++;     } } <\/span> 这里的思想本质上与上面例题1是相同的，这也是我抽象出这种思维模型的原因，当遇到有序数组或者归约到有序数组时，利用双指针遍历的方法是求得我们需要的数据集合的一种相对比较高效的方法。 二 排除以减少解空间大小 相信这种方法大家都听过，但是实际使用的时候却时常忘了去考虑这种思维模式，我这里举的都是很巧妙的例子，也是我遇到的，感觉绝对值得把这种思考方法总结出来。  例1 此种解法很值得一说的题目来自编程之美2.3 寻找发帖水王，大致意思是：  某论坛有一个“水王”，经常发帖，据说该“水王”发帖数目超过了帖子总数的一半，那么如何在id发帖列表中快速的查找到这一“水王”？ 这道题非常好的体现了排除法的非凡效果，如果直接去求这个水王，方法也不少，例如按发帖数排序，但是这至少是O(nlogn)时间复杂度，实际上最好的算法却是尽可能的去减少解空间，把不可能的去除掉，留下的自然是要求的的解。对于这道题，就是每次去除两个不同id的发帖，由于默认水王发帖超过一半，那么去除任何两个不同id后仍然是超过一半的，why？可以这样想，开始满足的公式是 x>y/2,那么减去两个不同id后，最坏情况，这两个不同id中有一个是水王的id，则(x-1)/(y-2) > (y/2-1)/(y-2) > 1/2，即仍然是大于二分之一的， 所以可以不断的这样做直到最终剩下水王id为止。编程之美上给出了一个非常精妙的程序，这里不赘述。  相同的例子还有这里。 实际上这类思想的应用场景可以认为如果看到要求的东西占总体数量一半以上情况的时候，可以考虑排除法。当然还有其他情况，例如正面求解屡试不行的时候，也可以考虑这样的方法。 三 蓄水池抽样求概率模型 想起这个是因为多次碰到类似概率题要用到它，例如10月16号百度北京的笔试题中有它，然后同学面试阿里云被问到的题目中有它，我发现不仅仅是当不知道n多大的时候，即便有时候知道n多大，也可以使用这个模型，详细的关于模型的知识可以查看wiki也看以看我这篇文章。 我同学在面试阿里云的时候被问到这样一个概率的问题： 给你一个n个长度的链表，以及一个函数，这个函数50%的概率返回0,50%的概率则返回1，问如何用这些条件从这n个链表中随机的抽取k个节点。 利用蓄水池抽样可以有这样一个解法，首先，这个函数可以产生0和1，那么我们可以通过构造多个二进制位（调用多次这个函数）并只取其中某些情况来构造任意概率，例如假设我要构造1/4，那么我调用两次这个函数，如果出现00，我认为发生，如果不是则不发生；又假设要构造3/5,我调用三次这个函数，并假定3种出现为无效出现，例如000，001，010。如果出现这种则再次调用函数生成，同时我们指定某三种为出现，其余不出现，这样可以构造一个生成概率3/5的生成器。有了这个，我们利用蓄水池抽样思想，先指定前k个节点为所求，并把指针指向第k+1个节点，此时以k/(k+1)决定是否与前k个选定的节点替换，替换时随机选择，并以此类推直至结尾。最后剩余的节点即为所求。 总的来说，我觉得这三个思想都是经常可以利用的，有些问题没有见过这些思想是挺难在面试时当场想出来的，相反如果通过面试题提取出某些抽象可复用的思想，那么以后任何变形的面试题，都可以归约至这些解法从而解决，相信那个时候面试官一定会对你刮目相看。","title":"常见面试思想方法整理"},{"content":"根据NIST的权威定义，云计算有SPI， 即SaaS、PaaS和IaaS三大服务模式。这是目前被业界最广 泛认同的划分。PaaS和IaaS源于SaaS理念。PaaS和IaaS可以直接通过SOA/Web Services向平台用户提供服务， 也可以作为SaaS模式的支撑平台间接向最终用户服务。　 1. SaaS：提供给客户的服务是运营商运行在云计算基础设施上的应用程序，用户可以在各种设备上通过客户端界面访问，如浏览器。消费者不需要管理或控制任何云计算基础设施，包括网络、服务器、操作系统、存储等等； 2. PaaS：提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置；　 3. IaaS: 提供给消费者的服务是对所有设施的利用，包括处理、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、储存空间、部署的应用，也有可能获得有限制的网络组件（例如，防火墙，负载均衡器等）的控制。 国内的云服务提供商新浪，阿里巴巴，今天微博上看到的一个，四大云计算开源社区OpenStack 、OpenNebula、 Eucalyptus 、CloudStack都是针对于IaaS的开发，针对PaaS、SaaS开发的社区我不清楚。","title":"三、云计算架构层次"},{"content":"　　随着生产力的不断提高和计算机及网络技术的迅猛发展,无论是对企业还是对个人,对信息技术的依赖程度都是前所未有的。纵观信息技术的发展历程以及未来的供需关系，可以肯定未来的世界会很难分清真实和虚幻，同时我们个人的力量已经完全微不足道了。 　　1.历史与未来的技术矛盾 　　凡是当前时间之前的时间都被我们归为“历史”，而将当前时间之后的时间都被归为“未来”。历史值得借鉴，未来值得把握。 　　在IT历史中，我们曾只需要自己的台式机而不需要别人帮忙，曾夸耀自己的技术有多高，曾永远身居同一处进行工作，曾把拥有3GHz主频的电脑用来日常打字，曾...... 我们曾满足于历史的一切。 　　但这样的局面已经无法满足未来的社会需要了，正如“山外青山楼外楼”所描述的，你的能力的高低只是相对的，随着新技术的出现，永远有比你更懂技术的人存在;无论你的计算机性能多么优秀，也无法依靠一己之力揭示一切自然界的奥秘;现在的交通已经非常发达了，早上你在北京吃早餐，下午你就已经坐在华盛顿的会议室里开会了，难道你还要为了维修身处北京的服务器而启程回国?随着经济危机的袭来，怎样在不降低企业运行效率的同时完美解决能源消耗问题...... 　　历史和未来之间的技术矛盾已经凸现，已经不能靠现在的技术来调和。 　　2.技术不能扯社会发展后腿 　　社会的发展是必然的，而作为为社会发展铺平道路的IT技术必须先人N步(N>>1),只有IT永远处于社会发展之前，才不能对社会发展起到滞后作用。 　　我们人类是最有智慧的，因此这些技术矛盾也难不倒我们富有聪明才智和敏锐洞察力的“IT人”，我们已想到了切实可行的对策。 　　对策一：“云计算”技术 　　引用《百度百科》中对“云计算”这一技术的解释：云计算(Cloud Computing)是一种新兴的商业计算模型。它将计算任务分布在大量计算机构成的资源池上，使各种应用系统能够根据需要获取计算力、存储空间和各种软件服务。 　　个人觉得，这一解释还不够完美，未来的云计算不止是计算机计算单元的计算，更是人类智慧的共同运算。通过云计算，我们可以利用全球很多台计算机来进行科学运算，将每个计算单元的计算量降到更低，然后将整体的运行效率提升得更高;同时，通过云计算，我们可以将全球无数个人类大脑无形的连接起来，靠大家的智慧高速解决那些曾经一个人需要几天甚至几年也难以解决的技术难题，甚至是千年未解之谜。这种高度网格化的计算网络的解决效率远超原先含义的并行计算。 　　对策二：“虚拟化”技术 　　最初只是作为软件测试之用的虚拟机技术自出现之日起，就命中注定其应用领域不仅局限于这一单一方面，在使用这个“计算机中的计算机”的过程中，人们才意识到，她除了可以替代传统测试方式，还可以用于企业新技术的部署、产品的开发、应用程序的集中管理等真正计算机能做到的任何事情，同时受此技术启发，人们又开发了桌面虚拟化、应用程序虚拟化、存储虚拟化、服务器虚拟化、终端虚拟化以及沙盒等技术，这些虚拟化技术的共同特点是在减少能源消耗的前提下，提高单位计算单元的使用效率。 　　对策三：“移动化”技术 　　移动化技术可以分为网络的移动化、设备的移动化和应用的移动化三个方面： 　　(1)网络的移动化 　　网络是目前以及未来人类沟通，获取及管理信息的主要途径，网络技术的小小发展，往往会带动相关技术很大的发展。传统的有线网络如同轴电缆网、以太网、令牌环网及以其发展衍生的ISDN、xDSL、Cable等数字网络似乎已经不能满足我们追求“高速、自由、方便”的入网要求了。“3G”网络时代的到来是社会发展及技术需求膨胀的必然，网络的移动化是大势所趋、人心所向! 　　(2)设备的移动化 　　如果大家接触IT领域的时间较长，大家就会感觉到我们所使用的设备正在逐渐从固定化向移动化快速过度。随着技术的更新和生产成本的降低，几年前我们还在刻意强调的台式机已经逐步被笔记本所代替，同时由于人们有着向往自由的愿望,这促使我们更加青睐于更加便捷的工具，使得我们仍不满足于现状，继续向便携化发展，UMPC、上网本、PDA以及具有类计算机功能的智能手机出现，无疑预示着传统笔记本时代也将很快成为历史，无拘无束的设备使我们的工作和生活更“生动”。 　　(3)应用的移动化 　　同一时间、同一地点的办公方式从现代移动化技术的视角来看已经完全没有必要，人们需要的是无时无处的应用体验，这就需要使我们的应用程序由固定向移动进行转变,使应用程序的使用不再局限于某一位置的某一台计算机，软件对硬件的依赖性逐渐减弱，我们在任何地点都可以进行工作，就像“SOHO”。 　　这三种技术目前正在崛起，并会带来前所未有的技术变革;同时他们又不会孤立地成长，三种技术的相互融合发展会使其更具有市场的竞争力和持续的生命力。","title":"云计算、虚拟化及移动化将携手驱动未来"},{"content":"编写可读代码的艺术 ·  代码的优劣不仅直接决定软件的质量，还将直接影响软件成本。 ·  写出的代码能让人快速理解、轻松维护、容易扩展的程序员才是专业的程序员。 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 深入Android应用开发：核心技术解析与最佳实践 ·  以源代码为依托，逐步深入讨论Android应用开发涉及的方方面面 ·  展示大量最佳实践，为开发高质量的Android应用提供绝佳指导 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 Ext JS 权威指南 ·  基于Ext 4.1，全面讲解Ext开发方法、技巧与最佳实践，通过源码剖析Ext原理 ·  基础理论、翔实案例、最佳实践三者完美诠释的体现 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 标签：标记系统设计实践 ·  理论完备，深入阐释了标记系统的价值和原理 ·  实践性强，全面讲解了标记系统的架构设计方法和实现细节 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 深入理解软件构造系统：原理与最佳实践 ·  清晰展示软件构造的原理与细节 ·  涵盖构造软件产品需要用到的所有工具和技术 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 Oracle E-Business Suite：ERP DBA实践指南 ·  资深Oracle技术专家和ERP专家十数年工作经验的结晶，业内多位资深Oracle技术专家和专业社区联袂推荐 ·  全面系统地讲解Oracle ERP系统的架构、规划、部署、运维、管理及性能优化，理论与实践相结合，广度与深度兼备 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 Python标准库 ·  全球资深Python专家Doug Hellmann亲自执笔 ·  Python语言的核心开发人员Jesse Noller作序鼎力推荐 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 C程序设计的抽象思维 ·  斯坦福大学C程序设计经典教材,学习C语言程序设计的最佳指南 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】 云计算揭秘——企业实施云计算的核心问题 ·  解决与云计算相关复杂性问题的必备之选 ·  【互动网】【当当网】【卓越网】【京东网】【豆瓣网】","title":"华章IT图书书讯（2012年第7期）"},{"content":"转自：http://www.infoq.com/cn/articles/szh-cloud-storage-services 作者 沈志华 发布于 2012年2月14日 “云”这个概念在今年非常的火热，2年前国内的云存储服务还只有又拍云存储一家，如今国内已不下十家，面对如此多的云服务商，选择云服务的标准成了大家比较关注的问题。我们很荣幸在InfoQ与大家交流一些心得。 我们在六年的云服务经验基础上沉淀了三个词：安全稳定、快速、易用。 一、安全稳定 云服务的安全隐患大致会出现在两个方面：第一是服务的持续可用；第二是数据的丢失和泄漏。 今年很多云服务平台屡屡爆出服务宕机或丢失数据的问题，这让大家对国内云服务更加的不放心， 其实云计算并不应该存在这类严重问题，云计算的主要使命之一恰恰是解决稳定和安全隐患问题。如SAE类PaaS云计算平台是保障我们网站应用的正常服务，高度容错且可扩展，而又拍云存储则属IaaS类云计算平台，存储数据的稳定和安全保障是云存储最主要的工作。 先说持续可用性的保证问题。无单点是一个云服务的基础，而目前很多云服务是单点的，所以致使故障频发。一个真正的云计算平台至少应该保证有两个互相热备的数据中心，三分以上分布不同机柜和机房的数据，在机房引入的线路上也应该保证至少电信、联通有两根以上的线路。只有这样才能保证不论是机房断电、硬盘故障、还是断线，都能保持持续的访问。另外就是对于服务器集群的部署上要实现负载的均衡，可采用服务器HA互备，lvs进行4层负载，7层nginx进行一致性hash及冷热文件调度，一旦有服务器出现硬件故障，前端调度会自动识别并剥离出集群，确保不影响用户每一次的实际访问。 为充分发挥Nginx的7层代理的优势，我们在此基础上加入了较多的业务模块，如：一致性HASH模块，根据业务需求通过请求信息进行计算，把请求统一分发到后端缓存服务器，避免使用普通负载均衡方式而导致缓存命中率降低，可大大提高缓存集群的业务处理能力;缓存调度模块，基于LRU和MRU算法对全局的所有访问URL进行热度分类，从客户端发起的请求到达Nginx就能快速确定该请求是否属于热门缓存，而直接到SSD磁盘获取资源;统计模块，在Nginx内部对所有访问URL进行统计并汇总，定期向后端业务系统发送统计报告，使得我们可以对客户提供实时的流量统计查询服务，这也是服务计费的标准; 再说数据的安全和泄漏问题。安全性的解决主要是通过多样的备份机制，像云存储主要依托在不同服务器上实现动态的实时三备份，也就是说会自动搜寻用户的数据是否存在3份，如没有自动选取服务器生成，这种机制可以完全的保证数据的安全。数据泄漏是使用第三方云计算的最大忧虑，因为云计算的API开放性，决定了云计算服务在安全性上的隐患更加大。目前通用的解决办法是采用128位AES加密码保护，以及权限控制，但是其实目前还没有绝对的办法可以杜绝数据部署在云上的泄漏问题。云存储目前主要是托管用户的公开数据，及网站上本身提供给用户访问的数据。 二、快速 快速是互联网平台发展的基石，优秀的速度才能创造有利于增长的用户体验。但是传统的IDC部署方式下，受限于硬件规模和存储架构的影响，通常速度很难发挥。这时候云存储就能发挥作用了，其集群服务器部署的方式，能最大的发挥数据运算的效率。开发者在评估云存储服务的速度时，应该看看他们有没有全国分布的CDN加速网络，如果没有通常速度都无法保证，严格来说，云服务是需要具备CDN节点的。 再就是看这个云服务的CDN部署架构是否优良，这个对速度的影响非常大。云存储CDN架构采用各地方缓存节点、核心缓存层、中心数据机房，3层结构部署，前端智能DNS调度用户到该用户访问最快的节点，地方缓存节点会保持连接2个核心缓存机房做负载均衡及相互备用，避免单路网络问题。核心缓存机房通过多条线路互备到数据机房读取文件。 三、易用 云服务因为其弹性扩容的特点，大幅度降低了互联网平台的运维规划压力。但同时他也有可能需要做一些额外的对接开发，因此易用就非常重要。好的云服务会开放高度可用的API，让用户系统极容易与云平台对接。如果云平台的API不够优秀，会让开发者的对接成本以及后续维护成本都非常的高。最好的云服务，应该有一些基于云的处理功能，去帮助用户节省一些工作时间和成本。比如又拍云存储，我们做了10种缩略图自定义、文件防盗链、以及与各种第三方平台系统的对接插件，以使得用户易用性更高。 最后给大家一个建议，如何去选择云服务。我们知道亚马逊的云服务划分为EC2和S3两块，EC2专用于网站的计算，而S3专用于静态文件的存储。在国内目前还没有公司具备亚马逊这样的云服务能力，因此建议大家可以考虑把网站托管到云主机，而静态文件托管到云存储。而对于数据库这类有高要求的数据应用，还是建议大家使用托管的物理服务器，毕竟目前云主机的性能和稳定性方面仍有待观察。","title":"云存储服务的可用性——从又拍网看云存储服务"},{"content":"得益于强劲的信息化建设需求，尽管现在的中国乃至全球市场服务器年销量仍在稳步上升，但在一些区域市场比如英国，随着企业系统更新换代的周期接近尾声以及越来越多的中小型企业转向云计算而不是购买硬件，英国服务器市场预计将在明年出现萎缩。这也引出我们今天的话题——随着云计算服务的进步与普及，企业对于服务器采购乃至发展将会呈现怎样的态势？ 　　类似的话题其实已在2009年时被提出，当时有预测指出“放弃使用自家服务器的企业数量将大幅增长”：对于那些员工总量在1000名以上的企业而言，他们会考虑放弃使用自家服务器，而转用科技公司提供的云计算服务。 　　事实上，目前，大量小型企业已经在这样做，而大量中型乃至至大型企业也会考虑放弃使用自家服务器，而云计算更成为一些企业实现商业模式创新的法宝，比如印度某电信公司完全不拥有自己的IT基础架构，而是完全租用了云计算提供商的服务，以面对迅速增长的用户和市场，并将精力完全集中在业务模式的创新上;互联网公司更是如此，新兴的社交网络或是WEB2.0公司对于云计算有着更大的兴趣，因为这意味着更低的投资风险，用少量的资金去换取IT服务，而不是在创业之初先买下一个价格不菲的数据中心。 　　云计算在成为商业模式创新的润滑剂的同时，也将这些企业原本用于服务器或整个IT基础架构的采购预算换成是支付给云服务公司的支票。一定意义上，IT资源正从冰冷的钢铁盒子变为可以被计量的“公共服务”，这就像给IT部门安上了电表，而不是需要自建一个发电厂。 　　积极创新可以视为服务器采购转向云计算的主动因素，即将可见经济疲软也会让企业更加注重预算。 　　市场调研机构IDC认为对西欧市场疲软的增长预期是市场状况不佳导致的服务器领域萎靡的综合体现。特别是金融机构在2009年底大萧条之后放松钱袋子的过程也接近了尾声，而在企业级市场上的更新换代周期也即到来。大中型企业在虚拟化上看到了不错的投资回报，许多在高规格系统上进行投入的企业用户也开始增加虚拟服务器的投入，而不是购买物理服务器。这些因素都对服务器硬件的销售额造成了影响。 　　由于需要在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费，对云计算服务的热切需求也提高了对于云服务提供商数据中心的要求。比如：规模效应、超高密度、可灵活快速扩展、降低运维成本、自动化管理及高可靠性等。 　　而在对于服务器本身的需求方面，需要满足这些需求就需要做到标准化、简化甚至是定制化，以求满足从服务器本身到管理与运维的一系列云时代的需求。已经拥有超过百万台规模的Google云计算，最早将EC2引入商业云计算领域的亚马逊等公司似乎已在这方面走在了前面。 　　尽管像Google那样完全去自定义服务器的架构似乎仍然不是大多数企业的选择，但服务器架构仍然会从目前普遍的机架式、刀片式服务器继续向满足“云”发展。超高密度、虚拟网络、流程化维护乃至到对于分布式文件系统/存储的需求都会引发服务器技术乃至结构的进化。 　　未来的服务器系统可能会向两个方向发展，简化的服务器单元、或是“变大”的刀片。 　　简化的服务器单元：就像目前DELL PowerEdge C、HP Proliant SL以及超微的某些产品那样，采用标准化、简化、定制化的设计来降低采购成本，并将在密度方面继续提升以达到在标准机柜的1U厚度内部署4台甚至更多数量服务器，从而提升与刀片服务器在密度比方面的优势，并实现更好的成本与散热需求。在背板接口上也可能继续简化，如将电源模块或散热单元移出服务器而通过机柜整体实现。 　　“变大”的刀片：以往的刀片系统是通过在7～10U高度内实现计算、电源、网络等功能模块化从而体现自身的价值，这也是由以往的应用规模甚至是机柜的物理结构而产生的“妥协”。而在云时代的数据中心，7～10U的高度将可能被进一步扩大至整个机柜，这有点像我们刚才所说的简化的服务器单元的结尾部分，一个机柜就像容纳了一系列模块的刀片服务器系统，所有模块共享电源、散热、交换能力。再进一步，机柜形式的刀片会继续以集装箱形式来提供已经完成集成与部署的云计算基础架构，虽然这么说起来似乎缺乏些新意，但不可否认的是，只有这样才能满足用户的快速部署、扩展计算能力的需求，在服务器厂商来说，供货与部署上也会更加方便。 　　未来的数据中心管理也将由云计算的系统架构以及标准化的服务器带来革命性的改变，大部分运维人员不再需要对硬件、应用了如指掌的工程师，而像是流水线旁的工人，开着Segway，按照大屏幕上的提示前往某排机柜的某台服务器前，拆掉坏掉的机器，插入全新的，就完成了。 　　在服务器市场上，如果仍然提供传统意义上的服务器硬件的公司将会逐渐被市场忽视，一些超大规模的云服务提供商已经转向硬件的生产商(一些台湾IT代工厂商：如广达、富士康)，而不是选择原来H.I.D这样的的知名品牌，只有积极的免对市场需求，才能获得更多机会与空间，当然以整体解决方案提供给用户开始建设私有云仍是其价值之一，不过选择自建私有云还是租用公有云还要看企业自身对于数据安全、成本以及可用性之间的平衡，这似乎是另一个话题了。 　　然而对安全问题持“顽固”态度的企业仍然会选择自建数据中心，改变他们的选择仍然需要一些时间，而与此同时，每天为8亿网民提供访问服务的Facebook数据中心，尽管在创建的时候带来的临时工作岗位达到1400个，但在运维环节，数万台服务器却只需55人。对了，其中一半负责安保。","title":"对话未来：云计算与服务器的博弈"},{"content":"原文地址：http://www.douban.com/note/211794388/ 1. 阿里云，阿里战略级支持力度。以 Amazon 云计算平台为师，开发人员不少，但内部团队相对混乱动荡。对开发者友好程度一般。产品主要由万网销售，价格几乎是国内最贵，服务响应一般，云市场捆绑的软件多数都是关系户。#微评云计算# 2. 盛大云，不确定是否目前是盛大战略级支持。以 Amazon 云计算平台为师，开发人员目前偏少，内部团队相对动荡。对开发者友好程度一般。产品由盛大自行销售，价格合适，入手使用较为容易，服务响应较好。期待盛大能做后续投入，并且继续改进产品体验。#微评云计算# 3. 新浪 SAE，目前不是新浪战略级支持，起码听不到曹会计的念叨。几乎是目前国内最好的 PaaS 平台，开发人员目前偏少，团队相对稳定。对开发者友好相对较好。价格合适，入手使用较为容易，服务响应较好，口碑不错。#微评云计算# 4. 华为云，像是华为战略级支持的方向，到底要做成什么样子...不知道。技术上总体偏差，用户体验糟糕，安全性一般，开发人员...海量，有人觉得华为能做成，但我真不看以做硬件做软件的思路来做互联网。#微评云计算# 5. 百度 BAE ，跟 SAE 类似，也是 PasS 。目前是百度「概念」上战略级支持，较为特别的是，还支持 Java 环境，看起来，以后可能要面向密集计算，不过稳定性还需改进，内部团队规模不知。对开发者友好程度一般。#微评云计算# 6. 功能型的云服务 ，比如 UpYun，面向解决「图片」存储问题，规模小，但 API 丰富，对开发者支持较好，服务响应不错。其他也有人在做面向垂直行业的云计算解决方案，个人表示看好。#微评云计算# 7. 结束语 国内的云计算平台，如果做不到开发者买账的话，永远都是废柴。完全照搬 Amazon 或是 Google App Engine 也是没有出路的事情，摸清用户的需求，解决用户的问题，远比炒作概念更为重要。未来18个月，国内云计算服务会更加成熟，个人表示，乐观看好。#微评云计算#","title":"微评国内云计算平台"},{"content":"对于云计算最初的幻想是：在家里有台显示器，一根网线就够了，操作系统，存储都在云端实现，这就是从操作系统课堂上听黄贤立老师讲课得来的，至今已过了三年，对于我们当时的网速来说几乎是不可能的，这也导致了，dropbox之类的网络存储在中国没有那么普及一样，我认为这个源自中国的慢网速！ 最近，各种东西的兴起，最先看到的是虚拟网卡，citrix公司开发的OpenFlow,处理虚拟机的网卡设备等，再后来我关注的就是OpenStack，后来的数据处理Hadoop等工具，不同版本的CloudStack, AWS以及最近的OpenSwift等等，新浪的SAE这些东东，搞得我眼花撩乱，根本不知道哪个对哪个了，今后几篇文章对上述以及其他功能进行细分，寻找其共同点，以及层次架构。","title":"一、什么是云计算？"},{"content":"CSA (云计算安全联盟)的目标是为云计算的安全保证提供实践指南,同时提供如何安全地利用云计算方面的指导。 DMTF (分布式管理工作组)通过开放云计算标准孵化器致力于互操作和安全机制方面的标准化。 ETSI (欧洲电信标准协会)致力于信息技术和电信融合的问题。 NIST (国家标准核技术研究院)致力于云计算概念的定义。 OGF (开放网格计算论坛)通过 OCCI (开放云计算接口)工作组提出 IaaS 的接口标准。 OMG (对象管理工作组)致力于云上的应用和服务的建模和部署。 SNIA (存储网络行业协会)通过云存储技术工作组开发了一个云存储系统实现的体系结构,并希望能主导制定一系列云存储相关的标准。 OCC (开放云计算联盟)主要是支持不同云之间交互的云计算标准的制定,以及制定一个云计算测试基准,支持开源云计算实现。 CCIF (云计算互操作性论坛)则提出了一个通用云计算接口以屏蔽不同的基础设施服务接口。 关于 IaaS 方面的标准会集中于如下方面:虚拟机镜像分发,虚拟机部署和控制,云内部虚拟机之间的交流,持久存储,虚拟机服务水平标准,安全的虚拟机配置等。但是目前关于 IaaS 的标准还较少讨论到基础设施除了虚拟机和持久存储之外的一些问题,比如虚拟路由器和交换机,虚拟防火墙,虚拟负载均衡器,虚拟设施和物理设施的配合等。 在 iaaS 领域目前比较成熟的可能成为通用标准的是 DMTF 的 OVF , OGF 的 OCCI , SNIA 的CDMI 。 CSA 的安全云计算指南也有一定参考意义。 DMTF 也试图将 CIM 和 WBEM 纳入云计算标准中。 OVF 正如其名字所示,是一个开放虚拟化格式,描述了一个用来封装和分发运行在虚拟机上的软件的安全的、开放的、可移植的、有效的、可扩展的格式。主要特点如下:易于分发;简单、自动的用户体验;支持单虚拟机和多虚拟机部署;可移植的虚拟机封装;独立于供应商和平台;可扩展;易于本地化。一个 OVF 包含如下内容:一个 OVF 描述符文件,以 ovf 为后缀; 0 或 1 个OVF 清单文件,以 mf 为后缀; 0 或 1 个 OVF 证书文件,以 cert 为后缀; 0 或多个磁盘镜像文件; 0 或多个资源文件,比如 iso 镜像。","title":"云计算标准化以及互操作性方面的标准"},{"content":"作者：趋势科技云端安全副总裁 DaveAsprey Mark Lemley 是我的朋友，同时也是斯坦福大学的法律教授，他最近写了一篇很棒的博客文章。 美国国土安全部最近由于情报自由法的诉讼而被迫公布用来监视社交网络和网络媒体，并借此找出恐怖主义迹象，或其他对美国可能造成威胁的关键字列表。 可笑的是，美国政府认为有威胁的关键字甚至包含“pork（猪肉）”、“team（团队）”、“Mexico（墨西哥）”，当然，还有一个你也许猜到了：“cloud（云端）”。因为在 cloudywords.com 工作的缘故，我在云计算领域博客前一百位排行榜上有名，所以我敢肯定，我已经在美国政府的监视名单里了（嗨！大家好）。更何况我还写过一篇有关培根的博客文章，培根也是猪肉制品啊。 这个关键字列表已经被放在国土安全部 2011 年分析师手册中，借此可以让全美国数据中心内尽职尽责的员工能够“确认对国土安全部和反应活动不利的新闻报导”。 虽然遭受质疑，但美国国土安全部坚持这样的做法是好的，他们永远不会找寻诋毁政府或一般性的异议言论，因为他们只针对“潜在的威胁”。你也知道，就像是猪肉可能造成的威胁。一位国土安全部官员告诉赫芬顿邮报说，这份名单“是个起点，而不是终点”，可以帮助大家对人为威胁或自然灾害保持警觉。 有趣的是，国土安全部在处理这个问题时，就和企业在数据外泄以及数据外泄防护（DLP）方面如出一辙。在一个企业内部，如果不希望员工将机密数据发送到公司之外，你会怎么做？对潜在可能被外泄的内容建立文字和数字签名，然后与员工发送出去（例如发送到网络存储服务中）的数据进行对比。 最终结果会怎样？除非你的 DLP 软件部署工作非常有序，并且在部署时提前做好了数据分类，否则你最终得到的就会是类似美国国土安全部提供的那样可笑的关键字列表。 更糟的是，数据保护法与广为人知的外泄事件，再加上BYOD（自带设备上班）和BYOC（使用自己的云服务工作）等工作方式的流行，这些都会让你切实需要一套行之有效的 DLP 系统，哪怕这些系统并不能给你带来显著的投资回报。 也就是说，好的DLP 是可行的。实际上，在最近的一项调查中，产业分析公司Canalys 预测，2012 年在欧洲和亚太地区，DLP 会是 IT 投资在企业安全领域增长最快的，比电子邮件、网页安全，或是加密技术的增长速度快三倍。 如果你在 IT 部门工作，建议尽量不要将下列关键字发布到社交网站，除非你想把自己加入到观察名单中： 下图列出的是美国国土安全部提供的完整关键字列表，当然，这份列表能够生效的前提是坏人都只讲英语，就和星舰争霸战内那样。 （这是直接从EPIC 所提供的分析师手册中截的图，当然这样也不会导致我触发太多警报。) 本文版权为趋势科技所有，对于非赢利网站或媒体转载请注明作者以及原文链接。谢谢合作！ 爱趋势社区--下载/论坛/分享  http://www.iqushi.com 官方微博—拿礼品/分享最新IT资讯  http://t.sina.com.cn/trendcloud 趋势科技CEO：陈怡桦EvaChen的微博  http://weibo.com/evatrendmicro","title":"数据外泄保护与国土安全部"},{"content":"计算机的产生，意味着互联网诞生，互联网的诞生与发展，拉动企业信息化的发展，然而企业信息化在自然发展和助推产品中，CRM系统起到不可或缺的作用。然后，目前国内市场上的CRM产品，良莠不齐，品种繁多，让企业们眼花缭乱，在选择CRM系统的时候，由于缺乏对CRM系统的了解，很容易陷入CRM产品中的某一具体细节不能纵观CRM优势。而目前市场上形成了标准化与二次开发类的两种CRM系统的选择，由于互联网的迅速发展大部分的CRM企业都对产品进行了标准化和二次开发的改革，让cRM系统拥有更加规范和成熟的管理体系。 进行二次开发的改革和标准化，让所有使用的用户能够近距离的体验新技术，在很大的程度上升级企业管理的状态。对于现代时间紧张，快节奏的社会，一款有助于企业提高工作效率，节省时间的软件或者产品，是企业们最受欢迎的，然而一款优质的CRM产品，能够为日常管理提供及其便利的帮助，能够有效的达到所需要的目的，节省更多的时间，可CRM的发展毕竟过猛，行业的混乱局面仍然存在。目前市场上就存在一些产品设计原理过于简单，无法进行深层次的CRM应用。前期尽管减少了成本，而企业真正成长壮大起来却不能继续支持局面。另外一种极端情形便是CRM功能丰富全面但操作工序过于复杂，对于很多小企业来讲难以上手操作，即使学会了基本运用，也需要很长一段时间才能将其管理思想了熟于心。 　　在这种情况下，在线CRM可称是当前性价比最高，并且标准化程度也最高的CRM产品。无论刚刚起步的小型企业，还是即将迈向国际的大中型企业，从上而下，由浅入深覆盖了所有用户的功能需求，综合上手容易、操作轻简、功能多元等相冲突的优势，成为如今相对成熟的CRM产品。CRM产品二次开发所带来的诱惑是众所周知的，但其所需要投入的建设费用却让所有人望而生畏。看似与标准化产品相差不大，但二次开发的后续支出大到足以摧毁企业的所有信息化支出。况且二次开发并非是百分之百的成功几率。这也就导致了很多企业站在渡江岸口，迟疑不定，最终买到的CRM只是一个残次品。而在线CRM可以说是将标准化的产品变成了不停升级的变向二次开发产品。 而在云计算，移动网络的推动先，在线CRM软件，能够有效的帮助企业完成艰巨以及繁琐任务，能够有效的节省企业的时间，提高工作效率，从另一个角度能够有效的促进企业信息化建设的进一步的发展，加快信息化得脚步，成为企业管理信息化得主流选择。","title":"[置顶] 在线CRM助中小企业信息化腾飞"},{"content":"经常有人问我：“到底什么是云计算，它的核心是什么？” 自从某次的思考后，我每次都会回答：云计算的5-3-2原理，也就是具备5大核心特点，3种服务模式和2种部署方式。 一、引子 由于云计算的广泛热炒，很多东西都牵强附会地被”云“了。于是，”人云亦云“、“新瓶换旧酒”、“假大空”等各种帽子被扣在了云计算上。 各种厂商和机构也纷纷给出了自己的云计算的定义，纷纷扰扰，混乱不堪。这种情形，所有的努力都会分散到很多点，形不成中坚力量，对于云计算在产业界的作用和在人们心中的影响都会大打折扣。 在NIST（National Institute of Standards andTechnology，美国国家标准和技术研究院）的定义之前，比较普遍的提法是把云计算划分为一系列的\"X as aService\"业务。 二、云计算的5-3-2原理 NIST的Peter Mell和Tim Grance在2009年4月提出了一个云计算的定义，这可能是目前唯一一个得到广泛认同和支持的定义。 在参考文献1里，NIST对云计算定义如下： 云计算是一种能够通过网络以便利的、按需付费的方式获取计算资源（包括网络、服务器、存储、应用和服务等）并提高其可用性的模式，这些资源来自一个共享的、可配置的资源池，并能够以最省力和无人干预的方式获取和释放。这种模式具有5个关键功能，还包括3种服务模式和4种部署方式。 5大核心特点 NIST提出了云计算系统需提供的五大核心特点。 1.       按需自助服务（On Demand Self-Service）： 供应商的资源保持高可用和高就绪的状态，用户可以按需方便地自助地获得资源。 2.       泛在的网络访问（Broad Network Access）： 可以通过各种网络渠道，以统一标准的机制（如浏览器，相同的API等）获取服务,但是客户端可以是多种多样的瘦客户端或富客户端（例如移动电话、笔记本电脑、PDA等）。 3.       动态的资源池（Resource Pooling）： 供应商的计算资源可以被整合为一个动态资源池，以多租户模式服务所有客户，不同的物理和虚拟资源可根据客户需求动态分配。服务商需实现资源的位置无关性，客户一般不需要知道所使用的资源的确切地理位置，但在需要的时候客户可以指定资源位置（如哪个国家，哪个数据中心等）的要求。 4.       快速弹性（Rapid Elasticity）： 可以迅速、弹性地提供服务，能快速扩展，也可以快速释放实现快速缩小。对客户来说，可以租用的资源看起来似乎是无限的，可在任何时间购买任何数量的资源。 5.       可计量的服务（Measured Service）： 服务的收费可以是基于计量的一次一付，或基于广告的收费模式。系统以针对不同服务需求（例如，CPU时间、存储空间、带宽、甚至按用户账号的使用率高低）来计量资源的使用情况和定价，以提高资源的管控能力和促进优化利用。整个系统资源可以通过监控和报表的方式对服务提供者和使用者透明化。   3种服务模式 按NIST的定义，云计算的三个服务模式（Delivery Models）是：SaaS、PaaS和IaaS。 SaaS：提供给客户的服务是运营商运行在云计算基础设施上的应用程序，用户可以在各种设备上通过瘦客户端界面访问，如浏览器。消费者不需要管理或控制任何云计算基础设施，包括网络、服务器、操作系统、存储，等等。 PaaS：提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java、python、.Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置。 IaaS: 提供给消费者的服务是对所有设施的利用，包括处理、存储、网络和其他基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、储存空间、部署的应用，也有可能获得有限制的网络组件（例如，防火墙、负载均衡器等）的控制。 2种部署方式 NIST把云计算系统的部署方式或存在实体分为四大类： l  私有云（Private Cloud）： 云基础设施被某单一组织拥有或租用，可以坐落在本地（on Premise）或（防火墙外的）异地，该基础设施只为该组织服务。 l  社区云（Community Cloud）： 或称机构云，云基础设施被一些组织共享，并为一个有共同关注点的社区或大机构服务（例如，任务、安全要求、政策和准则等），社区云可以被该社区拥有和租用，也可以坐落在本地、（防火墙外的）异地或多地。笔者认为，社区云可能是一组私有云通过VPN（Virtual Private Network）连接到一起的VPC（Virtual Private Cloud），是混合云的一种。 l  私有云（Private Cloud）： 云基础设施被某单一组织拥有或租用，可以坐落在本地（on Premise）或（防火墙外的）异地，该基础设施只为该组织服务。 l  社区云（Community Cloud）： 或称机构云，云基础设施被一些组织共享，并为一个有共同关注点的社区或大机构服务（例如，任务、安全要求、政策和准则等），社区云可以被该社区拥有和租用，也可以坐落在本地、（防火墙外的）异地或多地。笔者认为，社区云可能是一组私有云通过VPN（Virtual Private Network）连接到一起的VPC（Virtual Private Cloud），是混合云的一种。 在更多场合，由于混合云是一种私有云与公有云的混合结构，而社区云是介于它们之间的结构，因此核心的部署模式是2种，即私有云和公共云。也就有了本文题目的5-3-2原理，可以借用以下结构图展示： 三、云计算的引申产物 1、云存储 云存储是在云计算(cloud computing)概念上延伸和发展出来的一个新的概念，是指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统。 当云计算系统运算和处理的核心是大量数据的存储和管理时，云计算系统中就需要配置大量的存储设备，那么云计算系统就转变成为一个云存储系统，所以云存储是一个以数据存储和管理为核心的云计算系统。 2、云安全 2.1 云安全（Cloud Security）是互联网和云计算融合的时代信息安全的最新发展，有以下两方面的含义： 1）、云安全技术（云计算技术在安全领域的应用，安全厂商） 百度百科：“云安全（Cloud Security）”计划是网络时代信息安全的最新体现，它融合了并行处理、网格计算、未知病毒行为判断等新兴技术和概念，通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，推送到Server端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端。 病毒厂商的概念： 简单理解就是通过互联网达到“反病毒厂商的计算机群”与“用户终端”之间的互动。云安全不是某款产品，也不是解决方案，它是基于云计算技术演变而来的一种互联网安全防御理念。[趋势科技] 主要原理：通过运行在\"云\"里的大量客户端对网络中软件行为的异常监测，获取互联云中木马、恶意程序的最新信息，传送到服务器端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端。 2）、云计算安全（安全技术在云计算平台的应用，云服务商，运营商） 云计算对信息安全和云服务本身的安全提出的新要求的解决方案和技术。 概念：利用安全技术，解决云计算环境的安全问题，提升云体系自身的安全性，保障云计算服务的可用性、数据机密性、完整性和隐私保护等，保证云计算健康可持续的发展。 主要集中在安全体系结构、虚拟化、隐私、审计、法律等方面，包括数据加密、密钥管理、应用安全、网络安全、管理安全、传输安全、虚拟化安全。 2.2 两者向两个不同的方向发展，有如下区别： 2.2.1后者（云计算安全） 关键技术主要分为数据安全、应用安全、虚拟化安全。数据安全的研究主要有数据传输安全、数据隔离、数据残留等方面，应用安全包括终端用户安全、服务安全、基础设施安全等，虚拟化安全主要来源于虚拟化软件的安全和虚拟化技术的安全。 云计算安全研究目前还在初步阶段，主要有云安全联盟CSA（cloud security alliance，主要推广云安全实践，提供安全指引）、云服务提供商（Amazon、Microsoft、IBM等，主要通过身份认证、安全审查、数据加密、系统冗余等技术和管理手段提高业务平台的健壮性、服务连续性和数据安全性） 2.2.2前者（安全云技术） 指的是信息安全产品和服务提供商利用云计算技术手段提供（Delivery）信息安全服务的模式，属于云计算SaaS模式的一种，可能叫\"安全云（Security Cloud）\"或\"安全作为云服务（Security as a Cloud Service）\"更合适。瑞星、趋势、卡巴斯基、MCAFEE、SYMANTEC、江民科技、PANDA、金山、360安全卫士等都推出了云安全解决方案。中国的奇虎360安全卫士提供的服务在这方面可以说是喊得最响，走在了世界的前面。 云安全核心：对海量未知恶意文件/网页的实时处理能力。 云安全需要的核心技术或者研究的方向有： 大规模分布式并行计算技术、海量数据存储技术、海量数据自动分析和挖掘技术、海量恶意网页自动检测、海量白名单采集及自动更新、高性能并发查询引擎、未知恶意软件的自动分析识别技术、未知恶意软件的行为监控和审计技术 3、其它云 在输入法、游戏、教育、通信和娱乐等领域，云计算的概念也被热炒，其基本思想也是类似。 四、云计算实践 1、虚拟化 NIST定义云计算是补充了3个基本技术。 Key enabling technologiesinclude: (1) fast wide-area networks, (2) powerful, inexpensive servercomputers, and (3) high-performance virtualization for commodity hardware.  其中虚拟化就是实现云计算的一种基础而核心的技术，也有需要经过深入调研和艰难抉择的过程。 虚拟化，它主要包括：服务器虚拟化、客户端/桌面/应用程序虚拟化、网络虚拟化、存储虚拟化、服务/应用基础结构虚拟化。而今天的桌面虚拟化其实包括了三种虚拟化技术，分别为：服务器虚拟化、桌面虚拟化、应用虚拟化，它们的概念如下： l  服务器虚拟化：将服务器物理资源抽象成逻辑资源，让一台服务器变成几台甚至上百台相互隔离的虚拟服务器，或者让几台服务器变成一台服务器来用，我们不再受限于物理上的界限，而是让CPU、内存、磁盘、I/O等硬件变成可以动态管理的“资源池”，从而提高资源的利用率，简化系统管理，实现服务器整合，让IT对业务的变化更具适应力。 l  桌面虚拟化：一种基于服务器的计算模型，并且借用了传统的瘦客户端的模型，但是让管理员与用户能够同时获得两种方式的优点：将所有桌面虚拟机在数据中心进行托管并统一管理；同时用户能够获得完整PC的使用体验。 l  应用虚拟化：应用虚拟化将应用程序与操作系统解耦合，为应用程序提供了一个虚拟的运行环境。在这个环境中，不仅包括应用程序的可执行文件，还包括它所需要的运行时环境。从本质上说，应用虚拟化是把应用对低层的系统和硬件的依赖抽象出来，可以解决版本不兼容的问题。 服务器虚拟化技术 在x86服务器上的虚拟化技术上可分为： l  硬件协助虚拟化 l  操作系统虚拟化 n  全虚拟化 n  半虚拟化。 硬件协助虚拟化（Hardware-Assisted-Virtualization） 两大CPU厂商的Intel VT-x与 AMD-V技术。 应用：在BIOS设置中打开该功能选项，可以使Xen等半虚拟化软件支持全虚拟化。   全虚拟化（Full Virtualization）：中央处理器与其他的硬设备都虚拟化。 优点：操作系统只要有支持虚拟化系统提供的硬设备，就可以不修改操作系统而直接在虚拟机上安装该操作系统。 缺点：因为所有的硬设备都由虚拟产生，所以当虚拟机上的操作系统要读取某一个硬设备时，都需要通过虚拟化系统才能读取真实的硬设备，因而效能往往比较差。 代表：Vmware ESX Server   半虚拟化（Paravirtualization）：虚拟化系统仅提供中央处理器的虚拟化能力。 优点：硬件设备则与真实机器共享同一个硬件设备，因此使用硬件设备的效率较佳。 缺点：操作系统必须修改内核才能安装在半虚拟化系统中的虚拟机器中，这样就无法直接支持像Windows这样的非开放源代码操作系统。 代表：Citrix XenServer   2、三种服务模式的云计算 上面提到，云计算有3种服务模式。那么它们分别怎么体现呢？先来举几个常见的例子。 Hadoop为什么和云计算经常在一起？hadoop不就是可以分布式的计算和存储吗。 Amazon的云计算EC2，OpenStack建立的云计算平台，不就是可以自己按需创建和管理一些实例吗，这也是云计算吗？ Google的GAE、新浪的sae，不就是可以自己在上面创建自己的应用吗，这与上面的例子完全不一样，这也是云计算吗？ 很多人容易混淆各种概念和技术，分不清它们之间的关系和区别。其实，只需要一直牢记基本的原理，宏观把握概念所处的层次结构和作用，理清这些花花色色的概念还是不难的。 我们可以看到，云计算的应用领域广泛，服务形态也是多种多样。但是，不管怎样，不外乎5-3-2原理介绍的3种服务模式。 计算机能提供的服务，不外乎存储和计算（当然，这里说的计算包括处理、控制等动态的过程），操作系统、网络通信、虚拟化、数据库、文件系统等等都是来帮助完成这两种服务的。只是可以提供的应用形态、提供的功能、封装的层次和面向的用户不同而已。 VMware Vsphere这样的套件能提供虚拟化的解决方案，能管理大规模的服务器，提供各种迁移、备份、容灾等功能，可以部署一个私有云。OpenStack这种软件项目，同样能建立私有和公共云。但是它们的抽象层次和对用户的服务形态不同。正如汇编语言和C语言都能写出同样功能的程序，但是是不同的实现方式。 在上面的例子里，Hadoop主要提供分布式存储和计算；OpenStack它们主要提供基础设施，提供类似物理设备的逻辑设备，自己具有很高的控制管理权；GAE提供应用平台，可以自己创建和管理应用；网盘提供存储应用，对应用环境之类的没有控制权。 所以，都是提供云计算服务，只是不同的服务模式。 3、云计算IaaS代表OpenStack OpenStack作为开源云计算项目中的一种，提供了基础设施，实例和对象存储（还是不外乎计算和存储）。一个实例就是一个跑着操作系统的虚拟机，可以实现迁移、快照、备份、动态分配等等管理功能。它是学习云计算的一个很好的实践。前一篇文章【OneStack：Ubuntu 12.04(\"Precise\") 一键安装部署云计算平台OpenStack Essex】给出了部署的一种简单的方法，可以参考。 临时记录，待完善。 参考文献： 【1】、NIST Cloud Computing Program http://www.nist.gov/itl/cloud/ 【2】、Chou’s Theories of Cloud Computing: The5-3-2 Principle http://blogs.technet.com/b/yungchou/archive/2011/03/03/chou-s-theories-of-cloud-computing-the-5-3-2-principle.aspx","title":"到底什么是云计算：云计算的5-3-2原理与实践"},{"content":"OneStack：在Ubuntu12.04（precise）上一键安装部署Opentack Essex 提醒：如果你喜欢折腾，喜欢自己一步一步安装各个功能组件和配置conf文件，你可以略过此文。本文工具可以在裸机和虚拟机一键部署真实的OpenStack云计算平台，主要步骤是配置网络、数据库、keystone、glance、nova、dashboard、创建镜像和启动实例等，代码内有详细注释。这只是学习Opentack的入门的一步，深入研究可以参考附录3给出的部分资料和社区。 2012.07.14更新： 收到很多邮件和提问，精力有限没法一一回复，在此致歉。随手把记录的一些问题和解决方法整理了，供大家参考。 详见《OpenStack安装部署管理中常见问题解决方法（OpenStack-Lite-FAQ）》。 2012.07.09更新： 很多人来信问我单网卡怎么设置，以及其它网络问题，我后面写了一篇介绍OpenStack网络的，详见《OpenStack云平台的网络模式及其工作机制》。 2012.07.02更新： 1、受邀在vpsee上对这个项目进行了较为详细的介绍（OneStack：Ubuntu 12.04 上一键自动部署 OpenStack），对于项目来源、相关考虑、项目结构、具体安装步骤（参数设置和前期工作）和预期等做了说明，可以参考。 2、希望增加高可用性的云计算部署，构建OpenStack的高可用性（HA，High Availability） 对高可用性进行了初步介绍，欢迎提出意见和建议。 一、项目(OneStack)地址： http://onestack.googlecode.com 喜欢git或者github的请去 https://github.com/Kayven/OneStack 不希望同行们把过多精力花在OpenStack的安装部署上（以后应该会改进），而是对其机制原理、工程实践、性能调优、应用服务等深入研究探讨。 所以提供这个一键部署的工具，帮助大家快速建立环境实验生产实践。项目结构如下： oneStack.sh（一键部署 all-in-one 的 OneStack，简单安装的主要文件）； setup_base.sh（安装基本系统）； setup_test.sh（添加镜像和实例）； addComputeNode.sh（增加计算节点）； delStack.sh（只卸载nova、glance、keystone等）； delAll.sh（卸载所有安装的组件和工具）； resetStack.sh（清空数据库，镜像、网络和实例等，重新上传镜像、创建实例）； addClient.sh（添加客户端，nova管理等）； HAStack 目录（OneStack 的高可用性，希望更多人可以提出自己的解决方案）。 二、部署(OneStack)步骤 简单部署OneStack： wget http://onestack.googlecode.com/files/oneStack.sh && chmod +x oneStack.sh && ./oneStack.sh 完整部署OneStack： Just checkout and run it! 1. Setup a fresh Ubuntu Precise(12.04) Sever OS. 2. checkout svn checkout http://onestack.googlecode.com/svn/trunk/ onestack-read-only 3. run it! cd onestack-read-only/ && ./oneStack.sh （如何简单配置参数见留言说明，或者见http://onestack.googlecode.com，或者见脚本注释） （多节点的部署类似，只需要在计算节点设置并执行addComputeNode.sh） 三、项目(OneStack)说明： 在Ubuntu12.04（precise）上安装部署Opentack Essex 只需要一个文件即可完成全部功能组件的部署：http://onestack.googlecode.com/files/oneStack.sh 里面含有详细的注释说明，看完整个脚本相当于看完了安装文档； svn整个项目只是多一些辅助工具，包括重置、重新安装、卸载等; 也欢迎同道人补充和完善更多的功能，适用于更多的操作系统和应用场景。 四、项目(OneStack)来源： 类似项目有DevStack，但是DevStack是使用screen安装OpenStack，重启服务器会出现一些问题，没有提供重启、重置等有用功能； 由于组件独立分散，安装过程过于繁琐，可以抽象成通用的项目供大家方便使用； 官方提供了一个比较完善的入门文档，但是，这一步一步下来得做很多无用功，容易漏错而引起很多莫名和头疼的问题； 本项目不像devstack只是提供实验环境，而是可以实际部署使用，可以自己修改配置，按需增加组件和功能，实现一键部署，可扩展使用。 五、项目(OneStack)描述： 一键完整部署OpenStack，可以自定义配置、方便地扩展功能组件，无交互地自动部署； 安装过程不需要等待配置： 功能齐全，附带了卸载、重置、添加计算节点等工具 可以卸载主要的opentack组件，包括nova、glance、keystone等； 可以重置数据库和配置，重新安装openstack组件； 可以根据需要自行更改脚本，方便部署自己的云计算平台。 经过多次测试，完整在VMware虚拟机上部署OpenStack       测试环境：VMware ESXi 5.0虚拟Dell R210服务器，其中一个虚拟机上部署Opentack，启动多个实例，正常运行；远程访问和web管理正常；重启、重置、重新安装都正常。       系统要求：双网卡，64位机器，支持VT技术 脚本运行过程会做如下工作： 配置网络相关； 安装和配置数据库； 安装和部署身份管理组件keystone； 安装和部署镜像管理组件glance； 安装和部署控制与计算组件nova； 安装和部署web管理组件dashboard； 上传和添加ubuntu12.04镜像； 设置项目安全规则和密钥； 启动实例，并正常运行。 欢迎反馈，谢谢. 本人尽力做到不出差错，但是限于学识和眼界，难免有考虑不周、冗余、没有最优化或者表达不好之处； 希望大家有任何意见建议随时联系我。 附录1： 为了方便大家查阅、讨论、交流、review和完善，在此贴出主要代码。 #!/usr/bin/env bash# **oneStack.sh** is a tool to deploy complete and real OpenStack cloud computing service.# This script installs and configures various combinations of *Glance*,# *Horizon*, *Keystone*, *Nova*, *Mysql* and others.# Hily.Hoo@gmail.com (Kayven)# Learn more and get the most recent version at http://code.google.com/p/onestack/set -o xtrace## 请使用root执行本脚本！## Ubuntu 12.04 (\"Precise\") 部署 OpenStack Essex（或者ubuntu11.10版本）## 一：准备系统## 1：下载ubuntu 12.04. 服务器版本## http://mirrors.ustc.edu.cn/ubuntu-releases/12.04/ubuntu-12.04-server-amd64.iso## 2：安装OS## 最小化安装，只需要安装ssh server就可以。## 装完系统后 更新源里的包,更新系统。确保你装的是最新版本的包。## 3：设置root权限## 为了简单，全部都是用root来运行。if [ `whoami` != \"root\" ]; then        sudo passwd        exec su -c 'sh ./oneStack.sh'fi## 4：设置参数和环境配置，直到两行#号结束## 这个配置以后就不需要更改了，比如看到192.168.139.50等ip，不用更改，脚本会自动替换这些初始值。## 可以变动的是，第500行的image的下载；或者去掉第七步开始的部分（上传镜像，创建实例）###################################################################################################################################################### 如果原来安装过OpenStack，请先执行 ./delStack.sh## 1）配置参数## 数据库相关MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}NOVA_DB_USERNAME=${NOVA_DB_USERNAME:-\"novadbadmin\"}NOVA_DB_PASSWD=${NOVA_DB_PASSWD:-\"cloud1234\"}GLANCE_DB_USERNAME=${GLANCE_DB_USERNAME:-\"glancedbadmin\"}GLANCE_DB_PASSWD=${GLANCE_DB_PASSWD:-\"cloud1234\"}## 注意：单网卡的去掉interfaces的eth1，并把nova.conf里面eth1改完eth0即可！## 自行检查下面network/interfaces的两个网卡设置## 本机器外网ip （包括局域网的内网ip，相对于OpenStack内网而言的）OUT_IP=\"192.168.139.50\"OUT_IP_PRE=\"192.168.139\"## nova-network内网ipIN_IP=\"10.0.0.1\"IN_IP_PRE=\"10.0.0\"## flat的起始ipFLAT_IP=\"10.0.0.40\"## 浮动ip的起始值FLOAT_IP=\"192.168.139.225\"## 选择虚拟技术，裸机使用kvm，虚拟机里面使用qemuVIRT_TYPE=\"qemu\"## token, 登录dashboard密码（用户名admin）ADMIN_TOKEN=\"admin\"############################################################################ 2）检查系统是否ubuntu12.04，据反映11.10也可以正常安装，可以去掉这一段检查# Determine what system we are running on.  This provides ``os_VENDOR``...# Determine OS Vendor, Release and Update #if [[ -x \"`which lsb_release 2>/dev/null`\" ]]; then    os_VENDOR=$(lsb_release -i -s)    os_RELEASE=$(lsb_release -r -s)    os_UPDATE=\"\"    os_CODENAME=$(lsb_release -c -s)#fiif [ \"Ubuntu\" = \"$os_VENDOR\" ]; then    DISTRO=$os_CODENAMEelse    echo \"The os didn't seems to be Ubuntu.\"    exit 1fiecho $DISTROif [ \"precise\" != ${DISTRO} -a \"oneiric\" != ${DISTRO} ]; then    echo \"WARNING: this script has been tested on oneiric or precise\"    exit 1fi############################################################################## 3）以下系统配置，语言中文支持、国内APT源、网络设置（两个网卡），可以自行配置，注释掉这些步骤。## locale############################################################################## 4：设置网络SOURCE_FILE=${SOURCE_FILE:-\"/etc/apt/sources.list\"}cp $SOURCE_FILE $SOURCE_FILE.bakcat <<APT >$SOURCE_FILEdeb http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-backports restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiversedeb http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-backports main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-proposed main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-security main restricted universe multiversedeb-src http://debian.ustc.edu.cn/ubuntu/ precise-updates main restricted universe multiverseAPT#sed -i 's/debian.ustc.edu.cn/mirrors.163.com/g' $SOURCE_FILE# network configureNETWORK_CONF=${NETWORK_CONF:-\"/etc/network/interfaces\"}if ! grep -q eth1 $NETWORK_CONF; then        cat <<INTERFACES >$NETWORK_CONFauto loiface lo inet loopback# The primary network interfaceauto eth0iface eth0 inet staticpre-up ifconfig eth0 hw ether b8:ac:6f:9a:ee:e4        address 192.168.139.50        netmask 255.255.255.0        network 192.168.139.0        broadcast 192.168.139.255        gateway 192.168.139.253        dns-nameservers 210.72.128.8auto eth1iface eth1 inet staticpre-up ifconfig eth1 hw ether b8:ac:6f:9a:ee:e4        address 10.0.0.1        netmask 255.255.255.0        network 10.0.0.0        broadcast 10.0.0.255INTERFACES        /etc/init.d/networking restartfi## 以上系统配置，可以自行配置，注释掉这些步骤。########################################################################################################################################################apt-get update## 5：安装bridgeapt-get install -y bridge-utils## 6：设置NTPapt-get install -y ntpif ! grep -q fudge \"/etc/ntp.conf\"; then        cat <<NTPconf > /etc/ntp.confserver ntp.ubuntu.com iburstserver 127.127.1.0fudge 127.127.1.0 stratum 10NTPconffiservice ntp restart## 7：设置Iscsiapt-get install -y tgt ssh w3m unzip wget curl expect## 安装iscsi客户端、安装rabbitmqapt-get install -y open-iscsi open-iscsi-utilsapt-get install -y rabbitmq-server memcached python-memcacheapt-get install -y kvm libvirt-bin qemu qemu-kvm## 二：安装mysql和创建相关数据库## Openstack的组件：nova，keystone，glance，都需要数据库。不过目前官方建议keystone，采用sqlite存储，而不用mysql存放。所以我们只需要创建nova和glance两个数据库就可以。## 1：安装mysql## 过程中，会提示你输入root密码。通过debconf-set-selections读取跳过这一步.#MYSQL_PASSWD=${MYSQL_PASSWD:-\"cloud1234\"}## apt-get install debconf debconf-utilscat <<MYSQL_PRESEED | debconf-set-selectionsmysql-server-5.1 mysql-server/root_password password $MYSQL_PASSWDmysql-server-5.1 mysql-server/root_password_again password $MYSQL_PASSWDmysql-server-5.1 mysql-server/start_on_boot boolean trueMYSQL_PRESEEDapt-get install --no-install-recommends -y mysql-server python-mysqldb## chkconfig mysql on## 让mysql支持外部访问sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf  service mysql restartif [ ! -s /etc/apache2/httpd.conf ]; then        echo \"ServerName localhost\" >> /etc/apache2/httpd.conf        /etc/init.d/apache2 restartfi## 2：安装phpmyadmin （可选）cat <<PHPmyadmin | debconf-set-selectionsphpmyadmin phpmyadmin/reconfigure-webserver  text     apache2phpmyadmin phpmyadmin/dbconfig-install       boolean  truephpmyadmin phpmyadmin/app-password-confirm   password $MYSQL_PASSWDphpmyadmin phpmyadmin/mysql/admin-pass       password $MYSQL_PASSWDphpmyadmin phpmyadmin/password-confirm       password $MYSQL_PASSWDphpmyadmin phpmyadmin/setup-password         password $MYSQL_PASSWDphpmyadmin phpmyadmin/mysql/app-pass         password $MYSQL_PASSWDPHPmyadminapt-get --no-install-recommends -yq install phpmyadmin## 3：创建数据库## nova数据库，   管理员：novadbadmin，密码是：cloud1234## glance数据库，管理员：glancedbadmin，密码是：cloud1234## 如果你修改密码，后面很多配置都需要相应更改。##   mysql -uroot -p##   CREATE DATABASE nova;##   GRANT ALL PRIVILEGES ON nova.* TO 'novadbadmin'@'%' IDENTIFIED BY 'cloud1234';##   CREATE DATABASE glance;##   GRANT ALL PRIVILEGES ON glance.* TO 'glancedbadmin'@'%' IDENTIFIED BY 'cloud1234';##   quitmysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS nova;\"mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE nova;\"mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON nova.* TO '$NOVA_DB_USERNAME'@'%' IDENTIFIED BY '$NOVA_DB_PASSWD';\"mysql -uroot -p$MYSQL_PASSWD -e \"DROP DATABASE IF EXISTS glance;\"mysql -uroot -p$MYSQL_PASSWD -e \"CREATE DATABASE glance;\"mysql -uroot -p$MYSQL_PASSWD -e \"GRANT ALL ON glance.* TO '$GLANCE_DB_USERNAME'@'%' IDENTIFIED BY '$GLANCE_DB_PASSWD';\"if [ -e /var/lib/keystone/keystone.db ]; thenrm -rf /var/lib/keystone/keystone.dbfi## 三：安装和配置keystone## Openstack的各个组件，keystone是最难配置。搞定keystone，后面应该就没啥麻烦。## 1：安装keystoneapt-get install -y keystone python-keystone python-keystoneclient## 2：配置keystone## 如果更改token，需要修改 /etc/keystone/keystone.conf 两个地方##    默认定义的token就是ADMIN，web登录admin就是这个密码##    [DEFAULT]##    bind_host = 0.0.0.0##    public_port = 5000##    admin_port = 35357##    admin_token = ADMIN##    另外一个地方是##    [catalog]##    #driver = keystone.catalog.backends.sql.Catalog##    driver = keystone.catalog.backends.templated.TemplatedCatalog##    template_file = /etc/keystone/default_catalog.templates##     sed -i -e 's/keystone.catalog.backends.sql.Catalog/keystone.catalog.backends.templated.TemplatedCatalog\\ntemplate_file = \\/etc\\/keystone\\/default_catalog.templates/g' /etc/keystone/keystone.confsed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/keystone/keystone.confservice keystone restart## 3: 导入数据## 这个比较有技术含量。通过修改devstack的keystone_data.sh 脚本。实现导入数据。如果你上面的设置都和我一样，那么其实直接运行这个脚本就可以。## wget http://www.hastexo.com/system/files/user/4/keystone_data.sh_.txt -O keystone_data.shwget http://onestack.googlecode.com/files/gen_keystone_data.sh -O gen_keystone_data.shchmod +x gen_keystone_data.sh## 运行脚本, 如果你修改的默认的用户名和密码，你需要修改脚本。修改两个地方## 第一个是登录dashboard的admin的密码## 第二个就是keystone的token## #ADMIN_PASSWORD=${ADMIN_PASSWORD:-hastexo}## ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}## SERVICE_PASSWORD=${SERVICE_PASSWORD:-$ADMIN_PASSWORD}## #export SERVICE_TOKEN=\"hastexo\"## export SERVICE_TOKEN=\"Centrin\"## export SERVICE_ENDPOINT=\"http://localhost:35357/v2.0\"## SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}sed -i -e \"s/hastexo/$ADMIN_TOKEN/g\" gen_keystone_data.sh  ./gen_keystone_data.sh##  顺利运行，会什么都没有输出##  #echo $?##  下面会输出0 ，表示正常。你就别再运行脚本##  keystone --tenant=admin --username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 user-list##  看到这些，就说明keystone安装正常。cat <<ENV_AUTH >> /etc/profileexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=ADMINexport OS_AUTH_URL=\"http://localhost:5000/v2.0/\"ENV_AUTHsed -i -e \"s/ADMIN/$ADMIN_TOKEN/g\" /etc/profileexport OS_TENANT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=$ADMIN_TOKENexport OS_AUTH_URL=\"http://localhost:5000/v2.0/\"#source /etc/profile## 检查检查## # export | grep OS_## declare -x OS_AUTH_URL=\"http://localhost:5000/v2.0/\"## declare -x OS_PASSWORD=\"hastexo\"## declare -x OS_TENANT_NAME=\"admin\"## declare -x OS_USERNAME=\"admin\"## 这个时候，直接运行## root@node6:~# keystone user-list## 四：安装和配置glance## 1：安装软件apt-get install -y glance glance-api glance-client glance-common glance-registry python-glance## 2：配置/etc/glance/glance-api-paste.ini ## 修改文件最后3行，这些设置都是keystone导入数据的时候设置的。sed -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/glance/glance-api-paste.ini ## 3：设置 /etc/glance/glance-registry-paste.inised -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/glance/glance-registry-paste.ini## 4：配置/etc/glance/glance-registry.conf## 修改## #sql_connection = sqlite:////var/lib/glance/glance.sqlite## sql_connection = mysql://glancedbadmin:ohC3teiv@10.42.0.6/glance## 在末尾添加两行## [paste_deploy]## flavor = keystoneGLANCE_API_CONF=${GLANCE_API_CONF:-\"/etc/glance/glance-api.conf\"}GLANCE_REGISTRY_CONF=${GLANCE_REGISTRY_CONF:-\"/etc/glance/glance-registry.conf\"}PUBLIC_IP=${PUBLIC_IP:-\"192.168.139.50\"}sed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_API_CONFcat <<EOF >>$GLANCE_API_CONF[paste_deploy]flavor = keystoneEOFsed -i '/sql_connection = .*/{s|sqlite:///.*|mysql://'\"$GLANCE_DB_USERNAME\"':'\"$GLANCE_DB_PASSWD\"'@'\"$PUBLIC_IP\"'/glance|g}' $GLANCE_REGISTRY_CONFcat <<EOF >>$GLANCE_REGISTRY_CONF[paste_deploy]flavor = keystoneEOF## 5：配置/etc/glance/glance-api.conf## 6：同步数据库glance-manage version_control 0glance-manage db_sync          service glance-api restart && service glance-registry restart## 7：验证glance服务是否正常# glance index## 没有任何的输出。表示正常。## #echo $?## 下面会输出0 ，表示正常。## # glance --version## glance 2012.1## 8：下载镜像并上传## ubuntu官方专门提供image，http://uec-images.ubuntu.com。不过一定要注意## 这些镜像，都是必须使用密钥登录，直接用用户名密码是无法的登录的。## 下载镜像## http://cloud-images.ubuntu.com/precise/current/## 这应该是ubuntu提供的最新的稳定的镜像。#wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.img##  expect -c \"spawn /usr/bin/scp  yuan@192.168.139.84:/home/yuan/precise-server-cloudimg-amd64-disk1.img .; expect {##     \\\"password:\\\"; {##    send \\\"yyhu\\r\\n\\\";##    }; \\\"Are you sure you want to continue connecting (yes/no)?\\\" {##    send \\\"yes\\r\\n\\\" ;##    expect \\\"password:\\\";##    send \\\"yyhu\\r\\n\\\";##    }##  } ; set timeout -1; expect -re \\\"100%\\\";\"##^^####sleep 5; expect -re \\\"password\\\"; send \\\"yyhu\\r\\n\\\";# glance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.img## 这里还有一种方法上传，如果你没用环境变量。## glance --tenant=admin--username=admin --password=hastexo  --auth_url=http://127.0.0.1:5000/v2.0 add name=\"Ubuntu 11.10 cloudimg amd64\" is_public=true container_format=ovf disk_format=qcow2 < /root/precise-server-cloudimg-amd64-disk1.img## 上传完镜像后。在运行## glance index## 五：安装配置nova## 1:安装nova相关组件apt-get install -y nova-api nova-cert nova-common nova-compute nova-compute-kvm nova-doc nova-network nova-objectstore nova-scheduler  nova-volume python-nova python-novaclient  nova-consoleauth python-novnc novnc## 2：配置 /etc/nova/nova.conf## 如果你是在虚拟机里测试Openstack。你需要把默认的虚拟化引擎从kvm改成qemu。cat <<NOVAconf > /etc/nova/nova.conf--dhcpbridge_flagfile=/etc/nova/nova.conf--dhcpbridge=/usr/bin/nova-dhcpbridge--logdir=/var/log/nova--state_path=/var/lib/nova--lock_path=/var/lock/nova--allow_admin_api=true--use_deprecated_auth=false--auth_strategy=keystone--scheduler_driver=nova.scheduler.simple.SimpleScheduler--s3_host=192.168.139.50--ec2_host=192.168.139.50--rabbit_host=192.168.139.50--cc_host=192.168.139.50--nova_url=http://192.168.139.50:8774/v1.1/--routing_source_ip=192.168.139.50--glance_api_servers=192.168.139.50:9292--image_service=nova.image.glance.GlanceImageService--iscsi_ip_prefix=10.0.0--sql_connection=mysql://novadbadmin:cloud1234@192.168.139.50/nova--ec2_url=http://192.168.139.50:8773/services/Cloud--keystone_ec2_url=http://192.168.139.50:5000/v2.0/ec2tokens--api_paste_config=/etc/nova/api-paste.ini--libvirt_type=kvm--libvirt_use_virtio_for_bridges=true--start_guests_on_host_boot=true--resume_guests_state_on_host_boot=true #novnc--novnc_enabled=true--novncproxy_base_url= http://192.168.139.50:6080/vnc_auto.html--vncserver_proxyclient_address=127.0.0.1--vncserver_listen=127.0.0.1# network specific settings--network_manager=nova.network.manager.FlatDHCPManager--public_interface=eth0--flat_interface=eth1--flat_network_bridge=br100--fixed_range=10.0.0.1/27--floating_range=192.168.139.225/27 --network_size=32--flat_network_dhcp_start=10.0.0.40--flat_injected=False--force_dhcp_release--iscsi_helper=tgtadm--connection_type=libvirt--root_helper=sudo nova-rootwrap#--verbose--verbose=FalseNOVAconf## if ! kvm-ok 1>/dev/null 2>&1; then##      sed -i -e \"s/kvm/qemu/\" /etc/nova/nova-compute.conf## fised -i -e \"s/novadbadmin/$NOVA_DB_USERNAME/g;s/cloud1234/$NOVA_DB_PASSWD/g\" /etc/nova/nova.confsed -i -e \"s/192.168.139.50/$OUT_IP/g;s/192.168.139.225/$FLOAT_IP/g;\" /etc/nova/nova.confsed -i -e \"s/10.0.0.1/$IN_IP/g;s/10.0.0.40/$FLAT_IP/g;s/10.0.0/$IN_IP_PRE/g;\" /etc/nova/nova.conf## kvm or qemu?sed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova.confsed -i -e \"s/kvm/$VIRT_TYPE/g\" /etc/nova/nova-compute.conf## 3：配置/etc/nova/api-paste.inised -i -e \"       s/%SERVICE_TENANT_NAME%/admin/g;       s/%SERVICE_USER%/admin/g;       s/%SERVICE_PASSWORD%/$ADMIN_TOKEN/g;    \" /etc/nova/api-paste.ini# 4：停止和重启nova相关服务for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; done## 六：安装和配置Dashbaord## 1：安装dashbaordapt-get install -y libapache2-mod-wsgi openstack-dashboard/etc/init.d/apache2 restart## 这个时候，你就可以登录dashboard## http://192.168.139.50## user:admin## pass:ADMIN## 之后通过前端web管理## 七：创建第一个VM，可以通过上面安装的web管理系统创建。# 0：同步数据库## 以前我运行同步数据库，如果正确, 当nova.conf## --verbose=False## 是没有任何的输出，否则有一堆是输出。nova-manage db sync# 创建网络nova-manage network create private --fixed_range_v4=10.0.0.1/27 --num_networks=1 --bridge=br100 --bridge_interface=eth1 --network_size=32## 设定floating IPnova-manage floating create --ip_range=192.168.139.225/27## 设置权限chown -R nova:nova /etc/nova## 再重启相关服务for a in libvirt-bin nova-network nova-compute nova-api nova-objectstore nova-scheduler novnc nova-volume nova-consoleauth; do service \"$a\" restart; donesleep 10 ## 1：检查nova服务## 一路回车，就可以了。通过expect可以不用输入。if [ ! -e ~/.ssh/id_rsa ]; thenexpect -c \"spawn ssh-keygen ; set timeout 5; expect \\\":\\\"; send \\\"\\r\\n\\\"; set timeout 3; expect  \\\":\\\"; send \\\"\\r\\n\\\";set timeout 3; expect \\\":\\\"; send \\\"\\r\\n\\\"; expect eof;\"fi## 2：上传密钥到数据库nova keypair-add --pub_key ~/.ssh/id_rsa.pub key1## nova keypair-list## 打开防火墙nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0nova secgroup-add-rule default udp 1 65535 0.0.0.0/0nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0## 4：开始创建虚拟机## nova image-list## nova flavor-list## 创建虚拟机# nova-manage flavor create --name=m1.minitest --memory=384 --cpu=1 --root_gb=1 --flavor=6 --ephemeral_gb=1## 上面的下载镜像移到这一步，可以去掉以下的步骤wget http://cloud-images.ubuntu.com/precise/current/precise-server-cloudimg-amd64-disk1.imgglance add name=\"Ubuntu12.04-amd64\" is_public=true container_format=ovf disk_format=qcow2 < precise-server-cloudimg-amd64-disk1.imgnova boot --flavor 1 --image \"Ubuntu12.04-amd64\" --key_name key1 cloud01# nova show cloud01# nova console-log cloud01##关联vmsleep 10## nova floating-ip-create## nova add-floating-ip cloud01 192.168.139.226nova show cloud01nova add-floating-ip cloud01 `nova floating-ip-create | awk 'FNR==4{print $2}'`nova listnova show cloud01# ssh instance# ssh-keygen -f \"/home/cloud/.ssh/known_hosts\" -R 10.0.0.2# ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2## 八、完成安装部署cat <<EOF >&1 1. login the dashboard   http://192.168.139.50   user:admin   pass:admin or $ADMIN_TOKEN 2. login a instance(\"cloud01\")   ssh -i ~/.ssh/id_rsa ubuntu@10.0.0.2 3. view & manage   nova list   nova show cloud01   ... 4. enjoy yourself! (Contact Hily.Hoo@gmail.com)EOF 附录2：安装后web登录（dashboard）截图 附录3：云计算平台OpenStack资料 官方OpenStack www.openstack.org 国内OpenStack社区 www.openstack.org.cn 国内技术博客-陈沙克 http://hi.baidu.com/chenshake OpenStack 架构  http://blog.csdn.net/anghlq/article/details/6543880 Ubuntu12.04安装OpenStack文档（入门指南） http://docs.openstack.org/essex/openstack-compute/starter/content/ Installing OpenStack Essex (2012.1) on Ubuntu 12.04 (\"Precise Pangolin\")（原文） http://www.hastexo.com/resources/docs/installing-openstack-essex-20121-ubuntu-1204-precise-pangolin  “OpenStack Documentation”team（文档、bug报告） https://launchpad.net/~openstack-doc Quora上关于openstack的话题 http://www.quora.com/OpenStack stackoverflow上关于openstack资源的讨论 http://stackoverflow.com/questions/5882333/good-tutorials-and-resources-for-openstack Kayven( Hily.Hoo@gmail.com )","title":"OneStack：Ubuntu 12.04 (或11.10) 一键部署安装OpenStack云计算平台"},{"content":"什么是openstack? openstack由Rackspace（仅次于AWS的IaaS服务提供商）和NASA(美国国家航空航天局)创办成立，现已成为一个由全球开发者社区共同协助、具备良好扩展性的开源云操作系统，项目的目标是使任何组织都可以在标准的硬件环境创建并提供云计算服务。 openstack的所有代码都可在Apache2.0许可下免费使用。任何人可以运行、编译，或将其所修改的代码提交回项目。项目支持者相信开放的开发模式是促进云标准化的唯一途径，消除消费者被私有厂商锁定的担忧，从而构建一个巨大的跨多家云服务提供商的生态系统。 官方网站：http://www.openstack.org/ rackspace为什么要开源openstack项目? RakeSpace是美国仅次于AWS的云计算服务提供商，那他们为什么开发一个开源的解决方案呢，他们难道不怕别人抢了它的生意吗？一方面，开源软件可以给客户提供更多的选择，RackSpace很大的特点是客户选择比较丰富多样，如果采用了开源软件，客户就可以在客户私有和Rackspace提供的多个方案中做自由选择。另外一方面，在云计算时代，存在平台和客户锁定的情况，就是说用户平台迁移的代价很高，如果大家都采用一个开源的软件层，迁移就变的容易，所以Rackspace一直在业界力推Open Stack开源软件。 分析起来原因不外乎一下几个： 1）NASA 想开源，政府机构要用你的产品，你不开源政府不放心，而且开源可以让更多的政府部门使用，比如一向财大气粗的DOD； 2）RakeSpace迫于竞争压力不得不开源，AWS是毫无疑问的老大，AWS的接口就是事实上的标准，其他提供商只能兼容，凭借RakeSpace还是无法撼动AWS的地位，不如曲线救国，搞搞政治，团结一切可以团结的力量，OpenStack用的多了，RakeSpace就是实际的标准了，到时候就可以牵着AWS的鼻子走了； 3）美国公司对于开源模式还是比较认可的，开源可以让自愿者或其他公司一起来贡献代码，这就节约了成本，而且RakeSpace还可以提供服务支持，做做咨询服务，或者做做私有云管家服务 - 用客户的服务器为客户运营私有云，在HP刚刚认识到买PC是没有钱途的时候，IBM已经转型做服务啦，RakeSpace要紧跟历史潮流，不但运营公共云的服务，还可以从私有云服务里赚到钱。 rackspace的优势是什么？ 一、Open Stack本身是开源、免费的，给客户足够多的自由度，可以用在任何场合，自己还可以调整。这本身就是开源软件的一个优势，和商业软件相比少了很多限制，开源更多的是自由度的增加，而不是在费用上的廉价。可以看到代码，了解程序怎样运作，这对技术人员来说当然是非常重要的。 二、Open Stack背后有很多的社区、生态链、包括微软、戴尔等大厂商的支持。开源可以解决一些共同问题，促进互相学习和交流，这是很大的一个优势。 三、Open Stack技术过硬。 Rackspace本身规模巨大，曾与美国航空航天局合作过一个项目，Open Stack代码里头也有很多来自美国航空航天局的平台，美国航空航天局具有很高的研发实力并且超级注重代码质量，Open Stack技术都经历过了实践验证。 openspace产品链上有哪些主要厂商? HP、DELL、INTEL、CISCO、AMD、Citrix等国际巨头纷纷加入，在成立后一年内规模迅速发展至115家，成员遍布全球，在国际上是颇具影响力的组织之一。 围绕着这个开源项目，不同的厂商纷纷在周边应用上动起来脑筋，就如同iphone上市，iphone周边产品也火了一把。以Nenoss为例， Zenoss 是物理、虚拟、基于云的IT架构的管理软件提供商，客户遍布全球超过35000个组织在使用。其产品Zenoss Core是开源企业级IT管理软件-是智能监控软件，他允许IT管理员依靠单一的WEB控制台来监控网络架构的状态和健康度。Zenoss Core同时也是开源的网络与系统管理软件。 在openstack的网管软件中，Zenoss (47.8%) 和 Nagios (40.5%) 是最可能被使用的管理工具。 谁在用Openstack? Open Stack是个应用广泛的平台，适合所有平台型的服务提供商。在媒体型云计算服务表现突出，包括语音数据的存储分发。目前美国最著名的CDN公司的内容分发就是采用Open Stack。 由于Open Stack是几周前才发布第一个正式版本，所以Open Stack实际的效能还没有具体统计数据和案例。但John透露了几个合作客户都是非常知名的大企业和组织，包括美国航空航天局、日本NTT、日本电信等现在正在实验室中使用。一个很好的应用案例是排名在全球前十的网站维基百科在后台使用了Open Stack，并贡献了部分源码。 国内谁在加入openstack组织： OpenStack的成员大多来自于IT服务产业发达的国家，在国内公司仅有3家加入，除中金数据外，还有华胜天成和H3C两家。中金数据加入该组织，有机会分享近百余家企业所贡献的开源代码，为公司员工学习提供一个开源的平台，同时中金数据也积极的为组织做出贡数献，在成员企业中树立中金据良好的品牌形象。 http://www.openstack.org/community/companies/ ubuntu和openstack: 在一年前，Ubuntu还在Eucalyptus阵营里头。Eucalyptus部分组件不是开源项目，作为前Eucalyptus用户之一，NASA对这种不完全开源的行为十分反感。Ubuntu在经过反复论证，最终作出了一个艰难的决定，挥手送别Eucalyptus并准备迎接OpenStack的到来。现在使用 ubuntu LTS及Eucalyptus的用户还可以得到ubuntu官方的技术支持服务直到2015年。 参考： http://www.cnblogs.com/utopiazh/archive/2011/09/06/CloudComputing_OpenStack.html http://www.openstack.org http://www.stackops.org 本文出自 “小石笔记” 博客，请务必保留此出处http://sysadmin.blog.51cto.com/83876/716149","title":"openstack前世今生"},{"content":"深夜辗转难眠，一直在想着5个小时前的电话面试，心里什么感觉真是说不出来，感觉遗憾，感觉悔恨，又感觉兴奋，总之错综复杂，心里安慰自己，毕竟是第一次面试，失败时难眠的，但是我又在责问自己，为什么我会失败？？ 这次面试来的太突然了，我几乎没有任何的思想准备，当然失败的主要原因不在于没有准备，而是在于我现在确实没达到人家的招聘要求： 1、熟悉C/C++，有linux系统开发经验 2、熟悉Python/Ruby，有Python/Ruby系统或Web项目开发经验 3、熟悉操作系统原理、体系结构 4、了解linux网络协议栈，了解linux bridge/NAT及tcp/ip协议 5、有较强的源码阅读、分析能力，能独立开发较大规模的系统 6、熟练阅读英文文档，有较好的英语口语能力 这6条当中，我没有一条是那种能说的过去的，有的甚至我从来没有接触过，比如说第2条，人家的要求也很宽松，只要在某一条上有比较好的表现，就会和你进行“沟通”。我在想我对“云计算”有很大的兴趣，可是为什么到现在我还只是停留在理论阶段呢？如果早在2年前，我就开始进行实践的话，那么现在这个机会就不会被我这么轻易的就断送掉了。是啊，我心里一直惦记着它，知道它好，可是就是没拿出行动来，为什么啊？为什么就是没拿出行动来啊？ 我的电脑上装着两个系统，一个是Linux的，每次开电脑的时候，总会选择进哪个系统，我几乎很少进那个Linux的，因为那里面对我来说什么也没有，没有QQ，没有酷狗，进去只是点两下，然后重启，又进来Windows了。我心里知道Linux是一个很牛的东西，因为牛，所以不是一般人能看得进去的，因为门槛较高，所以很牛，对于牛的东西，我一般只是热衷一下，然后很快激情就会消散下来，不能坚持下去，因为有太多枯燥无味、晦涩难懂的东西了，自学的话，真的是很难坚持的。 关于“云计算”的书，我只是看过一点概括性的，理论性的介绍，那还是1年半前的事了，然后这1年半，我几乎没有再接触过它了，只是花了40多，买了一本《云计算与互联网》放在枕边，翻了2页，以后就再也没打开过，在我脑海中，“云计算”对我来说，好像是一种离我很远的东西，就好像每天看新闻一样，只是关注一下发生了什么事，那新闻貌似永远跟自己没有关系。这么久以来，一直认为这是一门很难的学问，我要先出去锻炼两年，然后再搞这个，现在只是了解一下就可以了，基于此，我没有动手去实践，这次面试遭到淘汰，也是应该的。 经过这一次小小的经历，让我对现在的择业引起了重视，以前包括今晚之前，想的是毕业之后随便找一个软件公司，先做上1、2年，边上班，边学习，等到锻炼的差不多了，再更上一步，找更好的公司，或者是考研深造。但是，现在觉得这个想法是严重错误的，在开始工作的时候，就要找一个自己感兴趣的工作，让自己对工作产生激情，为什么要边上班，边学习？而不是将学习和工作融合在一起，工作是为了学习，学习是为了工作。为什么我要随便找一个公司，然后工作1、2？为什么我不一开始就找一个我喜欢的公司，我喜欢的工作，认认真真的学习工作1、2年？时间是很宝贵的，我不能浪费这宝贵的2年时间，现在做的事，一定是在为以后做的事打基础，而不是以后做的事，又重新开始，这太浪费你时间了。 现在认识到这个问题也许晚了，但是要改正错误，永远不晚！ 我会克服困难的，我会坚持下去的，希望我还能有机会向这个职业挑战，时间不多，我得抓紧时间！","title":"第一次面试的失败"},{"content":"这是篇关于敏捷开发的文章，写得不错，分享下 敏捷，是灵丹妙药还是又一个忽悠？ 敏捷开发和敏捷测试这两年自从从国外引进后，在国内很火，很多人都在谈论。无论是项目延期，失败，质量低下等等，你总能听到分析的原因是：“看看，你没有敏捷了吧”。所以一下子敏捷成了包治百病的灵丹妙药。很多项目组公司开始学习敏捷，采用敏捷，转向敏捷。但是遗憾的是很多人尝试过后发现以前的问题并没有被敏捷所解决掉，反而带来了很多新的问题，于是也有人就得出结论：敏捷又是一个大忽悠。读了很多网上关于敏捷的辩论，我想起一个故事： 话说清朝的时候慈禧太后听说西方国家有个新的交通工具，汽车，它坐在舒服跑的很快。于是就叫人买了一辆回来。但是用的时候没有人会开，于是不得不把汽车用几根柱子绑起来做成了轿子，让几个人抬着。因为汽车太沉，几个轿夫步履蹒跚，走不了几步就得歇歇。结果以前半个时辰的路走了好几个时辰。而且到了后因为门很窄，汽车做的轿子过不去，她也不得不老远就下来自己走一段。慈禧太后很不高兴就得出结论： 汽车前期投入大，维护成本高。 没有轿子走的快。 很多地方汽车都不适用。 汽车是个大忽悠的东西，根本不管用。 那么我们现在对敏捷的认识是不是和慈禧对汽车的认识类似呢？是因为我们不会用敏捷呢，还是因为敏捷就是个忽悠？ 在国外通常一个概念出来之前已经有很多年的实践积累，然后为了大家交流方便或者提高普及度给其一个名字。所以是先有实践，再有概念。但是在国内正好相反，我们先把国外“先进“的概念引进来了而把产生概念的多年实践忽略掉了。但是概念又太虚不能当饭吃，最终还是需要具体东西和具体做法。所以不得不根据概念来设计出各种各样的做法来。这些做法听起来不错，非常符合概念，但是在项目中一使用就不灵了，旧的问题没有解决，新的问题一大堆。最终得出汽车是个大忽悠的结论。 敏捷和云计算是两个非常典型的例子。很多人为了敏捷，文档不要了，计划不要了，测试用例也不要了，认为几个人站在走廊里沟通沟通就把一切都搞定了，因为敏捷了嘛。但是问题并没有因为“敏捷“了而被解决掉，于是乎得出敏捷是个忽悠的结论。云计算也一样，很多人认为云计算就是数据中心，所以大家大兴土木建立数据中心。但是建完数据中心以后呢？没啥用处呀。那大家都在吹捧云计算，不就是个大忽悠吗。 殊不知，人家是因为业务需要很多年了已有数据中心，为了提高数据中心的使用率，开始对公众开放资源，所以才有了云计算。 先有概念再造实践的做法违背了事物发展规律，不仅解决不了现有问题，而且带来新的问题。敏捷是个好东西，在特定情况下。我们需要搞明白的是它要解决什么问题的？它是如何解决的。而不要在乎它叫什么名字或则防止生搬硬套。还有越是先进的东西对人和基础设施的要求越高。比如飞机再好，没有飞行员或则没有机场也没有用。高铁跑的越快对铁道的要求越高。 软件测试也是一样，做质量控制不是为了赶时髦。如果你的项目只做3个月就彻底结束了，而且就3－5个人，不会有人离开也不会有人进来，也不需要和其它任何项目打交道，或则你的产品在早期实验阶段，你可以不要文档，不要计划，不要记录bug，完全靠口头交流。否则的话： 不能没有文档：但是要减少不必要的文档，避免过于详细的文档，使用易于更新和维护的动态文档。 不能没有计划：距离现在越远计划越模糊，但是距离现在越近计划越详细。 不能没有纪律 与其在琢磨如何敏捷测试，不如一步一步把自动化做好，把持续集成做起来，创建更多的测试工具以提高测试效率，把质量反馈系统做起来，把dev提交代码前的质量检查做起来，把在产品中测试做起来， 把测试工程师的素质提高上去。 等到这些都建立起来了后，你发现自己其实已经很敏捷了。","title":"找到适合的方案才是王道"},{"content":"云计算正在国内外如火如荼的进行着，在今年的IDF 2012信息技术峰会上，英特尔公司全球副总裁兼中国区总裁杨叙在开场白时候就表示，今年的关键词包括：协作、创新、PC、个人计算、数据中心、互联、云计算等。并重点突出了互联、个人计算和云计算。智能设备推动了互联网和数据中心的发展，但爆炸式的增长同样带来了管理与资源分配等方面的诸多问题。面对越来越复杂的问题，云计算应运而生。 云计算服务提供商主要分为三种： 1、传统的IT厂商： 1)IBM\"蓝云计划\"与“智慧城市”：IBM作为IT行业龙头老大，具有强大的技术研发力量和广泛的客户基础，可以为客户提供从底层服务器、存储、交换机等到应用层应用软件的整体云计算方案。软件包括lotus Domino, Tivoli Storage,DB2等应用软件，此外，“智慧的数据中心”战略的发布，IBM在全球拥有超过100个大型数据中心的管理运营经验，进一步巩固IBM的行业老大地位。 2)HP云计算：HP经过一年多的战略规划之后，云计算战略渐渐清晰。HP拥有丰富的基础架构融合的案例和经验，通过整合上下游产业链，为客户提供“一站式”云服务。HP的优势在于资源整合能力，广泛的客户基础，完善的产品线。惠普还尤为强调三个落地点：“开放、互联和软件战略”。 3）浪潮：浪潮是后起之秀，依靠是国企背景，而且现在云计算以政府为主导，浪潮云计算的亮点是浪潮拥有国内比较完整的软件硬件产业链，对整合IT产业链具有较大的优势，云计算相当是给政府作为招商引资的项目，各取所需。 宝德：宝德拥有15年服务器、存储的研发销售经验，对IaaS架构有较大的优势。宝德云计算最大的优势就是已经有实际的项目落地（开开游戏云）。 2、互联网提供商转型云计算服务提供商： 1)亚马逊：亚马逊是第一个互联网云计算提供商，也是目前最大的公有云服务提供商。亚马逊是互联网上最大的在线零售商，但是同时也为独立开发人员以及开发商提供云计算服务平台。亚马逊将他们的云计算平台称为弹性计算云（Elastic Compute Cloud，EC2），它是最早提供远程云计算平台服务的公司 2)Google:Google是全球最大的搜索引擎服务提供商，拥有巨量的客户群和成熟的技术研发力量。Google在云计算领域可谓百花齐放，Google App Engine是Google基于Google数据中心的开发、托管网络应用程序的平台，支持Java和Python语言。Google Cloud Storage是另一类似于Amazon S3的企业级云服务。如今，Google更是推出了自己的云存储Google Drive。 3)阿里云：2009年中国万网被阿里巴巴收购之后，中国万网开始运营阿里云，从客户域名注册、网站建设、空间租赁到云主机，云邮箱和私有云，阿里云为中小型企业提供一站式互联网服务，截至2011年，超过30万中小型企业使用阿里云，这是国内公有云比较成功的案例。 3、软件厂商： 1）微软：微软是全球最大的OS与应用软件提供商，虽然微软介入这个领域比较迟，但是在企业级云服务方面，其云计算服务Azure为成千上万的Windows平台开发者提供支持。同时开始涉足非 Windows平台，希望借此Amazon展开竞争，有传闻说Azure将很快支持Linux系统。除了Azure，微软还有针对消费者的云服务，如云存储SkyDrive以及云端办公软件套件Office 365。 2）Vmvare:Vmvare是全球最大的虚拟化软件提供商，而虚拟化技术是云计算发展最关键的技术之一，VMWare自己不提供云服务，但是其vCloud 专为企业和服务提供商设计一组通用云计算服务，它支持所有应用程序或操作系统，并能够选择应用程序的运行位置(内部或外部)。目前通过vCloud打造的云服务已经达到100多个，Verizon就是其中之一 3）Salesforce：Salesforce是全球按需 CRM 解决方案的领导者，通过以2.12亿美元收购云计算创业公司Heroku后，Salesforce在云计算领域更具优势 4）　Citrix：Citrix是另一家应用服务软件方案提供商，1年前以2亿多美元收购创业公司Cloud.com后，迅速进入云计算领域。由于是免费的，其 CloudStack平台已经成为VMWare的vCloud平台的强大竞争对手","title":"国内外主流IT厂商云计算比较"},{"content":"最近确定了下一步的研究方向：海量数据处理与云计算（Big Data and Cloud Computing）。古人说得好：纸上得来终觉浅，绝知此事要躬行（如果有兴趣想知道是哪位古人说的，请猛击这里http://baike.baidu.com/view/1929030.htm），经过近1个月的纸上谈兵，最近开始进入动手实践阶段。在这个过程中，通过万能的古哥和度娘，获取了不少前人的经验，很多困扰的问题迎刃而解。尤其在看了曾经在IBM并肩战斗过的caibinbupt整理的Hadoop源码分析系列文章（http://caibinbupt.iteye.com/）后，深觉有必要开辟一个阵地，把实践过程中的点滴积累分享出来，希望能为后来者节省一些解决问题的时间和启发。希望这个阵地中留下尽量多的干货武器，这样才对得起踅摸至此的您宝贵的时间。 后面可能会涉及到的内容关键词应该会有：海量数据或称大数据（Big Data）、逐渐落入人间的云计算（Cloud Computing）、那头可爱的黄色小象（Hadoop）、以及动物园里的各色动物和看护员（Zookeeper、Pig、Hive等）。如对以上关键词有疑问，请猛击这里：http://hadoop.apache.org/。 附上   Windows下Cygwin环境的Hadoop安装   系列（请猛击这里：http://blog.csdn.net/liu_jason/article/details/7704399）","title":"开篇"},{"content":"YII 框架 中 基于SAE的KV-DB的缓存实现. http://tq02ksu.iteye.com/blog/1431005 将SAE的KVDB改造为缓存   http://blog.csdn.net/ljf1279/article/details/6939933","title":"SAE KVDB 新浪云计算 将SAE的KVDB改造为缓存   http://blog.csdn.net/ljf1279/article/details/6939933"},{"content":"       趋势科技发现有一个恶意PowerPoint 文件，会以邮件附件的形式攻击用户。这个文件内嵌一个Flash 内容，会利用特定版本Flash Player 的漏洞（CVE-2011-0611）将后门程序植入用户计算机内。              一旦用户者打开恶意PPT 文件，就会触发Flash 内的Shellcode，并利用CVE-2011-0611 漏洞展开攻击，将“Winword.tmp”文件保存到Temp 文件夹。同时还会产生一个非恶意的PowerPoint 文件“Powerpoint.pps”以蒙骗用户认为这只是一般的PPT简报。根据趋势科技的分析，“Winword.tmp”是一个后门程序，可以连到远程服务器，并与幕后黑手通讯。此外该程序还可以下载并执行其他恶意软件，让受感染系统面临更可怕的威胁，例如运行进行数据外泄数据窃取的恶意软件。           趋势科技将这个恶意PowerPoint 文件命名为TROJ_PPDROP.EVL，产生的后门程序命名为BKDR_SIMBOT.EVL。根据报导以及趋势科技的分析都可以看出，以往的目标攻击也用过这类恶意软件。             目前最新的的威胁已经不再只是将恶意软件伪装成一般的二进制文件（例如EXE 文件），并夹带到电子邮件中。这些特制的文件可以嵌入到一般常用的PDF、DOC、PPT 或XLS 文件中。在这种攻击手法里，用户往往不会察觉，因为TROJ_PPDROP.EVL 也会展示非恶意的PowerPoint 文件作为攻击的烟幕弹。   可靠的漏洞：有效的感染关口         这起案例也显示出，网络犯罪份子会不停地利用常见软件的旧漏洞（例如MS Office 或是Flash 等），在之前的文章里，我们发现有些已经被上报过的旧软件漏洞，例如 CVE-2010-3333和 CVE-2012-0158 仍然被攻击者利用着。这些发现告诉了我们两件事：首先，可靠漏洞的攻击码仍然是有效的网络犯罪工具；其次，大多数用户都不会经常给系统安装最新得升级程序和补丁，而这也解释了为什么攻击者可以不断地利用这些旧的系统漏洞。         趋势科技会通过趋势科技云计算安全技术保护用户，封锁相关的电子邮件和网址，并且查杀TROJ_PPDROP.EVL 和BKDR_SIMBOT.EVL。在这个只要借助简单的文件即可能导致数据外泄的年代，用户在打开电子邮件附件的时候一定要非常小心，特别是来自未知发件人的邮件。此外用户也应该经常更新安全补丁程序，将系统维护在最新状态。 ＠原文出处：MaliciousPowerPoint File Contains Exploit, Drops Backdoor   什么是APT？简单来说，就是针对特定组织所作的复杂且多方位的网络攻击。   认识 APT       以往黑客发动的APT 攻击虽然主要以政府为目标，但从2010 年开始，越来越多的企业也开始成为黑客锁定窃取信息情报的受害者，2011 年几个世界性组织就曾在目标攻击下沦陷，付出了昂贵的代价。RSA 和Sony 是 2011 年最大的两个APT-高级持续性渗透攻击的目标。另外还有几个世界性组织在目标攻击下沦陷，付出了昂贵的成本。他们失去了数百万客户的数据，光是完成修复工作就花费了巨资。 APT 攻击的特色:      【锁定特定目标】针对特定政府或企业，长期进行有计划、有组织地情报窃取行为，可能持续几天、几周、几个月，甚至更长的时间。      【假冒信件】针对被锁定对象发送几可乱真的社会工程学恶意邮件，例如冒充上司的来信，取得在计算机中植入恶意软件的第一个机会。      【低调且缓慢】为了进行长期潜伏，入侵的恶意软件往往具有自我隐藏能力，能够避免被检测到，并伺机窃取管理者账号和密码。      【定制化的恶意组件】攻击者除了使用现成的恶意软件外，还会使用专门定制的恶意组件。      【安装远程控制工具】攻击者会建立一个类似殭尸网络的远程控制架构，并且攻击者会定期将有潜在价值的文件副本传送给命令与控制服务器并进行审查。      【传送情报】将过滤后的敏感机密数据利用加密方式外传。          APT 高级持续性渗透攻击可能会持续几天、几周、几个月，甚至更长时间。APT 攻击可以从搜集情报开始，这可能会持续一段时间，其中可能包含技术和人员情报的搜集。情报收集工作可以塑造出后期的攻击，这可能很快速，或持续一段时间。           例如，试图窃取商业机密可能需要用几个月时间研究相关安全协议、应用程序弱点，以及文件位置等信息，但当计划完成后，只需要一次几分钟的运行时间就可以了。在其他情况下，攻击可能会持续较长的时间。例如，成功将Rootkit部署到服务器后，攻击者可能会定期传送有潜在价值文件的副本到命令与控制服务器并进行审查。         【如何避免APT 高级持续性渗透攻击？】          趋势科技建议用户应：  养成良好的计算机使用习惯，避免打开来路不明的邮件附件文件 安装具有信誉的信息安全软件，并定期进行系统更新与扫毒 另一方面，为预防员工成为黑客攻击企业内部的跳板，建议企业也应： 建立早期预警系统，监控可疑访问及计算机 布建多层次的信息安全防御机制，以获得纵深防御效果 对企业内部敏感数据建立监控与访问政策 企业内部应定期执行社会工程学攻击演练         趋势科技PC-cillin 2012 云安全软件采用了最新的云计算安全技术，能随时搜集最新威胁信息，随时协助计算机抵御最新出现的病毒与恶意软件。30 天免费试用版下载：免费下载。       本文版权为趋势科技所有，对于非赢利网站或媒体转载请注明作者以及原文链接。谢谢合作!   爱趋势社区--下载/论坛/分享  http://www.iqushi.com 官方微博—拿礼品/分享最新IT资讯http://t.sina.com.cn/trendcloud 趋势科技CEO：陈怡桦EvaChen的微博  http://weibo.com/evatrendmicro","title":"恶意PPT文件夹带漏洞攻击和后门程序"},{"content":"                  第一届OpenStack亚太技术大会OSAC（OpenStack APEC Conference）是亚太地区首次针对OpenStack开发者所举办的最盛大和权威的大型技术会议，由全球最大IT中文网站CSDN (Chinese Software Develop Net )和中国 OpenStack用户组（China OpenStack User Groups，COSUG)联合举办，致力于推动Openstack开源云计算技术在亚太地区的研发和应用。 会议时间：2012年8月10-11日 会议地点： 主会场：北京新云南皇冠假日酒店 分会场：上海创智天地 大会亮点： 过半讲师是国际OpenStack一线研发/实践大师 基于OpenStack的公有云计算平台核心团队负责人经验分享 运行于OpenStack的私有云的行业实战分享 参与人群：     CTO/CIO、企业架构师、开发者、ISV、供应商     票价说明      >>>>立即购票                                             门票包含： 大会期间全体会议、专题论坛、技术研讨等所有活动（需单独收费或定向邀请参加的活动除外）；大会资料。 门票包含： 主题演讲视频同步、专题论坛、技术研讨等所有活动（需单独收费或定向邀请参加的活动除外）；大会资料。 报名流程       >>>>查看报名付费细则                     订单信息——填写参会者信息——付款——开通电子门票的打印权限（通过邮件通知）——打印电子门票——凭电子门票参会 演讲嘉宾名单（排名不分先后） Destination 姓名 Name 职务 Title 议题 Topic 北京地区—— BJ Tom Fifield NeCTAR 云架构顾问 澳大利亚OpenStack实践 BJ Jaesuk Ahn KT 公司 团队领导 韩国OpenStack实践 BJ Jinkyung Hwang KT公司 云存储开发团队领导 Jinkyung Hwang将谈到KT在此方面所做的各项工作，包括产品开发、业务谈判、社区活动以及客户服务。 BJ Myung-Ki Shin  韩国电子通信研究院 OpenStack软件的自防御网络  BJ Daniel Lee Technical Director in CCMA 用于OpenStack的分配和复制块级存储系统 BJ Tzi-cker Chiueh 台湾CCMA总干事 工业技术研究院云操作系统和 OpenStack BJ KC Liu Deputy Director of Hardware Division in CCMA, ITRI 工业技术研究院云操作系统中的Quantum实施。  BJ Boris Renski Mirantis CEO BJ Alessandro Pilotti Solutions/Cloudbase解决方案的首席执行官兼首席技术官 在Essex和Folsom等版本中集成Hyper-V BJ 秦润锋 中国电信广州研究院OpenStack项目工程师 基于OpenStack的中国电信开放云体系设想与规划 BJ 金耀辉 上海交通大学网络信息中心副主任 BJ Mark Collier RackSpace  Keynote BJ Kyle Canonical, VP   Keynote BJ 彭麟 EMC中国研究院云计算平台与应用实验室高级研究员 CloudFoundry弹性架构和基于OpenStack的部署实践 BJ 彭昱玮 新浪SAE系统开发工程师 新浪OpenStack开源监控Kanyun与计费项目Dough介绍 BJ 杨雨、余兴超 新浪SAE存储工程师 Swift架构与实践 上海地区—— SH 彭勇 公云网 SH 廖宗文 曙光信息产业股份有限公司 openstack行业应用 SH Peter Liu  Dell  解决方案架构师 SH 莫华枫 盛大云储存总监 云尽其用 SH 镇祝华 HP openstack案例分析 SH 汪源 网易.杭州研究院.副总监 生产环境中应用Openstack的一些问题与经验 SH 蒋清野 Unix-Center.Net创始人 《开源IaSS社区分析报告》背后的故事 SH 许式伟 七牛云存储联合创始人，首席执行官 openstack的存储相关技术分析 SH 余锋 淘宝网核心系统技术专家 RabbitMQ及消息队列服务 （待确认） SH Nah, Chong Yeol intel Openstack开源项目开发与管理 SH Thomas Goirand  CEO of GPLHost XCP+openstack SH Cole Crawford OpenStack Foundation候选人 OpenStack Foundation介绍 票务咨询热线：010-64351456或51661202转248 大会邮箱：openstack@csdn.net 更多信息详见大会官网：http://openstack.csdn.net/china_index.html 大会将由丰富的内容和议题组成，届时国内外知名技术专家及使用OpenStack技术的顶级厂商参与，无论您是openstack的用户、开发者、架构师或者是开源云计算的爱好者，这都将是让您受益匪浅不可错过的一次盛会。 一起来感受开源运动的魅力吧！","title":"“2012 OpenStack亚太技术大会”8月10-11日首次召开"},{"content":"程序员职业发展的绊脚石-思想的枷锁 转自：http://blog.csdn.net/linux_loajie/article/details/7698501 在国内的大环境下，如果程序员自身的技术本身并不是很出色，然后年龄又过30了，那么就会有这样的现实问题，现在公司招人，都是从利益的角度出发，会详细的计算所谓的投资回报收益比 　　开篇 　　首先、我是一个程序员，从大学毕业到现在，已经工作了近5年的时间，看着现在越来越多的朋友进入IT行业，并且年轻才干的做软件开发的朋友们，个个都是生龙活虎，精兵强将，年纪轻轻的就学习了很多知识，我感觉我们做这个已经有点力不从心了，程序员，一提大家都会说是吃青春饭的，是的，在国内的大环境下，如果程序员自身的技术本身并不是很出色，然后年龄又过30了，那么就会有这样的现实问题，现在公司招人，都是从利益的角度出发，会详细的计算所谓的投资回报收益比，这也是我们作为职场人员，给企业打工逃脱不了的问题，所以生活还是很现实，当梦想照进现实的一刹那，思考总是引起涟漪。 　　可不、今天起了个大早，西安天气很热，房子蚊子多，真是悲催啊。唉不说了，想了很多，所谓梦想的追求，希望能最终经过努力来实现它，很多人说我们应该享受过程，呵呵，而不是看结果，不过有时候以结果成败论英雄的。现实就是这么残酷。 　　摘要 　　我也是早上实在是睡不着，又不想写程序，感觉脑子很乱，不过想到写这篇文章的思绪却很强烈，我一直思考一个问题就是，为什么我以前考虑问题的时候，好像思维都是非常的固定，模式都很程序化，导致从事开发人员之后，自己做事都很固化，包括很多事情，原来敢于尝试的，现在都不敢尝试了，因为不知道前方会是什么情况，所以从不敢试，然后，我推荐我们以后，当遇到一个自己从来没有做过的事情时，可能我们刚开始并不知道如何去做，当我们对这个没有做过的事情，用心，专注的去攻克它的时候，等你掌握了门路之后，你就回发现另一个春天，真的是这样的，我现在遇到什么困难的事情，都不会轻易的妥协，我不怕失败，所以才会有可能成功。 　　关于专注、思维的转变、放下枷锁、改革开发思维也许是我们职业生涯的新起点。 　　让我开始新的职业生涯之路吧。 　　思想的枷锁 　　首先、我写的更多是我的理解的所谓的思想的枷锁。不代表全部，部分观点可能有错误，或者是太片面，还请大家批评指出。thankyou! 　　我认为做程序员开发太久后，一般会有这样的感觉。技术上，变化更新太快，感觉跟起来有点力不从心，不跟好像又不太合适，所以一直处于追赶的步伐，所以当程序员，会感觉很累，身体累就不说了，更多的感觉是心累，关于哪个语言的程序员最累，我想是做应用开发的，不管是Java还是.NET程序员相比其他的对技术上要跟风的东西太多了，不过，当我们思想上理解一点，其实就想明白了，应用技术的出现，无非是为了解决几个问题，一是提高软件的生产效率，二是降低开发成本，这里所谓的成本就很多，时间、人力、后期的投入等等，所以易用性、快速等方面的要求就会要求比较明显。我想这个大家应该神游体会。我是从事微软平台之上的与同事一起合伙开发一套帮助企业及个人的快速软件开发平台，提供了强大的快速开发辅助工具，帮助开发人员更好的专注业务功能的开发。三是解决前辈们的一些不易解决的问题而发明的新语言或者是解决某些问题而生的新技术。例如目前比较或的云计算，总感觉又回归了，思想上呵呵，当然也有新的发展了，在原来的集中式主机+多个终端，现在只是形式上有所变化，并且给了个新名词“云计算”呵呵，挺浪漫的话说。 　　再次、不得不说，技术的发展是日新月异的，而我们的技术水平应该也是在逐日提高的，不过我们的思想，有可能变化的总是一种模式，我下面简单总结下一般程序员的思维，不代表全部，thankyou。 　　程序员的一般性思维： 　　上图，我先说明下，上面的毛病，有时候是我自身也有的，我也在努力的改正，也有是我看到的，听到的，感受到的呵呵。 　　后面我们就来仔细的简单分析下，原因吧？ 　　所谓的难沟通 　　其实、并不难沟通，真的，但是说实话，让程序员跑商务或者是跟客户见面，让程序员做出和客户面对面来沟通的时候，就可以感觉到一些事情，我简单罗列一下吧，我自身也有这样的问题存在。 　　1、往往我们想的软件与客户实际的业务场景和业务功能，会有一定的偏差，因为客户希望的业务系统，在软件上实现很难，当然并不是软件实现不了，往往因为一些时间和进步上的关系，我们会考虑把这个难点绕过去，或者是用一种折衷的方案来一样完成客户希望的功能。 　　2、程序员考虑系统设计功能模块的时候，有时候喜欢考虑一些用户并不常用的场景，反而认为是用户未来可能用到的功能，而加大设计的力度和灵活度，其实现实中的软件，并不是所有的功能开发出来，都被客户所用到，科学的调查是，用户往往使用的功能不会超过80%，甚至更低。 　　3、程序员的沟通与表达能力，有的时候与客户或者是我们去调研需求的时候，表达的词过于专业或者是用户听不懂，我们应该立足于某个行业，首先熟悉业务的专业名词，不是要求我们成为业务专家，至少知道我们开发软件的目的是为了解决什么问题，应用在什么业务背景和场景。 　　4、程序员与程序员之间沟通，如果技术相投的朋友，沟通起来比较愉快，一般就一些问题，达成共识会比较难一些，特别是一些自己思想上认为不太合适的问题，可能就无法接收一些观点，也许现实中的这些观点不对，不管站在另外一个与你沟通的人的观点之上，他确实是正确的，所以这时候，很难接收，往往程序员与领导之间难达成共识。其实这是牵扯到商业等各方面目的，是利益权衡的结果。 　　程序员思想固化？ 　　一个人的行为，还好改变，而改变一个人的思想，真的很难，程序员的思想其实也不是一天二天就形成的，从你接触开始，或者包括就业，社会环境等等所有的事情，对你个人心里和情感上总体的变化，最终形成了一个人的思想。每个人不管是在家庭、社会、工作、生活中所处的环境与地位等都各不相同，但是终究一点，人活着，不是为了受罪，而是一是满足物质生活，二是追求精神生活。所以这个我们作为程序员，一样也是希望能有一个精彩的人生。 　　坚持自我 　　关于程序员坚持自我的思想，我想最能表现出来的时候，就是与人沟通时，再没有达成共识，或者是自己职位高于别人的时候，一般都会把自己的意志强加给别人，呵呵，说难听一点，有点强奸别人的意思，当别人提出批评意见的时候，往往心理上会不服，嘴上坚持自我，难以沟通。其实、程序员的逻辑思维能力很强，不然没办法当一个好的程序员。因为如果逻辑思维混乱，那么不能说肯定程序写的混乱，但是肯定不是非常好。或者说是严谨性与质量上。 　　所以，我不怕，呵呵，因为我是程序员。 　　思路窄 　　我这里所说的思路窄，主要是以下的几个方面，不代表全部。 　　一、解决问题的思路，一般来说，都是最快的解决问题就OK，没有考虑一些更多的因素，比如代码的质量、性能。没有寻求有没有更简单的解决问题的思路， 　　把问题容易复杂化。 　　二、对功能的认识，都认为是能实现功能即可，很少从用户的角度出发，考虑用户的实际使用场景，易用性等，对功能自我满意度较高。 　　三、对事物的看法、一般对于不知道的事物是一点都不了解，了解的事务，都会整出很专业的一堆解释。而且，生活中的知识一般知道的太少，为啥呢，因为都在写程序。其实有些程序，不再我们写的多，有些程序，你写十遍和写一遍是一样的，但是有些则不然，古人说的没错。书读百遍，其义自见。程序写多了，也会衍生出自己的想法，自动就会对代码进行重构和设计。 　　四、对生活的认知，一般都会认为社会的每个行业其实都差不多，呵呵，而且认识的人一般都是程序员，因为见到的都是同行的人，所以每天沟通的话题，都是除了IT还是IT，生活总是离不开那个区域，让人感觉好像，除了这块可沟通，其他的东西，都不用考虑了，呵呵，我感觉这是我自身的毛病之一，要多接触各行朋友，深入社会，才能在认知上扩大，并且扩大交际圈，人不能老是活在自己的世界里。 　　五、更多。我也不知道还有哪些，大家补充吧。 　　放飞想法，走出禁区，展翅高飞，迎接精彩而又打上自己标签的幸福生活吧! 　　凭经验 　　这个怎么说，为啥这么说呢，这其实不光是程序员的思路，也是所有目前社会人士的思路，认为总体来说，就是瘦死的骆驼比马大，大家应该能意会出意思吧， 　　呵呵我想也不用太明说。我们从招聘人的时候也能看出来大概，有时候我们在评价一个人的时候，总是从自身的标准，凭自身经验去判定，往往都是主观的评价，而不是客观的评价，往往是以偏概全，常在河边走，哪能不湿鞋？古人总结的话，总是经过多人实践证明的。希望我们不要当凭经验做事失败的时候才后悔莫及啊。 　　还有就是认为，工作年限多的人比少的人能力强，呵呵，这个不能说100%就一定对吧，我认为凭经验就认定，一棒子打死人也不对的呵呵，我们要具体情况具体对待，经验有肯定比没有好，就像很多做设计与系统分析的人员，有经验，肯定比没有经验的好多了，这是肯定的，但是经验不是全部，还要集合具体的东西，而常常我们都是凭经验去办事，认为以前有过这样的经验，这次肯定没问题，有时候会因为准备时不充分或不足，做出来的系统或产品，与客户的需求有偏差呵呵。当然有经验比没有经验是好，但是一味的凭经验办事绝对就是有问题了。 　　经验是财富，但是不是全部哦，有时候要具体问题具体分析。 　　转换思维难 　　接收批评 　　很难接收批评，我想这是程序员心理上比较难接收的事情，而且程序员一般情况下，都比较会为人处事，我说的为人处事，是指不喜欢惹事生非，以和为贵，很少会与人撕破脸，争吵之类的，反正我是不会，遇到牵扯到利益的事情，有时候都懒得抄，也许我是被吓大的吧，怕怕!或者是懦弱？其实并不是。 　　当我们在工作中或是生活中，做错事，当我们指导自己错的时候，才会认错，或者是在别人的威逼利诱之下，才会认错，主动认错的可能太少，一是因为面子上过不去，程序员，都比较好面子，希望别人夸他不错，或者是能力强，不喜欢别人贬低自己不行，其实不只是程序员这样，是人都这样，但是如果我们程序员，想要比别人强，那么首先得接受别人的批评，自己做得不好的地方去改进，所谓忠言逆耳利于行，我不想说古训了，真的有道理，我也讨厌别人批评我做事不好，不管是生活上还是工作上，都是如此，每次都希望自己做事能做好，让人尊敬之类的，其实往往不是如此，为啥呢，我得出结论，领导分配任务，有时候只是跟你说想要的结果，有时候由于过程不同，往往成本与时间不同，最后的结果也许也会不同，程序员上进的吧，机会考虑每次项目都是学习的机会，不上进的就是重复劳动，外包公司一般的项目，你做个遍，就知道了，呵呵，接受批评也是进步，不能说是技术上的进步，应该说是人生的进步。成大器者必须接受别人的好的批评，当然不好的就当耳旁风吧，thankyou! 　　无法面对失败 　　首先、没有人喜欢失败，不过在实际场景中，由于一些难以控制的情况，项目会有失败的情况，其实我做过的成功的项目不少，失败的项目也很多，我也是刚开始没办法面对失败，生活中也是如此，我高考的时候，并不是一击必中，而是二次才成功的，曾经因为一些前后的反差巨大，心理上承受不了，不管是各方面的压力等，也许等你经历了一些事情之后，才会更坚定信心。 　　程序员面对的失败，更多的自己工作中的失败，生活中的失败，也会对工作造成影响，人家是这么说的，当一个工作的状态能够反映一个人的生活状态，当这个人工作的很带劲，他的人生也必是积极向上的，或者是充实的。所以关于励志的故事，这里就不多说了，所谓失败是成功之母，我们不应该因为某次不顺或者失败的情况，就放弃自己的理想或者是自己的目标。关于前人的路是不是可以复制，只要你努力，并且朝目标前进，你放心，付出总会有回报的，在技术道路上可以说是比 　　没问题的，你投入的时间多，技术水平肯定就上来了。这和生活中的一些做事的态度和专注力与取得的结果是一样的。 　　商业思维 　　首先、我想说的是，程序员一般人很少会从商业的思维去考虑问题，或者是人生的规划等，其实很多的程序员创业，一是为了理想，二是为了成功后能发笔财，不过有些事情，我也不好多事，牵扯的范围太大，大家意会就可以了，社会压力大，生活上与物质上的，我现在就遇到这样的问题，生活最终要落地的，所以当你结婚之后，你就必须考虑如何去保证一定的经济收入，孩子的奶粉钱和上学问题等，房子问题等，开销等，所有的所谓的经济压力都会随之而来，我们如何应对。打工来自稳定的收入，固然不用太愁，每月正常上下班，把安排的工作干好，然后就等发工资，如果能干的好，那么还能分奖金，当然我说的不是全部，说的是好点的公司，有些公司可能没有，不过大部分的北上广的企业还可以。 　　给别人打工，工资收入稳定，到月就发，当然有些特殊的公司，那样的不稳定发工资的公司，可以考虑闪吧，不过我最近接触到的一些商人，分析下他们的经验，当然关于对不对，我就不评判了。 　　1、商务的问题。公司的收入来源，没项目没钱。 　　2、技术问题。有项目，但是没有合适的人员，这就很难开展，只能外包，赚取中间差价，这样的公司一般很少需要程序员。 　　3、管理与运营问题。人多了，公司的就需要有人管理，除了商务，技术，还需要考虑公司的管理与运营，包括市场的推广。 　　4、成本收支。必须考虑支出与开销，控制成本等，投入的基础设施的费用与人员费用，其他隐性支出。 　　有时候老板必须考虑，企业的发展与自己的优势，并且能够给员工发工资，不然怎么能留住人，没人企业就没办法发展，也没办法壮大，人是企业的组成部分。 　　企业如何立足行业，提高行业的竞争力才能发展，否则只能被吞并。 　　我希望我们有时候，能够转变思维，并不是让我们损失自己的利益，站在商人的角度来考虑问题，比如拖欠工资，其实与其这样，我们还不如找个不拖欠工资的公司，我们做软件其实不就是为了基本的生计问题吗？能有口饭吃，当我们创业的时候，或者是想能够把梦想照进现实，不管是为了创业成功后的发财还是发名，等等，反正都必须了解与熟悉商业上的模式，切换思维，才能更适合社会的行情与环境。 　　Andriod是开源的，但是并不免费，你可以深入背后，了解下器商业模式，可以很好的学习。我们有时候需要转变思维？也许吧。 　　精英法则：2/8 　　相信大家都知道2/8原则了，呵呵，不用我怎么解释和说明了，不管社会进步到什么程度，这个原则永远适用。我认为，我们大家应该努力先向20%的目标进发，这个时候离成功和物质生活的改善就不远了，365行，行行出状元，这句话也比较有道理，我不是什么学者也不是什么专家，这些大道理，我想我没有资格跟大家教导啥的，我自己现在也是在80%的范围内，希望能够成为20%的一员，我也是在加油的追赶。 　　如何成为精英，这个步骤，我是讲不来了，这个大家可以看看各方面的资料了，如果我们是做技术想成为20%的精英，我认为可能有以下几点： 　　1、用心，把敲门砖修炼成金砖。我们没有钱，没势，不会拍马屁，不会做事说话左右逢源，怎么办，先把技术修炼的刚刚的。 　　2、学习技术的时候，在一个行业内，目前是成为接近技术专家的伪专家，专业，用心，不断学习，关注社会东西，清晰的人生目标。 　　3、修炼人生、修炼意志、接收现实与所处环境，与其抱怨不如潜心修炼，终有一日会达正果。 　　4、技术上想成为专家，一是技术与行业知识过硬，而是肯于交流与分享，不要把知识放在自己的肚子里，消化不良容易。 　　在国内，技术人员很多的情况下，往往精英只是极少数，加油吧，兄弟们。 　　收入不平衡？ 　　我想我们大部分，都有这样的想法吧，反正不管你有没有，我是有这样的想法的。我们每天在公司做项目，公司的主干人员，比如大公司的架构师或者部门经理，鲜能见到人，在工位，但是你放心，他的收入远在你之上，或者是你的所谓的项目经理或者你看不顺眼的领导和主管，程序员的工资，在一个企业内部可以说是底层的，为啥呢，我想是这样的。 　　1、可能我们技术不强，能力不强。这个能力不光是技术与解决问题的能力，还包括沟通、管理等方面很广。 　　2、技术强、但是不太会表达，不太会为人处事，不太会镇得住场面，该说的时候，说不出来。这就很悲剧了，肚子里面有墨，但是倒不出来，那么很悲剧了，我发现，很多的技术强人，都有一些这方面的问题，我不是技术强人，我也不太会表达，有时候，悲催。 　　3、我是程序员，偶尔抱怨，领导一天不加班，也不写代码，日子过得悠哉，提早下班，迟来上班，下班之后，车一开，工资我的好几倍，时不时的放假能出去举个会，旅游啥的，悲催，程序员呢，平时加班写代码，研究技术，周末好不容易休息，还得加班，或者研究新技术，日子是很充实，结果呢？不言而喻。经常抱怨的人，心态并不好，而且自己的工作与生活也常常如此，抱怨不如尝试着去改变，接收而奋发图强，成为强者。 　　4、我是程序员，当我们看到周围的人，职位攀升的时候，我们是否也在想自己哪天也和他们一样，其实你仔细看看，也许周围的人付出没有你多，但是他上去了，你却没有，为什么呢，仔细想想吧，是你干活少？不是，是你不会为人处事？有可能，是你不会表现与抓住机会？有可能，是你还不够稳重，很急躁？这绝对是最大败因，我们有时候在一个公司呆了2-3年，结果职位是周围比自己爬得快的比比皆是，自己却一直很慢，仔细考虑和反思吧，领导的想法很特别，我这里就不一一道来了，这是写不完的。 　　最后、生活是自己选择的，但是记住，自己的生活轨迹是可以改变的，人不是生下来，就决定一定这辈子只能当编码的程序员了，我们既然选择了方向，我们就要努力。成为20%的精英，不管是自己有事业的想法还是在企业内部成为领导，我们都可以为之努力。当别人日子过的很滋润，你还在考虑房子，车子，基本的物质生活时，别人有着漂亮的老婆和幸福的家庭，舒适的生活，记住，刚开始肯定不是这样的，人家如果家庭条件并不好的时候，肯定人家也努力奋斗过，如果是家里有钱，那就没啥好比的了，我是没钱，也比不了，只有靠自己的双手，来托起幸福的明天了，我们不希望继续这样的生活了，怎么办，自己想好出路与目标，先实现小目标吧。祝大家都能成为20%的精英。 　　20%的人创造了80%的财富，他们当然理所当然应该拿80%的收入。呵呵，我们应该也是如此。","title":"【【【强烈推荐阅读】】】 程序员职业发展的绊脚石-思想的枷锁 程序员职业发展的绊脚石-思想的枷锁"},{"content":"云计算包括以下几个层次的服务：基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）。     http://blog.sciencenet.cn/home.php?mod=space&uid=94143&do=blog&quickforward=1&id=586846","title":"What cloud computing really means"},{"content":"  由于教育的基础还比较薄弱，总体水平还不高，全国各地级市、县区教育资源存在发展不平衡的现状突出。教育的不均衡说到底就是办学条件（硬件）和师资水平（软件）的不均衡，突出表现在县域之间、城乡之间、校际之间存在着显著差异。由于教育资源不均衡，导致的择校热愈演愈烈，农村向城里择校，县里向市里择校，弱校向强校择校。要保障教育公平发展，就要促进教育均衡发展，努力办人民满意的教育。 　　政府大力推动教育均衡\"视频云计算\"应运而生 　　时代在前进，教育手段也应该随之创新，远程视频技术可以帮助教育进一步发展。城市里的孩子们已经早早地开始接触电脑。如果教育手段能够从电脑和网络角度介入，就能从相对积极的角度引导孩子们，告诉他们如何以互联网的方式获取知识，而且这个获取方式是有趣的，专业的，个性化的。 　　而对于农村和偏远地区的孩子们来说，因为不同地区的教学条件和教学资源差别也很不平衡，所以网络视频教育可以帮助不同地区的教师和学生及时掌握教材的更新情况。其实传统教材也在更新，不过速度很慢，十几年中也许只更新一两次，但时代前进的速度要快得多，使用网络教育就可以及时更新，把教材搞活了。 　　同时，利用成熟的教育网络的无限容量和先进的信息技术手段，可以系列化、配套齐全，而且可以无止境提供，这就解决了另外一个问题：很多出版社不愿意为学校出版配套教辅书，因为如果发行量不够大并不划算。如果能开展网络教育，教材的系列化、选择性、教材的现代化、教材的拓展性问题就都能解决，的确比传统教材优越得多。 　　在政策环境的驱动下，促进教育资源均衡发展、缩小学校间办学条件差距、均衡公办与民办教育资源、均衡特区内外教育资源、调节学校内部教学资源的各项举措应运而生。VIEWGOOD视频云计算研究中心，推出了基于视频云计算的，应用于教育资源融合的平台，完美的推动各级教委（电教馆）的教育软资源的均衡问题。那具体如何实现资源融合与分享的呢？ 　　视频云计算架构推动教育均衡进程 　　提到云计算，业界的朋友最多的两个评价是“非常热”，“太概念”。云计算离我们很近，IT巨头在各种媒体上都在讲云计算所带来的划时代变化；另一方面，云计算又“很远“，不同业者站在自己的领域和角度，对云计算有不同的理解，可谓大象无形。 　　我们不妨先从几个不同的角度来看云计算。从技术的发展角度，云计算是分布计算、并行计算和网格计算中发展而来，是虚拟化、效用计算、IaaS(基础设施即服务)、PaaS(平台即服务)、SaaS(软件即服务)等概念混合演进并跃升的结果。 　　视频云计算在教育中应用的目的是利用现有的软硬件，在电教馆（或教委）增加一层云视频存储与分享，使得可以整合一个地区的各学校的教育资源并应用于流媒体视频服务，它不仅可以实现一个地区或学校的资源共享，而且可以保证政策传达的统一出口，极大的提高工作效率和解决有限资源的使用。 　　该系统是采用最先进的视频“云计算”技术，是通过在现有的Internet中增加一层新的网络架构，将流媒体内容上传到中心节点服务，也可分享到各“边缘”节点，使用户可以在多节点获取需要的内容，提高视频资源的利用率。 　　达到原有建设的独立的流媒体系统实现互联互通，解决资源的重复建设。 　　同时，VIEWGOOD从技术上全面解决由于用户访问量达大、网点分布不均、对骨干网的带来拥塞等问题，提高用户访问流媒体内容的访问范围和响应速度。采用国际最先经的内容混合优化技术，并支持不同码流的多种媒体格式文件，分发在同一台边缘服务器设别上的进行混合部署，极大地节省了运营商的服务器资源。 　　该部署模式针对教育局和下属各个学校，各自要求系统应用独立同时教育城域网管理平台可实现与下属学校互联分享各种实况直播、点播视频等资源！ 　　云计算在资源融合的应用 　　1、远程课堂：在互联网(教育网)上通过系统进行在线实时收看远程教育频道，方便地实现远程听课（同屏多画面直播：一路学生视频、一路老师视频、一路老师电脑屏）、在线学习（课后回顾），更解决了一些不能来到学校上课的难题。同时将信号推到教委平台，供其它学校学生，在家、图书馆、电或其他地方，实时学习，也可以在课后观看课堂录像，完成学习任务。真正实现区内学校资源，名师资源的平衡化。 　　2、学生实训电视台：可以让各学校建立多个实习电视台，让学生社团主持现场直播电视节目，可事先公告排定活动，届时让师生实况收看，参与各种社团活动，活动过程可实时录制成视频档案，并可事后编辑活动影片，作为点播教材。所有的频道不仅在本学校网站上发布，同时推送到教委资源融合网，方便其它学校共同收看与学习。实现多校活动协作，使活动多元化，丰富与扩大学生的知识面。 　　3、电视转播：通过平台将电视的模拟信号实时采集并直播出去，这样可以建立自己的网络教育电视台，如中央十套、教育电视台等。教育管理部门可以根据自己教学规划确定所选的频道然后采集在平台上，当然可以定期调整。观看着可以根据自己学习的需要选择观看。可以轻松的将平台的电视频道建成包含数百频道的大型网络电视台。采用云计算方式，中心教委可将各学校的直播信号融合，并整合后再传给没有直播采集信号的学校，实现资源的合理利用，减少学校的重复投资，实现教育资源均衡化。 　　4、红色教育：将经典的，有教育和学习价值的电影，教育片，故事片，记录片等集中存放到视频服务器中，方便师生课后点击学习，丰富学生的课余生活，使得学生可以全面发展。该平台利用云计算技术，支持所有的流媒体格式，可以批量添加，可以只能识别等功能极大地方便了管理者和观看者。各学校的资源可以自动融合到教委，并可以审请将教委的资源下传到本校的视频教育平台，实现资源共享。 　　云计算采用了虚拟化的技术，极大的节约了教委（电教馆）数据中心的IT基础设施的建设成本；支持在同一套IT基础设施上承载多学校（单位）业务运营的能力，帮助各类教育业务在数据中心的加载和运营；同时，利用云计算的集中处理优势，提高了IT基础设施的运行效率，降低了整个教育系统的能耗。 　　在下一代教育网，部署视频云计算将是必然的趋势，让IT技术的使用成本极大的降低，无论是教委（或电教馆）还是最终学校用户，都不需再过多关注各种IT技术的具体细节实现，而将注意力集中在其业务逻辑和运营模式上。云计算让每一个独立的学校平台进行资源整合，为实现区域内的教育资源融合做出确实可行的方案。","title":"云计算在教育资源均衡化中应用的探讨"},{"content":"A Brief Guide to Cloud Computing 云计算导论 Chapter 1、THE RISE OF FLUFFY COMPUTING This book is being written in the cloud. This means that my word processor is not installed on my computer. The files for each chapter are also not being saved on one of my own hard disks or USB keys. Instead, the program I am using is running somewhere ‘out there’ on the Internet. My files are then being saved to remote online storage. This service is also being provided to me for free. 本书编写于云。简而言之，我的办公软件不是安装在我的计算机上。这本书每一个章节都没有存储在任何一个我的磁盘或者移动盘上。相反，我使用的程序运行在Internet的某个地方。我的文件都存储在远程在线存储服务器上。而这个服务是完全免费的。 Exactly where my word processor is running and where my files are I really have no idea. More importantly, I simply don’t care. This is also the whole point. Cloud computing is ‘fluffy’ because the resources being used are irrelevant to the vase majority of users. This is why cloud computing is so scary and resisted in many corporate data centres. It is also why cloud computing is so liberating and powerful for the rest of us. 确切的说，我的办公软件和文件在哪里运行和存储我真不知道。重要的是，我一点也不用关心。这是关键的地方。云计算是“空泛的”，对大多数人来说它使用什么资源是不相干的。这也导致它在很多企业数据中心里面引起恐慌和抵触情绪（因为不知道使用了啥资源）。不过它也让剩下的我们获得解放和高效。 Just before you think that I have no idea what I am doing, I can reveal that this book is being written in Google Docs. As illustrated in screenshot 1.1, this is an online word processing, spreadsheet, drawing and presentations package now being used by tens of millions of people and an increasing number of companies. In the UK, the Daily Telegraph and Sunday Telegraph national newspapers are now partially written in Google Docs. This has been occurring since July 2008 when the Telegraph Media Group began a transition from local Microsoft software to the online Google Apps software suite. 就在你以为我不知道我在云上能干什么的时候，我已经在Google Docs上编写完这本书。正如截图1.1，Google Docs是一个拥有成千上万普通用户的在线文档处理、电子表格、绘图和PPT的工具包，它的公司用户数也一直在持续增长。在英国，包括每日电讯报和星期日电讯报这样的全国性报纸都在部分的使用Google Docs。而电讯传媒集团【默多克？】早在2008年就开始逐步的将在本地MS上的文件处理迁移到在线Google APPs上。 Jaguar Land Rover, Rentokil Initial and the District of Columbia government are just three of the far larger organizations that have also adopted Google Apps. Meanwhile universities from Arizona to Delhi, Washington to Notre Dame, and Dublin to Leeds, are in a stampede to sign up to Google Apps Education Edition. Strange and scary as it may initially seem, make no mistake that cloud computing is already entering the mainstream. 在已经完全采用Google Apps的商业组织中，捷豹路虎（豪车）、Rentokil Initial（一个商业服务集团）和哥伦比亚政府是其中最大的三个。从亚利桑那（美国西南部的州）到德里（印度城市），从华盛顿（美国）到圣母院（法国巴黎），从都柏林（爱尔兰首都）到利兹（英格兰北部城市）其间的所有学校都蜂拥而至，体验着Google Apps教育版带来的便捷。它看起来是那么不可思议，所有一切都表明云计算已经成为主流。 This book is your guide to the dawning age of cloud computing in which all manner of computing resources will be accessed over the Internet. It is therefore a book about a technological change as radical as the personal computer revolution. This is, however, not a technical tome. Rather,A Brief Guide to Cloud Computing is your route map to the future practices and philosophy of computing and how they will affect us all. 这本书将引导你进入云计算的新时代，所有常见的计算资源都将通过Internet进行访问。所以本书阐述的是关于个人电脑革命的根本性技术变革。当然，它不是一本技术类长篇巨著，相反，云计算概论只是关于云计算的未来实践与基本原理路线图，以及它将如何影响我们所有人。 ScreenShot 1.1: Word processing in Google Docs.   So What Exactly is the Cloud? 云到底是啥？ You may be wondering what any of this has to do with clouds! The answer is that, for many years, the Internet has been represented on network diagrams by a cloud symbol. When, around 2008, a variety of new services started to emerge that permitted computing resources to be accessed over the Internet, the label ‘cloud computing’ started to be used as an umbrella term. So does this mean that we ought to be talking about ‘Internet computing’? Well, perhaps. However, in the strictest sense, the ‘cloud’ is a label for online computing resources rather than the entire Internet. The term ‘cloud computing’ is also useful because it distinguishes the kinds of things we have been doing online for a couple of decades from a totally new age of online software and processing power. 你也许会好奇，到底是什么原因让我们不得不采用了“云”这个说法！答案是，若干年来，我们在网络拓扑图上描述Internet时都是用云这个符号来表示。到了2008年前后，一个多样化的新服务开始出现，它允许通过Internet来访问计算资源，“云计算”的说法开始在一些团体组织中出现。这是否意味着我们可以称之为“Internet计算”呢？呵呵，也许吧。不管怎么说，在一些正式的场合，“云”这个说法作为在线计算资源的称呼比“整个的Internet”好听多了。“云计算”这个条款也应运而生，它区分了几十年来我们在线做的各种事和一个完全在线软件和处理能力的新时代。 Figure 1.1 illustrates the key differences between traditional and cloud computing. As shown in the top half of the figure, at present local software is installed and data is stored on most personal computers. Most computer users in organizations also access enterprise applications, data storage and processing power from a corporate data centre. The Internet may additionally be used and often relied upon. However, until now, for most people Internet usage has been confined to accessing information from websites and exchanging e-mails and file attachments. 例图1举例说明了传统计算模式和云计算模式之间关键的不同。在图例的上部分我们可以看到，软件和数据都安装、存放在本地计算机。大多数公司内部用户在获取企业应用、数据存储和计算能力时都与数据中心进行交互，Internet只是作为一个额外的补充途径。不管怎样，直到现在，很多人仍然习惯于把Internet局限在信息交流、收发邮件及其附件上。 The lower half of figure 1.1 shows the brave new world of cloud computing. Here the corporate data centre has been decommissioned. Also, software applications and data are no longer installed and stored on a user’s computing device. Rather, enterprise applications, personal applications, data storage and remote processing power are all accessed from the cloud. 例图1的下部分呈现了一个华丽的云计算时代，我们可以看到公司的数据中心被强制退役。同时，软件和数据都不再安装和存储在用户本地设备上。相反，企业应用、个人应用、数据存储和远程计算都从云端访问。 The scenarios shown in figure 1.1 indicate the two most extreme positions, with a hybrid model somewhere in between being most likely in the medium-term. Even so, the implications of ceasing to install all applications and store all data on personal computers or in a data centre will be very significant. Not least, as explored in chapter seven, there will be major ramifications for traditional software companies such as Microsoft. As discussed in chapter eight, the implications for those who currently work in company IT departments will also be just as great. 例图1的场景中描述了两种极端的状况，大部分时候（发展中期）很多地方还是接近于使用混合模式。即便如此，停止将所有应用程序的安装和数据的存储放在本地电脑或数据中心将具有非常重要的意义。尤其是，如同在第七章我们将看到，对于传统的软件公司（如微软）来说会有重大的影响。如同第八章论述那样，所有这些对于公司IT部门的业务也会有比较大的影响。   In practical terms, the cloud is made up loads of giant data centres – also known as ‘server farms’ – run by Google, Amazon, Microsoft, IBM, Apple and a host of other traditional and emerging computing giants. While the sorts of online services that can be offered from the cloud are quite varied, they can largely be classified under the two broad headings of ‘online software’ and ‘online hardware’. Lots of information and examples to demonstrate what this means in practice are provided in chapters three and four respectively. 在实际应用中，云是由巨型数据中心构成 – 通常称为“服务器农场”—运行在如Google、Amazon、Microsoft、IBM、Apple和其他传统或新兴的计算巨头主机上。虽然云可以提供的各种在线服务是多种多样的，但是他们在很大程度上可以区分为“在线软件”和“在线硬件”。在第三章和第四章将分别提供大量的信息和例子来证明这在实践中意味着什么。  ","title":"A Brief Guide to Cloud Computing -- 1"},{"content":"      我个人认为虚拟化或者是云计算的发展有很多瓶颈（个人意见）   第一：带宽，虚拟化桌面对带宽的要求非常高，（就目前国内网络带宽，和欧美国家比起来差的太远了，和韩国日本比，都差一大截，网络基础设施不到位，限制了虚拟化和云计算的发展。这里面只能说中国就那几家网络提供商，。。。。。。。。。。。。）   第二：虚拟化号称节能，省电，整合资源，节约成本，但是真的节约成本了吗？我接着过的几个公司，采购设备就花了上百万（都是顶级设备），加上软件等等，几百万一下就下去了，企业真正得到回报了吗？（我承认是可以在一定程度上减少占用机房空间，减少停机时间，按时真正从虚拟化上面得到的回报现在提现出来了吗？加上虚拟化技术不成熟，没有统一的技术和协议，各个厂家各家有各家的技术，互不兼容，无法得到向扩展等等很多问题）   第三：很多时候缺少规划，总体规划，导致虚拟机滥用，管理人员不明确，导致资源占用，真正的物理机崩溃或者挂机的时候，无法及时迁移，到时停机是很有可能的。导致损失惨重。          当然虚拟化是一个新兴的技术，上千人的企业如果整合下来，会在人力，物力，资源，成本都会成倍下降，在许多方面得到了好处，但是这个技术才刚刚开始，还有很多不确定因素，等虚拟化技术像交换路由设备那样有统一的协议，技术了，虚拟化才算是真正的成熟。当然不能因为这些就停止对虚拟化的探索。   下面是一些连接， http://virtualization.ctocio.com.cn/196/11776196.shtml http://www.vmware.com/cn/virtualization/cost-savings http://blog.sina.com.cn/s/blog_4a46c3960100c4ly.html http://www.jifang360.com/news/2011108/n864229833.html              ","title":"虚拟化瓶颈和前途"},{"content":"对于数据中心来说，在部署私有云的时候，如何能够实现快速有效的操作？对于那些技术主管和决策者来说，面对众多的私有云解决方案？究竟它们之间有什么差异呢？ 2011年，如果说行业内谈论最多、最被关注的一个词，非“云计算”莫属。云计算经过几年的酝酿和发展正在从理论走向实践。人们对于云计算正在从感性认识上升到理性认识，不是跟风去炒作一个概念，争辩云计算的定义，更多地关注于如何将云计算落地。 来自McAfee的安全专家最近公布了他们受博科和McAfee委托所做的网络调查。参与该调查的共有100位IT专业人士，而且他们大部分都是500人以上大型公司内的安全方案决策者，在这项调查中发现——IT部门现在正在向虚拟化转化，而且有近一般的受访者正在计划或者已经在部署私有云了。调查发现有62%的受访者正在计划或者已经开始着手于数据中心的升级工作，很多人之所以会这么做是因为他们增加了虚拟化的应用。另外，有29%的受访者表示他们正在扩大服务器虚拟化的规模，还有32%的受访者表示他们正在解决网络带宽和流量方面的问题。 那么对于数据中心来说，在部署私有云的时候，如何能够实现快速有效的操作？对于那些技术主管和决策者来说，面对众多的私有云解决方案？究竟它们之间有什么差异呢？我们下面就一起来看看。 IBM Power Cloud Box云计算平台解决方案 Power Cloud Box是针对中国市场定制只在中国市场销售而不进入全球市场的一个平台解决方案，重点是不需要彻底的改变数据中心，不需要去做太多底层的架构、应用和模型的改变，这对于较为保守和更追求稳定的、成熟的技术的中国用户来说，更具吸引力和实际意义。 Power Cloud Box由性能卓越的Power高性能服务器组成的系统资源池，通过业界领先的PowerVM虚拟化技术，结合云计算基础平台管理软件Systems Director VMControl(以及CloudStarter)，实现云计算智慧的服务提供方式，具有无限制的虚拟化能力、无间断的业务弹性、无与伦比的绿色特性、高效的自动化管理能力，可以通过IBM TSAM云计算管理平台，提供计费功能、提高服务质量管理以及用户自服务功能，是一整套工作负载优化的智慧系统。 对于云计算中的核心设备，IBM的在今年发布了，耗资8亿美元研发的架构——eX5服务器，这被IBM大中华区董事长钱大群称为“过去十年以来 IBM最重要的发布”。 作为智慧的系统重磅解决方案之一，IBM eX5 采用智能新一代至强处理器 7500，使 System x 服务器以超大内存、极高的存储 IOPs、灵活的分区及模块化扩展，全面优化工作负载，帮助用户以更少的投入开展更多工作，简化管理，经得起成本、安全性、扩展性等不同纬度的考验。 eX5体系架构包括了——4路服务器System x3850 X5、双路服务器System x3690 X5和刀片服务器BladeCenter HX5。这些服务器均给予英特尔X86架构，在性能与节能上取得了最佳的平衡，同时也符合IBM“智慧的系统”理念。 HP CloudStart私有云解决方案 CloudStart是HP帮助企业快速建立自己的私有云而推出的一个解决方案，它的初衷是通过工业标准服务器(包括客户已经部署的其他厂商的x86服务器)、存储与网络以及相应的管理软件组件，在30天内为客户建立自己的私有云平台。 就基础架构来说，CloudStart支持VMware vSphere与微软Hyper-V的虚拟化平台，而对于思杰公司的XenServer平台则视客户需求而定，主体上讲，则以VMware和微软的云计算解决方案为主(尤其是VMware)。 惠普高扩展性(ExSO)系列产品包括新的重量轻、超高效的和模块化的系统架构，覆盖了整个数据中心解决方案、服务和支持，旨在为使用Web 2.0、 云计算和高性能计算的企业节约大量费用和资源。 惠普高扩展性(ExSO)系列产品的核心是基于英特尔至强X86处理器的HP ProLiant SL服务器系列。该服务器系列使用了“无缝的模块化”系统架构。该架构可以用极为轻巧的导轨和托盘设计取代传统的底盘和机架外形。因此，客户可以在仅占用数据中心的一小部分空间的同时，实现资本、设施和运输成本的锐减。此外，其超高效的模块化设计能够使客户快捷地构建解决方案，满足超规模横向扩展工作量的要求。 戴尔VIS虚拟集成系统 戴尔推出自主研发的架构云整体解决方案，称之为虚拟集成系统（Virtual Integrated System，简称VIS）。VIS由三部分组成，戴尔VIS自助服务创建器、戴尔VIS工作负载导向器和戴尔VIS高级架构管理者。VIS高级架构管理者是基于Scalent的云虚拟化的基础管理平台，可以与vSphere、Hyper-V和Xen集成，完成P2V、V2V和虚拟机自动化操作如发现、配置、启动、创建和删除等。 戴尔VIS自助服务创建器是虚拟化用户的应用门户，用户通过简单易用的Creator门户，自己在规定权限内自动创建、配置所需的虚拟资源。戴尔VIS 工作负载导向器是监控、检测、、分析、修复、治理和回收虚拟化资源，保证虚拟化资源按需、按质交付，并跟踪虚拟化资源的使用状况，及时回收虚拟化资源，避免浪费。 戴尔的PowerEdge C系列服务器是戴尔面向标准的云计算环境、高密度数据中心设计的一条全新的产品线，主要的设计理念遵从戴尔汲取自其客户Google、Amazon、微软Zure在内的云计算数据中心的通用设计参考模型。 PowerEdge C5520在3U的机架中，集成了8到12个独立服务器节点，从服务器形态来说，更像是刀片服务器而非传统的机架服务器，虽然类似于此前 Supermicro的Twin架构或是单机架四服务器模块的架构，但是从设计理念上看，却与这两个设计完全不同，这种设计理念相信是参考了许多云计算高密度数据中心的设计。 由于是面向高密度的数据中心，PowerEdge C5520并不使用英特尔至强E7或至强5600处理器，其面向的市场是微型高密度服务器市场，因此英特尔刚刚推出的至强E3-1200系列是它的最好伴侣，高密度服务器市场目前除了云计算市场还包括CDN加速、Web 2.0应用、Web加入及其他的前端接入密集型应用。 曙光CloudBox云计算解决方案 曙光CloudBox由基础设施(服务器、存储设备、网络交换)、云计算操作系统、云计算管理软件(Cloudview)三部分组成。 众所周知，“云计算”技术以可访问性、可扩展性和弹性等基本特征来大大提高IT基础架构、软件和服务的经济性。而私有云平台则可以根据各业务系统对资源的需求变化，以更为优化的方式动态调整计算及存储资源来最终提高业务系统的响应能力。长期以来，曙光公司秉承着低功耗、高可管理、高计算能力、高吞吐能力、高安全性五大核心要素构建私有云系统。其在业界率先推出符合“云计算”时代“云端”特征的曙光 PHPC（PersonalHighPerformanceComputer，个人高性能计算机）系列产品，助推曙光CloudBox私有云计算平台的打造。 曙光天阔I950r-G服务器采用英特尔至强处理器，能稳定运行Windows、RedhatLinux、SuseLinux、Vmware等多种主流操作系统，是能适应核心级应用的新一代机架式服务器。它具有处理速度快、可用性强、易管理、可靠性高等特点，可满足最苛刻的工作负载需求，从而为使用者提供更强大的计算能力。 曙光I950r-G服务器是一款64bitx86架构的高性能服务器，它最大支持8颗IntelXeon7500/E7系列处理器，高达2TBDDR3内存扩展，可有效减少瓶颈，提高吞吐量和性能。专业化的高密度设计，使I950r-G在大规模科学计算和数据处理领域性能尤为突出，是大型企业、政府、军队、医药、科研、教育等机构的首选产品。同时，I950r-G增加了多项RAS特性，大幅提高可靠性，其稳定性亦可媲美小型机，为用户核心数据库的稳定使用保驾护航。 富士通EasyCloud云计算平台 EasyCloud是以富士通刀片服务器及存储系统为基础，在业界标准的虚拟化技术之上，采用由富士通云计算资源管理核心组件 ROR（Resource Orchestrator）组建的一个预先定义、预先测试验证、标准配置的云计算平台，从而帮助用户实现云计算环境的快速部署。 EasyCloud是基于富士通云基础架构解决方案的产品化，是基于一定配置和导向型的产品。作为首款云基础架构产品，它也采用了云计算资源管理的核心组件ROR。ROR支持VMware、Hypervisor、Microsoft Hyper-V等业界开放标准的虚拟化技术，并通过卷的方式对资源池进行管理，在多租户使用云技术平台资源的情况下，有效创建安全的运行环境。ROR支持 Windows、Linux等主流开放操作系统。 富士通公司打造CX1000的初衷是提供了占地小、低功耗、易管理，可以大规模水平扩展（scale-out）的基础设施。而CX1000正是富士通为云数据中心、大型企业或高性能数据中心所量身打造的服务器。 富士通CX1000可从几十个服务器节点轻松扩展至数千个服务器节点。它是将38个x86工业标准服务器节点封装在43U的机架中，虽然密度看上去不是很高，但周一平表示密度过高，冷却成本就高，反而导致服务器整体成本升高。在冷却方面，CX1000采用富士通创新的共享冷却技术Cool- Central。该技术用两个中央风扇取代成百上千的本机服务器风扇，整体功耗和相关散热成本显著降低。而集中的散热系统，又使得能够节约空间的机柜\"背对背\"排列成为可能。因此，与传统的机架式服务器水平扩展设施相比，CX1000最多能节省40%的数据中心空间。 随着云计算，特别是私有云的普及程度加快，各大厂商推出的这些解决方案有着一个共同的特点，都是集合硬件、软件和服务于一体的整体解决方案，这样的“私有云套餐”可以帮助企业用户实现“一站式”快速搭建云计算架构，甚至连私有云的使用培训都打包在解决方案之内，这些都可以降低企业用户部署云计算的难度，从而促进云计算走进企业内部。?","title":"正确选择服务器快速部署企业私有云"},{"content":"云计算的优势和劣势 　　任何一件事物都有利弊之分，云计算更不例外了，所以我们不能对它一概而论，只有充分的认识到这些优势和劣势之后才能更好的做出决断。也许你可以称它是一场比WEB 2.0还要巨大的革命；也许你也可以称它和当初AJAX一样，属概念炒作、新瓶装旧酒；不管如何，没有深入虎穴焉得虎子，那么下面我们就具体分析一下它到底有哪些优势和劣势。 优势或值得应用的方面： 1.能快速搭建我们的应用 　　云计算最大的好处就是能够快速搭建我们的企业应用，比如我们现在要开发一个网站，我们就不必担心是否需要花巨资购买硬件来集群，然后是巨额资金购买所需的系统软件而且这些也需要一些人员来组建和维护的，如果恰巧这是一个比较新且可能会带来盈利的商业点子，那搭建在云上就是一个非常不错的选择，这起码能比其他企业先行一步。 2.提供了更大的灵活性和扩展性 　　由于“云”的规模可以动态伸缩，这样就可以不用加大投资硬件设备的力度来满足应用和用户规模增长的需要，同时也无形起到了降低成本的作用。如果项目突然废弃，也没有什么大的损失，所以在这方面，云计算是相当灵活和易于扩展的。 3.可以解决一些特殊的场景 　　很多公司都是在特定的时期盈利较大，比如一些情人节和圣诞节的帮办公司，它们就是在这段时间的营业额比较大，在一年中的其他时候，几乎不能盈利，在这种情况下，如果按照传统的软件部署习惯，势必会造成一定的浪费。正如一个有大量波峰和波谷的企业一样，你可能就被迫要将更多的IT资源分配给峰值时期使用。这种情况下将峰值需求外包可能会节约更多成本。 4.缩短了产品的开发周期 　　不管你是使用哪个厂商的云计算产品.都有一个显著的特点，那就是能缩短产品的开发周期，一个想法到一个产品的开发周期因为云计算的到来而逐渐缩短，由此你可以看出里面蕴藏的巨大价值。云计算确实已经开始影响到我们做业务的方式。我们开始减少研究的循环周期，这对于我们来说非常重要而且必要。 5.节约了建立基础设施的成本 　　其实对于每个企业来说基础设施都是一笔开支比较大的费用，而且除了费用之外还需要专门的人力和物力的投入，在这个过程中又要保持快速的软硬件更新速度来适应市场的不断变化，所以云计算的出现无疑是值得考虑的一种解决方案。很多时候，我们也会时常注意到数据中心使用面积不够、应用软件超出基础架构的承受能力、软硬件更新太快等问题，云计算服务能帮助企业将资本转移到运营费用上，尤其是在生死攸关的关键时刻，所以在这方面来说，是值得考虑的。 劣势或需要改进的方面： 1.数据安全性 　　对数据安全性方面看，目前比较热的云计算厂商亚马逊、谷歌、IBM、微软、甲骨文、思科、惠普、Salesforce、VMware等都没有完全解决这个问题，所以很多企业了解到所用数据的类型和分类后，他们还是会决定通过内部监管来控制这些数据。而绝不会将具备竞争优势或包含用户敏感信息的应用软件放在公共云上，这个也是众多企业保持观望的一个原因。 2.厂商按流量收费有时会超出预算 　　虽然云厂商推出云产品时大力宣传随时获取，按需使用，随时扩展，按使用付费，但是在很大程度上价格都比较高，至少在目前还没有降低的趋势，这样对某些企业就会起到相反的效果，比如说像索尼娱乐这样的公司，他们就不考虑采用外部云服务来应对存储扩展能力的挑战。位于加利福尼亚的Culver City的高级系统工程师Nick Bali表示。每天索尼动画访问和产生的数据量都在4千兆到12千兆之间。Bali解释说\"如果放在云上进行数据读取的话，我们需要的网络带宽是非常庞大的，这样所需的成本过于巨大，甚至超过了购买存储本身的费用。目前索尼公司正在使用ParaScale的云存储软件评估私人存储云。所以从这点看出并不是云平台就一定便宜。 3.企业的自主权降低 　　其实关于企业自主权这个问题是一个比较争议的话题，也许这也是出于慎重的考虑，毕竟对自己公司的应用，大家都希望能完全管理和控制，原来的模式中，可以搭建自己的基础架构，每层应用都可以自定义的设置和管理；而换到云平台以后，企业不需要担心基础架构，也不需要担心诸如安全、容错等方面，好处是一个方面，但同时也让企业感到了担忧，毕竟现在熟悉的东西突然变成了一个黑盒。当然在这个时候众厂商也推出了内部云或者云套件来补救，但是这个问题也没得到根本解决。 4.规模大且成型的企业难以扩展 　　很多大型企业已经花了巨资来购买硬件并逐渐构建了自己的服务器集群（有的企业还大量购置了最新的刀片服务器），然后也购买了所需的系统软件和应用软件，而且也在此基础上搭建了基础平台架构。那么针对这样的企业来说，他们没有必要把自己的应用舍本求末的放在云上，所以这个也是很多企业不愿意移植的原因之一。 5.云计算本身还不太成熟 　　尽管众云计算厂商把云计算炒得大红大紫，每个厂商推出的云产品和云套件也是琳琅满目、层出不穷，但是他们都各自为战，没有有统一的平台和标准来规范。所以冷静下来想一想，到底它能不能为我们企业所用，在安全性、稳定性和企业本身因素方面必须尽管慎重的考虑才行，不要被眼前的广告所忽悠。你要知道每个企业要宣传自己的产品都会采取各种手段的，比如说到公共云不安全，厂商就开始推私有云；说到企业原有应用难以整合到云上，厂商马上就推出了混合云；但是在根本上云计算还有很长的路要走，很多地方都得优化。当然我们也愿意在这个过程中充当试金石，因为体验它之后，我们相信它必定会成为未来的趋势。","title":"云计算的优势和劣势"},{"content":"现在流行着这样一句话：云计算是比尔·盖茨最害怕听到的一个词 　　张愎 　　7月以来，电子连锁超市“好市多”(costco wholesale)华盛顿分店的销售经理发现来店里买个人电脑(pc)的顾客越来越少，给他们店内的总销量带来了不小影响。这正好印证了市场研究机构bpd发布的一份最新报告：美国第二季度pc零售量同比只增长了8%，远小于2009年第二季度21%的增长水平。今年7月，销量更是只增长了2.7%。 　　“好市多”这家全球销售量最大的电子产品量贩店无疑在暗示人们：美国的个人电脑消费已经不如从前。 　　pc杀手 　　对于pc需求的停滞，各方都在苦苦地寻求终极答案。 　　不能否认，消费者对苹果ipad的购买热情正蚕食着一部分迷你笔记本以及部分消费笔记本的销量，平板电脑的出现对pc市场造成了不小的冲击。 　　另外，一些经济学家认为经济形势也对pc消费形成了阻力。根据8月3日美国商务部的报告，今年失业率水平近历史最高水平，6月的消费支出超预期下滑。美国第二季度家庭消费支出仅增长1.6%，而在过去30年中的平均增长率是3%。全球经济仍在迷雾中前行之时，与经济环境密切相关的pc消费自然难有好转。 　　瑞士信贷银行纽约部的经济学家乔纳森·巴齐尔(jonathan basile)指出：“消费者对是否要购买pc仍然在谨慎地观望，只有在就业市场传来好消息时，才能促使他们考虑是否要进行消费。” 　　然而，以上所有的解释都忽略了一个非常重要的事实：pc的黄金时代已经过去，当初的时代弄潮儿如今已是英雄迟暮。就在pc未来仍然恍惚不定之时，云计算与虚拟化作为新的科技趋势早已隐秘在时代的浪潮之中，随时等待将pc取而代之。 　　“在整个计算机行业中，目前最热门的话题莫过于桌面虚拟化，”研究机构gartner的分析师mark margevicius说，“无论何时何地，人们都在谈论这个话题。” 　　现在流行着这样一句话，云计算是比尔·盖茨最害怕听到的一个词。 　　《商业周刊》在形容这股趋势时指出，计算机正在迈向“云”时代，《福布斯》杂志也认为这意味着硬件的消亡。《哈佛商业评论》的前主编尼古拉斯·卡尔(nicholas carr)出版过一本名为《下一场it的完美风暴》，他在书中指出：“pc正在给应用时代让路。” 　　云计算最早是由谷歌(google)提出的一个概念，所谓的“云”其实就是将所有的计算资源整合起来，形成一种资源池。这个资源池具备强大计算能力，然后这种计算能力通过互联网传输给每一个用户。随着“云”计算的概念逐渐成形，一种使得一台硬件充当多个服务器的虚拟化技术应运而生。在云计算与虚拟化的共同作用之下，计算能力不需要借助硬件设备就可以作为一种商品进行流通。 　　用户只需要使用一个靠屏幕、键盘与网络接头运作的虚拟电脑，再需缴纳一定的费用，就可以像水、电、煤气一样，随便取用这种计算能力，而不再需要花费高昂的费用购买最新的英特尔(intel)芯片和快速的硬盘驱动器来更新系统。 　　硬件生产商的艰难时日 　　面对pc零售业绩的停滞不前，硬件生产商的日子就变得艰难起来。 　　世界第二大pc生产商宏?今年6月份的销售量与去年同期相比大幅下滑38%，第一大显卡生产商与全球三大主板厂商之一的微星国际公司的销售量创纪录地下滑了15%。 　　从全球四大pc巨头惠普、戴尔、宏?、联想最新发布的季报来看，pc的利润增长不容乐观，均低于市场预期，其中以消费类笔记本表现最为低迷。 　　去年曾下调英特尔(intel)公司评级的robert w. baird & co。分析师杰拉(tristan gerra)认为：“据估算，9月份的订单情况更加糟糕。”瑞士银行也将亚洲pc生产商第三季度销售增长的预期从12%下调至6%。 　　对于软件制造商的未来，市场也是众说纷纭,雲端作業系統。在与苹果公司(apple)的市值大战之中，只专注于pc软件开发的微软(microsoft)遭遇了“滑铁卢”，从今年年初至今，其股票价格已经累计下跌了19%，明显跑输整个科技板块。虽然惠普的表现比微软还差，但其一半的跌幅是发生在前任首席执行官马克·赫德的丑闻被曝光之后。 　　相对于标准普尔500指数14倍的市盈率来说，仅10倍市盈率的微软目前被认为是处于超跌状态，而且普遍受到好评的windows 7也未能在其股价上得到反映。然而，一些分析人士指出，考虑到市场普遍预计个人电脑销售将会下降，加上科技行业的风雨变幻，微软的前途依然堪忧。 　　谷歌迈向巅峰 　　随着云计算与虚拟技术得到进一步的采用，无论是个人还是大型跨国企业无疑都希望相继“跨入云端”，朝新科技方向装备自己。 　　虚拟电脑的价格可能比传统电脑要贵许多，但维护费用相对于pc来说却低很多。它一方面能为工作和生活带来便利，那些采用该技术的公司it成本将大大降低，而且也将形成一个巨大的产业，为提供这项技术的公司带来巨大的财富。 　　《经济学家》杂志认为，云计算将催生出巨大的力量与财富。美林证券预测，这股冲击波将引发1600亿美元的科技海啸。那些在云计算和虚拟技术产业链上的公司的未来无可限量。 　　云计算的积极推动者谷歌目前已经成为了未来计算机发展的一个同义词。有华尔街分析人士指出，谷歌会像上个世纪90年代的微软一样，正慢慢地走向巅峰时代。 　　谷歌已在搜索引擎的争夺中取得完胜，为在线广告设定了标准，全球几十亿人每天都在使用它的名字。但现在，谷歌致力于云计算领域里的“公有云”建设。 　　基于云计算的应用程序,雲端運算，如google apps和zoho,虛擬機，这样的应用被称为公有云。公有云在互联网上运行，向任何使用信用卡支付的用户开放。这些基于web的应用程序在销售队伍自动化、客户服务、会计与收支管理等领域非常流行。 　　另外一些基于云计算的计算平台被称为私有云，如亚马逊的ec2(弹性计算云)。这些服务允许用户租借虚拟计算机进行开发或者运行自己的应用程序，按小时付费。用户还能够从谷歌、亚马逊和其他公司购买基于云计算的数据存储服务。 　　谷歌向企业提供一个应用产品的服务只收取每年50美元的服务费。目前包括ge和宝洁公司都与谷歌签订了应用服务的协议，谷歌应用服务包的费用只是传统的微软商务软件的十分之一。 　　研究机构gartner称，谷歌去年来自互联网应用服务的收入已经达到了51亿美元，预计到2011年，这项收入将会翻倍，达到115亿美元。 　　基于这个预测，投资网站the motley fool的合伙人大卫·加德纳(david gardner)认为，即使谷歌的股价已经高达450美元，但现在买入不算贵。 　　谁将主导未来 　　然而，谷歌这只是整个云计算产业链中的一个最突出的亮点，其他一些科技企业同样酝藏着投资机会。 　　目前，vmware公司和citrix systems公司正激烈争夺虚拟化领域的老大地位。 　　vmware是一个已有11年历史的虚拟化市场的开辟者，主要生产“虚拟pc”软件。虚拟机软件可以在一台电脑上模拟出来若干台pc，每台虚拟pc可以在同一时刻运行单独的操作系统,虛擬化，而互不干扰，每个操作系统都可以进行虚拟的分区、配置而不影响真实硬盘的数据，甚至可以将多台虚拟pc搭建成网络，形成局域网。 　　随着虚拟技术被企业快速采用，vmware 在数据中心建设中表现突出，对微软在该领域的独霸地位构成威胁。vmware目前市值已达170亿美元，但总收入仅19亿美元。目前，vmware的盈利中，有88%是来自于虚拟化软件，华尔街对其发展及利润率充满期望。 　　据科技股研究机构trefis的分析，vmware的私有云虚拟化的产品vcloud的需求正在增加，目前vmware的虚拟化服务软件已占据46%的市场份额，今后它的市场份额还将继续加大。 　　另一家虚拟化技术的强有力竞争者citrix systems发源自办公室计算机领域。目前市值约72亿美元，总收入为16亿美元,雲端運算架構。该公司二季报显示，每股盈余0.48美元，高出分析师预期的0.45美元。目前，该公司的营收年增长率为16.7%。 　　该公司总裁兼首席执行官马克·邓普顿(mark templeton)表示：“在未来6个月将会看到虚拟计算市场的大幅增长，我们将全面进入虚拟计算时代。”另据gartner预测，到2013年40%的企业桌面将会是虚拟桌面。 　　还有一些小企业也值得关注。位于美国加州的wyse科技公司在过去15年一直为呼叫中心这类工作场所制造电脑终端。4年前该公司开始将注意力转向虚拟化，将大量个人电脑置换成精简的键盘/屏幕组合，今年的销售额将增长40%，预计达2.5亿美元。wyse公司的首席执行官马纳(tarkan maner)认为，由于虚拟化的出现，“个人电脑被宣告死亡，个人电脑制造商将要调整商业模式以应对这个事实。”","title":"pc末日：盖茨最怕云计算"},{"content":"背景： 阅读新闻 F5开启云计算之门 一．概述 F5公司作为全球应用交付领域的领导者，首次提出了以应用交付为目标的云计算理念，通过网络虚拟化，服务器虚拟化，存储虚拟化，数据中心虚拟化等先进技术，确保了应用能够在云计算平台上被安全，快速，高可用的成功发布。 目前全球16大云计算服务提供商已经有14家都采用了F5的解决方案。F5希望能够凭借我们在云计算领域里的丰富经验帮助中国企业搭建出一个稳定可靠，高效，灵活，安全的云计算平台。 二．云计算架构 云计算根据基础设施和服务模式的不同划分为IAAS，PAAS，SAAS等三种类型。各种类型所采用的架构也有很大不同。对于一般企业来说，建议采用分步部署原则，首先从建设IAAS平台开始，在此基础上再逐步建设PAAS和SAAS平台。本文也将主要讨论IAAS平台的建设部署。 云计算架构最终会部署成为跨广域网的多数据中心架构。但在讨论最终整体云计算架构前，需要首先定义单个数据中心下的技术特点，以便满足未来多数据中心架构的技术要求，同时符合分步实施原则。 2.1 单数据中心云计算架构 单数据中心云计算架构中包括3个主要组成部分，分别是资源池，管理系统和表现层。资源池包括了云计算平台中必须包括的各种服务器，存储设备，网络设备和应用软件等。管理系统主要负责对资源池内的资源进行管理，包括负责资源管理，用户管理，任务管理，安全管理等。表现层负责将管理系统分配好的资源集中统一展现给最终用户。可以根据业务要求和最终用户访问压力的大小,与管理系统交互,动态调整对外服务的资源。 在这种架构下，用户的访问流程如下： 1．某业务部门需要发布某个业务到云计算平台里，首先对管理系统发送请求，通知管理系统发布业务需要多少带宽资源，硬件资源，软件资源等。 2．管理系统将业务部门的要求发送到资源池。 3．管理系统从资源池获得相应的资源。 4．管理系统通知表现层将获得的资源发布出去。 5．最终用户就通过表现层对资源进行访问。 6．表现层将用户请求发送给资源池中的资源。 7．资源池根据客户请求回应应用内容。 8．表现层将内容回给最终用户。 9．表现层将最终用户的流量，压力大小，实时地通知给管理系统。管理系统会根据用户的访问压力动态地从资源池里面获取更多或者更少的资源来发给最终用户，从而实现整个云计算平台的弹性的扩展，灵活的伸缩。 10.业务部门可以基于管理系统来获取到内部资源池里资源的使用效果、使用频率和用户的访问量等信息。 通过这种架构，云数据中心实现了以下特点： （1）按需使用 可以按部门需求进行资源配置，业务部门只需申请满足要求的CPU、内存和存储等资源，而且可以根据实际资源使用情况调整。 （2）弹性扩展 能够根据用户需求的变化对用户使用的资源进行扩展，扩展的过程中对上层应用是透明的，用户无需对此进行软件和操作系统的复杂配置。 （3）自动化管理 虚拟IT基础设施的管理由管理系统自动完成，管理系统具有系统监控、性能管理、服务质量管理和故障报警等能力。当物理或虚拟资源出现故障时，管理系统能够通过迁移等手段将虚拟机调度到正常的物理设备上运行，还能通过虚拟机备份等手段保证虚拟机服务的持续性。所有这些管理可以无需用户参与，根据策略自动完成。 （4）快速部署 传统的IT设施需要经过软硬件的购买、安装和配置等复杂的过程，而在此架构中建立虚拟IT资源只需简单提交资源需求，瞬间即可完成虚拟IT设施的建立，不但成本低，而且迅速便捷，大大缩短了TTM（Time To Market）。 2.2 多数据中心云计算架构 在多数据中心架构下，云计算同样建议包含3个组成部分，分别是全局表现层，全局管理系统和由多个云数据中心组成的数据中心资源池。同样全局管理系统负责对资源池内的资源也就是各个云数据中心进行调度管理，包括负责资源管理，用户管理，任务管理，安全管理等。全局表现层负责将全局管理系统分配好的资源集中统一展现给最终用户。可以根据业务要求和最终用户访问压力的大小,与管理系统交互,动态调整对外服务的资源。 在这种架构下，用户的访问流程如下： 1．某业务部门需要发布某个全国性业务到多数据中心的云计算平台里，首先对全局管理系统发送请求，通知全局管理系统发布业务需要多少带宽资源，硬件资源，软件资源以及这些资源如何分布在不同的数据中心等。 2．全局管理系统将业务部门的要求发送到各数据中心的子管理系统，再进一步获得数据中心内资源池的资源。 3．各个子管理系统将获得的资源情况反馈给全局管理系统。 4．全局管理系统通知全局表现层将获得的多数据中心资源以单一域名的方式发布出去。 5．最终用户对全局表现层上的域名发起DNS解析请求。 6．全局表现层与各个数据中心的子表现层设备通信，获得各个数据中心内的资源使用状况，同时要求各个子表现层设备对最终用户进行探测，来获得最终用户到各个数据中心的网络状况和响应时间等。 7．全局表现层根据各个数据中心的资源使用情况和用户的就近性原则，为用户解析一个最优的数据中心。 8．最终用户业务请求发送给这个数据中心内的子表现层设备,企業雲端運算，再进一步发送到数据中心资源池中的资源。 9．这个数据中心资源池的资源根据客户业务请求，回应应用内容给数据中心内的子表现层设备，再进一步回应给最终用户。 10.全局表现层将获取到的最终用户信息，包括地理位置，行为特征，响应速度等，实时地通知给管理系统。管理系统会根据这些信息动态对资源池中的资源进行调整，例如为北方用户分配更多的北方中心资源。为响应速度慢的窄带用户提供加速服务等，从而实现整个云计算平台的弹性的扩展，灵活的伸缩。 11.业务部门可以基于全局管理系统来获取到各个数据中心内部资源池里资源的使用效果、使用频率和用户的访问量等信息。 通过这种架构，云计算进一步实现了更多特点： (1)业务连续性 业务连续性可以解决数据中心的安全性和高可用性，保证在数据中心遭受灾难时可以有灾备中心继续提供数据应用服务，使各种业务应用保持正常运转。 (2) 用户智能调度 多数据中心为全国乃至全球用户提供服务，用户访问可以被智能的，基于就近性原则定位到性能最优，速度最快的数据中心，从而提高客户体验，提高整体云计算平台的使用效率。 (3) 弹性扩展 全局表现层和子表现层设备会将用户发送流量的多少等信息通知全局管理系统。如果发现一个数据中心已无法满足要求时，会由全局管理系统自动在其他数据中心分配相应的资源，然后通过全局表现层发布出去，从而实现数据中心的自动弹性扩展。 全局表现层将获取到的用户信息，包括地理位置，行为特征，响应速度等,雲端運算系統，实时地通知给管理系统。管理系统会根据这些信息，动态的对资源池中的资源进行调整，例如将南中心的虚机迁移到北中心，以满足北方用户的访问需要，从而实现整个云计算平台的资源的自动迁移和集中调度。 (4) 资源集中调度 物理（虚拟）服务器、网络和存储都被组织成资源池的形式，资源池根据上层应用的需求集中调度，统一管理，保证资源在全局范围内高效使用。 三．云计算演变步骤 3.1 传统数据中心转向云数据中心 现在很多企业已经在部署了数据中心，未来还有可能建设更多，更大的数据中心。如何能够把传统的数据中心建设成为动态的云数据中心呢？根据我们的经验，一般需要解决3个问题：1.资源的虚拟化。2.服务的高可用。3.自动化弹性扩展。 资源虚拟化 虚拟化是云计算中不可或缺的一部分。采用了虚拟化技术后，云内的资源才能灵活，动态的根据业务需要进行调整。虚拟化技术主要分为两大类，分别是可以将一台物理设备虚拟成多个虚拟设备的“一分多”技术；或者是将多个物理或虚拟设备整合到一起成为一个大的虚拟设备的“多合一”技术。那么如何将数据中心内的资源虚拟化呢?我们从传统的数据中心都会包含的存储资源，计算资源，网络资源分别阐述。 对于文件存储虚拟化，我们可以采用F5的ARX文件存储虚拟化解决方案。ARX可以部署在多个的文件存储前端，它会把后台的多个文件存储设备整合到一起，对外发布一个虚拟文件路径。前端的服务器的所有读写操作都发送到ARX设备，由ARX发送到后端具体的某台文件存储上,雲端運算伺服器。这样通过ARX就实现了对文件存储的虚拟化整合。可以在不中断业务的情况下，灵活的在ARX后端添加或减少文件存储设备。 对于服务器虚拟化，现在有很多成熟的解决方案可以实现“一分多”虚拟化，包括VMWARE,虛擬機器，HYPERV，XEN等。这些技术通过细分物理服务器资源的方式，保证物理服务器资源能够被高效的利用。但当业务的压力大到整台物理服务器都无法满足要求时，就需要将这些物理服务器或“一分多”后的虚拟服务器整合到一起，实现“多合一”的虚拟化，以提供更强大的业务服务能力。这恰恰是F5可以帮助用户解决的问题。F5可以通过在这些服务器的前端部署负载均衡设备，将服务器所发布的业务整合到一起，形成一台大的虚拟服务器，对外发布一个IP地址，然后根据服务器的负载状况智能的将流量分配给这些服务器，保证这些服务器资源可以被灵活的调度和扩展。 对于网络虚拟化，许多网络设备，包括防火墙，IPS，VPN等都已经支持自身的“一分多”虚拟化技术。同样，要将这些物理或虚拟的网络设备整合到一起，实现“多合一”的虚拟化，F5是最好的选择。通过在网络设备前端布署F5负载均衡设备，就可以把这些设备整合到一起，形成一台大的虚拟网络设备，对外发布一个IP地址，而实际流量是被智能的发送到后面多台物理或虚拟网络设备上，从而保证这些网络资源可以被灵活的调度和扩展。 同时F5设备自身也支持虚拟化，可以更灵活的与相应的资源配合。 服务的可用性 F5负载均衡的基本功能就是可以保证后台节点的高可用性。无论是网络设备也好，服务器设备也好，存储设备也好，如果任何一个节点出现了故障，F5都会发现，并不再把用户请求发送到故障的节点，从而保证节点的高可用性。 资源的自动化弹性扩展 所谓资源的自动化弹性扩展是指将IT资源可以根据业务需求或用户访问行为，自动化的扩展服务能力。自动化弹性扩展服务能够根据用户需求的变化对用户使用的资源进行扩展，扩展的过程中对上层应用是透明的，用户无需对此进行软件和操作系统的复杂配置。 我们通过F5与VMWARE共同配合实现的自动化扩展方案来了解方案细节。 在这个架构里，F5的负载均衡设备和VMWARE共同构建了一个前端服务器，应用服务器，文件存储组成的三层架构系统。前端服务器，应用服务器都使用VMWARE实现了虚拟化，F5分别部署在服务器和文件存储的前端对外发布资源。平时只有3台前端服务器和3台应用服务器对外提供服务。 当用户访问量增大时，6台虚拟机已经没有办法满足用户需求。此时F5作为表现层的设备，会把用户访问压力状况通知给管理软件VCENTER，VCENTER会根据F5反映的压力状况对虚拟服务器资源作调整，再开启6台虚拟机，并把新增的6台虚拟机的ip，端口等信息反馈给F5。F5再把这些新添加的虚拟机部署到对外发布的服务器组里去，此时就有12台虚拟机对外提供服务，整个系统的服务能力就增加了。系统由原来的6台虚拟机变成现在的12台虚拟机，整个的过程是完全自动化的。 同样，当用户访问量减少的时候，F5会把压力状况通知VCENTRE，VCENTER就会关闭一定数量的虚拟机，并通知F5在对外发布的服务器组中去掉这些关闭的虚拟机。系统就由12台虚拟机又变成了6台虚拟机对外服务，整个系统的服务能力就降低了。 通过这个案例可以看出，整个系统的服务能力可以自动化的随着用户访问压力的大小而调整，无需任何人工干预，真正实现了资源的自动化弹性扩展。 通过解决以上3个问题，传统的，固化的数据中心也就转变成了灵活，动态的云数据中心。 3.2 云数据中心转向云计算 在企业建设或转换了各个云数据中心后，接下来就需要将多个云数据中心聚合到一起，形成多数据中心的云计算平台。在这里一般需要解决4个问题：1.用户的调度。2.数据中心间的带宽瓶颈。3.数据中心的高可用性。4.数据中心的自动化弹性扩展和资源的自动迁移。 用户的调度 在多数据中心的情况下，某个用户应该访问哪个数据中心的业务才是最优的呢？只有用户访问了最优的数据中心资源，才能提升用户体验，并提升整个云计算平台的资源利用率。 从下图我们以某个业务为例，来看F5如何帮助企业解决用户调度问题。 在每个数据中心里部署F5的GTM和LTM设备。LTM对服务器提供负载均衡并对外发布服务ip地址。GTM提供对业务域名www.abc.com的解析服务，定义域名对应每个数据中心里的LTM上的业务ip地址。 1．最终用户要访问业务，发起对www.abc.com的dns解析请求。经过一系列dns重定向，client将dns请求发送到GTM1，查询www.abc.com对应的ip地址。 2．GTM1要求IDC1,虛擬系統，2，3里的LTM设备对client的ldns该发起探测，来判断用户到哪个IDC时间最短，路由跳数最少等。 3．各IDC里的LTM对client ldns发起探测，并把探测结果返回给GTM1。GTM1根据各LTM返回的数据判断IDC2距离用户访问速度最快。GTM1将LTM2上的业务ip地址解析给用户。 4．用户将业务数据请求发送到LTM2上的业务ip地址来，开始业务访问。 通过这种方式，用户的数据请求被定位到了速度最快的数据中心进行处理，从而提升了用户体验，并充分利用了云平台里的多中心资源。 数据中心间的带宽瓶颈 众所周知，在云计算的环境下，各数据中心间的数据传输量极为庞大。其中包括数据库的数据复制，虚机的迁移，应用系统的image备份等。这些庞大的数据传输都会对固网资源产生很大的压力，带宽成本也会激增。 F5可以通过在每个数据中心里部署WOM设备来加速数据中心间广域网的传输速度。在每对WOM设备间都会建立起广域网加速通道，在通道内传输的数据可以通过重复数据删除，压缩，TCP协议优化，7层QOS等技术来得到3-5倍的速度提升。 数据中心的高可用性 容灾是多数据中心环境下必须考虑的问题，稳定可靠的容灾技术可以解决数据中心的安全性和高可用性，保证在数据中心遭受灾难时可以有灾备中心继续提供数据应用服务，使各种业务应用保持正常运转。但容灾方案需要解决多方面问题，包括数据库复制，应用复制等一系列准备工作，而上文提到的广域网加速也为这些数据中心间的数据传输提供了方便之门，在企业准备好了数据级容灾后，F5可以为企业提供成熟可靠的业务级容灾方案。而且该方案与用户调度完美的结合到一起。 业务对外发布的域名为www.abc.com。业务主要部署在两个数据中心，分别是IDC1和 IDC2。 访问流程如下： 1.用户向全局表现层的F5 GTM设备发送dns解析请求，查询www.abc.com的ip地址。 2.GTM实时对每个数据中心的可用性作健康检查。 3.如果IDC2故障，F5 GTM可以自动或手动的修改GTM中的ip地址优先级，将IDC1的ip地址解析给用户。 4.用户的数据请求转而访问IDC1的LTM1 ip地址。 通过这种方式，F5保证了数据中心的高可用性。 自动化弹性扩展 数据中心的自动化弹性扩展包括两个方面。1.在某个数据中心自身的资源无法满足用户访问的情况下，全局表现层可以通知全局管理系统，将其它数据中心的资源加入进来，以满足用户访问需求。2.当某个数据中心的资源不适合为用户提供服务时，例如南中心资源不适合为大量的北方用户提供流媒体服务。这时，全局表现层可以通知全局管理系统，自动将南中心的虚拟资源迁移到北中心来为用户提供服务，从而实现资源的自动化迁移。 其具体流程如下： 1.数据中心自动扩展 在这个架构里，F5的GTM与LTM设备和VMWARE共同构建了多数据中心的环境。 当用户访问量增大时，一个数据中心已经没有办法满足用户需求。此时F5 GTM作为全局表现层的设备，会把用户访问压力状况通知给管理软件VCENTER，VCENTER会根据F5反映的压力状况对虚拟服务器资源作调整，将其它数据中心的更多的虚拟机ip地址和端口等信息反馈给F5。F5 GTM再把这些虚拟机部署到对外发布的域名里去，这样整个系统的服务能力就增加了，而且整个的过程是完全自动化的。 通过这个案例可以看出，整个系统的服务能力可以自动化的随着用户访问压力的大小而调整，无需任何人工干预，真正实现了资源的自动化弹性扩展。 2.数据中心间资源自动迁移 在这个案例里，企业有两个数据中心，原来的业务都通过vmware部署在site A，虚拟机通过F5 LTM提供应用交付，通过GTM对外发布域名。现在企业希望将业务自动迁移到site B，F5与vmware共同配合完成了这个壮举。 通过这种方式，F5与vmware共同配合实现了数据中心间的虚拟资源自动化迁移。 通过解决以上4个问题，企业逐步将多个云数据中心联系到一起，最终部署成为多数据中心的整体云平台。 总结 如果把云计算比作一间房子，F5就恰如房子的大门，可以智能，灵活，安全的把用户引导进云计算的广阔空间里。F5凭借灵活开放的系统架构和在应用交付领域里的多年成功经验，与众多云领域的友商配合，共同帮助企业建立起云计算的高楼大厦。 0 顶一下 收藏 推荐 打印 | 录入：冯颖聪 | 阅读： 次 云计算如何构建IT的共产主义 行业云：谁能打破中国云计算市场误区？相关新闻 云计算 本文评论 　　查看全部评论 (0) Digg排行 24云之初，本无奈 （云计算漫 22云计算原理 21刘鹏：网格计算像OSI，云计 102011年全球IT九大预测之云普 9云计算回归 6云计算困扰：探讨亟待解决的 6看云计算时代的web1800远程 6反对云计算，理由站得住脚吗 5云计算市场风起云涌 各厂家 5云计算揭秘：企业采用云服务热门评论","title":"F5开启云计算之门"},{"content":"背景： 阅读新闻 浅谈云计算与数据存储相关调查显示，业务数据存储是云计算应用最成熟的领域之一，云计算技术对业务数据存储将起到非常大积极影响，多家公司都证实了这一点。 专家指出，云计算平台的数据存储服务可以提供安全、可靠、高效易用的数据存储服务。并能够保证据高效的数据备份和恢复。 市场研究公司Forrester最近在一篇文章中解释说：“企业将业务数据存储迁移到云计算平台中，可以获得与传统自建方式同等的存储和服务资源,虛擬系統，但企业不需要在本地部署相关IT基础设施。” 分析人士表示，通过将数据存储系统托管到云计算供应商那里，企业可以获得多方面的益处。企业不仅可以避免固定资产采购，还可以根据实际需要定制个性化存储服务。并且，借助云计算技术灵活的特性，企业还可以获得更具弹性的存储解决方案。 在云数据存储方案中,虛擬機器，数据完整性保障、数据备份、应用程序等功能都可以通过服务的模式提供给用户。相比传统自建方案，由于服务提供商在专业资源和技能方面更具优势，通常可以提供质量更好的服务和系统运维支持,雲端運算系統。 随着企业业务的持续发展，产生的数据会不断增加。并且，现代企业的分支机构较多，分散存放的关键业务数据难以得到有效保护。同时，随着时间的推移，数据量会越来越多，海量数据的存储和备份将给企业存储系统带来巨大挑战。有效管理好关键业务数据已经成为存储产业中最热门话题之一，这在很大程度上促进了云数据存储的发展。 中小企业是云计算服务的主要受益者，同样云数据存储服务也吸引了众多中小企业的目光。专业人士分析称，云计算数据存储服务之所以能够得到众多中小企业青睐主要得益于以下四点,雲端運算伺服器。 一、 使用方便 云存储的使用相对便利，只要有互联网接入，用户就可以随时随地接入存储服务器。因为数据不再存放在本地，大大减轻了存储维护相关的工作负担。 二、 运维成本低 云存储系统的维护工作全部由服务提供商完成，用户几乎不需要做任何维护操作。相比传统方案，云存储使运营与维护成本完全由企业自身转移到了服务提供商那里。 三、 扩展灵活 云存储方案具有更大的灵活性，用户的系统扩展、升级更加方便。用户不必担心存储系统跟不上业务增长，用户可以随时扩展存储空间容量，并增加新的个性化功能,企業雲端運算。 四、 安全性高 在云存储方案中，由于基础设备都存储在云端，大大降低了火灾、洪水或者恶意数据删除等安全风险。云存储供应商们会提供更为安全的通信过程。例如在存储过程中使用SSL协议对需要存储的数据进行数据加密。 当然，任何一项技术都不可能做到完美，尤其是像云存储这样的新技术。基于云计算的存储服务会受到宽带、服务提供商能力、加密协议、多厂商平台互通等因素制约","title":"浅谈云计算与数据存储"},{"content":"windows Azure被认为是Windows NT之后的16年来微软最重要的产品，微软计划将80%的资源和研发力量投入到云计算项目中。这种俨然押上未来的豪赌，是IT业的新潮流迫使微软做出了妥协，还是微软主动寻求新的霸主地位而酝酿的云计算新变革？ 　　4月17日在拉斯维加斯举行的2012微软管理峰会(MMS)上，微软正式发布了System Center 2012，并透露即将发布的Windows Server 2012的消息，这是微软云计算领域的两个重磅产品，因为其私有云解决方案使用带Hyper-V的Windows Server与System Center构建而来。根据微软发布的白皮书，System Center 2012有三大优势，分别是可提供灵活高效的IT 基础架构、高可用的IT 服务水平(SLA)以及统一管理私有云和公共云环境。故而有媒体冠以“令对手颤抖”、“开启新纪元”的字眼来描述。 　　云计算代表未来，这种论述越来越为IT界所公认。短短几年间，云计算已经从飘渺的技术概念，蜕变为支撑企业业务创新发展的重要力量。而从最初面临云计算概念的巨大危机到以此为基础的转型契机，微软的战略让人拍案叫绝。目前微软的全球战略是完全致力于云计算，即云端战略。微软CEO鲍尔默曾公开宣布微软将“尽在云中”(All in Cloud)，这也可以被翻译为“全部押在云计算”——软件帝国的摆脱十年蹉跎的努力注定不会一帆风顺，但微软高瞻远瞩的“云+端”战略使其在未来的竞争中已经占有一席之地，而作为核心的云计算平台Windows Azure，堪称这场豪赌最核心的阵地。 　　华丽转身 　　很少有公司了解云计算给微软带来的威胁和机会。 　　早在五年前，《互联网周刊》就曾报道过“软件终结者”SalesForce的故事。时至今日，尽管SalesForce当年喊出的惊世骇俗的“终结软件”局面仍没有真正到来，但微软、SAP等软件巨头都开始向按需收费、提供更多服务的云计算低头。Salesforce也从最初那个租赁公寓里的小公司成长为市值150多亿美元，拥有9000多员工的云计算巨头，成为当前IT市场上风头最盛的云计算企业之一，并占据了CRM市场近50%的市场份额。它的成功让人们真正看到了云计算的“蓝图”，而其创始人Marc Benioff因十年前就预见到云计算的重大机遇，而被称作云计算的最早传道者——在云计算这个概念被谷歌正式提出前六年，Salesforce便建立了一种全新的软件模式，客户不必把钱花在昂贵的服务器和复杂的软件系统上，只需要每月支付一定的费用，便可从网上登陆软件程序，软件的管理由Salesforce全权负责，使用户的试用风险及购买成本都大大降低。而这个模式正式当前SaaS服务的雏形甚至被广泛认可的最终形态之一。 　　我们可能很难想象一家刚成立不久的小公司在创业之初就将竞争对手直指微软这样的巨头，并以“终结者”的角色不断向软件帝国叫嚣，但十多年来SalesForce一直是这么做的，原因就在于他们认为“找到了终结所有软件的方法。”而云计算时代的到来，更使SalesForce有了庞大的理论后台和尖端现实武器。 　　云计算的先行者是亚马逊，而概念提出和倡导者则是谷歌。在谷歌2006年开始陆续提出的云计算构想中，人们的客户端只要接入网络并且安装一个浏览器，就可以得到它所需要的应用程序和数据，因为所有的应用程序存在于云中。个人和企业用户不再需要操作系统，不再需要自建数据中心，无须去购买大量的服务器、存储和网络设备，甚至不需要IT运维人员。 　　对于谷歌，这样的云计算技术架构的建设升级贯穿了公司的整个发展历程和产品格局，是其对自身发展经验和技术积累的系统性总结基础上提出的先锋概念；然而对微软来说，这样的云计算更是成为了灭顶之灾，因为操作系统没有了，办公软件不需要购买了，微软将会从软件霸主地位跌落到一个普普通通的SaaS服务提供商——尽管由于其庞大的产品线和不俗的市场占有率，它将必然是一个顶级的提供商。 　　更关键的是，由于理论上更代表未来方向，自谷歌提出云计算概念以来，随着各大IT巨头的跟风和小企业的探路，一场风起“云”涌的技术革命在世界范围内涌起。面对这种不可阻挡的浪潮老牌软件帝国在这个时候表现出了足够的睿智：我们知道云计算是足够好的，但谷歌的云计算不是。在云计算的模式最终成熟之前，任何一方都有权利来解释它认为即将来临的云计算是什么样子。所以微软迅速的找到了“反谷歌联盟”——由于在这种模式下需要建设基础网络设施的只有有限的几个云计算服务提供商，那么思科、IBM(微博)、HP这些IT基础网络设备提供商的生意也会非常被动，它们需要在云计算框架下找到自己的空间。于是，“公有云”、“私有云”、“外部云”、“内部云”、“企业云”、“用户云”等概念一个接一个的提了出来，并因为其有现实的应用沿袭和先进理论基础而被广泛接受。 　　秉承这个思路，微软在云在2008年10月洛杉矶的专业开发者会议上，正式推出自己的云计算Windows Azure——这一产品涵盖了私有云、公共云，并囊括IaaS、PaaS和SaaS多重领域，且能与微软现有的多种业务和服务模式完美对接。其核心理念就是：你的文件存在于云中，但是它们以人们熟悉的文件和文件夹的方式存在于云中，且其内容的副本将镜像到本地存储中，这样你就能在各种设备端点实现访问和服务——软件你是要买的，系统还是重要的，但买完后你便可以再搭载系统的各种终端实现最便捷的应用，而后续的服务、数据和应用都由微软在云端帮你架设和维护。 　　在这个基础上，微软提出了“云+端”新愿景，向世人指出未来的互联网世界将会是“云+端”的组合，在这个以“云”为中心的世界里，人们可以便捷地使用各种终端设备访问云中的数据和应用，其中“端”包括传统PC，也包括手机、平板电脑和智能电视等，而这些终端上面的系统和软件，都可以由微软以及在它的平台上进行开发工作的广大同盟提供，且在微软提供的云端运行——听上去有点像苹果的策略，但相比太过封闭的苹果，微软的野心更大。对此微软CEO鲍尔默表示，微软将通过云计算“重新塑造”其软件王朝的每个部件，其的核心计算机操作系统已被改造成为“一款强大的云操作系统”，能够面向从台式机到手机的不同设备提供丰富的微软软件服务。 　　现在来看，面对可能被竞争对手用“云计算”彻底甩开的危局，微软依据自身既有优势，通过解构和重塑概念、拉拢战略同盟和迅速出击，并将之成功包装成自己系统平台、软件和应用等服务转型和更新的时尚外衣，成功在云计算领域站稳了一席之地——或许还没到放松的时候，但所有人都看到了软件帝国这一次从被动到主动、足以进入全球最顶级商学院课堂案例的一次华丽转身。 　　“微软的云计算” 　　尽管微软市值早已被苹果超越且被IBM逼近，尽管在浏览器、即时通信等诸多网络服务上败阵互联网新贵，但在面向未来的云计算面前，“微软的云计算”这样的标签不容业界忽视。从整个云计算目前的市场需求和研究框架看，涵盖了公有云和私有云、囊括了SaaS、PaaS和IaaS三大领域的微软，推出包括存储、计算、媒体服务等多种应用，已经具备了一线领跑能力。 　　Azure的底层是微软全球基础服务系统，由其遍布全球的第四代数据中心构成，Azure让Windows由PC延伸到“蓝天”上，云计算在微软80%的产品线中都会体现。SaaS方面，微软的云计算应用既有针对消费者的服务，也有针对企业的Microsoft Online Services服务。其中Windows Live 、Office Live、Live Messenger、Bing以及Xbox Live等在内的多种服务为人们耳熟能详，覆盖的领域也十分全面，而Office 365和SkyDrive则在云办公和云存储市场直接参与竞争。PaaS方面，微软则提供了一个运行在微软数据中心的Windows Azure Platform云计算平台，它包括一个云计算操作系统和一个为开发者提供的服务集合，也就是被誉为“三驾马车”的云计算服务的操作系统Windows Azure、云中的数据库SQL Azure和基于Web的开发服务Windows Azure platform AppFabric，其中后者可以把现有应用和服务与云平台的连接和互操作变得更为简单，这样开发人员可以把精力放在他们的应用逻辑上而不是在部署和管理云服务的基础架构上。 　　此外云计算是将分布式的计算资源根据需要进行动态地配置和供给，因此动态数据中心是云计算服务的底层核心。事实上用户在选择云服务时，会着重考虑供应商是否拥有大规模数据中心的运营经验和服务经验，然后才是考虑其是否掌握互联网应用服务、动态配置计算资源等与云计算相关的产品技术能力。微软在芝加哥、都柏林等构建和运营着几十个全球化的大型数据中心，是全球少有的几家最具实力IT企业之一，在IaaS方面提供数据存储、计算服务也颇具竞争力。 　　不过Google在云计算领域也是百花齐放，Google App Engine是其托管网络应用程序的平台，支持Java和Python语言。Google Cloud Storage、Google Drive甚至云打印以及Chrome OS都是其未来在云计算领域的布局。不能忽略的还有亚马逊和它的AWS，内容包括存储(S3)、计算能力(EC2)、消息传递(SQS)、数据集(SDB)等，近期备受关注的Instagram、Dropbox等公司都是ASW的受益者。 　　在云计算的应用层面布局上，微软则更重视很早之前就提出的“一云三屏”战略(电脑屏幕、手机屏幕和电视屏幕，通过互联网上的云空间进行连接)则紧紧围绕着“云+端”新远景，并迅速以此为中心推出多项重大产品革新：2010年10月，微软发布智能手机操作系统windows phone，并将在今年年底推出代号为Apollo的Windows Phone 8；2011年2月，微软称Windows 8将兼容平板电脑，并且开张了类似苹果的应用程序商店Marketplace；2011年9月，微软发布客厅终端kinect，并在美国市场大受好评。 　　困难重重 　　微软如果能够借力云计算实现突破从“诸神之战”中胜出，势必能够一扫颓势重回2000年的巅峰，我们已经看到，虽然是被动入局，但及时地转身和高度重视使微软在推出Windows Azure后迅速获得较大影响力。去年10月，从事技术性能服务的公司Compuware Corporation对25家云服务提供商全球性能做出测试报告及排名，报告显示，微软Windows Azure性能位列第一，谷歌App Engine及GoGrid分别排名第二、第三。然而微软仍难以乐观，在另外一些报告中，我们更多看到的是亚马逊、IBM甚至Saleforce等的身影，微软豪赌云计算的复兴大计仍面临诸多考验。 　　一方面，今年年底将正式发布的Windows 8能否如市场期待的那般，为微软带来“奇迹的复活效应”，将是考验微软的第一道坎。不仅因为Windows 8是微软多年来在操作系统领域的一次自我颠覆，更因为只有Windows 8才能更好的契合微软云计算蓝图，真正实现“云+端”的大战略。桌面系统毕竟是微软的大本营，Xbox的成功也使得微软在客厅终端的竞争中先胜一筹，最具挑战的无外乎移动终端的Windows Phone和平板电脑方面，这方面联姻诺基亚和AMD是微软迎头赶上的开始，真正的较量将在年底Windows Phone 8和支持平板设备的Windows 8发布后才开始。在三屏的竞争中，谷歌和苹果仍然是其最大对手，此外不能忽视的还有一直崇尚多端布局、一举超过诺基亚成为全球最大手机出货商的三星(微博)。 　　同时云计算领域的重大投入，使微软面临着利润率降低、与现有业务的冲突问题。微软2011财年的利润率降至22年来的最低点，预计还将进一步下滑。微软提供云计算服务，必须用自己的服务器支持软件，并通过互联网提供服务，这样客户存储和运行软件的成本就转移到微软头上。美国投资公司Sanford Bernstein分析师马克·莫德勒(Mark Moerdler)预计，云计算相关的成本占微软营收的15%至25%。他说，这比出售标准套装软件高出10%左右。或许我们也该关注，华尔街会不会给鲍尔默和微软足够的时间和信心？ 　　此外，在云计算时代微软依然面临着开源平台的巨大挑战。IBM、谷歌、红帽、英特尔等支持的Openstack开源云计算平台是一个现实的巨大威胁。Openstack通过与开源社区的广泛合作，取得了诸多厂商的支持，并赢得了许多开发者和客户——OpenStack的在打造云服务领域的地位就像Google的Android系统之于Andriod手机制造商。Windows的大客户亚马逊和Openstack的发起者Rackspace都表示：作为各自云平台上的访客操作系统，Linux(尤其是Ubuntu)将力压Windows。而且，云计算平台的竞争比拼的不是看谁成本更低和基础意义上的可扩展性，而是看谁为下一代云开发人员提供尽快高效工作所需的工具——而那些工具基本上都是开源工具。微软虽然将Hyper-V虚拟化技术等添加到了Openstack支持名单中，但显然微软自身的Windows Azure平台从骨子里还是封闭的。红帽软件执行副总裁Alex Pinchev称：开放性和可选择性是开源云计算产品在云时代的重要优势所在，微软锁定客户的策略使得其在云计算时代难具有竞争力。面对未来云操作系统，微软从系统标准的制定者到参与者，身份转变的同时如何争得更大蛋糕，要走的路还很长。也许拥抱开源是不错的选择？微软日益借助Hadoop、MongoDB等开源技术来增强Azure让我们看到了这种信号，不过要走的路还很长。 　　微软全球资深副总裁、亚太研发集团主席张亚勤(微博)曾表示，微软会把全球80%的资源都放到云计算，这意味着微软超过5万人的开发团队中有4万都会从事云计算方面的研究、开发和产品工作。是形势所逼还是高瞻远瞩？无论如何，微软若想在十年蹉跎后重回巅峰，云计算将是这条复兴之路的制高点。","title":"微软的云计算依旧迷雾重重"},{"content":"【编者按】本文作者Steve Durbin，信息安全论坛的全球副总裁，他所关注的主要领域包括新兴的安全威胁环境，网络安全，消费化以及外包云安全，先前曾是咨询公司Gartner的高级副总裁。 对于大多数企业来说，大数据已经成为左右战局的决定性力量，安全风险也随之更加凸显。企业已经搜集并存储了所有的数据，接下来他们该干些什么？他们如何对这些数据进行保护？而且最为重要的是，他们如何安全合法地利用这些数据？ 无论是从企业存储策略与环境来看，还是从数据与存储操作的角度来看，大数据带来的“管理风险”不仅日益突出，而且如果不能妥善解决，将肯定会造成“大数据就是大风险”的可怕后果。 从信息安全的角度来看，围绕大数据的问题主要集中在以下五个方面： 1.网络安全 随着线交易、在线对话、在线互动，在线数据越来越多，黑客们的犯罪动机也比以往任何时候都来得强烈。如今的黑客们组织性更强，更加专业，作案工具也是更加强大，作案手段更是层出不穷。相比于以往一次性数据泄露或者黑客攻击事件的小打小闹，现在数据一旦泄露，对整个企业可以说是一着不慎满盘皆输，不仅会导致声誉受损、造成巨大的经济损失，严重的还要承担法律责任。所以在大数据时代，网络的恢复能力以及防范策略可以说是至关重要。 2.云数据 目前来看，企业快速采用和实施诸如云服务等新技术还是存在不小的压力，因为它们可能带来无法预料的风险和造成意想不到的后果。而且，云端的大数据对于黑客们来说是个极具吸引力的获取信息的目标，所以这就对企业制定安全正确的云计算采购策略提出了更高的要求。 3.消费化 众所周知，数据的搜集、存储、访问、传输必不可少的需要借助移动设备，所以大数据时代的来临也带动了移动设备的猛增。随之而来的是BYOD（bring your own device）风潮的兴起，越来越多的员工带自己的移动设备进行办公。不可否认的是，BYOD确实为人们的工作带来了便利，而且也帮助企业节省很大一笔开支，但也给企业带来了更大的安全隐患。曾几何时，手持设备被当成黑客入侵内网的绝佳跳板，所以企业管理和确保员工个人设备的安全性也相应增加了难度。 4.互相联系的供应链 每个企业都是复杂的、全球化的、相互依存的供应链中的一部分，而供应链很可能就是最薄弱的环节。信息将供应链紧密地联系在一起，从简单的数据到商业机密再到知识产权，而信息的泄露可能导致名誉受损、经济损失、甚至是法律制裁。信息安全的重要性也就不言而喻了，它在协调企业之间承包和供应等业务关系扮演着举足轻重的角色。 5.隐私 随着产生、存储、分析的数据量越来越大，隐私问题在未来的几年也将愈加凸显。所以新的数据保护要求以及立法机构和监管部门的完善应当提上日程。 抛开以上提到的问题，数据聚合以及大数据分析就像是企业营销情报的宝库。基于用户过去的购买方式，情绪以及先前的个人偏好进行目标客户的定位，对市场营销者来说绝对是再合适不过了。但是那些出于商业利益考虑而迫切想要采用新技术的企业领导者会被建议先去了解法律和其他方面的限制，这些限制可能涉及多个司法机构；此外，他们应该实施一些隐私最佳实践，并将其设计成分析程序，增加透明度和实行问责制度，而且不应该忽视大数据对人们、对技术的影响。 很显然，保证数据输入以及大数据输出的安全性是个很艰巨的挑战，它不仅会影响到潜在的商业活动和机会，而且有着深远的法律内含。我们应该保持敏捷性并在问题出现前对监管规则作出适当的改变，而不是坐等问题的出现再亡羊补牢。 当然，一切都还处于初级阶段，而且目前也没有太多外在要求来强制企业保证信息的完整性。然而，企业每天处理的数据规模依然在保持增长，大数据分析使得商务决策越来越接近原生数据，信息的质量也变得愈加重要。如果同样复杂的分析可以运用到相关安全数据上面，那么大数据甚至可以用来改善信息安全。 虽然目前这些解决方案很难普及开来，但是他们正在和大数据分析一起用于防骗，网络安全检测，社会分析以及多通道实时监测等过个领域。 总的说来，大数据应该说是具有相当大的价值，但同时它又存在巨大的安全隐患，一旦落入非法分子手中，势必对企业和个人造成巨大的损失。套用一句话，世界是很公平的，收入与风险是成正比的。 Via Gigaom （Danice 供雷锋网专稿，转载请注明！)","title":"大数据是把双刃剑 机遇和风险并存"},{"content":"        最近一直在找工，博客都没怎么更新了，觉得也该总结和思考些东西了，于是便有了这篇文章。谈到面试题，其实它有很多种，有偏技术的（腾讯，淘宝问得多）；有偏算法，逻辑和数学的（微软，谷歌，百度，阿里云等问得多）。我喜欢后者，最近也做了很多这方面的题目，围观了很多关注算法和面试题的博客，比如（july童鞋）。对于很多精妙的题目，常常在想这些出题的童鞋是怎么想到的，因为这些题目确实能够很深入的考察出一个面试者的逻辑，算法和思维功底。本文章主要是总结自己在做这些面试题和了解相应解法的过程中思考的一些东西，感觉这些东西在很多题目中都出现过，非常值得抽象出来专门理解。 　　一 双指针遍历 　　所谓双指针，是利用两个指针对一个有序数组进行遍历，查找出符合要求的数据集合。相信大家都接触到了这种思维模式的解题方法，只是没有注意到罢了。下面举几个例子吧。 　　例1：给定一个数组a[n]，求数组中是否存在两个数的和等于给定值sum并输出？ 　　这个问题很常见，我当年在面试微软实习生的时候就被问到了此题，解决方法有很多种，这里我就不赘述，我讲的是用双指针遍历法的。首先数组不一定有序，对数组排序是必须的。那么便来到了这样一个场景：对有序数组如何遍历来求得符合要求的数据集合？双指针的解决方法如下：定义两个指针（i 和 j），分别指向数组头和尾，那么会出现如下三种情况： 如果a[i]+a[j] == sum，那么很显然，只要输出这两个数，并把指针i+1和j-1指向下一个数即可。（这里不输出重复的组合） 如果a[i]+a[j] > sum，说明当前遍历的数值偏大，所以可以把j-1以减小和的值，在继续比较。 如果a[i]+a[j] < sum，说明当前遍历的数值偏小，同样为了加大和可以把i+1。 总的时间复杂度取决于排序即O(nlogn)。 例2：这题来自编程之美2.21只考加法的面试题，原题大致意思是写一个程序，对于一个32位整数，输出它所有可能的连续自然数之和的算式，要求是这些连续自然数之和要等于原数。例如3 = 2+1; 9 = 4+5，9 = 2+3+4等。 这题有两种解法， 其中一种便是双指针法，还有一种比较巧妙，是我同学在面试阿里云计算的时候想到的，利用了数学方法，简单来说是求出一个公式来。这里只说双指针的解法。 这里需要一个转化，把求n中所有可能的连续自然数之和归约为在数组{1,2,3,...,n}中找所有连续子序列和等于n的问题。这里同样也是这样一个场景：对有序数组如何遍历来求得符合要求的数据集合？这时的双指针可以不是一头一尾了，而是两个都指向头部，这样可以以高效的顺序遍历我们要找的所有集合。初始设i=j=1，这里同样会出现三种情况：         sum[i,j] == sum， 直接输出i到j的值，并把i+1,j+1,因为只是i+1肯定是不等的，因为和小了，同样j+1只会使和变大，所以两个都要往前加（注意这里指针不用考虑减小，因为这在以前就考虑过了）         sum[i,j] < sum，说明偏小，那么提高j来使得和变大才有可能相等         sum[i,j] > sum，说明偏大，那么提高i来使得和变小才有可能相等 这样，代码就出来了： [cpp] view plaincopy <span style=\"margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; font-size:16px\">//计算连续和为n的所有子序列   void GetAnswer(int n)   {       int i=1;       int j=1;          while(i<=n/2 && j <= n)       {                      int sum = (j+i)*(j-i+1)/2;              if(sum == n)           {               for(int k=i; k <= j; k++)                   cout<<k<<\" \";               cout<<endl;               j++;               i++;           }           else if(sum < n)           {//sum[i..j]<n,只能提高j以增大sum               j++;           }           else//sum[i..j]>n,只能提高i以减小sum               i++;       }   }   <\/span>   这里的思想本质上与上面例题1是相同的，这也是我抽象出这种思维模型的原因，当遇到有序数组或者归约到有序数组时，利用双指针遍历的方法是求得我们需要的数据集合的一种相对比较高效的方法。 二 排除以减少解空间大小 相信这种方法大家都听过，但是实际使用的时候却时常忘了去考虑这种思维模式，我这里举的都是很巧妙的例子，也是我遇到的，感觉绝对值得把这种思考方法总结出来。  例1 此种解法很值得一说的题目来自编程之美2.3 寻找发帖水王，大致意思是：  某论坛有一个“水王”，经常发帖，据说该“水王”发帖数目超过了帖子总数的一半，那么如何在id发帖列表中快速的查找到这一“水王”？ 这道题非常好的体现了排除法的非凡效果，如果直接去求这个水王，方法也不少，例如按发帖数排序，但是这至少是O(nlogn)时间复杂度，实际上最好的算法却是尽可能的去减少解空间，把不可能的去除掉，留下的自然是要求的的解。对于这道题，就是每次去除两个不同id的发帖，由于默认水王发帖超过一半，那么去除任何两个不同id后仍然是超过一半的，why？可以这样想，开始满足的公式是 x>y/2,那么减去两个不同id后，最坏情况，这两个不同id中有一个是水王的id，则(x-1)/(y-2) > (y/2-1)/(y-2) > 1/2，即仍然是大于二分之一的， 所以可以不断的这样做直到最终剩下水王id为止。编程之美上给出了一个非常精妙的程序，这里不赘述。  相同的例子还有这里。 实际上这类思想的应用场景可以认为如果看到要求的东西占总体数量一半以上情况的时候，可以考虑排除法。当然还有其他情况，例如正面求解屡试不行的时候，也可以考虑这样的方法。 三 蓄水池抽样求概率模型 想起这个是因为多次碰到类似概率题要用到它，例如10月16号百度北京的笔试题中有它，然后同学面试阿里云被问到的题目中有它，我发现不仅仅是当不知道n多大的时候，即便有时候知道n多大，也可以使用这个模型，详细的关于模型的知识可以查看wiki也看以看我这篇文章。 我同学在面试阿里云的时候被问到这样一个概率的问题： 给你一个n个长度的链表，以及一个函数，这个函数50%的概率返回0,50%的概率则返回1，问如何用这些条件从这n个链表中随机的抽取k个节点。 利用蓄水池抽样可以有这样一个解法，首先，这个函数可以产生0和1，那么我们可以通过构造多个二进制位（调用多次这个函数）并只取其中某些情况来构造任意概率，例如假设我要构造1/4，那么我调用两次这个函数，如果出现00，我认为发生，如果不是则不发生；又假设要构造3/5,我调用三次这个函数，并假定3种出现为无效出现，例如000，001，010。如果出现这种则再次调用函数生成，同时我们指定某三种为出现，其余不出现，这样可以构造一个生成概率3/5的生成器。有了这个，我们利用蓄水池抽样思想，先指定前k个节点为所求，并把指针指向第k+1个节点，此时以k/(k+1)决定是否与前k个选定的节点替换，替换时随机选择，并以此类推直至结尾。最后剩余的节点即为所求。 总的来说，我觉得这三个思想都是经常可以利用的，有些问题没有见过这些思想是挺难在面试时当场想出来的，相反如果通过面试题提取出某些抽象可复用的思想，那么以后任何变形的面试题，都可以归约至这些解法从而解决，相信那个时候面试官一定会对你刮目相看。","title":"常见面试题思想方法整理"},{"content":"敏捷开发和敏捷测试这两年自从从国外引进后，在国内很火，很多人都在谈论。无论是项目延期，失败，质量低下等等，你总能听到分析的原因是：“看看，你没有敏捷了吧”。所以一下子敏捷成了包治百病的灵丹妙药。很多项目组公司开始学习敏捷，采用敏捷，转向敏捷。但是遗憾的是很多人尝试过后发现以前的问题并没有被敏捷所解决掉，反而带来了很多新的问题，于是也有人就得出结论：敏捷又是一个大忽悠。读了很多网上关于敏捷的辩论，我想起一个故事： 话说清朝的时候慈禧太后听说西方国家有个新的交通工具，汽车，它坐在舒服跑的很快。于是就叫人买了一辆回来。但是用的时候没有人会开，于是不得不把汽车用几根柱子绑起来做成了轿子，让几个人抬着。因为汽车太沉，几个轿夫步履蹒跚，走不了几步就得歇歇。结果以前半个时辰的路走了好几个时辰。而且到了后因为门很窄，汽车做的轿子过不去，她也不得不老远就下来自己走一段。慈禧太后很不高兴就得出结论： 汽车前期投入大，维护成本高。 没有轿子走的快。 很多地方汽车都不适用。 汽车是个大忽悠的东西，根本不管用。 那么我们现在对敏捷的认识是不是和慈禧对汽车的认识类似呢？是因为我们不会用敏捷呢，还是因为敏捷就是个忽悠？ 在国外通常一个概念出来之前已经有很多年的实践积累，然后为了大家交流方便或者提高普及度给其一个名字。所以是先有实践，再有概念。但是在国内正好相反，我们先把国外“先进“的概念引进来了而把产生概念的多年实践忽略掉了。但是概念又太虚不能当饭吃，最终还是需要具体东西和具体做法。所以不得不根据概念来设计出各种各样的做法来。这些做法听起来不错，非常符合概念，但是在项目中一使用就不灵了，旧的问题没有解决，新的问题一大堆。最终得出汽车是个大忽悠的结论。 敏捷和云计算是两个非常典型的例子。很多人为了敏捷，文档不要了，计划不要了，测试用例也不要了，认为几个人站在走廊里沟通沟通就把一切都搞定了，因为敏捷了嘛。但是问题并没有因为“敏捷“了而被解决掉，于是乎得出敏捷是个忽悠的结论。云计算也一样，很多人认为云计算就是数据中心，所以大家大兴土木建立数据中心。但是建完数据中心以后呢？没啥用处呀。那大家都在吹捧云计算，不就是个大忽悠吗。 殊不知，人家是因为业务需要很多年了已有数据中心，为了提高数据中心的使用率，开始对公众开放资源，所以才有了云计算。 先有概念再造实践的做法违背了事物发展规律，不仅解决不了现有问题，而且带来新的问题。敏捷是个好东西，在特定情况下。我们需要搞明白的是它要解决什么问题的？它是如何解决的。而不要在乎它叫什么名字或则防止生搬硬套。还有越是先进的东西对人和基础设施的要求越高。比如飞机再好，没有飞行员或则没有机场也没有用。高铁跑的越快对铁道的要求越高。 软件测试也是一样，做质量控制不是为了赶时髦。如果你的项目只做3个月就彻底结束了，而且就3－5个人，不会有人离开也不会有人进来，也不需要和其它任何项目打交道，或则你的产品在早期实验阶段，你可以不要文档，不要计划，不要记录bug，完全靠口头交流。否则的话： 不能没有文档：但是要减少不必要的文档，避免过于详细的文档，使用易于更新和维护的动态文档。 不能没有计划：距离现在越远计划越模糊，但是距离现在越近计划越详细。 不能没有纪律 与其在琢磨如何敏捷测试，不如一步一步把自动化做好，把持续集成做起来，创建更多的测试工具以提高测试效率，把质量反馈系统做起来，把dev提交代码前的质量检查做起来，把在产品中测试做起来， 把测试工程师的素质提高上去。 等到这些都建立起来了后，你发现自己其实已经很敏捷了。","title":"敏捷，是灵丹妙药还是又一个忽悠？"},{"content":"转型时代丛书 CDN技术详解 雷葆华 孙颖 王峰 陈晓益 著 ISBN978-7-121-16528-3 2012年4月出版 定价：69.00元 16开 408页 内 容 简 介 本书内容包括CDN技术的发展历程、关键技术、商业化服务现状，以及对未来的发展展望，对构成CDN系统的关键功能模块GSLB、SLB、Cache进行了重点讲解，除技术原理之外，还对实现这些功能模块所涉及的一些协议和开发工具进行了讲解，希望能帮助读者了解CDN这项技术，并对CDN系统的设计和开发有一些初步的体会。 本书适合从事互联网开发和运营工作的专业人士、电信运营服务从业人员，以及相关专业的高校学生。 名家推荐 CDN已经从为网站提供简单加速的增值服务逐步演变成互联网业务发展的必需品，从质量、效率、安全等各个方面为网站提供全面的保障。本书不仅从技术原理方面对CDN进行了详细的介绍，还从商业服务角度进行了剖析，是一本让网站运维和管理者都能从中获益的好书。 宗劼 蓝汛通讯技术有限责任公司 副总裁 CDN行业在中国曾是一个很专业的小圈子，圈里的人兴致盎然、交流充分，圈外的人却知之甚少。对整个行业来说，本书第一次如此细致地、完整地介绍了CDN的相关技术和市场状况，是一本很值得看的专业书籍。 刘洪涛 网宿科技股份有限公司 副总裁 互联网经过多年的发展，开始逐步向各个领域渗透和融合，渐渐成为人们生活不可缺少的重要组成部分。海量用户涌入互联网，导致海量的网络购物、游戏、视频等的需求，极大地推动了CDN技术的发展。CDN的研究，也成为科学技术领域的核心课题。本书不仅详尽介绍了CDN的历史、关键功能、相关技术，而且细致地分析了CDN的商业模式以及前沿技术趋势，对CDN的未来发展提出了一些前瞻性的观点和意见。本书非常适合CDN领域相关的同行阅读，也适合对CDN感兴趣的读者进行了解。 谢大雄 中兴通讯股份有限公司 执行副总裁 据预测，2013年，互联网承载的90%的流量都是实时视频，而这些视频流量都会被各种形式的CDN在网络中缓存，以此达到优化网络流量、提高用户体验的目的。因此，全球运营商都在积极开展CDN的建设和运营，驱动CDN融入到固网和移动网络的基础设施层面，构筑统一管理、智能调度、多协议加速、体验运营的完整CDN战略。衷心希望本书能加速CDN知识的普及和应用。 李三琦 华为技术有限公司 IT产品线CTO 推荐序 互联网已经成为今天的生活必需品，人们利用它获取信息和资讯、进行娱乐并相互沟通，在这背后有一个鲜为人知的幕后英雄—内容分发网络（CDN）。CDN架设在IP网络之上，是互联网世界里的智能传送网络，连接了我们和互联网上无数色彩缤纷的应用。 CDN的出现改变了互联网的生态面貌，促进了互联网的发展。在互联网商业化不久，由于缺乏必要的流量管理和疏通手段，骨干带宽被迅速消耗掉，IP网络流量秩序濒于失衡。为解决这一难题，麻省理工学院的一批顶级科学家提出了CDN解决方案，从此以后，CDN就成为互联网的基础设施，伴随着互联网的潮起潮落而发展。CDN将内容推到网络的边缘，为用户提供就近性的边缘服务，从而保证服务的质量和整个网络上的访问秩序，解决了困扰内容提供商的内容“集中与分散”的两难选择，极大缓解了内容传送瓶颈。CDN的发展促使整个互联网产业进一步分工合作，使网站和应用开发者们能够更关注于上层应用。 时间进入2009年，云计算和移动互联网时代到来，CDN在这一背景下重新引起了各方的关注，蓝汛和网宿公司的成功上市，标志着资本市场对CDN的认可。我们看到，在国外很多公司的云计算服务中，CDN成为一项标准配置，而移动互联网中应用的多样性更需要CDN的分发能力。传统的IP网络以传输中立、协议简单为信条，而互联网，特别是在移动互联网时代，应用的丰富性要求网络能力能够随着应用不断拓展。中国电信正致力于打造“智能管道”，而CDN技术是打造智能管道的一项关键技术，是电信运营商未来服务运营的重要竞争力。CDN与基础IP网络联系紧密，通过与各级网络之间的配合调度，在给用户提供优质服务的同时，也能降低骨干网的传输压力和峰谷差异。同时，基于CDN的海量信息感知能力，还能为业务开发者提供各种用户行为分析和预测数据，创造了新的商业模式。 中国电信从2002年开始进行CDN网络的建设，用于承载自营业务和对外服务。在这一过程中，我们经历了很多挫折，也积累了宝贵的经验。回顾这些年的工作，深感这一领域缺乏系统性的书籍和技术资料，使入门者的摸索过程显得更为困难。为帮助普及CDN的服务和应用概念，推动业界的技术沟通与交流，中国电信北京研究院组织从事CDN技术研究及相关专业技术的联合团队编写了本书，其中既有长期工作在CDN网络建设和服务一线，对现网运营支撑有丰富经验的工程师，又有互联网战略运营和业务的专家，还有部分从事云计算等信息技术领域研究的领军人才，这本书既是他们研究成果的智慧结晶，也是他们分享知识和经验的平台。相信他们的研究和心得会给广大读者带来思考、启迪和帮助。         赵慧玲 中国电信北京研究院副院长 2012年4月，北京 序言 CDN是互联网服务背后重要的支撑者，它伴随着互联网商业化的出现而出现，一直可以看做互联网的卖水人。国内CDN产业的出现和国外基本在同一时间，但与国外不同，国内CDN发展的第一次浪潮从2002年左右开始，当时正值ADSL宽带业务大发展（从64kb/s的拨号、128kb/s的ISDN升级到512kb/s的ADSL），各省和地市级的运营商为填充提速后的宽带，增强宽带的吸引力，纷纷开始提供流媒体服务，CDN作为流媒体系统的一个重要核心组成部分开始被运营商接受和部署，并逐步在国内市场普及。通过CDN的支撑，运营商们为用户提供了有服务质量保证的流媒体服务，有力地推动了宽带的发展，成为国内CDN发展第一个高潮的最主要的推动者。可以说，CDN为中国第一次带宽升级起到了重要的推动和支撑作用。 从2008年开始，3G牌照的发放和新一轮宽带提速的推进，为移动互联网和云计算时代的到来奠定了基础条件。在这一新的发展阶段，CDN作为互联网服务的重要技术保证方式和一种基础资源服务，再一次受到了整个业界的关注，ChinaCache和网宿公司的成功上市，也标志着资本市场对CDN的认可。但是，客观地说，从CDN服务的普及率、服务的附加值和产品的核心竞争力几方面看，我国的CDN产业与欧美和日韩等国相比仍有不小的差距，整个行业还属于粗放型的发展阶段。其中一个比较重要的原因是国内这方面的人才和技术积累比较少，相关的书籍、资料很少，特别是能够系统性地介绍CDN技术的书籍在国内仍是一个空白。为此，我组织我们的研发团队利用业余时间编写了这本书，希望能够帮助读者系统地了解CDN的基本原理和基础知识，掌握其中的一些关键技术，并对整个CDN产业的发展有一个比较全面的认识，通过书籍为推动这个产业的发展尽一份绵薄之力。 为更好地让读者理解，我们采用循序渐进的方式介绍相关知识。 第1章是引言，通过对CDN的基本概念、发展历史、作用和价值的介绍，让读者了解为什么需要CDN，它能做什么，对CDN形成一个初步的认识。 第2章是CDN技术概述，对CDN的系统架构进行整体阐述，同时通过对CDN不同服务类型的分类描述，让读者对CDN的技术框架有一个比较全面的了解。 第3章至第5章，从对静态网页加速技术的实现入手，分别对Web缓存、集群和负载均衡、全局负载均衡和内容路由技术这三大关键技术的技术原理、使用方法和实现实例进行介绍，使读者能够了解CDN技术的发展脉络，同时对CDN系统的部署从单台Cache缓存技术到集群的实现再到整个CDN系统的分布扩展有一个全面的认识。 第6章重点介绍流媒体CDN系统的实现，通过对比流媒体加速和网页加速的区别，阐述流媒体CDN的关键技术，在该章的最后以IPTVCDN服务系统为例，帮助读者理解相关内容。 第7章分别对动态网页加速技术和应用交付技术进行介绍。它们分别是Web 2.0网站加速和企业内部应用加速的关键技术。 第8章从商业应用价值角度对CDN的产业现状和商业价值进行分析。 第9章对CDN和云计算、P2P等其他相关技术的关系进行阐述，同时作为总结，对CDN的下一步发展进行了分析和展望，提出进一步的发展方向。 本书部分内容和案例来自于我们的实践经验和成果，同时本书的编写得到了中国电信集团北京研究院的支持，参考了大量业界的研究成果和相关技术材料，在此一并感谢。最后，由于成稿仓促，知识水平和认识的局限，书中难免有纰漏之处，请各位专家和读者不吝赐教。 雷葆华 中国电信北京研究院云计算团队总监 2012年4月，北京 致谢 我是在2003年开始接触和了解CDN的，后来长期负责中国电信CDN骨干网的技术方案制订、工程实施和网络规划等工作。回头看我对CDN的学习和认识过程，深感当时国内在这方面资料和信息的匮乏，我自己是通过两年多的研究、测试、工程设计和实施工作，在经过长期的实践摸索和经验总结之后，才开始对CDN技术有一个比较系统的理解和认识，通过进一步的研究和工作积累，才逐步形成了一套CDN技术体系和研究方法，并将CDN与其他领域的研究结合起来，取得了一些成绩。在这一过程中得到了很多人的帮助和支持，在此表示真诚的感谢。 首先，要感谢中国电信集团北京研究院的各级领导，没有院领导和部门的长期支持，就不会有系统深入地研究CDN技术的机会，也不会有今天的这些成绩。 其次，要感谢中国电信集团公司的相关领导对我们的理解和信任，对我们研究工作的大力支持和指导，使得我们的技术和业务研究成果能够在现网中得到检验和应用，积累了宝贵的经验。 另外，还要感谢业界的专家和合作伙伴的技术人员，他们无私地奉献了专业知识和经验，特别是在CDN技术研究初期，资料匮乏，通过与他们的沟通、交流，获得了很多知识。 同时，还要感谢电子工业出版社的领导、刘皎编辑以及为本书付出辛劳的出版社的朋友。 最后，要感谢我们的家人，本书的几位作者日常的科研工作和任务都很繁重，主要利用业余时间完成本书，没有家人的理解和支持，本书很难顺利付印。","title":"CDN技术详解"},{"content":"最近因为对PSV的应用程序开发，表示有兴趣，所以想学C#，但经过了解后，发现PSV的开放程度不如人意，虽然买了2本C#的书，感觉还是先放一下。WP8不给力，虽然C#可以做些小软件，还是比较开好云计算，所以决定放弃C#，投奔云计算阵营。OpenStack + Python + 数据库编程。这样比较符合我目前职业的发展。","title":"考虑了一下发展方向"},{"content":"概述 来自高德纳咨询公司 (Gartner) 的一位资深分析师将云计算称为 “炙手可热的话题”。任何一位稍微了解一点信息技术 (IT) 的人都会知道，云计算这个词在未来也会相当流行。实际上，据高德纳公司预测，到 2013 年，云计算市场规模将达到 1500 亿。美林证券公司 (Merrill Lynch) 也同样预测到 2013 年云计算市场规模将达到 1600 亿。 云计算受到如此热议的原因就是它能够存储资源、节约费用。通过将软件、存储、电子邮件等移到云中，组织能够只专注于这些服务所需的资源。存储空间、计算能力、内存和许可都不再处于闲置待用状态。只在需要时付费使用它即可。图 1 是一张来自 Wikimedia Commons 关于云计算概览图片。 图 1. 云计算概览 很多组织甚至希望利用云实现人员精简。通过将 IT 服务外包给云供应商，他们能够让 IT 员工专注于能推动业务发展的项目，而将支持服务交由云供应商负责。 如果谈到节约成本的可能性，人们似乎很难理解组织为什么不愿意把数据、软件和其他服务转移到云中。那是因为需要考虑承担的安全风险。根据大多数问卷调查的结果，安全性是 IT 负责人犹豫是否转向基于云解决方案的头号问题。LinkedIn 的最近一项调查表明，7,053 名受访者中 54% 的人表示，安全性是迁移到云时最大的担忧事项。 和所有 IT 服务一样，攻击者在云中也找到了安全漏洞。然而，随着更多的 IT 专业人士了解到这些漏洞以及解决方法，云也变得更加安全。实际上，根据 Mimecast 调查，57% 受访者回答，当初冒着风险进入云反而提升了安全。其中的大多数人认为，云计算是安全的，因为他们了解这些威胁并学会如何减轻它们。 本文大概介绍了云计算相关的一些常见安全风险，以及组织想要降低这些风险所需采取的步骤。 共享技术资源 云计算可分为四种部署模型，如 表 1 所示。 表 1. 云计算部署模型 在公共云和社区云模式中，以及混合云在某种程度上，很多不同的客户使用虚拟化共享资源。这样的计算平台也带来了以下潜在的缺点： 1.通过共享磁盘、虚拟交换机、虚拟局域网 (VLAN) 和共享的 I/O 或缓存在不同的虚拟机或虚拟机和主机之间的通信。 2.模拟硬件的通用驱动程序。 3.管理程序中的漏洞，允许在主机上执行任意代码，同时管理程序的特权会让攻击者控制所有的虚拟机和主机本身。 4.基于虚拟机的管理工具包允许修改对主机操作系统进行管理程序系统调用，来运行恶意代码。 5.一种称为虚拟机逃脱 的使用方式，虚拟机提供一个程序可通过共享资源限制访问主机。 6.拒绝服务攻击（DoS）运行在虚拟机上，可降低同一主机上其他运行中服务的性能。 防止这些缺点的第一个步骤是了解您所处的环境。如果根据法律、法规、标准或行业规定，数据或其他资源需要存放一个安全的环境中，那么您采取的方法需要将这些要求与使用的环境类型结合考虑。针对这种场景的最好的解决方案是使用私有云或混合云解决方案将敏感数据、事务和服务保存在私有部分，从而使组织可以更好地控制安全和访问。 下一步，需要对云供应商进行评估。讨论防护这些漏洞时需要采取哪些步骤，尤其是关于管理程序的方面。询问他们使用了什么虚拟化软件以及如何安排打补丁和升级。查看主机是否使用可信的平台模块，与管理程序建立可信关系来防止修改。 此外，还必须保证管理程序已进行配置，可检测过度资源消耗，以防止出现拒绝服务攻击。 数据丢失和泄漏 在 “数据泄露预防与云计算” 一文中，KPMG LLP 谈到，“一旦数据放到公共云上，即使组织部署数据泄露预防 (DLP) ，对于保护数据的机密性也没有任何帮助。而且，无论是软件即服务 (SaaS) 还是平台即服务 (PaaS) 交付模式，您的组织对数据的机密性都不能直接控制。” 参见 参考资料 中提供的完整文章。 当今世界，1996 出台的 Health Insurance Portability and Accountability Act (HIPAA) 和 Payment Card Industry Data Security Standard (PCI DSS) 都要求组织高度重视数据保护，那么如何才能防止云中数据泄露呢？ 采用市面上的数据泄露防护产品似乎是最好的解决方案。但是，这些产品是用来确保数据的完整性和可用性，而不是保护数据自身。此外，这些解决方案不可能部署在您无法控制基础架构的任何环境中。 相反，预防的重点是要加强保存和传输数据的系统。 首先，云供应商应该在处理数据时（在存储和传输时）采用高级加密功能。您还需要采取步骤确保您的组织和云服务供应商签订 SLA，清晰定义保护云中数据的角色和责任。作为协议的一部分，要确保云供应商将虚拟机上的数据清除以后在释放回资源池中。 为了保证您的组织符合 PCI DSS，还要确保 Web 应用程序防火墙配置正确，可防止基于 Web 应用程序遭受大量的攻击。在与任何 SaaS 供应商合作之前，您组织的 IT 部门要事先讨论什么级别的保护适合保护基于 Web 的软件。如果允许，您应该对您的公司使用的所有应用程序进行渗透测试。 最后，您可以在内部采取措施防止数据在云中泄露，但是谈到数据方面就会涉及到修改策略。担心数据泄露的组织应该有合适的策略来对数据分类，并提供如何处理不同级别数据的标准。简而言之，有些数据本来就不应该存储在云中。 实施安全的 API 为了让客户能与基于云的服务交互，供应商依靠应用程序编程接口 (API)。配置、管理、组装和监控均使用这些接口，所以云中提供的服务的基本安全依赖于这些 API 有多安全。 匿名访问或重复使用令牌或密码、明文身份验证或内容的传输、不灵活的访问控制或不当的授权均会造成严重的安全隐患。此外，客户的监控和记录能力有限，当涉及到付费资源的访问时，客户似乎总是受供应商的摆布。 最后，是由第三方公司提供的 API 的问题。虽然这些接口通常是为客户提供增值服务，但这些附加组件并非总是符合相同类型的审议和审查，从而增加了 API 的复杂性，并增加了安全风险。而且，第三方 API 可能需要组织能放弃使用凭证（有时他们并不知道）以通过 API 提供的凭证访问服务。 审查和分析云供应商的安全模型来确保已做好一切措施来保护 API 可大幅降低这些风险。 您的组织应该审议身份验证和访问控制，以确保传输已经加密。还需要审查依赖链，以确保在签订协议前了解每个 API 及其要求。 窃取 虽然大多数漏洞主要由云供应商负责，但是帐户或服务劫持的威胁则应当由供应商和客户共同承担。 虽然软件漏洞可以使攻击者从源头上获取帐户信息，但它却不是窃取用户凭据最常用的方法。更常见是，攻击者通过网络钓鱼攻击、窃听软件、恶意软件和欺诈来窃取用户的登录信息。因为人们经常在各种服务中重复使用用户名和密码，攻击者往往会发现，他们能以最小的代价劫持凭据。这可能是受害者在云供应商以外使用的另一个服务所造成的。当攻击者可以随意利用用户凭证时，他们就可能破坏存储在云中的数据的完整性和机密性。他们甚至可以使用这些相同的凭证对其他人进行攻击，从而严重损害组织的声誉。 除了要了解您的云服务供应商的安全政策，您的组织也应对基于云的活动进行主动监控，这样就可以监控未经授权的访问和活动。 使用惟一的登录凭据和较强的密码策略，也有助于防止来自共享用户信息的漏洞。双因素认证技术有助于进一步减轻这些类型的攻击。 内部威胁 组织在雇佣员工或允许他们访问某些信息时，通常要仔细筛选员工。至于云服务供应商，在他们在管理员工的流程和手续方面缺乏透明度。 将服务交给云供应商意味着您不知道谁能通过物理方式或虚拟方式访问您的组织资源。云供应商如何监管员工，或是如何分析及报告策略遵从性，客户毫不知情。 能够接触到敏感和财务数据对黑客罪犯和商业间谍有着很强的吸引力。在提供基于云服务的公司工作，可能让竞争对手通过云获得机密数据或进行完全的控制，而不冒任何风险。 首先，客户需要了解供应商采取哪些措施来检测和防止内部恶意攻击。关于信息安全和管理，您不仅要需要透明度，还且还应该知道安全违规的通知流程。如果时间范围或报告流程为不可接受，那么就应该寻找另一个供应商。 结束语 云计算提供了一些引人注目的机会，可以提高协作，实现远程和全球工作，并节约成本。尽管迁移到云会有风险，但这风险没有在内部托管服务的风险大。二者之间的主要的区别是，攻击者在新的领域内进行攻击。 如果您花点时间了解云中的漏洞以及如何防止攻击者利用它们，那么基于云的服务其实和您组织内部的局域网或广域网部署的任何服务一样安全。","title":"防止云中的漏洞和威胁"},{"content":"一年一度的Hadoop中国2011云计算大会，作为Hadoop in China社区的一次年度技术盛会，于12月2日至3日在北京成功举行。大会的亮点之一就是邀请了多位Apache软件基金会的专家，例如Apache软件基金会主席兼Apache Hadoop项目负责人Doug Cutting先生等。大会的第二天，记者参加的“Hadoop生态系统”分会场报告环节。Trend Micro的专家兼Apache Incubator Flume的提交者，从非结构化数据库的安全性角度作了一场题为“HBase Coprocessors and Security”的主题报告。 众所周知，大数据时代为类似HBase等非结构化数据库提供了诸多机会。HBase凭借其在海量数据的良好扩展性和高效的读写能力，吸引了更多公司的重视。然而，在众多机遇的背后，HBase也面临着很多挑战，比如构建和运维HBase集群是一个非常有挑战性的工作。而如何保证HBase的安全性自然就成了一个绕不开的话题，实际上，NoSQL存在的产品安全性不高的问题一直成为各路反对者的诟病。现在部署在云计算公有云的HBase集群也在日益增多，试想一下，如果没有访问控制，存储其中的数据可以被随意访问甚至执行删改等误操作，会造成很多潜在的风险，对企业而言，也是无法接受的。但是，如果所有事情都由管理员处理，沟通的代价就会很高，而且管理员不得不处理一些Application相关的工作，导致管理低效。因此，HBase的访问控制，就成为了一个很重要的需求。这次围绕HBase 安全性的演讲，让我们有理由相信HBase提供了足够的安全支持。 首先谈到的是HBase的新版本特性。作为最新版本，HBase 0.92马上要发布RC版了， 0.92支持最新的Hadoop版本0.20.205，该版本对于HBase有了很大的改进。具体表现在：Distributed WAL splitting策略，Coprocessor框架等等。 Distributed WAL splitting 所谓WAL(write-ahead logging)策略指的是Region servers每次将内存数据更新到磁盘之前都需要先写到一个log里，只有当写入成功后才通知客户端该操作成功了。之后，Region servers服务端就可以根据需要在内存中对数据进行随意批处理或者是聚合。WAL策略的工作流程如下：客户端发起数据修改动作，比如产生一个put()，delete()及increment()调用。每个修改操作都会被包装为一个KeyValue对象实例，然后通过RPC调用发送给对应regions的HRegionServer。一旦KeyValue实例到达，它们就会被发送到给定的行所对应的HRegion。数据就会被写入WAL，然后被存入相应的MemStore中。最终，当memstore达到一定大小后，或者过了特定时间段后，数据就会异步地持久化到文件系统中。在此期间数据都是保存在内存中的。WAL可以保证数据不会丢失，即使是在服务端完全失败的情况下。 　　 WAL是灾难发生时的救生索。与MySQL中的binary log类似，它会记录下针对数据的所有变更。如果服务器crash了，它就可以通过重放日志让一切恢复到服务器crash之前的那个状态。 而所谓的WAL splitting指的是在log中的修改操作可以被replay之前，把它们按照region分离出来的过程。读取日志然后按照每条记录所属的region分组。这些分好组的修改操作将会保存在目标region附近的一个文件中，用于后续的恢复。 WAL splitting的实现在几乎每个HBase版本中都有些不同：早期版本通过master上的单个进程读取文件。后来对它进行了优化改成了多线程的。0.92版本中，最终引入了分布式log splitting的概念，将实际的工作从master转移到了所有的region servers中。 Coprocessors Coprocessor Framework, 允许HBase 管理员在Region server中载入定制的代码。Coprocessor的机制可以理解为，server端添加了一些回调函数。coprocessors由3个部分组成： Coprocessor interface定义的回调函数如下： 1、preOpen, postOpen: Called before and after the region is reported as online to the master. 2、preFlush, postFlush: Called before and after the memstore is flushed into a new store file. 3、preCompact, postCompact: Called before and after compaction. 4、preSplit, postSplit: Called after the region is split. 5、preClose and postClose: Called before and after the region is reported as closed to the master. RegionObserver interface定义的回调函数如下： 1、　preGet, postGet: Called before and after a client makes a Get request. 2、　preExists, postExists: Called before and after the client tests for existence using a Get. 3、　prePut and postPut: Called before and after the client stores a value. 4、　preDelete and postDelete: Called before and after the client deletes a value. 5、　preScannerOpen postScannerOpen: Called before and after the client opens a new scanner. 6、　preScannerNext, postScannerNext: Called before and after the client asks for the next row on a scanner. 7、　preScannerClose, postScannerClose: Called before and after the client closes a scanner. 8、　preCheckAndPut, postCheckAndPut: Called before and after the client calls checkAndPut(). 9、　preCheckAndDelete, postCheckAndDelete: Called before and after the client calls checkAndDelete(). EndPoint可以让我们将执行代码逻辑动态进入Server端，并让其执行。 通过coprocessors，HBase将获得许多新的特性，比如：HBase access control，Column aggregate，Region level indexing，Table metacolumns，New filtering，HBase table， region access statistic，HLog extension。 在给出相应定义，原理等理论之后，分别从列式聚合，定制WAL行为，安全性三方面给出一些Use case。 HBase Observers HBase Observers类似关系数据库的触发器，提供了与HBase交互过程中的基于事件的回调函数。按类别分，HBase Observers分为RegionObserver，MasterObserver，WALObserver。 具体来说，RegionObserver在下列事件发生时被触发： 　　· CRUD(增删改查)或者DML操作 　　· 表数据的Get, Put, Scan等操作的Pre/post-hooks 回调 　　· 对客户端数据的响应结果的数据追加或替代 　　· 覆盖正常的请求处理 MasterObservers适用场景为DDL操作，元数据操作，集群管理等。WALObserver针对的是WAL的追加或还原。 值得一提的是，这些HBase Observers可以协同工作，形成一个完整的Observer链，如图： 　　 EndPoint 如果说HBase Observers类似关系数据库的触发器，那么HBase的EndPoint概念上则类似存储过程，提供了显式参数RPC函数调用。如图，客户端自定义接口，调用RPC方法。其中，HTable.coprocessorExec()调用返回列数的大小，而此调用又会跨越不同的Region Server，然后分割，并行执行，最后返回结果。 　　 访问控制器 访问控制器(AccessController)作为HBase的核心，主要负责访问控制列表(ACL)与权限管理。从ACL的角度看，AccessControllerProtocol提供RPC调用，更新与查询用户权限。而ZooKeeper作为监听器，通过集群同步ACL的变更。从权限管理的角度看，RegionObserver触发的对象为DML操作，而MasterObserver针对的是DDL操作。 作为一个具体例子，AccessControllerProtocol作为一个EndPoint，实现AccessControllerProtocol接口，代码如下： 　　 另一个例子，AccessController提供函数preGet通过RegionObserver与MasterObserver实现权限访问检查，代码如下： 　　 为更加便于理解，这里给出preGet()用例图。这里验证的是用户的credential，如果验证成功，则继续下一步操作，如果失败则抛出AccessDeniedException。 　　 Secure ZooKeeper ZooKeeper作为监听器，在HBase集群起到关键作用，具体表现在： 　　· Root catalog table location 　　· Region assignment 　　· Server \"liveness\" 　　· Synchronizes ACLs throughout cluster 　　· Synchronizes secret key rolling for token authentication 如前所述，ZooKeeper能监听ACL的变更，如图： 　　 我们可以看到，绿色的znode为public，一般来说，该作用域适用于客户端所需操作。红色的znode为private，通常为集群操作安全性要求较高的znode。 总之，安全性是企业应用绕不开的话题。HBase 0.92在安全性方面有非常大的改进，相信越来越多的公司会选择HBase。通过HBase读写数据的产品也会越来越多。","title":"直击Hadoop中国云计算大会:HBase安全性"},{"content":"今天终于见到了大牛Mark Shuttleworth，ubuntu的创始人，并且演示如何ubuntu os运行在安装android系统的手机上，在被一顿忽悠后，大开眼界！     Mark这次重点介绍了ubuntu 对云计算的支持，如何基于ubuntu迅速搭建云平台。","title":"ubuntu 交流会！"},{"content":"摘要： 在NoSQL领域，主要有三种主流的数据模型:Column-oriented(列式),Key-value,Document(文档)。但由于许多NoSQL数据库都以水平扩展著称，所以在CAP的选择上面，都倾向于坚持分区容忍性 关键词： NoSQLCAP数据模型 　　数据模型 　　传统的数据库在数据模型方面，主要是关系型，它的特色是对Join类操作和ACID事务的支持。在NoSQL领域，主要有三种主流的数据模型： 　　Column-oriented(列式) 　　列式也主要使用Table这样的模型，但是它并不支持类似Join这样多表的操作，它的主要特点是在存储数据时，主要围绕着“列(Column)”，而不是像传统的关系型数据库那样根据“行(Row)”进行存储，也就是说，属于同一列的数据会尽可能地存储在硬盘同一个页(Page)中，而不是将属于同一个行的数据存放在一起，这样做的好处是，对于很多类似数据仓库(Data Warehouse)的应用，虽然每次查询都会处理很多数据，但是每次所涉及的列并没有很多，这样如果使用列式数据库的话，将会节省大量I/O，并且大多数列式数据库都支持Column Family这个特性，通过这个特性能将多个Column并为一个小组，这样做好处是能将相似Column放在一起存储，这样能提高这些Column的存储和查询效率。总体而言，这种数据模型的优点是比较适合汇总(Aggregation)和数据仓库这类应用。. 　　Key-value 　　虽然Key-value这种模型和传统的关系型相比较简单，有点类似常见的HashTable，一个Key对应一个Value，但是其能提供非常快的查询速度、大的数据存放量和高并发操作，并非常适合通过主键对数据进行查询和修改等操作，虽然不支持复杂的操作，但是可以通过上层的开发来弥补这个缺陷。 　　Document(文档) 　　在结构上，Document和Key-value是非常相似的，也是一个Key对应一个Value，但是这个Value主要以JSON或者XML等格式的文档来进行存储，是有语义的，并且Document DB一般可以对Value来创建Secondary Index来方便上层的应用，而这点是普通Key-Value DB所无法支持的。 　　CAP理论 　　这个理论是由美国著名科学家，同时也是著名互联网企业Inktomi的创始人Eric Brewer在2000年PODC(Symposium on Principles of Distributed Computing)大会上提出的，后来Seth Gilbert 和 Nancy lynch两人也证明了CAP理论的正确性，虽然在后来近十年的时间很多人对CAP理论提出了很多异议，但是在NoSQL的世界中，它还是非常有参考价值的。它的意思是，一个分布式系统不能同时满足一致性，可用性和分区容错性这三个需求，最多只能同时满足两个。 　　1. 一致性(Consistency)：任何一个读操作总是能读取到之前完成的写操作结果，也就是在分布式环境中，多点的数据是一致的; 　　2. 可用性(Availability)：每一个操作总是能够在确定的时间内返回，也就是系统随时都是可用的。 　　3. 分区容忍性(Partition Tolerance)： 在出现网络分区(比如断网)的情况下，分离的系统也能正常运行。 　　由于一致性、可用性和分区容忍性这三方面只能选择两个，所以大多数NoSQL系统都会根据自己的设计理念来进行相应的选择，但由于许多NoSQL数据库都以水平扩展著称，所以在CAP的选择上面，都倾向于坚持分区容忍性，而放弃一致性或者可用性，它们的做法主要是通过消减关系型和事务相关的功能。","title":"云计算背后的秘密：NoSQL数据模型与CAP理论"},{"content":"编者按：本文原作者Lawrence Coburn，DoubleDutch公司CEO兼创始人，移动商业团队协作社交应用Pride开发者。 在企业社交这个新兴领域，最高速增长、最佳资本化和最高收益的莫过于即将被微软以12亿美元收购的企业社会化网络服务Yammer，该收购案让很多人感到吃惊的同时也说明了企业社交网站和应用的巨大商业价值和潜力。 而事实上，微软很早之前就看到了企业社交网络发展的趋势，为此它也推出过自己的企业社交应用SharePoint，但是SharePoint并没有获得成功，其部署过程很繁琐，且合作性和交互性太差，微软收购Yammer正好可以代替SharePoint这个发育不良的产品。 Yammer是2008年9月推出的一个企业社会化网络服务，其增长十分迅猛，从创业的从零开始到被微软以12亿美元收购，时间还不到四年（当然Instagram从创业到被Facebook收购才花了一年半时间），它还是代表了企业社交应用领域的巨大发展潜力。 也许“专业”是对Yammer的产品观的最好的形容，他们在早期进入企业社交商业化领域的时候的确是在进行着一场赌注，不过事实证明他们成功了，而且这些年来他们也一直没有偏离他们当初的目标，如果说Facebook的定位是大众群体，那么Yammer的定位则是企业群体，Yammer必须是企业级用户通过企业邮箱才可以注册。它锁定了一个细分领域——企业用户。从这种角度来看，Yammer是整体封闭，局部开放的，是针对不同企业而提供的个性化SNS平台，是一个“商业版的Facebook”。这些年来经过他们的努力，不少像Cisco、Groupon、Adobe、AMD、Intuit、福特以及壳牌等知名企业都已经成为了他们的注册用户。 Yammer的创新就在于分配领域，他们在所有人都开始转向免费增值模式的时候还在坚持自己的道路，并且使用经受了时间考验的“恐惧和控制”法来帮助企业CTO们在不同场景下的企业内部交流管理，Yammer有经验的丰富管理团队能帮助他们更容易的获得各种融资，而且一直能保证他们的高速发展。 对于Yammer来说，微软也许才是他们最好的分销渠道，不管是通过Sharepoint、微软商务管理解决方案、 Office365甚至是Windows操作系统，都能很好的让Yammer产品进一步扩大发展。 对于Yammer的高速发展来说，那么其它企业社交服务的前景在哪呢？ 很多大公司的在职人员都有不少缺陷，SAP、Oracle甚至Salesforce这些大公司都依赖于那些老的系统架构来协调管理企业内部员工之间的各项交流,他们并没有展示出具有社交性的企业内部交流系统。所以这些大公司一直在寻求一种完善的企业内部社交管理解决方案，他们甚至对这些提供企业社交解决方案的公司提供巨额资金支持，所以对于企业社交应用来说，你们的苦日子算是到头了，也许哪天你就会获得这些公司的注资或者收购。 不过从现在看来，企业社交应用最大的蓝海还是在移动领域。两年前，我甚至还无法想象企业管理者们会通过台式机进行企业协作管理。着眼于消费者领域的话，移动应用产生的作用将会是颠覆性的，未来的企业社交的使用会非常普遍，而目前互联网领域正处于一个大更迭时代，以云计算、移动化为特色的企业社交应用将在新的世界里大显身手。Facebook正在以自己的行动向华尔街证明它将会成为移动应用领域的佼佼者，但是如果连Facebook不能理解移动化(至少从盈利角度)的话,那么对于那些传统的学校式管理的企业就更难了，所以对于企业社交应用来说，移动领域的潜力是巨大的。 对于我从事的领域来说，企业还是一个令人兴奋的和未开发的巨大的科技市场，特别是在这些新兴的移动、社交和云计算领域。如果微软对Yammer的收购报告成真的话，Yammer是值得这么一大笔资金投入的。目前，在Yammer、Jive Software Inc(JIVE)、Spigot等企业社交服务的推动下，企业内部社交正在推动着社交化的进程，相信会有更多的企业社交服务进入这个领域，只要这些企业社交应用做得足够好，相信他们也会像Yammer一样成为企业社交界的第二个Instagram，企业社交应用的春天已经到来。 Via TNW （流云 供雷锋网专稿，转载请注明！)","title":"企业社交应用的春天已经来到"},{"content":"Google拥有全球最大的搜索引擎，以及Google Maps、Google Earth、Gmail、YouTube等大规模业务。这些应用的共性在于数据量极其庞大，且要面向全球用户提供实时服务，因而Google必须解决海量数据存储和快速处理的问题。在长期的探索和实践中，Google研发出了一种让多大百万台的廉价计算机协同工作的技术，即云计算技术。Google云计算平台是建立在大量服务器集群上的，Node是最基本的处理单元，其总体技术架构如图1-7所示。在Google云计算平台的技术架构中，除了少量负责特定管理功能的节点(如GFS master、Chubby和Scheduler等)，所有的节点都是同构的，即同时运行BigTable Server、GFS chunkserver和MapReduce Job等核心功能模块。 图1-7 Google云计算系统系统架构图 Google云计算拥有分布式文件系统GFS、海量数据并行处理“MapReduce”技术、分布式锁服务Chubby、大规模分布式系统监控技术Dapper、海量非结构化数据存储技术BigTable、MySQL Sharding以及数据中心优化等关键技术。Google公司还于2008年推出了Google App Engine（GAE），即一个基于云环境的开发和部署平台。它将Google的基础设施以云服务的形式提供给用户，通过GAE用户可以直接在Google的全球分布式基础设施上开发并部署应用程序，而不用购买和维护硬件设施。下面对GFS、Mapreduce、BigTable三大核心技术以及GAE Web开发平台做简要介绍。 u   数据存储技术——GFS 网页搜索业务需要海量的数据存储，同时还需要满足高可用性、高可靠性和经济性等要求。为此，Google开发了分布式文件系统(google file system)。GFS支持海量数据处理，高并发访问、硬件故障自动恢复，并实现了一次写入、多次读取的数据处理模式。 GFS由一个master和大量chunkserver构成，如图1-8所示。master存放文件系统的所有元数据，包括名字空间、存取控制、文件分块信息、文件块的位置信息等。为了保证数据的可靠性，GFS文件系统采用了冗余存储的方式。同时，为了保证数据的一致性，对于数据的所有修改需要在所有的备份上进行，并用版本号的方式来确保所有备份处于一致的状态。为避免大量读操作使master成为系统瓶颈，客户端不直接通过master读取数据，而是从master获取目标数据块的位置信息后，直接和chunkserver交互进行读操作。GFS的写操作将控制信号和数据流分开，即客户端在获取master的写授权后，将数据传输给所有的数据副本，在所有的数据副本都收到修改的数据后，客户端才发出写请求控制信号，在所有的数据副本更新完数据后，由主副本向客户端发出写操作完成控制信号。通过服务器端和客户端的联合设计，GFS对应用支持达到了性能与可用性的最优化。   图1-8 GFS系统架构 u  数据管理技术——BigTable 由于Google的许多应用需要管理大量的结构化以及半结构化数据，需要对海量数据进行存储、处理与分析，且数据的读操作频率远大于数据的更新频率等，为此Google开发了弱一致性要求的大规模数据库系统——BigTable。BigTable针对数据读操作进行了优化，采用基于列存储的分布式数据管理模式以提高数据读取效率。BigTable的基本元素是行、列、记录板和时间戳，如图1-9所示。 图1-9 BigTable基本元素 BigTable中的数据项按照行关键字的字典序排列，每行动态地划分到Tablet中，每个服务器节点Tablet Server负责管理大约100个记录板。时间戳是一个64位的整数，表示数据的不同版本。列簇是若干列的集合，BigTable中的存取权限控制在列簇的粒度进行。BigTable系统依赖于集群系统的底层结构，一个是分布式的集群任务调度器，一个是GFS文件系统，另一个是分布式锁服务Chubby，如图1-10所示。Chubby是一个非常健壮的粗粒度锁，BigTable使用Chubby来保存Root Tablet的指针，并使用一台服务器作为主服务器，用来保存和操作元数据。当客户端读取数据时，用户首先从Chubby Server中获得Root Tablet的位置信息，并从中读取相应的元数据表Metadata Tablet的位置信息，接着从Metadata Tablet中读取包含目标数据位置信息的User Table的位置信息，然后从该User Table中读取目标数据的位置信息项。BigTable的主服务器除了管理元数据之外，还负责对Tablet Server进行远程管理与负载调配。客户端通过编程接口与主服务器进行控制通信以获得元数据，与Tablet Server进行数据通信，而具体的读写请求则由Tablet Server负责处理。BigTable是客户端和服务器端的联合设计，使得性能能够最大程度地符合应用的需求。 图1-10 BigTable的存储服务体系结构 u  编程模型——MapReduce Google构造了MapReduce编程框架来支持并行计算，应用程序编写人员只需将精力放在应用程序本身，关于如何通过分布式的集群来支持并行计算，包括可靠性和可扩展性，则交由平台来处理，从而保证了后台复杂的并行执行和任务调度向用户和编程人员透明。 MapReduce是一种处理和产生大规模数据集的编程模型，同时也是一种高效的任务调度模型，它通过“Map(映射)”和“Reduce(化简)”这样两个简单的概念来构成运算基本单元，程序员在Map函数中指定对各分块数据的处理过程，在Reduce函数中指定如何对分块数据处理的中间结果进行归约，就能完成分布式的并行程序开发。当在集群上运行Map-Reduce程序时，程序员不需要关心如何将输入的数据分块、分配和调度，同时系统还将处理集群内节点失败以及节点间通信的管理等。图1-11给出了一个MapReduce程序的具体执行过程。 图1-11 MapReduce程序的具体执行过程 MapReduce模型具有很强的容错性，当worker节点出现错误时，只需要将该worker节点屏蔽在系统外等待修复，并将该worker上执行的程序迁移到其他worker上重新执行，同时将该迁移信息通过master发送给需要该节点处理结果的节点。MapReduce使用检查点的方式来处理master出错失败的问题，当master出现错误时，可以根据最近的一个检查点重新选择一个节点作为master并由此检查点位置继续运行。 u  Google App Engine Google App Engine是一个PasS平台，它可以让开发人员在Google的基础架构上开发、部署和运行网络应用程序。在GAE上构建和维护应用程序将变得简单，并且应用可以根据访问量和数据存储需求的增长轻松地进行扩展。 GAE的整体架构如图1-12所示，它主要由应用运行时环境（App Engine Runtime）、沙盒（Security Sandbox）、Google账户、App Engine服务、数据库等组件构成。应用运行时环境提供了对应用的基本支持，使应用可以在GAE上正常运行，目前支持Python和Java语言。沙盒（即安全运行环境），可以保证每个应用程序能够安全地隔离运行。GAE还为开发者提供了一个DataStore服务，它是一个分布式存储数据库，可以随着应用规模的增长自动扩展。AppEngine服务则为用户提供了网页抓取、图像API、邮件API、MemcacheAPI、用户API（Google账户）、数据库API等基本功能，极大地降低了应用开发的难度。 图1-12 Google App Engine 整体架构","title":"Google云计算架构剖析"},{"content":"各位代表借这个机会跟大家交流一下我国银行信息化关注的问题。金融是现代经济的核心，银行业金融机构的业务开展高度依赖于信息技术的应用，金融信息化已经成为我国金融领域最基本的生存环境，推动着银行的改革创新和服务水平的迅速提高，没有金融信息化就没有现代金融服务。当前我国银行金融机构的信息化建设取得显著进展，进一步对银行的改革与创新提高金融服务质量和防范化解金融服务风险做了基础性工作，受到社会高度关注和肯定，面对银行的发展，我国热点和问题是什么呢? 　　第一，网上银行发展迅速，成为重要的金融服务产品。第二，移动手机银行支付是重要的服务创新，发展迅速。第三，云计算将加快银行信息化中应用。 　　网上银行是互联网银行业务上重要应用，是当今金融创新重要内容，也是银行业竞争的主要服务领域之一。2009年我国网上银行，电话银行，移动银行支付业务合计55.67亿笔，金额是357.45万亿元人民币，其中网上银行业务居主体地位，共计44.83万笔，同比增加91.21%，分别占电子支付业务量85.91和89.21。当前我国电子商务发展很快，对银行金融机构的网上支付能力提出很高的要求，这对银行既是挑战也是发展机遇，网上银行业务的发展和银行卡业务直接相关，银行卡业务进一步成为银行的基础性产品，因此网上银行，银行卡业务关系大小银行的生存和发展，引起银行业高度重视，人民银行和相关部门进一步支持网上银行业务。人民银行开通了网上平台，网上银行使银行的核心业务不可避免的与以客户服务的互联网连接在一起，在为客户提供空间方便快捷的金融服务同时，也产生新的技术风险和金融风险，互联网上新的多元化的安全危机手段和途径不断出现，到目前为止还没有有效的技术手段事先防范病毒、黑客等作案发生，网上银行的安全性成了决定成败的关键。过去一段时间出现的网上银行的欺诈、盗窃资金的犯罪案件，包括前一段时间个别银行网银出现动态令牌欺诈，他通过非信和钓鱼网站，引起银行金融机构的高度重视。高度方便的互联网应用于信息安全性和隐私性永远是矛盾，不能幻想一劳永逸的彻底解决，全世界的银行业都面临这个问题。过去很多年里面遇到很多情况，国务院有关部门都问到我们了，到底我们国家银行业，银行尤其是我们国家互联网银行，网上银行到底安全不安全。从1995年网上银行诞生以来，美国等发达国家的主要商业银行都一直在致力于解决网上银行的信息安全问题。我国的银行金融机构在这方面做了大量的有特色的工作，包括数字证书，U盾等应用，构建了网上银行安全保障平台，促进我国网上银行迅速发展，如何在我国网上银行的如此众多的客户中采取更加有效、方便，经济合理的信息安全防范手段，将是我国银行金融机构长期面临管理的技术挑战。在座IT厂商有志于从事这方面的工作是有很大的市场需求，现在有不少单位做这方面的工作了，我们接触很多了。 　　第二，移动银行，也就是手机银行支付是重要的创新，发展很迅速。随着我国经济的发展，人民生活水平的提高，对银行支付服务提出了越来越高的要求，传统的方式已经不适应市场对电子支付的要求，其中一个重要的趋势，就是移动支付与手机银行的发展有巨大的市场潜力。手机通信是我国发展最快的通信领域，其用户超过8.6亿，最新资料超过十个亿了，远远超过固定电话装机数，这无可替代的方便性，使之不可避免迅速用于金融服务。我认为手机银行和移动支付是不同的两个概念，在座的银行金融机构同志知道，移动支付或者手机支付带有电子钱包和预付卡的服务内涵，主要用于存的支付业务，而我们讲的移动银行或者手机银行是银行金融服务，不仅包含了上述的业务，而且还有银行转帐，信贷、理财等等许多金融服务。同时移动的概念也不仅仅是手机，还包含了相关的移动智能终端，比如说苹果的iPad，他现在不是手机，也都有支付的功能，我们移动支付或者移动概念更加大了。 　　据有关资料介绍，2010年全球移动支付市场总计高达1700亿美元到2014年将增加到6300亿美元，到2013年底电子商务交易的12.5%都将是通过移动交易，通过移动支付来完成。手机银行业务的发展受到了银行的高度重视，手机支付同时受到移动通信，银行卡，网络公司，第三方服务机构等高度重视。据有关资料介绍截止到2009年底手机银行克服已经达到3000万户以上，年交易金额超过2000亿元，去年2010年我国手机银行比例为5.3%，比2009年增加1.5%，2010年7月手机银行用户占了36%，2011年2月份进一步增加了，手机银行必将成为银行金融服务创新最重要的产品之一，相关的金融监管部门也高度重视，积极支持推动移动手机银行的发展。 　　我们前一段时间做了一些调研，据有关商业银行反映，手机银行有更广阔的市场空间，不同于传统的银行卡和网上银行，银行卡和网上银行是在城市具有较高层次文化人群为主的，网上银行银行卡是城市发展，农村比较少了，网上银行用计算机，也是以城市，而且城市里面文化比较高的，包括一些年轻白领，手机银行之外还受到了经济较发达的农村远海渔民，远离金融服务机构人们的欢迎，反映咱们国家福建渔场，舟山渔场的渔民非常欢迎手机支付。我们认为加强三农服务一直是党中央、国务院的支持，我们发展存在二元化的国情，解决起来难度很大。伴随着市场经济的发展，三农迫切需要金融服务，我国移动通信的高速发展，广大的农村、山区、牧场、渔场基本上通过手机，可能越南那边都是中国手机通信了，用我们的地面机站。基于移动通信的手机银行，手机支付必然成为最合理最佳的选择。 　　通过手机银行可以实现手机上的电子钱包，帐户查询，转帐，汇款，缴费，外汇买卖，银证转帐，信用卡还贷等业务，后面都是移动银行的业务，而不是移动支付。 　　伴随着3G时代的到来，手机银行和移动支付存在着巨大的市场潜力，用手机代替现金、支票、信用卡进行支付将成为新的革命性的金融服务。据我们了解美国主要的商业银行已经决定，美国准备跳过IC卡的发展阶段，准备一步跳到移动支付，手机银行的道路上。 　　手机银行的支付其发展前途我们认为取决于三大因素，第一找到符合我国国情的，将商业银行，移动通信运营商，第三方服务商，比如说中国银联和相关厂商，还有手机持卡人组合成产业链的商业模式。 　　手机通信和手机支付的经济合理性。 　　其业务拓展的方便性与安全性，包括适当的技术路线，以及手机银行的资金安全性，数据传输的完整性，克服个人信息，银行帐户等私秘资料在传输时不可泄密性，以及手机丢失以后相关资料的不可窃取性等等。这方面也很重要，我们要专门为移动支付，移动银行提供专门的手机，这个方式是失败的。大家知道两年前中国银行在上海试点，曾经给某一个厂商，某一个手机厂商提供了一种专用的手机，大概投资买了800部，后来我们总结是失败的，发展不起来，必须在现有手机基础上增加一个功能，而且确保安全才有前景。 　　我国的相关商业银行正在积极开拓手机银行业务，其技术路线上采取扩展SIM卡，手机号码绑定的方式，国有商业银行采取手机绑定的方式，中国银联已经决定在中国银联支持的手机支付，移动支付的方案里面要采取拓展SIM卡的技术路线，把你的相关的操作系统，包括安全方面放在拓展的卡上面，凡是能够装这个卡的手机，在他的支持若干操作系统下面可以很方便实现手机银行业务，而且全程上采取全系统，全程端到端数据加密的措施，我们同时也看到这是一个新兴的领域，和网上银行一样面对应用安全性和方便性相矛盾的问题，往往最方便的问题越不安全，但是我们要找到高度的方便同时又高度的安全，这是对全世界相关金融行业和相关IT部门的产业，同时这也有很大的市场潜力。我们国家相关的部门和产业进一步加强互联网和移动通信安全理论方法的研究和创新，并以此为基础，研究与开发适应我国国情的安全技术和产品，要制定相关的技术标准和规范。现在关于频率问题提出包括跨行业务在内的系统解决方案，解决参与方责权利问题，我们在实践当中发现，哪一个方面的积极性调动不起来，或者相关的移动通讯厂商运营商调动不起来，手机的持有人没有积极性，根本就不可能发展，这也是需要我们处理好。 　　我们认为我国银行业必将加强在这一领域的创新和发展，努力的赶超世界先进水平，要加快移动通信在中国金融行业，包括中国银行业的应用是重要的发展趋势。现在各家银行都是埋头苦干，积极的在这领域加强金融创新和服务，推出贴近市场需求的产品。 　　云计算将加快在银行信息化中的应用。云计算是基于互联网的信息网络，通过虚拟化方式共享信息资源的计算模式，云计算使计算存储网络软件等资源，按照用户的动态需要以服务的方式来提供，云计算就像当今世界的水电和煤气一样，具有费用低廉，可靠性高，使用方便等优势，使个人电脑和互联网之后的重大革命，云计算是当今世界的发展热点，美国、欧盟、日本正在着力研发部署大力推广应用，云计算也是我国当前信息化现代化建设的热点，根据赛迪顾问的数据2010年是我们云计算准备到起飞的转折年，当年中国云计算市场规模167亿人民币，年增长率81%，云计算的发展受到中央和各级政府社会高度重视，在座的各位感觉到当前是几十年以来最热的信息化，云计算和物联网为标志。国家发改委、工信部等出台加快发展文件，宣布全国五大试点城市，北京宣布了详云计划，上海宣布海云工程计划，广州宣布了云团工程计划，重庆宣布了云端工程计划，这几个工程其中详云工程，云天工程，云端工程都明确了云计算的三类典型服务，要形成500亿元产业规模，同时要带动产业链，形成2000亿元的产值规模。当然我们在分析形势的时候也感觉这里面会不会有，但是我举了这些例子，包括黑龙江，包括哈尔滨，包括内蒙的鄂尔多斯都提出来建立占地千亩以上的云计算的数据中心，我们感觉中国有没有这么大市场是个问题。但是大家各级政府，各个部门包括我们产业界认识到云计算是我们国家与全世界下一步发展热点，这一点是对的。 　　现在云计算与银行金融机构的信息化有什么关系呢?第一个我们感觉要分析一下银行信息化取得很大成绩，但是存在着发展瓶颈问题，全世界为了适应业务发展，一般都制定了规模巨大的数据中心，取得了巨大的成就。最近我们统计了一下，工农中建和人民银行和四家国有商业银行在全国建了11万多平方米数据机房，主要在北京和上海，但是由于技术发展的限制，其IT架构都是CS或者BS或者浏览器服务器架构，这种架构很难满足银行要求，但是随着金融业务的发展，这种架构资源共享性和高可靠性等不适应的问题越来越突出。尽管IT产业不断推出新的技术手段，比如说IBM并行耦合系统，这就带有虚拟化，并行处理。VMY等PC服务器的虚拟化技术，但是问题并没有决定性的根本的解决。我举一个例子，中国人民银行作为中央银行为例，他的业务监管办公自动化有成百的信息系统，有105个以上，技术上都是CS或者BS架构的，每一个系统是独立的，计算机的服务器都是一组一备，至少两套，实践之后发现由于设计与实际的差异，还包括应用部门对业务发展的需求往往估计过高，所以不同层次的存在着问题，有的利用率超过80-90%以上，内存也是，是不是到了极限的情况，但是有的系统内存使用率很低，利用率在15%以下，内存使用率也在20%以下。我们的工作里面，这个事情发生以后，有关的主管领导非常关心，要人民银行科技司做出合理的解释，这是不是资源浪费等等。我们当时感觉到这种架构决定了我们无法调整了，忙的没有办法解决，闲的也没有办法增加任务，因为是独立的系统。当前我们国家银行核心系和所有产品信息系统都是各家银行自行组织单独设计开发的，每一家银行的信息系统，尤其是应用软件系统都是定制的，非商业化的，这甚至拓展到我们城市商业银行，这必然造成信息化建设投入高，开发周期长，运行维护难等问题，与之同时这必然要求承担相关系统设计软件开发或者提供系统软件的IT厂商要长期提供定制的技术支持和服务。我们国家银行信息化服务产业化低，效率低，他们认为难以形成规模化，难以提高服务水平和降低成本，这都是发展过程里面遇到的一些问题。 　　对我国中小银行金融机构，尤其是小型银行金融机构，城市商业银行，农村信用社，尤其是现在四、五百家城镇银行，村镇银行，完全仿效国家大的银行信息化发展路子，各自建设同时管理数据中心，同时各自开发应用软件的模式是很困难的，很不合理的，实际上也是很不现实的。大家为了避免风险，村镇银行必须有主办行，相关的银行金融机构控股20%以上，这样银行利用现有系统为村镇银行服务，后来很快发现这个是问题，因为现有银行建立很庞大的系统，他挂了一个甘肃银行，他的业务量很小又会带来新的风险。这些单位面临着资金、专业技术人员，管理以及控制成本方面的短期困难，这都是当前存在的问题。 　　云计算的出现为我们解决以上问题提供了革命性的思路，我认为高度重视信息系统可用性和信息安全性的银行金融机构，采用云计算同样是发展趋势，现在业界有一种看法，认为云计算是共享信息资源，是高度共享的，像水电一样社会化提供，而银行是管钱的，他对系统的可用性，一关门客户部要砸柜台，同时对资金的安全，不可盗取，不可篡改要求很高。所以云计算的模式他们认为是不是适合银行金融机构或者相关金融机构的发展存有疑问的。但是我们认为这个趋势，我想银行也不例外，同样是发展趋势。大众型银行和金融机构今后逐步推广应用私有云的模式，他整个IT架构不是BS架构，他是云架构的，就是虚拟化处理的架构。我们感觉在推广的过程里面，发展过程里面会慢一点，因为现有的系统要整合不是一件容易的事情，包括人民银行在内，但是我们认为这是一个方向。 　　而小型银行金融机构，尤其是小型的将较快采用公有云和行业私有云的技术路线，在公有云和私有云之间，比如说这个云服务是对村镇银行或者农村信用社可以进入的，但是别的行也不让进，我们称之为行业私有云，刚才讲是工商银行建一个，他是私有云的架构。但是别的银行绝对不能进来，包括人民银行在内，将来可能发展趋势是这样的。这种趋势要引起我们的进一步重视。 　　需要解决的相关技术管理问题。我们要高度关注，要解决云计算的核心技术，其中包括虚拟化技术，网络操作系统，高性能存储技术，云计算安全技术，以及新一代搜索引擎，云计算服务检测验证技术，其中首先要解决好用户识别，使用资源，比如说网络流量，CPU，内存、外存，以及信息安全，隐私保护等基础性的问题。在这个基础上以云计算的基础服务，平台服务，软件服务为核心的银行金融机构提出可用的解决方案，要尽快的形成商品化，这是摆在我们当前国家为云计算服务，为金融信息化服务的IT厂商，我建议要高度关注这个问题。 　　云计算在银行金融机构的应用还存在大量的困难与问题，这是一个历史的过程，这是一个方向，但是不能操之过急。云计算是信息服务方式的革命性变化，必然要求人们观念上的转变，还需要相关法律法规的完善。我们感觉凡是相关的法律法规不完善的持续的健康的发展就会受到很大的影响，而恰好不仅是我们国家的，别的国家包括欧美国家也是需要解决的问题。同时需要解决相关的技术管理问题，而当前我们认为欧美，包括日本都面临这些不可避免超越的问题，像工业革命解决电力、自来水社会化供应一样，云计算一定会解决信息计算能力的社会化供应问题，其中我们认为也一定会包含我们国家金融信息化的服务，这不是例外，服务于我们相关的金融机构，银行金融机构，以及服务相关的IT厂商，要关注这个发展趋势，共同的为云计算，为中国的金融行业做出我们应有的努力，谢谢大家。","title":"当前我国银行信息化关注的问题"},{"content":"2012年是阿里云产品发布的“大年”以及云计算应用的就绪之年。在用户满心的期待和呼声中，2012年5月31日， RDS支持MS SQL Server的服务全新上线！与此同时， RDS对MYSQL的支持重磅升级！ 5月31日起，RDS产品将有如下动态： 1.      新增MS SQL Server数据类型； 2.      MYSQL套餐配置升级，价格调整； 3.      MYSQL新套餐上线后，老用户可以继续对原套餐续费； 4.      老用户也可以对原有套餐进行升级，即升级的新套餐配置大于当前的套餐配置（暂不支持降级服务）。 为了答谢新老用户, 我们特推出： 惊喜一：RDS全面支持MS SQL Server ,五天免费试用!   申请试用>> 惊喜二：百元代金券等你拿…         代金券返还规则>> 惊喜三：老客户有机会免费升级     如何免费升级>> 引用 凡5月31日前购买过一年RDS迷你型套餐的老客户，8月31日前可免费升级到RDS 新1型套餐。 温馨提示： 1.      有升级需求的老用户，可在论坛报名哦~ 2.      若无升级需求，服务到期后可直接续费原套餐。       每一款的产品的完善都是一个不断修复和升级的过程，如果您在有任何建议和意见，都请及时反馈给我们。非常感谢大家的支持，您的理解和帮助是我们不断改进的最大动力！","title":"RDS全新推出MS SQL Server 服务，对Mysql的支持重磅升级！"},{"content":"云计算机讲座（中南大学校长 中科院院士张尧学讲座）","title":"云计算机讲座（中南大学校长 中科院院士张尧学讲座）"},{"content":"IT，身为一个新兴行业，在其发展历程中向其他行业借鉴了一些先进的思想和理念，比如除了前面提到的从电力行业借鉴了公用事业这种商业模式和从丰田汽车流水线生产中总结出精益这套编程模式之外，还在软件设计方面引入了架构这个在建筑行业非常核心的概念。 架构，对软件系统而言是极为重要的。因为它不仅定义了系统内部各个模块之间是如何整合和协调的，同时也对其整体表现起着非常关键的作用。而云，作为一个非常复杂的大型软件系统，其中包含着许许多多的模块和组件，所以如果能够理出其架构的话，将会非常有益。 为了让大家对云计算有更深入的理解，本章将会对云的架构进行深入剖析。除了云的架构之外，本章还将会对云计算最主要和最常见的4种模式进行深入介绍。 2.1 云的架构 在对云计算进行了三年多的研究之后，觉得云计算虽然涉及了很多产品与技术，表面上看起来的确有点纷繁复杂，但是云计算本身还是有迹可循和有理可依的，所以在个人理解的基础上，我总结出了一套云计算的架构，具体请看图2-1。 这个云架构共分为服务和管理这两大部分。 在服务方面，主要以提供用户基于云的各种服务为主，共包含3个层次。其一是Software as a Service（软件即服务），简称SaaS，这层的作用是将应用主要以基于Web的方式提供给客户。其二是Platform as a Service（平台即服务），简称PaaS，这层的作用是将一个应用的开发和部署平台作为服务提供给用户。其三是Infrastructure as a Service（基础设施即服务），简称IaaS，这层的作用是将各种底层的计算（比如虚拟机）和存储等资源作为服务提供给用户。从用户角度而言，这3层服务是独立的，因为它们提供的服务是完全不同的，而且面对的用户也不尽相同。但从技术角度而言，云服务这三层是有一定依赖关系的。比如一个SaaS层的产品和服务不仅需要用到SaaS层本身的技术，而且还依赖PaaS层所提供的开发和部署平台或者直接部署于IaaS层所提供的计算资源上，而PaaS层的产品和服务也很有可能构建于IaaS层服务之上。 图2-1 云计算的架构 在管理方面，主要以云的管理层为主，它的功能是确保整个云计算中心能够安全、稳定地运行，并且能够被有效管理。 接下来，将给大家详细介绍每个层次，其中将不仅涉及它们的历史和相关产品，而且还将讨论它们的优势和采用的技术。 2.1.1 SaaS SaaS是最常见的，也是最先出现的云计算服务。通过SaaS这种模式，用户只要接上网络，通过浏览器就能直接使用在云上运行的应用。SaaS云供应商负责维护和管理云中的软硬件设施，同时以免费或者按需使用的方式向用户收费，所以用户不需要顾虑类似安装、升级和防病毒等琐事，并且免去初期高昂的硬件投入和软件许可证费用的支出。 1. 历史 SaaS的前身是ASP（Application Service Provider），其概念和思想与ASP相差不大。最早的ASP厂商有Salesforce.com和Netsuite，其后还有一批企业跟随进来。这些厂商在创业时都主要专注于在线CRM（客户关系管理）应用，但由于那时正值互联网泡沫破裂的时候，而且当时ASP本身的技术也并不成熟，而且还缺少定制和集成等重要功能，再加上当时欠佳的网络环境，所以ASP没有受到市场的热烈欢迎，从而导致大批相关厂商破产。但在2003年后，在Salesforce的带领下，惨存的ASP企业喊出了SaaS这个口号，并随着技术和商业这两方面不断成熟，Salesforce、WebEx和Zoho等国外SaaS企业得到了成功，而国内的企业（诸如用友、金算盘、金碟、阿里巴巴和八百客等）也加入到SaaS的浪潮中。 2. 相关产品 由于SaaS产品起步较早，而且开发成本低，所以在现在的市场上，SaaS产品不论是在数量还是在类别上都非常丰富。同时，也出现了多款经典产品，其中最具代表性的莫过于Google Apps、Salesforce CRM、Office Web Apps 和Zoho。 Google Apps。中文名为“Google 企业应用套件”，它提供企业版Gmail、Google 日历、Google 文档和Google 协作平台等多个在线办公工具，而且价格低廉，使用方便，并且已经有超过两百万家企业购买了Google Apps服务。 Salesforce CRM。它是一款在线客户管理工具，并在销售、市场营销、服务和合作伙伴这4个商业领域上提供完善的IT支持，还提供强大的定制和扩展机制，来让用户的业务更好地运行在Salesforce平台上。这款产品常被业界视为SaaS产品的“开山之作”。 Office Web Apps。它是微软所开发的在线版Office，提供基于Office 2010技术的简易版Word、Excel、PowerPoint及OneNote等功能。它属于Windows Live的一部分，并与微软的SkyDrive云存储服务有深度的整合，而且兼容Firefox、Safari和Chrome等非IE系列浏览器。和其他在线Office相比，它的最大优势是，由于其本身属于Office 2010的一部分，所以在与Office文档的兼容性方面远胜其他在线Office服务。 Zoho。Zoho是AdventNet公司开发的一款在线办公套件。在功能方面，它绝对是现在业界最全面的，有邮件、CRM、项目管理、Wiki、在线会议、论坛和人力资源管理等几十个在线工具供用户选择。同时包括美国通用电气在内的多家大中型企业已经开始在其内部引入Zoho的在线服务。Zoho在国内的代理商为百会。   3. 优势 虽然和传统桌面软件相比，现有的SaaS服务在功能方面还稍逊一筹，但是在其他方面还是具有一定的优势的，下面是其中的4个方面。 使用简单。在任何时候或者任何地点，只要接上网络，用户就能访问这个SaaS服务，而且无需安装、升级和维护。 支持公开协议。现有的SaaS服务在公开协议（比如HTML 4/HTML5）的支持方面都做得很好，用户只需一个浏览器就能使用和访问SaaS应用。这对用户而言非常方便。 安全保障。SaaS供应商需要提供一定的安全机制，不仅要使存储在云端的用户数据处于绝对安全的境地，而且也要通过一定的安全机制（比如HTTPS等）来确保与用户之间通信的安全。 初始成本低。使用SaaS服务时，不仅无需在使用前购买昂贵的许可证，而且几乎所有的SaaS供应商都允许免费试用。   4.技术 由于SaaS层离普通用户非常接近，所以大家对SaaS层用到的大多数技术都耳熟能详。下面列出了其中最主要的5种技术。 HTML。它是标准的Web页面技术，现在主要以HTML 4为主。但是即将推出的HTML5会在很多方面推动Web页面的发展，比如视频和本地存储等。 JavaScript。一种用于Web页面的动态语言，通过JavaScript，能够极大地丰富Web页面的功能。最流行的JavaScript框架有jQuery和Prototype。 CSS。主要用于控制Web页面的外观，而且能使页面的内容与其表现形式之间进行优雅地分离。 Flash。业界最常用的RIA（Rich Internet Applications，富因特网应用）技术，能够在现阶段提供HTML等技术所无法提供的基于Web的富应用，而且在用户体验方面也非常不错。 Silverlight。来自微软的RIA技术。虽然它现在的市场占有率稍逊于Flash，但由于它可以使用C#来进行编程，所以对开发者非常友好。   由于通用性和较低的学习成本，大多数云计算产品都会倾向于HTML、JavaScript和CSS这对黄金组合，但是在HTML5被大家广泛接受之前，RIA技术在用户体验方面还是具有一定优势的，所以Flash和Silverlight也将会有一定的用武之地，比如VMware vCloud就采用了基于Flash的Flex技术，而微软的云计算产品肯定会在今后大量使用Silverlight技术。 2.1.2 PaaS 通过PaaS这种模式，用户可以在一个提供SDK（Software Development Kit，即软件开发工具包）、文档、测试环境和部署环境等在内的开发平台上非常方便地编写和部署应用，而且不论是在部署还是在运行的时候，用户都无需为服务器、操作系统、网络和存储等资源的运维操心。 PaaS在整合率上非常惊人，比如一台运行Google App Engine的服务器能够支撑成千上万个应用，也就是说，PaaS是非常经济的。PaaS主要面对的用户是开发人员。 1. 历史 PaaS是云服务这三层之中出现最晚的。业界第一个PaaS平台诞生在2007年，是Salesforce的Force.com，通过这个平台，不仅能使用Salesforce提供的完善的开发工具和框架来轻松地开发应用，而且能把应用直接部署到Salesforce的基础设施上，从而能利用其强大的多租户系统。接着，在2008年4月，Google推出了Google App Engine，从而将PaaS所支持的范围从在线商业应用扩展到普通的Web应用，也使得越来越多的人开始熟悉和使用功能强大的PaaS服务。 2. 相关产品 和SaaS产品百花齐放相比，PaaS产品主要以少而精为主，其中比较著名的产品有：Force.com、Google App Engine、Windows Azure Platform和Heroku。 Force.com。就像上面所说的那样Force.com是业界第一个PaaS平台，它主要通过提供完善的开发环境和强健的基础设施等来帮助企业和第三方供应商交付健壮的、可靠的和可伸缩的在线应用。还有，Force.com本身是基于Salesforce著名的多租户架构的。 Google App Engine。Google App Engine提供Google的基础设施来让大家部署应用，还提供一整套开发工具和SDK来加速应用的开发，并提供大量免费额度来节省用户的开支。 Windows Azure Platform。它是微软推出的PaaS产品，运行在微软数据中心的服务器和网络基础设施上，通过公共互联网来对外提供服务。它由具有高扩展性的云操作系统、数据存储网络和相关服务组成，而且服务都是通过物理或虚拟的Windows Server 2008实例提供的。还有，它附带的Windows Azure SDK（软件开发包）提供了一整套开发、部署和管理Windows Azure云服务所需要的工具和API。 Heroku。它是一个用于部署Ruby On Rails应用的PaaS平台，并且其底层基于Amazon EC2的IaaS服务，而且在Ruby程序员中有非常好的口碑。   3. 优势 和现有的基于本地的开发和部署环境相比，PaaS平台主要有下面这6方面的优势。 友好的开发环境。通过提供SDK和IDE（Integrated Development Environment，集成开发环境）等工具来让用户不仅能在本地方便地进行应用的开发和测试，而且能进行远程部署。 丰富的服务。PaaS平台会以API的形式将各种各样的服务提供给上层的应用。 精细的管理和监控。PaaS能够提供应用层的管理和监控，比如能够观察应用运行的情况和具体数值[比如吞吐量（Throughput）和响应时间（Response Time）等]来更好地衡量应用的运行状态，还能通过精确计量应用所消耗的资源来更好地计费。 缩性强。PaaS平台会自动调整资源来帮助运行于其上的应用更好地应对突发流量。 多住户（Multi-Tenant）机制。许多PaaS平台都自带多住户机制，不仅能更经济地支撑庞大的用户规模，而且能提供一定的可定制性以满足用户的特殊需求。 整合率局。PaaS平台的整合率非常高，比如Google App Engine能在一台服务器上承载成千上万个应用。   4. 技术 与SaaS层所采用的技术不同的是，PaaS层的技术比较多样，下面是常见的5种。 REST。通过REST（Representational State Transfer，表述性状态转移）技术，能够非常方便和优雅地将中间件层所支撑的部分服务提供给调用者。 多租户。它能让一个单独的应用实例可以为多个组织服务，而且能保持良好的隔离性和安全性。通过这种技术，能有效地降低应用的购置和维护成本。 并行处理。为了处理海量数据，需要利用庞大的x86集群进行规模巨大的并行处理，Google的MapReduce是这方面的代表之作。 应用服务器。在原有应用服务器的基础上为云计算作了一定程度的优化，比如用于Google App Engine的Jetty应用服务器。 分布式缓存。通过这种技术，不仅能有效降低对后台服务器的压力，而且还能加快相应的反应速度。最著名的分布式缓存的例子莫过于Memcached。   对于很多PaaS平台，比如用于部署Ruby应用的Heroku云平台，应用服务器和分布式缓存都是必备的， REST技术常用于对外的接口，多租户技术则主要用于SaaS应用的后台（比如用于支撑Salesforce的CRM等应用的Force.com多租户内核），而并行处理技术常被作为单独的服务推出（比如Amazon的Elastic MapReduce）。 2.1.3 IaaS 通过IaaS这种模式，用户可以从供应商那里获得他所需要的计算或者存储等资源来装载相关应用，并只需为其所租用的那部分资源付费，而这些烦琐的管理工作则交给IaaS供应商来负责。 1. 历史 和SaaS一样，类似IaaS的想法其实已经出现很久了，比如过去的IDC（Internet Data Center，互联网数据中心）和VPS（Virtual Private Server，虚拟专用服务器）等，但由于技术、性能、价格和使用等方面的缺失，这些服务并没有被大中型企业广泛采用。但在2006年年底，Amazon 发布了EC2（Elastic Compute Cloud，灵活计算云）这个IaaS云服务。由于EC2在技术和性能等多方面的优势，这类技术终于被业界广泛认可和接受，其中就包括部分大型企业，比如著名的纽约时报。 2. 相关产品 最具代表性的IaaS产品有：Amazon EC2、IBM Blue Cloud、Cisco UCS和Joyent。 Amazon EC2。EC2主要以提供不同规格的计算资源（也就是虚拟机）为主。它基于著名的开源虚拟化技术Xen。通过Amazon的各种优化和创新， EC2不论在性能上还是在稳定性上都已经满足企业级的需求。而且它还提供完善的API和Web管理界面来方便用户使用。 IBM Blue Cloud。“蓝云”解决方案是由IBM云计算中心开发的业界第一个，同时也是在技术上比较领先的企业级云计算解决方案。该解决方案可以对企业现有的基础架构进行整合，通过虚拟化技术和自动化管理技术来构建企业自己的云计算中心，并实现对企业硬件资源和软件资源的统一管理、统一分配、统一部署、统一监控和统一备份，也打破了应用对资源的独占，从而帮助企业能享受到云计算所带来的诸多优越性。 Cisco UCS。它是下一代数据中心平台，在一个紧密结合的系统中整合了计算、网络、存储与虚拟化功能。该系统包含一个低延时、无丢包和支持万兆以太网的统一网络阵列以及多台企业级x86架构刀片服务器等设备，并在一个统一的管理域中管理所有资源。用户可以通过在UCS上安装VMWare vSphere来支撑多达几千台虚拟机的运行。通过Cisco UCS，能够让企业快速在本地数据中心搭建基于虚拟化技术的云环境。 Joyent。它提供基于Open Solaris技术的IaaS服务。其IaaS服务中最核心的是Joyent Accelerator，它能够为Web应用开发人员提供基于标准的、非专有的、按需供应的虚拟化计算和存储解决方案。基于Joyent Accelerator，用户可以使用具备多核CPU、海量内存和存储的服务器设备来搭建自己的网络服务，并提供超快的访问、处理速度和超高的可靠性。   3. 优势 与传统的企业数据中心相比，IaaS服务在很多方面都存在一定的优势，下面是最明显的5个。 免维护。主要的维护工作都由IaaS云供应商负责，所以用户不必操心。 非常经济。首先免去了用户前期的硬件购置成本，而且由于IaaS云大都采用虚拟化技术，所以应用和服务器的整合率普遍在10（也就是一台服务器运行十个应用）以上，这样能有效降低使用成本。 开放标准。虽然很多IaaS平台都存在一定的私有功能，但是由于OVF等应用发布协议的诞生，IaaS在跨平台方面稳步前进，这样应用能在多个IaaS云上灵活地迁移，而不会被固定在某个企业数据中心内。 支持的应用。因为IaaS主要是提供虚拟机，而且普通的虚拟机能支持多种操作系统，所以IaaS所支持应用的范围非常广泛。 伸缩性强。IaaS云只需几分钟就能给用户提供一个新的计算资源，而传统的企业数据中心则往往需要几周时间，并且计算资源可以根据用户需求来调整其资源的大小。   4. 技术 IaaS所采用的技术都是一些比较底层的，其中有4种技术是比较常用的。 虚拟化。也可以将它理解为基础设施层的“多租户”。因为通过虚拟化技术，能够在一个物理服务器上生成多个虚拟机，并且能在这些虚拟机之间实现全面的隔离，这样不仅能降低服务器的购置成本，而且还能降低服务器的运维成本。成熟的x86虚拟化技术有VMware的ESX和开源的Xen。 分布式存储。为了承载海量的数据，同时也要保证这些数据的可管理性，所以需要一整套分布式存储系统。在这方面，Google的GFS是典范之作。 关系型数据库。基本上是在原有的关系型数据库的基础上作了扩展和管理等方面的优化，使其在云中更适应。 NoSQL。为了满足一些关系数据库所无法满足的目标，比如支撑海量数据等，一些公司特地设计一批不是基于关系模型的数据库，比如Google的BigTable和Facebook的Cassandra等。   现在大多数的IaaS服务都是基于Xen的，比如Amazon的EC2等，但VMware也推出了基于ESX技术的vCloud，同时业界也有几个基于关系型数据库的云服务，比如Amazon的RDS（Relational Database Service，关系型数据库服务）和Windows Azure SDS（SQL Data Services，SQL数据服务）等。关于分布式存储和NoSQL，它们已经被广泛用于云平台的后端，比如Google App Engine的Datastore就是基于BigTable和GFS这两个技术，而Amazon推出的Simple DB则基于NoSQL技术。 2.1.4 云管理层 虽然和前面云服务的三层相比，熟悉云管理层的人非常少，但是它确实是云最核心的部分，就好像一个公司离不开其董事会的管理一样。与过去的数据中心相比，云最大的优势在于云管理的优越性。云管理层也是前面三层云服务的基础，并为这三层提供多种管理和维护等方面的功能和技术。如图2-2所示，云管理层共有9个模块，而且这9个模块可分为3层，它们分别是用户层、机制层和检测层，具体请看图2-2。 图2-2 云管理层的架构 1. 用户层 顾名思义，这层主要面向使用云的用户，并通过多种功能来更好地为用户服务，共包括4个模块：用户管理、客户支持、服务管理和计费管理。 用户管理 对于任何系统而言，对于用户的管理都是必需的，云也是如此。云方面的用户管理主要有3种功能。其一是账号管理：包括对用户身份及其访问权限进行有效地管理，还包括对用户组的管理。其二是单点登录：英文为“Single Sign On”，其意义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。这个机制可以极大地方便用户在云服务之间进行切换。其三是配置管理：对用户相关的配置信息进行记录、管理和跟踪。配置信息包括虚拟机的部署、配置和应用的设置信息等。 客户支持 好的用户体验对于云而言也是非常关键的，所以帮助用户解决疑难问题的客户支持是必需的，并且需要建设一整套完善的客户支持系统，以确保问题能按照其严重程度或者优先级来依次进行解决，而不是一视同仁。这样，能提升客户支持的效率和效果。 计费管理 利用底层监控系统所采集的数据来对每个用户所使用的资源（比如所消耗CPU的时间和网络带宽等）和服务（比如调用某个付费API的次数）进行统计，来准确地向用户索取费用，并提供完善和详细的报表。 服务管理 大多数云都在一定程度上遵守SOA（Service-Oriented Architecture，面向服务的架构）的设计规范。SOA的意思是将应用不同的功能拆分为多个服务，并通过定义良好的接口和契约来将这些服务连接起来，这样做的好处是能使整个系统松耦合，从而使整个系统能够通过不断演化来更好地为客户服务。而一个普通的云也同样由许许多多的服务组成，比如部署虚拟机的服务、启动或者关闭虚拟机的服务等，而管理好这些服务对于云而言是非常关键的。服务管理主要有下面这5个功能。 管理接口。提供完善的关于服务的Web管理界面和API接口。 自定义服务。能让用户对服务进行自定义和扩展。 服务调度。配备强健的机制来负责服务的调度，以使服务能在合理的时间内被系统调用和处理。 监控服务。利用底层的监控系统来观测服务实际的运行情况。 流程管理。提供一个工具来让用户将多个服务整合为一个流程，并对它进行管理以提升运行效率。   2. 机制层 这层主要提供各种用于管理云的机制。通过这些机制，能让云计算中心内部的管理更自动化、更安全和更环保。和用户层一样，该层也包括4个模块：运维管理、资源管理、安全管理和容灾支持。 运维管理 云的运行是否出色，往往取决于其运维系统的强健和自动化程度。而和运维管理相关的功能主要包括3个方面。首先是自动维护：运维操作应尽可能地专业和自动化，从而降低云计算中心的运维成本。其次是能源管理：它包括自动关闭闲置的资源，根据负载来调节CPU的频率以降低功耗并提供关于数据中心整体功耗的统计图与机房温度的分布图等来提升能源的管理，并相应地降低浪费。还有就是事件监控：它是通过对在数据中心发生的各项事件进行监控，以确保在云中发生的任何异常事件都会被管理系统捕捉到。 资源管理 这个模块和物理节点的管理相关，比如服务器、存储设备和网络设备等，它涉及下面这3个功能。其一是资源池：通过使用资源池这种资源抽象方法，能将具有庞大数量的物理资源集中到一个虚拟池中，以便于管理。其二是自动部署：也就是将资源从创建到使用的整个流程自动化。其三是资源调度：它将不仅能更好地利用系统资源，而且能自动调整云中资源来帮助运行于其上的应用更好地应对突发流量，从而起到负载均衡的作用。 安全管理 安全管理是对数据、应用和账号等IT资源采取全面保护，使其免受犯罪分子和恶意程序的侵害，并保证云基础设施及其提供的资源能被合法地访问和使用。主要包括下面这7种机制。 访问授权。为多个服务提供集中的访问控制，以确保应用和数据只能被有授权的用户访问。 安全策略。实现基于角色或者规则的一整套安全策略，而且还允许系统能模拟策略发生变更的情况以提升安全策略的健壮性。 安全审计。对安全相关的事件进行全面审计，以检测是不是存在任何隐患。 物理安全。根据职责限定每个云管理人员不同的权限，比如门禁等。 网络隔离。使用VPN（Virtual Private Network，虚拟专用网络）、SSL（Secure Sockets Layer，安全套接层）和VLAN（Virtual Local Area Network，虚拟局域网）等技术来确保网络的隔离和安全。 数据加密。这个机制能确保即使数据被窃取，也不会被非法分子利用。相关的机制有：对称加密和公钥加密等。 数据备份。由于数据完整性对云计算而言是基本要求，所以除了通过上面这些机制来确保数据不会被没有权限的人访问之外，还需要对数据进行备份，以避免由于磁盘损坏或者管理不当导致数据丢失的情况，所以需要完善的备份服务来满足每个用户不同的备份策略。   容灾支持 在容灾方面，主要涉及两个层面。其一是数据中心级别。如果数据中心的外部环境出现了类似断电、火灾、地震或者网络中断等严重的事故，将很有可能导致整个数据中心不可用，这就需要在异地建立一个备份数据中心来保证整个云服务持续运行。这个备份数据中心会实时或者异步地与主数据中心进行同步，当主数据中心发生问题的时候，备份数据中心会自动接管在主数据中心中运行的服务。其二是物理节点级别。系统需要检测每个物理节点的运行情况，如果一个物理节点出现问题，系统会试图恢复它或者将其屏蔽，以确保相关云服务正常运行。 3. 检测层 这层比较简单，主要监控这个云计算中心的方方面面，并采集相关数据，以供用户层和机制层使用。 监控系统 全面监控云计算的运行主要涉及3个层面。其一是物理资源层面，主要监控物理资源的运行状况，比如CPU使用率、内存利用率和网络带宽利用率等。其二是虚拟资源层面，主要监控虚拟机的CPU使用率和内存利用率等。其三是应用层面，主要记录应用每次请求的响应时间（Response Time）和吞吐量（Throughput），以判断它们是否满足预先设定的SLA（Service Level Agreement，服务级别协议）。 2.1.5 架构示例 在现实的IT环境中，有许多云计算产都符合本章所讲述的架构，其中比较知名的有Salesforce CRM和Google App Engine。为了帮助大家进一步理解云的架构，本节将以这两个著名的云计算产品为例来进行介绍。 1. Salesforce CRM 首先，从用户角度而言，Salesforce CRM属于SaaS层服务，主要通过在云中部署可定制化的CRM应用，来让企业用户在初始投入很低的情况下使用上CRM，并且可根据自身的流程来灵活地定制，而且用户只需接入互联网就能使用。从技术角度而言，Salesforce CRM就像很多SaaS产品一样，不仅用到SaaS层的技术，而且还用到PaaS层、IaaS层和云管理层的技术。图2-3为Salesforce CRM在技术层面上大致的架构。   图2-3 Salesforce CRM 采用的主要技术包括以下几种。 SaaS层。基于HTML、JavaScript和CSS这对黄金组合。 PaaS层。在此层，Salesforce引入了多租户内核和为支撑此内核运行而定制的应用服务器。 IaaS层。虽然在后端还是使用在企业环境中很常见的Oracle数据库，但是它为了支撑上层的多租户内核作了很多优化。 云管理层。Salesforce不仅在用户管理、计费管理、监控系统和资源管理这4个方面有不错的支持，而且在安全管理方面，Salesforce更是提供了多层保护，并支持SSL加密技术等。   2. Google App Engine 像前文介绍的那样，Google App Engine是一款PaaS服务，它主要提供一个平台来让用户在Google强大的基础设施上部署和运行应用程序，同时App Engine会根据应用所承受的负载来对应用所需的资源进行调整，并免去用户对应用和服务器等的维护工作，而且支持Java和Python这两种语言。在技术上，由于App Engine属于PaaS平台，所以关于显示层的技术选择由应用的自身需求而定，而与App Engine无关。App Engine本身的设计主要集中在PaaS层、IaaS层和云管理层。关于App Engine在技术层面上大致的架构，具体请看图2-4。 图2-4 Google App Engine 采用的主要技术有以下几种。 PaaS层：既有经过定制化的应用服务器，比如上面已经提到过的Jetty，也有基于Memcached的分布式缓存服务。 IaaS层。在分布式存储GFS的基础上提供了NoSQL数据库BigTable来持久化应用的数据。 云管理层。由于App Engine基于Google强大的分布式基础设施，所以它在运维管理技术方面非常出色，同时其计费管理能做到非常细粒度的API级计费，而且App Engine在监控系统和资源管理这两方面都有非常好地支持。 相关文章 云计算如何从概念走向落地？ 云计算基础知识培训讲义  ","title":"云计算核心技术剖析 云计算基础知识培训讲义"},{"content":"    互联网的发展，有利于拉动云服务的进军和发展，然而对于刚刚步入信息化时代的中小企业，面对着云CRM项目服务的“入侵”，中小企业开始慢慢接受云CRM的云服务，提前感受云CRM服务的乐与悲。而基于SaaS形式的CRM的出现，已成为广大中小企业广泛欢迎的对象。 　　 　　实施CRM有三种方式，这三种方式分别是：购买套装CRM、自主开发一套软件、采用云CRM服务。前两者过于标准化、成本太高，云CRM服务刚开始流行，价格低廉、方便改进。 　　云CRM成本低廉，适应企业快速成长、频繁改动流程的情况。只需要在配备几名IT人员、负责日常维护工作即可。不需要购买服务器、数据库，也不需要请人开发、清理数据和优化数据库，节省了很大一笔IT投入。这是不少中小企业将橄榄枝投向它的主要原因。 　　不过，成功使用这项服务的前提是，负责这项工作的人的职位越高越好，改善和推动业务流程的重新设计往往需要了解公司运作，同时要有影响力。这名关键人物同时也要了解云服务能做什么，不能做什么。对于某些需求比较个性化的企业而言，可能会因为通用型的标准化流程无法满足公司业务的需求而放弃云CRM。这说明云CRM其实也无法做到完全与企业本身的ERP、呼叫中心对接。最后，企业只能选择购买套装软件。 　　价格同样是问题之一。云服务商会根据不同软件以及企业的要求开发接口，有些企业可能无法接受再开发接口的价格。这也是现有成长中的云CRM服务商的烦恼。有时候即使达成合作完成对接，为了迎合传统软件繁琐的流程设置、也会牺牲云CRM流程上的某些简便性。 　　云服务的安全性在业界内也是普遍被提到，云计算时代的数据泄密和传统软件的泄密完全不同，一旦丢失将会失去所有，而不是一部分。作为一家大型企业，很难忍受这样的损失。在安全性方面，国外有第三方机构负责云服务上的安全授信，并且有相关的法律体系保证那些窃取数据的黑客会受到惩罚，受害企业会获得相应的赔偿。而目前国内云服务市场上的相关保障体系仍然没有建立起来。 　　在这喜忧参半的情况下，也有人提出了全新的观点。现在的云CRM不过将传统的CRM放在了云上，虽然成本低廉、流程改进容易，但是它的基因没有发生本质改变——传统软件以流程为主要对象，强迫员工适应软件。显然，云服务商应该改变思路，向苹果学习，转向以人为主要服务对象来设计服务，让员工可以更便捷地使用云服务。显然，这样的改进还有很长一段路要走。     虽云CRM还存在着问题有待完善，但是从长远的角度来说，租用云CRM的方式，更适合中小企业信息化发展。基于SaaS形式的云CRM将更受广大中小企业的欢迎！ 　　","title":"[置顶] 云CRM，该如何实施才能促进企业信息化？"},{"content":"大概在十年前左右，开源软件还是“足够好”的，因为它是可行的，通常也是低成本、少麻烦的商业软件替代方案。而现在，软件都在变得越来越开放（虽然并不一定是完全开放），也许有的非开源软件对你来说已经是“足够开放”。这里最好的例子莫过于Amazon的云计算API，虽然它既不是开源的也不是开放标准，但事实上已经被认为是真正的业界标准了。抛开不完全开源的底层代码不谈，AWS API似乎已经足够便于你集成、连接和服务。 这确实是一个不错的思路，但我并不完全赞同这一观点。相反，我认为下面三种技术的融合才是现在的趋势，将会带来新的部署应用的方法。 SOA——这一切的基础正是SOA。（译者注：SOA即Service Oriented Architecture，面向服务架构。）创建离散、松耦合并且能够被轻松调用的功能是这一切的先决条件。SOA能够动态地串起整个IT行业最优秀的各种类功能。随着SOA正在往轻巧化发展，像JSON和REST这样的开放途径，美好的未来正在渐渐变得更清晰。 云计算——如果说SOA是这一切的基础，那云正是发展的转折点。SaaS应用完完全全地打乱了传统应用市场。类似Salesfoece.com、Workday以及SugarCRM这样的应用迫使传统开发商重新考虑应用策略。而且这些SaaS应用大多数是面向服务的，并且从第一天起就开放了API，为应用产业带来了革命性的创新！SaaS为更多的公司开发优秀的应用提供了机会。 社交网络——因为SOE的作用以及云计算的发展，社交技术变得像催化剂一样。像Facebook和Twitter这样的网站都开放了不少的API，而且因为其庞大的用户基础，可以为应用提供很多新的市场和客户拓展机会。Salesforce.com本质上也已经是在提供云社交服务来加强这种联系。 因此，这一切的趋势是企业会更多地使用利用开放API来创建新应用，而不是像以前一样从头开发底层技术。反过来这也开辟了新的机遇，新老企业都能通过发布能嵌入应用里的服务来创造新的营收流。像Pitney Bowes这家主要做邮政测量的传统公司现在也开始发布航运和位置追踪服务，并且正在成为很多这样的新型应用的标准。 所以,这是一个令人兴奋的发展趋势！但我并没有看到任何它能很快任何完全取代系统的任何证据。有的应用能够很好地适应现在的变化，而有的仍然只能和以前一样运行在企业内部系统上。新类型应用正随着云计算的出现和发展而飞速发展，但并不能完全替代这些企业自建的内部系统。 能看到的是这些基础系统也正在渐渐开放自己的主要服务的API，很多时候还会伴随着商业交易，但随时可能会有翻天覆地的变化。","title":"开放API正在取代开源软件？"},{"content":"自从半年前写了一篇关于新浪SAE(Sina App Engine）的文章以后，周良就再也没有登入过它了。今天心血来潮进去折腾了一些应用，结果发现Sina App Engine已经可以绑定独立域名了！ 就目前来说，有很多朋友在使用Sina App Engine搭建WordPress博客，但是域名实在是太长，所以这里为大家介绍一下如何为你的SAE应用绑定独立域名： 打开你要绑定域名的应用，转到“应用设置”； 在独立域名设置中选择“新增”； 输入你要绑定的域名，绑定； 输入安全验证（前提是你设置了这个）； 将要绑定的域名CNAME到 SAE给出的CNAME地址； 添加一条SAE给出的随机域名的A记录，以验证归属； 然后，木有了~ 虽然SAE支持域名绑定是一个很大的进步，但是不得不说，这个域名绑定功能对未备案域名来说很鸡肋。 从价格上来说，绑定域名以后，由独立域名访问产生的流量价格是原二级域名(appname.sinaapp.com)流量价格的二倍（备案域名原价），即流入流量2元/G，流出流量3元/G。价格不是一般人可以接受的。 从速度上说，Sina App Engine为了解决当前备案难的问题，将域名绑定的节点选在了美国。原理上来讲，Sina App Engine只是在美国架设了一台反向代理服务器，也就是说，任何向SAE发出的请求都需要由反向代理发回国内云节点进行处理。所以向SAE发出的请求，实际是在国外兜了个圈子再转回来，理论上速度比纯国外线路慢一倍。而且这个反向代理节点的选择好像也有些问题，我从铁通的线路ping过去，延时在400ms左右，显然太大。而且一旦反向代理节点的访问量增大，速度就更是个问题了。好在有备案的童鞋可以向SAE发邮件申请绑定国内节点，这样速度就爽歪歪了。 虽然SAE目前仍存在诸多问题，但是SAE能够在现在这样的网络环境中支持域名绑定已经是个很大的进步了，我们不应该求全责备。我相信随着不久后国家对云计算扶持政策的出台，域名绑定国内IP将不再是一个梦。   以上的观点，我是站在未备案域名的角度来说的，如果你手上有通过备案的域名，那么可以saemail@sina.cn索取已备案域名绑定申请表，申请成功以后，已备案域名绑定的应用将直接访问国内数据中心，流量费用和原二级域名一致。","title":"新浪SAE开放独立域名绑定功能"},{"content":"如今的IT工作需要借助云计算技术。但坦白说，它是如何适应业务发展的呢？云计算给业务带来的价值是什么呢？ 让我们来重点关注一下CIO的角色。他们的职责是提高灵活性、降低成本以及提供新技术。但很多公司却将70%的IT经费用在运营上，以保持业务环境的畅通。这样一来，改进流程、改造环境以及创新方面就只剩下30%的经费可以使用。因此，这些企业需要进行大规模调整，这就是虚拟化、自动化、标准化以及云发挥作用的地方。其目标是打造一家始终连接的企业，确保信息可以立即被找到，从而快速制定决策并快速调整业务流程和工作方式。惠普将这样的企业称之为“瞬捷”企业。  若要顺应这些发展趋势，CIO需要将自己转变为一个“战略服务经纪人”。这是什么意思呢？让我们以一个业务流程为例，比如订单录入，让我们想想这个流程都包括些什么？订单录入由一系列按顺序执行或同时执行的步骤组成，每个步骤都包含一个基本功能，有些是人工完成的，有些是计算机完成的，有些是通过人机互动完成的。如果订单录入流程发生改变，最常见的原因是步骤进行了重新排序，添加或删除了新的步骤。  既然我们有精通电脑的员工（年轻一代），那么，我们是否可以为他们提供图形环境，让他们通过一系列的“步骤”来开发和维护业务流程？我们是否可以让IT部门负责提供这些步骤？这正是“面向服务架构”（SOA）富有发展前景的地方。  考虑到这一点，CIO现在开始负责制定适当的业务运营步骤（下文我将称之为“服务”）。这首先需要适当地管理业务和IT之间的关系，以了解需要的流程是什么并建立相应的生命周期。一旦CIO清楚自己需要提供哪些服务，他便可以选择交付机制，这包括以下三种选择：http://www.enterprisecioforum.com/cn/blogs/christian/cio%E5%B0%86%E6%88%90%E4%B8%BA%E6%88%98%E7%95%A5%E6%9C%8D%E5%8A%A1%E7%BB%8F%E7%BA%AA%E4%BA%BA","title":"CIO将成为战略服务经纪人"},{"content":"  什么SaaS？什么是云计算？相信对于业内的人士来说，这早已成为谈论的对象。SaaS与云计算随着信息化的建设，逐步踏上主导地位，逐渐改变了传统软件的使用方式和工作方式，给企业信息化的建设带来了切实的利益。对于中国数以万计的中小企业，创业企业来说更是受益于SaaS，云计算。  目前，中国中小企业数量已超过1亿户，占企业总数的90%以上。有数据显示，中小企业贡献了中国60%的GDP、50%的税收和75%以上的城镇就业，以及80%以上的新产品开发。可以说，中小企业已经占据重要市场地位。但在光鲜的背后，中小企业成长环境一度越发严峻。  中小企业光鲜背后  随着越来越多同行业者加入战圈，使每个行业竞争加剧，中小企业自身之间的竞争变得更加激烈。而且一些中小企业一定程度上仍受制于大型企业，大型企业占领市场更早，产品普及率更高，因此要在纷杂的市场中分得一杯羹，并非易事。  此外，尽管经济危机的寒冬刚刚逝去，后危机时期的影响却仍让一些企业步履维艰。原材料和生产成本、劳动成本的上升，金融危机造成外贸的订单减少停滞等等国内外局势给中小企业带来生存压力。同时，中小企业贷款相对较难、手续繁琐，加上银行信贷紧缩也都让一些企业遭遇财务困境。  以此看来，中小企业要实现突破，除了需要政府政策上的扶持外。更重要的是，他们需要进行自救，如何压低成本，如何提高自身管理和市场应变力是摆在面前的重要任务。而企业信息化的实施就是第一步，也是最重要一步。众所周知，广大中小企业一直是国家实现信息化战略转型的关键。信息化的普及已经不仅仅是由手工转向软件等应用的转变，事实上已经过度到一个向SaaS、云计算等新技术、新应用实施的新时期。  SaaS应用 解困中小企业信息化建设  SaaS作为为企业提供在线服务的交付模式，经过几年的深入发展，逐渐受到了中小企业认可。提供SaaS这种在线应用模式的厂商除了国外微软和Sales force的CRM、SAP等，国内中企开源、XToolsCRM也都致力于SaaS多年。这些服务提供商充当着搭建信息化与企业结合的桥梁，在多个方面缓解企业所面临的压力，帮助企业走出困境。  在SaaS模式下，企业极大减少设备和人力成本的投入，省去了购买网络设备、服务器、机房等硬件设备费用，不需要花费更多时间培训IT人员。不必一次性投入大量的资金，从而缓解中小企业资金紧缺的压力，实现低成本进行企业管理，降低系统实施风险。同时，专门的服务也让企业不需考虑系统的管理、维护和升级问题。  重要的是，SaaS模式的实施有助于提高企业管理水平。通过实施SaaS模式的管理软件或者工具软件，能够帮助中小企业迅速建立从生产到销售再到服务各个环节的全面服务体系。像内部人力资源管理、企业资料管理、外部的客户关系管理（CRM），甚至是全面的管理整合，这不仅使内部管理效率得到提升，同时提高了外部客户满意度，从而进一步提升业绩水平。  SaaS、云计算的新的功能在互联网的发展推动下得到了新的发展。企业能够有效的抓住这一新技术，新革新，让企业管理得到了进一步的发展，顺应了市场的变化，让企业在竞争强烈的同一行业环境中脱颖而出，成为最后的胜利者。","title":"中小企业信息化离不开SaaS、CRM与云计算"},{"content":"抛弃硬盘 提高网速 作者：尼尔·萨维奇　发稿时间：2011-10-25 16:18:07　点击：14887 研究人员表示，将信息存储在非永久性存储器而不是硬盘上，将极大地加快计算速度。 斯坦福大学的计算机研究人员想要丢弃硬盘，并把信息存储在随机存取存储器的数据中心。这种更昂贵暂时存储器使程序运行得更快。 今天的硬盘能够比20世纪80年代存储多一万倍的信息，但是它们仅能以比原来快50倍的速度传输大量信息。这对于存储在数据中心服务器上的数据来说是一个日渐显著的瓶颈。这种障碍随着企业纷纷将数据放入云计算而变得越来越常见。 对于需要快速操控大量数据的应用，例如高频股票交易，或者将网页翻译成另一种语言，延迟就是一个问题，约翰·奥斯特豪特（John Ousterhout）说。他是斯坦福大学计算机科学系的研究教授，也是基于内存云（RAMCloud）理念的新项目的主管。 奥斯特豪特提出的系统基于动态随机存取存储器（DRAM）。对于个人电脑，在从磁盘或是闪存盘内读取数据之后，后者会暂时存储于DRAM中，这将为程序提供非常快的访问速度。数据存储是作为一个电荷存储在电容上的。在数据中心中，从DRAM按位取数并将它们沿中心内部的网络发送，应该会比从磁盘中获取它们的速度快100倍至1000倍。 “你将能构建各种新的、以前不可能的应用程序。但你能想象科技史上的这样一段时期吗：速度可以数以千倍地提高……却什么都没有改变？” 奥斯特豪特说。 另一些计算机科学家更加怀疑。穆拉特·德米尔巴斯（Murat Demirbas）是位于水牛城的纽约州立大学计算机科学和工程系的副教授，他在自己的博客中对奥斯特豪特的内存云论文进行了评估。他写到：“我曾经希望听到更令人信服的论据。”德米尔巴斯同样写到，平行使用多个磁盘或许是减少检索时间的另一种途径。 有一个担忧，就是内存云的潜在成本。奥斯特豪特估计2000个服务器能够提供48太字节（TB）的DRAM存储量，每吉字节（GB）65美元。这比磁盘要贵50倍至100倍。然而，如果你从每秒可以访问多少比特来看成本，DRAM实际上会比磁盘便宜10倍至100倍。奥斯特豪特预计，到2020年，随着DRAM技术的改进，一个内存云每GB仅花费6元，就能存储100万亿字节到1000万亿字节。 奥斯特豪特将这个情况与20世纪70年代进行了对比，当时硬盘取代了磁带驱动器，成为计算机主要的存储系统。这不是因为它们更便宜，而是因为它们使计算机运行得更快。“磁盘永远不可能比磁带便宜，我认为这种情境也会发生在DRAM上。”奥斯特豪特说。 DRAM的另一个问题就是它不稳定，这意味着它仅在电流通过时才能保存信息。因此，内存云仍需要使用磁盘作为备份存储，连同DRAM内的数据额外副本一起，允许恢复在系统崩溃时丢失的数据。 谷歌著名工程师路易兹·巴罗索（Luiz Barroso）谈到，斯坦福研究团队正在解决一个非常重要的问题，同时他也看到了希望。“DRAM技术现在的经济状况将不会把内存云作为一些重大数据问题的解决方案，但它能够以更适度的工作量吸引人们的注意。”他说。","title":"抛弃硬盘 提高网速"},{"content":"低能耗和高集成度是未来CPU芯片发展的趋势，也是云计算背景下处理海量数据的必然要求。 当今的世界是一个信息世界，凭借着越来越强大的计算和存储技术，越来越多的人们得以把世界装进平板电脑和智能手机。而信息爆炸的一个最直接的后果就是数据量的激增。据统计，仅软件巨头微软公司今年的数据处理总量，就已超过了1999年全世界产生的数据总量之和。 如此巨大的数据处理量，使得全球的大小企业（即便是非互联网行业的企业）都必须让自身的数据处理能力与之相配。全球的计算力在过去的半年中翻了一番，云存储空间在过去的4个月中翻了一番。像大型数据中心和服务器基站这样的基础设施建设正在“计算密集型”的行业内如火如荼地进行。 不过，对于大多数用户层面的人来说，使用互联网的信息服务往往都是为了实现一些相对简单的功能，我们使用Facebook来和好友联系，更新自己的状态，使用谷歌进行网络搜索，使用亚马逊的服务来买东西等等，此外像网上浏览照片、投简历这些日常应用功能，算是相对简单的计算任务，在这一过程中，信息被调出、取回，然后从远程数据中心传到用户的显示屏上。 但实际上，这些简单任务往往是由性能强大的微处理器来完成的，这种“杀鸡用牛刀”的数据处理模式没能充分发挥高性能处理器的潜力，而且造成了大量能源浪费。随着云计算服务在全球范围内的增长，对电能的需求也出现猛增、2010年，全球各地数据中心的耗电量占世界耗电总量的1.5%。如何在节约能源和数据处理性能之间找到一个最佳的平衡点，让数据中心不再成为“电老虎”，是诸多技术公司努力的方向所在。 Tilera亚太区总裁吴晓东先生在第四届中国云计算大会上发表演讲。 来自美国加州圣何塞的Tilera公司专门从事低能耗多核芯片的研发制造，专注于制造面向云计算服务器、网络主机和多媒体服务的CPU芯片。Tilera芯片的这种特点对于简单云计算任务具有明显优势。用Tilera公司亚太区总裁吴晓东先生的话说，低功耗这一特点能够带来同等条件下更高的性能，能够在单位体积内提供更强大的计算力，即“高计算密度”。“这个高密度是我们的特色，像1U，2U基架的空间我们就可以放更多的芯片，芯片集成度高，功耗低，外部需要的其他芯片就少，而且对风扇、冷却系统，到整个板子的设计也会变得相对简单。”他说。 巨量的云计算需求，给包括Intel、Tilera在内的芯片厂商提供了一个新的机会平台。作为技术支持层面的底层部分，如何寻找一个最佳的模式去适应云计算的要求是一个重要问题。只有向着未来的发展方向去寻找，才能登上这个不断上升的平台。“低功耗”和“高集成度”是云计算未来发展对CPU芯片提出的要求。吴晓东认为，Tilera现在的产品就非常符合这个趋势。“我们的芯片功耗很低，一块36核的单芯片的功耗只有25瓦左右，而且集成度很高，周边网络接口，内存控制器都包括在里面了。”这可以降低企业的运营成本，同时提高服务的可靠性。“这是Tilera的一个机会所在。”他说。 吴晓东表示，希望在未来能够让Tilera的产品以一种行业标准性的姿态为大家接受。这当然离不开用户的支持。互联网的发展，大大加快了许多小的新技术在消费者群体中被认同和接受的速度。保证产能，能够迅速满足用户的需求至关重要，“客户一旦用起来，就会来支持我们，我们就会变成一个真正的、实际意义上的一种标准。”吴晓东说。","title":"开启绿色云计算的钥匙"},{"content":"http://blog.csdn.net/preterhuman_peak/article/details/7668299 众所周知的云计算风险话题包括信息安全风险、内部攻击、云宕机等都只是”冰山一角“。康奈尔大学的报告指出云计算还存在鲜为人知的三大潜在风险： 一、随着第三方云计算服务越来越多地采取多重硬件资源池，负载均衡和各种松散的云服务之间难以预测的互动可能会导致”云宕机“。 二、不透明的分层架构使得很多”独立“云计算服务商实际上在底层共享资源，可能会导致灾难性的”连坐“后果。 三、云计算使得长久保存数据的挑战变得更加严峻。云计算打破了过去的去中心化的数据备份模式，导致只有云计算服务商能够”备份“架构云应用和云端数据。 康奈尔大学在报告中指出，在支撑社会经济的计算架构转移到貌似非常便捷但又可能不够稳定的云计算之上前，企业和政府有必要对云计算的潜在风险进行充分的认识和评估。 ——康奈尔大学的报告引发了云计算业的广泛争论，连线杂志专栏作家Jon Udell认为，康奈尔大学报告指出的云计算潜在风险其实不足为虑。他用电网的普及举例，虽然今天人们还是会遇到局部的停电故障，但这并不影响电力的普及和其对社会经济发展的贡献。 此外，Udell还认为今天很多企业已经开始采取”混合云“策略，既能保证对关键数据的控制和备份，也能享受云应用带来的便捷和业务创新。 最后，随着云计算标准的完善，以及亚马逊、微软等”云宕机“查明并公布事故的原因。云计算的可靠性将得到极大保证 众所周知的云计算风险话题包括信息安全风险、内部攻击、云宕机等都只是”冰山一角“。康奈尔大学的报告指出云计算还存在鲜为人知的三大潜在风险： 一、随着第三方云计算服务越来越多地采取多重硬件资源池，负载均衡和各种松散的云服务之间难以预测的互动可能会导致”云宕机“。 二、不透明的分层架构使得很多”独立“云计算服务商实际上在底层共享资源，可能会导致灾难性的”连坐“后果。 三、云计算使得长久保存数据的挑战变得更加严峻。云计算打破了过去的去中心化的数据备份模式，导致只有云计算服务商能够”备份“架构云应用和云端数据。 康奈尔大学在报告中指出，在支撑社会经济的计算架构转移到貌似非常便捷但又可能不够稳定的云计算之上前，企业和政府有必要对云计算的潜在风险进行充分的认识和评估。 ——康奈尔大学的报告引发了云计算业的广泛争论，连线杂志专栏作家Jon Udell认为，康奈尔大学报告指出的云计算潜在风险其实不足为虑。他用电网的普及举例，虽然今天人们还是会遇到局部的停电故障，但这并不影响电力的普及和其对社会经济发展的贡献。 此外，Udell还认为今天很多企业已经开始采取”混合云“策略，既能保证对关键数据的控制和备份，也能享受云应用带来的便捷和业务创新。 最后，随着云计算标准的完善，以及亚马逊、微软等”云宕机“查明并公布事故的原因。云计算的可靠性将得到极大保证","title":"云计算鲜为人知的三大潜在风险"},{"content":"曾几何时，那些耳熟能详的程序英雄的名字渐渐地离我们远去。随着Windows和Internet时代的来临，个人的力量变得越来越渺小。正当我们开始坚信单打独斗的时代一去不复返的时候，云计算横空出世了。它强大的计算能力、存储能力和简单高效的编程接口，使得一位程序员能够轻松地操控成千上万台计算机，而不必考虑太多的细节。云计算时代，仿佛又让我们感觉到个人英雄时代伸手可及。 　　程序英雄时代的衰落 　　WPS作者求伯君、KV杀毒软件作者王江民、五笔字型作者王永民、中文之星作者王志东、UDDOS作者鲍岳桥和简晶、CCDOS作者吴晓军、自然码作者周志农、CCED作者朱崇君……每一个名字都代表一个奇迹！ 　　三岁因小儿麻痹症而落下终身残疾，三十八岁才接触电脑的王江民，在1996年带着他无师自通编写的KV6杀毒软件来到中关村，一周就赚了150万。一年后，KV杀毒软件占据了通用软件40%以上的市场份额。一夜之间，王江民成为中关村最受人景仰的软件英雄--程序英雄们的故事，曾经是多么辉煌！ 　　然而，随着Internet大浪潮席卷而来，程序英雄们开始隐身幕后。虽然一部分程序英雄成功转型，鲍岳桥和简晶创办了联众，王志东创办了新浪，雷军创办了卓越……但谁都清楚，他们是创办者，是管理者，不再是署在他们网站“封面”上的作者了。从那时起，除了一些小软件外（其中不乏成功案例，如NetAnts等），已经很少有人能够与某个知名软件划等号了。 　　日渐沉重的Winux时代 　　随着IT从DOS时代向Windows时代过渡，软件系统开始变得越来越复杂，程序开发变成了软件工程。软件除了开发过程外，还有运作过程、维护过程。首先，需要进行问题分析，形成软件需求规约，再进行需求分析，生成功能规约。然后，要进行概要设计和详细设计。接着，实现活动把设计结果转换为可执行的程序代码。软件研制的分工越来越细，有的人做数据库访问层，有的人做业务逻辑层，有的人做用户界面层；软件开发的整个过程，都有不断确认的活动，保证最终产品满足用户的要求；软件部署后，还有维护活动，包括使用过程中的扩充、修改与完善。伴随以上过程，还有管理过程、支持过程、培训过程等。 　　不仅软件开发和运维过程越来越复杂，软件的规模也越来越大。我们从Windows代码行数就可以看出端倪：Windows 95是1500万行，Windows 98是1800万行，Windows 2000是2000万行，Windows XP是3500万行，而Windows Vista则高达5000万行。虽然比尔@盖茨经常在公众面前怀念只有几十KB的BASIC语言，Windows还是不可避免地变得越来越臃肿。 　　由于坊间流传安迪-比尔定理，即比尔要拿走Intel CEO安迪所给的（What Andy gives, Bill takes away）。公众于是怀疑是不是微软有意为之呢？我以为不是。来看看以简洁为美的Linux就知道了。Linux各个版本源码的代码行数如图1所示。可以看出，Linux也是越来越庞大。在这一点上，Windows和Linux倒是有几分相象呢，不妨将之称作Winux，就像当年的Wintel一样。 　　 　　图1 Linux各个版本源码行数 　　由于代码量巨大，软件越来越不可能单靠个人的力量就能完成。例如，Windows 2000开发团队有900位开发人员，还配有1800位测试人员。同时，又由于软件系统极其庞大，出现各种Bug的可能性大增，给维护工作带来巨大的挑战。例如，Windows XP迄今已经打了上千个补丁。每一个补丁都需要耗费大量人力。所以说，在Winux时代，软件业的个人英雄是很难出现的。 　　云计算时代程序英雄重现 　　2006年8月，刚从大学毕业的史蒂维@克里弗顿，发现人们有把照片变成Flash短片的需求，于是架了几台服务器，创办了一家名为Animoto的小公司。当时，Animoto网站每天只有5000位访客。然而，2008年4月，Facebook向其社区热情推荐了Animoto，使得在短短的3天里，就有75万人到Animoto网站注册。Animoto网站顿时不堪重负，变得慢如蜗牛，恶评铺天盖地而来。要扭转乾坤，必需增容100倍以上。这对既没有资本又没有增容技术能力的年轻人来说简直是灾难。在这个紧要关头，史蒂维的大学同学建议使用亚马逊提供的计算资源租用服务。从此之后，Animoto不再需要购买任何新的设备，有多少流量，就租用多少亚马逊的计算能力。用多少，付多少钱，既节省了成本，又获得了可以无限扩展的计算能力。如今这群年轻人已经赚了大钱。 　　亚马逊提供的这种计算资源租用服务就称为云计算。亚马逊研发了弹性计算云EC2和简单存储服务S3为企业提供计算和存储服务。在诞生不到两年的时间内，就有44万程序员在亚马逊上注册，开发各种各样的应用。 　　除了亚马逊外，Google、IBM、微软和Yahoo等大公司都建有云计算平台。云计算领域的众多成功公司还包括VMware、Salesforce、Facebook、YouTube等。Google搜索引擎就建立于分布在200多个站点、超过100万台的服务器的云计算平台之上。Google的一系列成功应用，包括Google地球、地图、Gmail、Docs、Wave等也同样使用了这些基础设施。Google还提供了Google App Engine编程环境，供程序员们开发各种应用。微软于2008年10月推出了Windows Azure操作系统。Azure是继Windows取代DOS之后，微软的又一次颠覆性转型。Azure的底层是微软全球基础服务系统，由遍布全球的第四代数据中心构成。目前，微软已经配置了200多个集装箱式数据中心，服务器数量超过50万台。微软最新推出的Visual Studio 2010支持非常方便地开发云计算应用。 　　以前我们画网络图时，用“一朵云”来代替网络。现在，云计算之所以称作“云”，就是因为其计算设施不在本地而在网络中。云计算是网络宽带化发展的必然结果，它是一种商业计算模型，将计算任务分布在大量计算机构成的资源池上，使用户能够按需获取计算力、存储空间和信息服务。云计算的核心是可以自我维护和管理的虚拟计算资源池，通常由一些大型服务器集群构成。 　　有了云计算平台，程序员就可以动态申请所需资源，来支撑各种应用程序的运转，而无需为烦琐的细节烦恼。云计算使程序员能够更加专注于自己的业务，有利于提高效率、降低成本和实现技术创新。这一点，我们可以从一组间接的数据推断出来。iTunes、Facebook和Myspace都是面向特定应用领域、支持二次开发的公共平台。在2009年前18周，因金融风暴的影响，开发应用的程序员数量明显下降，而应用程序数量反而大增（如图2所示）。之所以如此，就是因为有了Facebook这样的支撑平台，程序员需要考虑的问题大大简化，工作效率大为提高。 　　 　　图2 iTunes、Facebook和Myspace的应用程序数量增长 　　依托亚马逊的云计算平台，有许许多多不拥有计算资源的公司取得了成功。例如，99designs是一个大规模的设计交易平台，目前已经收到超过53,000位设计师提供的多达300万件设计作品；Livemocha是一家在线的语言学习网站，提供超过25种语言的学习，并已经拥有了超过300万用户；Monografias是拉丁美洲的一个资料分享网站，每天有200万位访客；著名的互联网排名网站Alexa在亚马逊云计算平台上存储了超过1200万个数据对象，每天要提供超过500万次查询。 　　在我国，云计算已经掀起了IT企业转型热潮。中国电信与EMC合作，在上海构建了一个拥有2PB存储空间的云存储平台，称为e云。e云是安全的在线备份服务，可保护数据不受文件损坏、意外删除、硬件问题等灾难的影响。然而，已建的云计算数据中心基本上是以私有云的形式存在的，外界无法访问其服务。目前，对国内程序员而言，要么可以用外币信用卡购买国外的云计算服务，要么还需要等待一小段时间才能用上云计算服务。使用国外的云计算服务，除了支付上的困难外，还有网络访问速度的障碍--除非你的网站主要面向国外。可以预见，国内的云计算平台提供商将主要是中国移动、中国电信和中国联通三家运营商。当前，中国移动已经建成1000台服务器、5000个CPU核心、3000TB存储规模的“大云”试验平台。2010年5月21日，中国移动在第二届中国云计算大会上发布了“大云”1.0版本，已实现分布式文件系统、分布式海量数据仓库、分布式计算框架、集群管理、云存储系统、弹性计算系统、并行数据挖掘工具等关键功能。中国移动已经发放了一些试用帐号，相信很快将开放出来给公众使用。 　　由于众多新技术的运用和规模效应，在性能价格比上云计算相对传统计算模式能够惊人地提升5-40倍。目前众多的企业开始布局云计算，百度、阿里巴巴、瑞星、微软、天云科技、广达电脑、讯鸟等公司都在大规模招聘云计算研发人才。广达电脑居然一次性招聘700位云计算人才。而目前真正接触过云计算研发的人实在是太少了，所以许多招聘岗位都在虚位以待。对于程序员而言，如果能够实现向云计算转型，是一个提升自身含金量的绝佳机会。             老程序员的忠告：不要做浮躁的软件工程师   IT人生路精彩博文精选导读  成为Java高手的25个学习目标--非常经典  为程序开发人员量身定制的12个目标  程序员编程技术迅速提高的终极攻略 最新“特色985”大学高校名单  健康养生博文精选 Android技术开发精彩博文精选导读      中国最高等级实验室——“国家实验室”名单（仅20所） 2011年3月最新“211工程”大学名单(共112所) 技术精英谈IT程序员的出路在哪里——很经典 让IT人远离慢性疲劳，长时间操作电脑需要养成的几个好习惯  技术开发人员应该多吃的15种健康食品  周立功谈嵌入式：我的25年嵌入式生涯 IT技术开发人员35岁之前应该做的十件事 技术开发人员为什么会无奈苦逼？ 印度和中国程序员的区别      2012年全国本科毕业生就业率最高的50大专业      2012年最热门50个本科专业毕业年薪和职业收入排行榜 2012高考报考的10大热门专业及其解读及分专业大学排名      2012年美国20个最有\"钱途\"职业收入排行榜     2012年中国高收入职业月薪收入排行榜 2012年中国大学毕业生平均薪水月薪排行榜     ","title":"云计算-程序员重回个人英雄时代"},{"content":"最近对云计算的关注增加了键/值数据库的使用，有关这种存储方式最常见的主题便是其伸缩性。对各厂商来说，即使无需构建高度伸缩的应用程序或服务，云计算的其他一些优势也对它们有着强大的吸引力——尽管良好的伸缩性是云计算的关键要素之一。 目前可以猜测的使用场景有： ◆创业公司无需在本地服务器上进行投资，只要购买它们的计算和存储即可。 ◆公司想要将现有的应用程序或服务器移植到云上时，它们无需重新架构他们的数据层。 ◆需要在较短的时间段内获得大量计算能力。 Tony Bain最近发布了一篇文章，探讨关系数据库的末日是否已经来临。他将目光对准关系型数据库和键/值数据库的区别，以及从两者选择其一的原因上。根据Tony的说法，关系型数据库在伸缩性上会遇到一些挑战： 当越来越多的应用程序发布于高负荷（例如Web Services）环境中时，它们对伸缩性的需求将会十分明显。首先，它们会迅速增长。其次，它们最终的规模也会非常可观。对于前者来说，我们难以管理单个内部服务器上部署的关系型数据库，例如你的负载一夜之间增加两倍，你升级硬件的速度又能有多快？而后者一直便是关系型数据库在管理上的难点。 他列举了四种选择键/值数据库，而不是关系型数据库原因： ◆你的数据是高度面向文件的。 ◆你的开发环境是高度面向对象的。 ◆你的数据存储很便宜，并且很容易和合作伙伴的Web Service平台集成。 ◆你的最先关注的是按需增长，规模庞大的伸缩能力。 David Chappell在他关于Azure服务器平台的文件中简单讨论了这个问题。David提出了在云中使用键/值数据库的多种原因，不过他也谈到： ……微软宣布了一个计划：将SQL Data Service更进一步关系化。与Windows Azure存储不同，SQL Data Service构建于SQL Server之上，使得这种发展更加自然。无论这种模型是什么样的，这个技术的目标是不变的：提供一种伸缩性更强，更可靠，成本更低的云数据库，并适合各种类型的应用程序。 依赖于不同的关系型特性，有以上需求的公司可以更容易地采纳这种技术，并以此降低成本。 类似由Brian Aker发起的Drizzle数据库，它的目标是可伸缩的关系型能力。Drizzle基于MySQL 6.0的原代码，并针对云和网络应用程序进行了优化。现在他们已经从原来的代码中去除了许多功能，并增加了许多新特性： ◆微内核架构，使Drizzle比MySQL更为模块化 ◆更多接口，如认证和日志记录 ◆多核优化（与MySQL相比） ◆更少的数据类型 ◆更少的引擎 ◆更少的代码，相对更小并且更易于维护的代码库 Drizzle仍处于Alpha阶段，它为类Unix操作系统开发，目前不支持Windows。","title":"云计算中无法使用关系型数据库？"},{"content":"众所周知的云计算风险话题包括信息安全风险、内部攻击、云宕机等都只是”冰山一角“。康奈尔大学的报告指出云计算还存在鲜为人知的三大潜在风险： 一、随着第三方云计算服务越来越多地采取多重硬件资源池，负载均衡和各种松散的云服务之间难以预测的互动可能会导致”云宕机“。 二、不透明的分层架构使得很多”独立“云计算服务商实际上在底层共享资源，可能会导致灾难性的”连坐“后果。 三、云计算使得长久保存数据的挑战变得更加严峻。云计算打破了过去的去中心化的数据备份模式，导致只有云计算服务商能够”备份“架构云应用和云端数据。 康奈尔大学在报告中指出，在支撑社会经济的计算架构转移到貌似非常便捷但又可能不够稳定的云计算之上前，企业和政府有必要对云计算的潜在风险进行充分的认识和评估。 ——康奈尔大学的报告引发了云计算业的广泛争论，连线杂志专栏作家Jon Udell认为，康奈尔大学报告指出的云计算潜在风险其实不足为虑。他用电网的普及举例，虽然今天人们还是会遇到局部的停电故障，但这并不影响电力的普及和其对社会经济发展的贡献。 此外，Udell还认为今天很多企业已经开始采取”混合云“策略，既能保证对关键数据的控制和备份，也能享受云应用带来的便捷和业务创新。 最后，随着云计算标准的完善，以及亚马逊、微软等”云宕机“查明并公布事故的原因。云计算的可靠性将得到极大保证。","title":"云计算鲜为人知的三大潜在风险"},{"content":"Autonomy高管：IDOL分析数据更瞬捷 ZDNet 数据库 作者： 蒋湘辉 【原创】 2012年02月01日 评论(0) 关键词： 惠普 Autonomy 数据库 IDOL 大数据 云计算 Autonomy亚太区副总裁Sanjay Aurora在北京接受ZDNet采访时表示，Autonomy的主打产品IDOL可以让企业级用户提升信息管理、优化和数据挖掘的能力，该能力也是惠普倡导的“瞬捷”企业应具备的多种能力之一，有助于客户、员工、合作伙伴和公众立即获得他们想要和需要的任何服务。他还表示，2012年一季度Autonomy将上市的归档、电子发现和企业搜索三款设备将提升用户的云信息管理和搜索能力。 IDOL的特长是语义分析 Sanjay Aurora表示，Autonomy主打的产品是IDOL（Intelligent Data Operating Layer）智能数据处理平台，IDOL的最新版本IDOL 10可以将结构化数据以及音频、视频、网页、电子邮件等非结构化数据进行自动化的语义分析。 “企业级用户中85%的数据是非结构化数据，而只有15%是结构化数据。IDOL 10包括了2011年收购的实时分析结构化数据的Vertica，以及Autonomy原有的自动化处理和理解非结构化数据的基础构架软件，从而能够帮助企业实时理解和处理100%的信息。 ” Sanjay Aurora表示，传统数据库无法处理电子邮件、音频、视频、社交网络、博客、呼叫中心通话、闭路电视镜头等非结构化数据，要理解这些信息并从中发掘价值是现代企业面临的挑战。而IDOL 10的语义分析可以让电脑理解非结构化数据灰度等级，而不仅仅是数据库中的黑和白，Autonomy 信息管理实现关键流程自动化，并提高组织效率。 IDOL 10功能超过500项 Sanjay Aurora表示，作为构建基于概念、情境并实时理解企业内外所有格式数据的统一处理平台，IDOL 10的独特模式匹配技术,由基于统计运算的分析引擎驱动，可实时地识别思想、概念和内容间的差别。其“原址管理”技术建立所有格式数据的索引，将信息保留于其原始位置。这消除了数据复制需求，降低了硬件存储成本，还消除了危险的低效数据转移需求。IDOL 10的NoSQL 界面提供单一处理层，执行跨路径分析，从而理解结构化和非结构化数据。 处理结构化数据的Vertica 分析平台包含增强版数据库内分析，其中包括地理空间、事件系列模式匹配、事件系列联接和高级汇总统计和回归分析等新功能。通过 Vertica 实时分析平台可以增强子查询、数据库统计、生命周期管理、查询优化、数据再分割和联接筛选等方面性能。  图注：IDOL是Autonomy的核心产品。 “IDOL 10的功能超过500项，目前的OEM厂商就有400多家，已经拥有大量用户。”Sanjay Aurora表示，IDOL 10可以和惠普的大数据、社交媒体、风险管理、云计算和移动解决方案很好的整合。 三款Autonomy 设备一季度上市 2011年12月，惠普发布了三款Autonomy 设备，分别用于归档、电子发现和企业搜索。Sanjay Aurora表示，这些设备基于Autonomy IDOL以及惠普ProLiant服务器及存储等基础设施架构共同优化。此外，这些设备还利用了 Autonomy 的私有云和超过 31PB的 Autonomy Digital Safe云存储。“三款设备将提升用户的云信息管理和搜索能力。” 图注：2010年Autonomy 9.3亿美元的收入中有22%来自云计算。 据悉，Autonomy归档设备可以从包括视频、录像、电子邮件、网页内容及微软SharePoint文件的所有数据类型中自动获取、去除重复、索引并提取元数据。 Autonomy电子发现设备可以提供端到端电子发现功能，包括识别、保存、收集、处理、分析、审核和生产。该设备还包括一款仪表板，显示电子发现参考模型各阶段和关键数据点分析，包括案例状态、成本、数据量和诉讼趋势。 Autonomy企业搜索设备则能够全方位显示包括非结构化和结构化数据的企业数据。企业搜索设备无需考虑存储库，即可自动分类、标记、连接、检索和剖析各种类型的数据，以实现大量相应信息的交付。 据悉，通过单一最小库存单位（SKU）基于惠普融合基础构架进行优化的惠普三款Autonomy 设备将于 2012 年第一季度上市。","title":"[转]IDOL分析数据更瞬捷"},{"content":"毕业两年了，计算机行业到通信行业，学习了半年通信基础知识，做了一年黑盒测试，半年外场交付测试，有所历练，却一天一天迷惘起来；两年的工作，忽略了修身养性，忽略了自身技能的提高，忽略了对其他行业知识的涉猎。如果在公司做管理也看不到前景，也许大部分计算机毕业的人都会有感觉，没有技术的倚靠，不安定感很强。 通信行业的不景气，个人性格的短板，以后的发展方向，以及各种生活现实问题，不得不让自己直面自己的内心，让自己尽快的做一个选择， 打算不做测试了，去做开发，把以前学的东西捡起来，以C++为主吧，更深入的学习，设计模式，STL，Boost，多线程，IPv6，云计算，并行计算，数据挖掘， 打算是明年换行，今年下半年有机会换的话也可以。另现在公司的收获，也需要总结总结了。  ","title":"毕业两年，需要下一个决心做选择"},{"content":"云计算的特点(对第2章的补充) 一个中心：以应用为中心 两个基本点：私有云和公有云(运维模式) 四项基本原则：按需使用/弹性计算/资源共享/自服务   前个基本特点我在之前的博客里已经一一阐述了。在这里我详细讲一下四项基本原则： 1)按需服务。即用户可以根据需求及时得到服务。从这个角度来讲，云计算就像我们公告服务中的自来水、点和煤气一样，集中供应并按需服务和计费 2)弹性服务。弹性服务是指云计算的资源分配可以根据应用访问的具体情况进行动态调整，包括增加或者减少资源的要求 3)资源池。云计算带来的好处是能够提高资源的利用率。(比如大型企业集团会有非常大的数据中心来支持内部的企业信息管理，但是因为每个系统的访问(使用)量是不同的，所以并不能把每台物理服务器的利用率达到最大)。一般要通过共享的方式来达到这个目的，而共享需要先把资源集中到一个公共的资源池中。因此，云计算需要把计算资源集中到一个资源池中通过多主租用的方式来为不同用户提供服务。 4)自服务。传统的电信托管服务，对于硬件是无法进行升级的(即您选择了某个网络服务器，它的硬件资源是确定并且无法提升的)。而且对于软件的配置只能通过远程桌面连接等方式来进行，步骤比较繁琐且不够灵活。我经常乘坐来往北京和上海的京沪快线，对于习惯于使用ATM 机或网上银行的人，或者喜欢使用机场自助打印登机牌的人来讲，自服务带来的灵活和方便是他们喜欢自服务的最主要原因。对于云计算服务提供方来说，自服务要求提供尽量简单的用户操作界面，简化用户操作，降低用户使用服务的难度，只有这样自服务才能被用户所接受。而且由于是人机交互，因此服务响应速度的要求就会更高。   云计算的应用： 1)多租户使用。 一般情况下，如果某个软件公司开发出了一套ERP软件并且想在客户现场安装和部署，那就需要这个公司在客户现场安装和部署硬件服务器(安装操作系统、驱动程序、软件、安装应用程序)。并且运行后期的运维。牵涉到的员工也非常多，比如IT员工、软件工程师等等，投入的人力物力会很大，并且周期相对来说也是比较长的。后期还需要增加新的硬件来满足越来越多的用户访问量(又牵涉到分布式、集群等配置过程)。一个客户的安装和部署就那么麻烦，如果同时有多个用户需要改ERP软件，那过程就更加漫长了。 但是有了云计算，在有了良好的软件架构情况下，只需要在云计算平台上部署一套(或多套应用程序)，而把使用者的数据和配置放在相同(不同)的数据库(数据表)中进行隔离，那就可以让多个用户(租户)使用同一套系统，而且该租户只能看到自己的数据，不能看到其他租户的数据(也可以通过加密的方式，即使其他租户看到该数据也无法解析)。 2)云安全 传统的杀毒软件厂商需要主动在网络上抓取可疑的程序(或者代码)来发现新的病毒变种，需要大量的信息发掘和分析，周期相对会比较长并且反应不够及时。 但是有了云安全，可疑通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，推送到Server端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端。 云安全的策略构想是：使用者越多，每个使用者就越安全，因为如此庞大的用户群，足以覆盖互联网的每个角落，只要某个网站被挂马或某个新木马病毒出现，就会立刻被截获。 3)云存储 云存储是在云计算(cloud computing)概念上延伸和发展出来的一个新的概念，是指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统。 当云计算系统运算和处理的核心是大量数据的存储和管理时，云计算系统中就需要配置大量的存储设备，那么云计算系统就转变成为一个云存储系统，所以云存储是一个以数据存储和管理为核心的云计算系统。 4)云游戏 云游戏是以云计算为基础的游戏方式，在云游戏的运行模式下，所有游戏都在服务器端运行，并将渲染完毕后的游戏画面压缩后通过网络传送给用户。在客户端，用户的游戏设备不需要任何高端处理器和显卡，只需要基本的视频解压能力就可以了。 如果这种构想能够成为现实，那么主机厂商将变成网络运营商，他们不需要不断投入巨额的新主机研发费用，而只需要拿这笔钱中的很小一部分去升级自己的服务器就行了，但是达到的效果却是相差无几的。对于用户来说，他们可以省下购买主机的开支，但是得到的确是顶尖的游戏画面（当然对于视频输出方面的硬件必须过硬。）。你可以想象一台掌机和一台家用机拥有同样的画面，家用机和我们今天用的机顶盒一样简单，甚至家用机可以取代电视的机顶盒而成为次时代的电视收看方式。       转自：http://www.cnblogs.com/threestone/archive/2012/01/17/2324455.html","title":"Windows Azure Platform (三)云计算的特点"},{"content":"众所周知的云计算风险话题包括信息安全风险、内部攻击、云宕机等都只是”冰山一角“。康奈尔大学的报告指出云计算还存在鲜为人知的三大潜在风险： 一、随着第三方云计算服务越来越多地采取多重硬件资源池，负载均衡和各种松散的云服务之间难以预测的互动可能会导致”云宕机“。 二、不透明的分层架构使得很多”独立“云计算服务商实际上在底层共享资源，可能会导致灾难性的”连坐“后果。 三、云计算使得长久保存数据的挑战变得更加严峻。云计算打破了过去的去中心化的数据备份模式，导致只有云计算服务商能够”备份“架构云应用和云端数据。 康奈尔大学在报告中指出，在支撑社会经济的计算架构转移到貌似非常便捷但又可能不够稳定的云计算之上前，企业和政府有必要对云计算的潜在风险进行充分的认识和评估。 ——康奈尔大学的报告引发了云计算业的广泛争论，连线杂志专栏作家Jon Udell认为，康奈尔大学报告指出的云计算潜在风险其实不足为虑。他用电网的普及举例，虽然今天人们还是会遇到局部的停电故障，但这并不影响电力的普及和其对社会经济发展的贡献。 此外，Udell还认为今天很多企业已经开始采取”混合云“策略，既能保证对关键数据的控制和备份，也能享受云应用带来的便捷和业务创新。 最后，随着云计算标准的完善，以及亚马逊、微软等”云宕机“查明并公布事故的原因。云计算的可靠性将得到极大保证。","title":"云计算鲜为人知的三大潜在风险"},{"content":"OpenStack是一个由Rackspace发起、全球开发者共同参与的开源项目，旨在打造易于部署、功能丰富且易于扩展的云计算平台。OpenStack企图成为数据中心的操作系统，即云操作系统。从项目发起之初，OpenStack就几乎赢得了所有IT巨头的关注，在各种OpenStack技术会议上人们激情澎湃，几乎所有人都成为OpenStack的信徒。 OpenStack魅力非凡，它如同Linux一样，旨在构建一个内核，所有的软件厂商都围绕着它进行工作。OpenStack有许多子项目，用于对云计算平台中的各种资源（如计算能力、存储、网络）提供敏捷管理。这些项目虽然刚刚起步，但却雄心勃勃。另一方面，OpenStack也提供了对虚拟化技术的支持。 OpenStack的发展史 谈到OpenStack最引人注目的创始人和传播者，莫过于现在年仅32岁的Kemp，他是初创公司Nebula的CEO。Chris Kemp有一份耀眼的简历：Silicon Graphics系统工程师、Classmates.com首席架构师、在线购物公司Netran和在线旅行公司Escapia的创始人、美国宇航局Ames研究中心CTO。 当Kemp在美国宇航局Ames研究中心工作时，他意识到不断采购超级计算机的方式并不好。为什么不能采用Google的分布式计算呢？Kemp和一些富有眼光的开发者开始为美国宇航局构建私有云计算平台。 几乎是在同一时间，云提供商Rackspace正在考虑构建一个开源的云计算管理系统。 2010年初，在Kemp晋升为美国宇航局的首席技术官之后，美国宇航局开始和Rackspace合作，共同以Python语言实现他们的共同目标。 美国宇航局和Rackspace的合作最终孕育了OpenStack。许多子项目也被创立起来，Swift、Nova，还有用于虚拟化管理的Glance。Kemp所创建的Nebula就是OpenStack的参与者之一。 Kemp介绍了OpenStack的第五个版本OpenStack Essex，OpenStack Essex更加着眼于可用性、质量和扩展性，它为大家带来了150多项新功能，包括新增的云管理仪表板Horizon、身份管理服务Keystone等。Kemp还谈到了许多正在酝酿中的新功能，如基于思科的网络云服务Quantum，Linux虚拟交换机OpenvSwitch。 Citrix的背弃 任何事物的发展都不会一帆风顺，OpenStack也是如此。Citrix背弃OpenStack，转而支持CloudStack的理由无非两条：平台之间的技术不兼容，导致难以相应客户需求；Rackspace缺乏开源项目管理经验，不能掌控OpenStack的未来。 对Citrix而言，CloudStack也是一个基于Apache 2的开源项目，而且已经拥有一个稳固的用户群。相比之下，OpenStack还有很长的路要走，Citrix选择了前者。 OpenStack本身就是技术竞争的产物，Citrix的做法并无可厚非。而今，OpenStack到了另一个十字路口，OpenStack基金会将接管Rackspace经营和领导了多年的OpenStack社区。福兮祸兮？ OpenStack现状 Ubuntu的创始人Mark Shuttleworth曾经做过一次有关OpenStack的演讲。他利用Ubuntu Juju项目启动了一个OpenStack远程安装进程，当演讲接近完备的时候，不过30分钟之后，一个私有云的部署完成了，令人惊叹！ Kemp创建的Nebula及其合作伙伴美国宇航局，都在致力于简化OpenStack部署的复杂度。甚至于，他们使用一个U盘在10分钟之内即可部署OpenStack！ 尽管如此，对于普通人而言，OpenStack依然难以掌控。除非选择使用现成的OpenStack企业级解决方案，如Piston Cloud或Nebula，否则，我们只好写代码了。 谁真正能够掌控OpenStack，并从中获益呢？Rackspace是毫无疑问的。Rackspace借助OpenStack提供公有云服务，并最终取代了此前的IaaS平台。 迄今为止，惠普是OpenStack最大的用户，惠普有能力为客户稳健运行OpenStack。惠普云的IaaS服务构建于OpenStack基础之上，为客户提供对象存储、身份验证等功能。 惠普云并不仅仅包含OpenStack一种云计算技术，其它技术还有像MySQL、分布式计算，以及VMware Cloud Foundry等等。Kemp也说，没有人纯粹使用OpenStack，即便是在Nebula，OpenStack也不过是我们所使用的50种技术之一。 OpenStack咨询师，曾部署过25个OpenStack项目的Mirantis说，OpenStack的真正意义在于，它创造了一个框架标准和API，用户可以以此为基础构建云计算解决方案。 OpenStack的未来 十年之间，Linux操作系统从一个玩具成长成为一个坚实的服务器操作系统。两年之间，OpenStack在云计算领域掀起了狂澜。不知未来，OpenStack是否会像Linux一样缔造传奇？ 原文链接：Is OpenStack the new Linux?","title":"OpenStack：是否会像Linux一样缔造传奇"},{"content":"海量分布式存储技术 　　为保证高可用、高可靠和经济性，云计算采用分布式存储的方式来存储数据和冗余存储的方式来保证存储数据的可靠性，一高可靠软件来ibuyingjian呃不可靠，从而提供廉价可靠的系统。为了满足大量用户的需求，数据存储技术必须具有高吞吐率和高传输率的特点。 　　云计算的数据存储系统主要有Google GFS(Google File System)和Hadoop开发团队的开源系统HDFS(Hadop Distributed File System)。大部分IT厂商，包括Yahoo、Intel的“云”计划采用的都是HDFS的数据存储技术。 　　并行编程模式 　　为了高效地利用云计算的资源，使用户能更轻松地享受云计算带来的服务，云计算的演变是必须保证后台复杂的并行执行和任务调度向用户和编程人员透明。云计算采用MapReduce编程模式，将任务自动分成多个子任务，通过Map和Reduce两部实现任务在大规模计算节点中的调度与分配。 　　数据管理技术 　　云计算系统对大数据集进行处理、分析，向用户提供高效的服务。因此，数据管理技术必须能够高效地管理大数据集。其次，如何在规模巨大的数据中找到特定的数据，也是云计算数据管理技术所必须解决的问题。云系统的数据管理往往采用列存储的数据管理模式，保证海量数据存储和分析性能。云计算的数据管理技术最著名的是Googe的BigTable数据管理技术，同时Hadop开发团队开发了BigTable的开源数据管理模块HBase。 　　分布式资源管理技术 　　在多节点并发执行环境，分布式资源管理系统是保证系统状态正确性的关键技术。系统状态需要在多节点之间同步，关键节点出现故障时需要迁移服务，分布式资源管理技术通过锁机制协调多任务对于资源的使用，从而保证数据操作的一致性。Google的Ghubby是最锥你给的分布式资源管理系统。 　　云计算平台管理技术 　　云计算资源规模庞大，一个系统的服务器数量可能会高达十万台并跨越几个坐落于不同物理地点的数据中心，同时还运行成百上千种应用。如何有效地管理这些服务器，保证这些服务器组成的系统能提供7*24小时不间断服务是一个巨大的挑战。云计算系统管理技术是云计算的“神经网络”，通过这些技术能够是大量的服务器协同工作，方便地进行业务部署和开通，快速发现和恢复系统故障，通过自动化、智能化的手段实现大会磨系统的可运营、可管理。Google通过其卓越的云计算管理系统维持着全球上百万台PC服务器协同、高效地运行，起云计算系统管理技术也被作为企业核心机密，至今没有公布任何技术资料。 　　绿色节能技术 　　云计算技术降低了服务器的采购成本，从而使电源消耗所带来的运营成本成为云计算计算中心的主要开支之一，为了进一步降低成本，云计算的先去在绿色节能技术上进行了大量探索。 　　传统数据中心空调冷却的费用约占整体电费的30%—70%，Google为了节省能源，在比利时的数据中心降温系统无需冷却剂，而是采取额室外空气进行自然冷却。根据比利时的气候条件，每年只有7天左右无法使用自由冷却方式。在比较炎热的夏天，Google可以通过云计算管理系统将该数据中心的计算任务转移到其他数据中心中。","title":"云计算发展进程中的六大关键技术"},{"content":"云计算数据中心局域网技术 第一代数据中心局域网 第一代数据中心局域网是传统以太网，众所周知，performance和cost是推动其快速部署和应用的主要原因。   第二代数据中心局域网 第二代数据中心局域网就是包含接入、分发和核心三层的架构，其中典型的技术特征包括：SPT、缺少集中式控制、best-effort、低端口密度、数据网络与存储网络分离、VLAN分离广播域、ACL访问控制等。   第三代数据中心局域网 驱动IT企业重新设计其数据中心网络的根本原因还是虚拟化服务器的部署和增加。那么，虚拟化服务器导致IT企业重新设计其数据中心网络的根本原因又何在呢？只要体现在以下几个方面： 1 虚拟机迁移时需要大量的手工网络配置 云计算所提供的灵活性、敏捷型以及开销有效性很多得益于虚拟机的迁移。虽然从服务器的角度讲，迁移虚拟机是一个相对简单的过程，但是虚拟机所关联的网络配置目前需要大量的手工配置来实现同步迁移，包括QoS设置、访问控制以及防火墙设置，连同日志和审计功能等。 2 引发了虚拟交换机管理的争议 每个虚拟化服务器内部至少有一个虚拟交换机vSwitch，这增加了管理的复杂度，服务器的开销等。 3 网络策略实施的不一致性 传统的vSwitch是很简单的，往往缺少数据中心中流量控制和隔离的高级功能，比如虚拟VLAN、QoS、复杂的ACL等。 4 缺少虚拟机迁移的二层网络支持 虚拟机迁移时，网络需要满足诸如vMotion等所限定的条件，如源/目的服务器在同一个VLAN中等。 5 其他 此外，还有降低开销等很多其他原因。   如果说前两代数据中心在数据链路层技术上还有争论的话(以太、Token Ring、FDDI/CDDI和ATM)，第三代数据中心将压倒一切地使用以太网作为单一的交换结构，包括替代存储网络的光纤信道(Fibre Channel)以及用于超低延迟(ultra lowlatency)HPC集群互联的InfiniBand。   下面是第三代数据中心的主要目标以及可能的实现技术 1 为服务器间通信而改进的拓扑结构 在第二代数据中心网络中，传统的辐射型(huband spoke)拓扑结构适合于客户端到服务器的通信模式(有时称为纵向流量或者南北向流量)，而不适合于服务器间通信(也称为横向流量或者东西向流量)。那么，第三代数据中心网络就是采用扁平化的两层次拓扑结构，仅包含接入和汇聚两层。两层拓扑的明显好处是：减少服务器间的跳数、降低延迟、方便VLAN扩展到整个数据中心。 2 高端口密度和速度 模块化交换机最多256个10G端口，堆叠式交换机则48个。 上行链路uplink带宽可达40GbE，或者使用LAG(Link Aggregation)进行汇聚。 3 高可用性 主要指模块化交换机所提供的在交换模块、路由处理器、冷却和能源上的冗余。 4 交换机虚拟化 交换机虚拟化是一种网络多虚一的概念，其含义就是多个物理交换机被抽像成为一个大的，然后共享单一的控制平面。 这个部分第一波技术是MC-LAG(multi-chassis link aggregation group)，对应的标准化是IEEE 802.3ad标准，核心思想就是在接入层和汇聚层聚合多条链路，一方面达到以往STP和VRRP解决的消除环路的目的，另一方面通过特定的哈希算法实现多链路的负载均衡。如下图 MC-LAG只是第三代数据中心局域网的中间过渡技术，其未来替代者将是IETF的TRILL，IEEE的SPB(802.1aq)以及Cisco的FabricPath。这三个技术是很像的，只不过属于不同的领域才没有产生冲突，本质上都是在控制平面使用L2 ISIS进行拓扑学习和计算，在数据平面使用MACinMAC进行报文传输。 由于上述技术的发展，数据中心局域网拓扑也正在从辐射型(hub and spoke)的二层结构转变成网状(mesh)的二层结构，典型代表就是目前的FatTree结构。因为TRILL/SPF Briding技术的发展，使得接入交换机与核心交换机间的差别越来越小。同时使用ECMP实现多路径。如下图所示 5 控制和管理虚拟机流量 众所周知，服务器内传统的虚拟交换机vSwitch有很多弊端，诸如增加管理复杂性、功能有限、成为服务器I/O瓶颈、多厂商异构、虚拟机间流量可见性等。目前有三大类解决这个问题的技术趋势： (1)DVS：Distributed Virtual Switching,核心思想就是将vSwitch中的控制层抽取到一个集中式的管理系统中去。但是这仅能对管理众多vSwitch的复杂性有所缓解。 (2)EVB：Edge Virtual Bridging，即IEEE 802.1qbg标准。其核心就是简单升级现有交换机实现“发卡转发”(hairpin turn)将vSwitch从所有交换功能中解放出来。目前成熟的技术是VEPA，并且绝大多数厂商都支持。 (3)BPE：Bridge Port Extension，即IEEE 802.1qbh标准。其核心思想是把交换机的接口模块延伸到物理网卡中，网卡的虚拟接口和物理接入交换机都由统一的控制平面管理，核心是利用标签tag技术。 6 网络融合 第三代数据中心局域网的典型特征是存储与普通数据融合在同一个高速以太网上。这样做的好处很显然，节省空间、降低能耗和管理复杂度等。但是传统以太网“尽力而为”的特性需要改变。为此，传统以太网需要增强流控机制以消除缓存溢出(buffer overflow)的情况。无丢包以太网的核心技术就是IEEEDCB(Data Center Briding)标准，包括如下几个相关标准：流控(IEEE 802.1QbbPriority-based Flow Control (PFC))，拥塞通知(IEEE 802.1QauCongestion Notification (CN))，传输选择(IEEE 802.1QazEnhanced Transmission Selection (ETS))。   6 虚拟机动态创建和迁移的网络支持 目前自动化虚拟机迁移过程通常是基于Hypervisor管理系统与交换机组件管理系统(switch element management system,EMS)间的通信过程完成的。1) 当有虚拟机要迁移或者动态创建时，Hypervisor通过API告知EMS,并提供这个虚拟机网络的部分配置，包括虚拟MAC、VLAN、目标Hypervisor。2) EMS根据已有策略，扩展虚拟机网络配置，包括QoS以及ACL等。3)EMS根据目标Hypervisor可以推测其接入交换机，并对其进行配置(如增加VLAN等)。","title":"云计算数据中心局域网技术浅析"},{"content":"城市商业银行规模虽小，但对IT的需求却与大银行没有太大差别。云计算给了他们解决这一矛盾的思路。 中国的中小银行一直以来都有一个尴尬的现实——虽然规模小，业务却大而全。因此，中小银行对IT系统的要求，与大型银行几乎差别不大。但是从资源和实力上来讲，中小银行却与大银行相差甚远。 根据易观国际的统计，2010年我国城市商业银行等区域性银行的IT投入是41.8亿元，2011年将达到47.7亿元。从2007年至今，每年的IT投入都保持20%以上的增长。但是每年增长的IT投入与大而全的IT系统需求相比，只是杯水车薪；与大型银行的IT投入相比，更是不可同日而语。以中国银行2004年启动的IT蓝图项目为例，按照中国银行当时的规划，中国银行的这项IT系统和流程再造工程的总投资将高达100亿元。 从现实角度看，单凭一家中小银行之力从事高端研发或将系统外包，所费财力庞大，并不划算。这就逼迫中小银行想办法联合起来解决问题，德国储蓄银行就是一个很好的例子。德国一共有489家储蓄银行，都是法人机构，平均每家规模在20亿欧元左右，储蓄银行主要为居民个人、中小企业和手工业主提供服务。通过搭建统一的后方服务支持平台，各行只需付出很少的成本，即可获得强有力的后方支持，服务功能十分完善。 “德国模式”的成功，让处于变革浪潮中的国内中小银行看到了整合、重组之外不一样的发展路径。3年前的2008年3月6日，山东省的14家城市商业银行发起筹建的山东省城市商业银行合作联盟有限责任公司（以下简称“山东城商行联盟”），正式获得银监会批准同意。发起筹建山东城商行联盟的14家城商行分别具有独立的法人资格，山东城商行联盟将为这14家成员银行提供统一的IT系统和产品的开发、数据运营维护、支付结算及业务运营平台服务、金融产品研发，以及信息咨询等服务。 从此，山东省的14家城市商业银行开始在德国储蓄银行这个“洋外教”的帮助下，摸索一条全新的发展模式。 殊途同归 山东城商行联盟副总经理黄鑫最近一直非常忙碌。山东城商行联盟成立3年来最重要的一项工作正处于关键阶段——在完成了先期4家银行接入联盟统一建设的综合业务系统之后，黄鑫正带领IT团队在2011年打一场攻坚战，完成剩余11家银行的综合业务系统接入。 不过，在黄鑫看来，已经过半的2011年虽然忙碌，但随着综合业务系统的逐步落地，山东城商行联盟最困难的阶段已经过去。 “成立之初，我们只是知道要做成德国储蓄银行的模式，但是究竟如何做，还得不断摸索。创新性事物的产生，最困难的部分就是摸索，这正是我们一直以来最大的挑战。”黄鑫说: “如何将山东14家城商行共同的特点整合起来，找到解决城商行IT短板的有效路径，是我们一直在思考的问题，也是当初学习德国模式成立山东城商行联盟最直接的推动因素。” 首先，由德国储蓄银行提供技术合作，先将合作联盟组建起来，全面推进统一IT系统平台的规划与建设；其次，陆续承接各成员单位的教育培训、产品研发、战略研究、信息咨询等后方服务职能，满足成员单位的急迫需要；第三步，借助统一的IT系统平台，逐步开办一些延伸性的金融支持服务项目。 2008年底，山东城商行联盟与IBM签约，为成员银行开发并实施 “单系统、多法人”的综合业务系统，希望通过为14家成员行建设一套共享的综合业务系统平台，搭建山东城商行联盟的共享服务中心，从而拉开山东城商行联盟共享IT后台的建设序幕。 综合业务系统是山东城商行联盟为成员行提供服务的核心综合服务平台。未来,山东城商行联盟将主要依托相关系统为各成员行进行业务的发展与运行服务，也将为各成员行进行精细化管理，实现流程再造与战略转型，提升核心竞争力打下重要的技术基础。 “山东城商行联盟综合业务系统的建设对于联盟及其各成员银行的重要性非同一般。切实关系到联盟未来的生存与发展，关系到成员行的业务发展、创新与客户服务能力及整体竞争能力的提升。系统的建设与成功运行与其建设模式、业务运行模式及其IT 架构关系重大。” IBM全球企业咨询服务部合伙人丁少忠说。 2009年初，山东城商行联盟完成了核心业务系统的建设。同年11月齐商银行率先接入，山东城商行联盟迈出了快速的第一步——只用不到一年时间，就完成了综合业务系统的需求调研、系统建设和上线运行，这样的速度在银行业并不多见。在黄鑫看来，这种高效率正得益于联盟带来的一加一大于二的效应，联盟可以集中成员行最优质的资源，投入到综合业务系统这样的重点项目上。在综合业务系统建设的高峰时段，包括IBM的专家和工程师在内，有近300人参与其中，这是任何单一的中小银行所望尘莫及的。 2010年，山东城商行联盟又陆续完成了潍坊银行、莱商银行的综合业务系统接入。同年3月，陕西的长安银行成为山东城商行联盟的第15家股东，正式加入山东城商行联盟，并在2010年完成了核心业务系统的接入。 与此同时，接入新系统之后,业务的变化也立竿见影。以莱商银行为例，原有的综合业务系统一直困扰很多新产品的推出。新系统上线之后，新增了定期一本通、集团客户服务、法人账户透支等功能，同时网银、银行卡、汇划等支付手段更加成熟、便捷和安全。莱商银行还将依托此系统开通手机银行、银企直连、电话POS等电子银行服务。 然而，就在综合业务系统的接入看似有条不紊进行的同时，黄鑫却对共享服务中心的模式提出了大胆的变革。因为他越来越发现，山东城商行联盟共享服务中心的模式与云计算殊途同归。 黄鑫坦言，由于稳定性等方面的考量，银行业在新技术的应用方面一向趋于保守，因此最初的几年，山东城商行联盟更多是从比较传统的技术视角去考虑如何实现共享服务模式，并没有过多关注云计算等新的技术方案。随着综合业务系统的运行，传统技术构建的共享服务模式逐渐暴露出了一些问题，比如不断增加的基础设施如何管理，系统平台和应用软件的架构如何优化，对于成员行的服务如何收费等等。与此同时，各种云计算的技术方案和体系也越来越成熟，恰好可以帮助山东城商行联盟解决这些问题。 坚定私有云 “未来银行能否像今天我们使用电能和自来水一样，不需要组建庞大的IT部门，不需要购买昂贵的软硬件设备，不需要构建复杂的应用系统，只需根据业务的需要，像插上插头一样就可以获得所需的服务，再按照使用的服务支付相应的费用。”黄鑫说。显然，这也是山东城商行联盟希望在未来实现的蓝图。 经过3年的摸索，如今谈起山东城商行联盟未来的发展规划，黄鑫已经底气十足，“就是要构建一个基于私有云的区域性银行共享服务中心”。 IBM开发的多法人综合业务系统以及服务器的虚拟化技术，在软硬件基础设施的层面上给山东城商行云计算构想以坚实的保障，山东城商行联盟已经构建的综合业务系统和网上银行，正在以SaaS（软件即服务）的模式为成员行提供服务。PaaS（平台即服务）的优势，正在研发测试环节得以显现，不断上线的新系统，让山东城商行联盟面临大量的研发测试工作。在传统模式下，搭建一个与生产环境一样的研发测试环境，需要涉及操作系统、数据库、核心系统、应用系统等诸多环节，需要大量人力、财力和时间投入。而在PaaS模式下，一般的研发测试环境在当天就可以搭建完成。 虽然当前山东城商行联盟的云计算平台还只是雏形，但是毫无疑问，基于云计算的IT共享服务模式已经成为他们未来的方向。山东城商行联盟希望提供强大的基础设施、平台、应用服务，提升区域性银行的精细化管理能力，强化信息安全建设，促进各区域性银行的战略转型。 “我们正在通过云计算平台将资源虚拟化，将服务标准化，再通过自动化的方式，对这些资源和服务进行有效的管理，形成真正的基于云端的服务。这些服务再通过SaaS、PaaS、IaaS（架构即服务）的模式，提供给成员行。”黄鑫说，“最终，这些中小银行获得的是低成本且优质的、可以与大银行媲美的IT平台服务。他们可以将更多的精力放在业务创新上，而无需过多地考虑IT平台的事情。” “山东城商行联盟是中国中小银行业务模式创新的一次大胆尝试。”丁少忠说，“IT共享服务模式可以让中小银行更好地将精力集中在业务上，而那些足以媲美大型银行的IT技术、基础设施、系统平台、应用软件、数据，则可以使他们随时获取、按需使用、随时扩展。” 据测算，由合作联盟统一开发IT平台，可将研发成本节省至各行分别开发费用的1/5左右。 “在时机成熟的情况下，我们会将管理系统、渠道类系统等也逐步纳入共享中心。在统一共享的平台基础上，加强各行之间业务上的合作。”黄鑫说，“我们的最终目标，就是建成山东城商行联盟内部的私有云。” 深层价值 在考虑云计算和共享服务中心模式构建的同时，黄鑫还有一些更深层次的思考。 当前的云计算模式带来的成员行信息化水平的整体提高，使得成员行可以在较高的信息化平台上进行业务发展和创新。但是，这只能算是组建城商行联盟带来的浅层价值，在基于私有云的共享服务平台上，有很多尚待挖掘的深层价值。 虽然联盟的各家成员行是独立法人，有着彼此独立的业务，但是在后台的IT系统，这些独立法人银行之间的互联互通程度，与同一家银行不同网点之间的互联互通程度基本无异。这就为IT联合的基础上开展业务的联合铺平了道路。比如网点的共享，联盟的成员行之间的存折、银行卡在技术上的跨行存取不存在任何障碍。 此外，山东城商行联盟当前的私有云服务于不同的法人银行，由于缺乏相应的行业标准，对于不同的银行，究竟应该采集哪些业务和管理数据，并没有形成行业通用的标准，这就造成了当前阶段在建设统一共享系统的同时，还要考虑不同银行在数据采集方面的差异化。为了解决这一矛盾，就需要推动相应行业标准的制定，标准化的工作将随着云计算应用的深入越来越重要。行业标准的统一是云计算应用发展的基石，越统一的业务，系统就越简单，运行得就越稳定、高效。 实际上，不管是基于私有云的共享服务模式，还是传统的银行自建系统，都是为了能及时响应业务的各种需求。但是与自建系统相比，对私有云供应商的要求会越来越高，私有云供应商多方共享的系统特点决定了不能坐等客户一一提出需求再去满足，而是要在相应的行业与领域，能够走在客户的前面，引领客户的业务需求，提前感知并快速响应。","title":"中小银行的云计算后台"},{"content":"云计算平台-Workmake 快速入门   一、什么叫云计算平台 概念与大道理我就不用讲了，举几个例子。 1、如果你是一个小企业主，你有几个分店，在不同的城市，而你需要每天了解各分店的营业情况，你该怎么办？ 2、当你出差在外地，需要查看企业的统计报表，你该怎么办？ 3、如果你有一些连锁店，你希望你的会员在每一个连锁店都能实现积分与打折，你该怎么办？ 不多举了，这一切，有了互联网，都能轻而易举地实现。要实现这些的方式，就是云（我不知道是谁首先提出的这个概念，可能是外国人吧，如果是中国人，可能用“玄”比较合适）。 以分店为例，按照云的方式，各个分店可以有一个独立的数据服务器，称之为云服务器，各自独立处理自己的业务，互不干扰。领导要查看各分店的数据时，只需要上网联上某分店的数据服务器，作为客户端（也称云端）查看就可以了。（以前困扰我们的就是什么软件都需要安装，而且还要受到操作系统不断升级而装不进去的打击，一个好的云端，可以不需要安装。） 平台是什么，平台就是一个基础，这个基础帮我们解决了很多琐碎的问题，使我们的应用程序编写变得简单又容易，且能适应不同应用程序的个性化需求。 简单地说，云计算就是一种数据处理方法，云计算平台就是实现网络前、后台数据处理的一套系统。 二、Workmake简介 Workmake是一个面向中小企业应用的统合云计算平台，它有如下优点：     1、对硬件要求低，任何一台能上网的电脑均可以作为云计算平台的后台；     2、客户端可以放在U盘上，不用安装，即插即用，轻松实现异地办公；     3、客户端可以放在智能手机上，轻松实现移动办公； 4、采用易学易用的W语言，在语法设计上，W语言综合多种语言的语法特点，支持汉字名变量与汉字名函数，简化了语法结构，将面向对象技术、模块化技术等结合为一体，而且以更容易理解的方式表现出来。   5、采用目前最为流行的可视化编程方式，使代码编写、调试、运行集于一体，大大提高应用软件的设计效率。同时，根据数据库类软件功能的分解，将多种常用功能组合为一个控件或一个函数，这样，将极大地减少程序代码的编写数量和程序调试工作量，在编写数据库类软件方面，与其他编程语言相比，能做到提高效率50%至80%。熟练的使用者，能在30分钟内完成软件架构。   6、独创的流程式代码编写与调试方法，即程序运行到哪一步，源代码编写与调试即同步进行到那一步，这样，即增加了程序的生成速度，也提高了程序的可维护性。   7、良好的模块化，每一个程序体作为一个独立的文本文件格式保存，即可以随时移植到其他应用程序中，又具有良好的可阅读性，将为使用者升级与维护提供极大的方便。   8、内置多种辅助编程功能键，许多语法、函数通过一键调出。更有编程向导功能，通过设置相应的参数，直接生成程序代码。对于编程人员来说，无需记住繁杂的语法与函数，轻松通过可视化的编辑工具即可实现编程。   三、编程第一步：新建项目 启动“WM服务器”，选择菜单“新建项目”项，根据对话框输入相应的参数。 一个项目要对应一个数据库，目前支持的数据库类型有三种：Access、InterBase、SQLServer。要开发哪一种数据库，服务器要安装相应的数据库服务程序。比如SQL Server，可以安装一个简单的桌面版。   四、编程第二步：WM管理器 新建项目成功后，系统根据参数生成一个程序模板，自动启动“WM管理器”，进入新建的项目。   五、编程第三步：进入可视化编程 系统运行至每一步，按“F4”键进入编程状态。在代码编写窗口，按F1键出现编程向导，里面有各函数、控件等的使用说明，同时在右边输入参数后，可以生成相应的程序代码。   六、程序发布 程序编写完后，如果要放在其他电脑上运行，称为发布。程序发布的方式有两种： 1、源程序发布 直接将项目的文件夹复制到目的机的本系统文件夹下。 2、打包发布 点击“WM服务器”的“项目-发布项目”菜单项，根据对话框提示，输入相关内容后，生成一个独立的项目压缩包。 在已安装本系统的目的机上，点击服务器的“项目-导入项目”菜单项，读入项目压缩包，或直接放在安装文件夹下。   七、云客户端   运行在客户端的程序，称作云客户端（简称云端）。 点击服务器的“项目－提取客户端程序”菜单项，将客户端程序提取出来(或在本系统的安装目录下，找到文件“w_cli.exe”，直接拷贝出来)，放在U盘上，拷入客户端电脑的自定义文件夹下，不需要安装，直接运行。 如果需要用到手机客户端，点击服务器的“项目-提取手机（Android系统）客户端程序”菜单项，将程序提取到手机卡上，然后，将卡插入手机，在手机上运行一下所提取的程序，客户端即安装在了手机上。 在互联网上，为了使云端能顺利地找到云服务器，需要为云端和云服务器申请用户号，用户号的申请请参见网址：http://www.net9999.com。  ","title":"云计算开发平台编程入门"},{"content":"“云计算”(Cloud Computing)是分布式处理(Distributed Computing)、并行处理(Parallel Computing)和网格计算(Grid Computing)的发展，或者说是这些计算机科学概念的商业实现。 云计算的概念是由Google提出的，这是一个美丽的网络应用模式。狭义云计算是指IT基础设施的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的资源；广义云计算是指服务的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的服务。这种服务可以是IT和软件、互联网相关的，也可以是任意其他的服务，它具有超大规模、虚拟化、可靠安全等独特功效；“云计算”图书版本也很多，都从理论和实践上介绍了云计算的特性与功用。 简单的说云计算就是透过网络将庞大的计算处理程序自动分拆成无数个较小的子程序，再交由多部服务器所组成的庞大系统经搜寻、计算分析之后将处理结果回传给用户。透过这项技术，网络服务提供者可以在数秒之内，达成处理数以千万计甚至亿计的信息，达到和“超级计算机”同样强大效能的网络服务。 云计算基本概念 英译：cloud；cloud computing；cloud computer；cloud-based。 云计算（cloud computing，分布式计算技术的一种，其最基本的概念，是透过网络将庞大的计算处理程序自动分拆成无数个较小的子程序，再交由多部服务器所组成的庞大系统经搜寻、计算分析之后将处理结果回传给用户。透过这项技术，网络服务提供者可以在数秒之内，达成处理数以千万计甚至亿计的信息，达到和“超级计算机”同样强大效能的网络服务。 最简单的云计算技术在网络服务中已经随处可见，例如搜寻引擎、网络信箱等，使用者只要输入简单指令即能得到大量信息。 未来如手机、GPS等行动装置都可以透过云计算技术，发展出更多的应用服务。 进一步的云计算不仅只做资料搜寻、分析的功能，未来如分析DNA结构、基因图谱定序、解析癌症细胞等，都可以透过这项技术轻易达成[7]。　 稍早之前的大规模分布式计算技术即为“云计算”的概念起源 云计算时代，可以抛弃U盘等移动设备，只需要进入Google Docs页面，新建文档，编辑内容，然后，直接将文档的URL分享给你的朋友或者上司，他可以直接打开浏览器访问URL。我们再也不用担心因PC硬盘的损坏而发生资料丢失事件。 狭义云计算 提供资源的网络被称为“云”。“云”中的资源在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。这种特性经常被称为像水电一样使用IT基础设施。 广义云计算 这种服务可以是IT和软件、互联网相关的，也可以是任意其他的服务。 解释： 这种资源池称为“云”。“云”是一些可以自我维护和管理的虚拟计算资源，通常为一些大型服务器集群，包括计算服务器、存储服务器、宽带资源等等。云计算将所有的计算资源集中起来，并由软件实现自动管理，无需人为参与。这使得应用提供者无需为繁琐的细节而烦恼，能够更加专注于自己的业务，有利于创新和降低成本。 有人打了个比方：这就好比是从古老的单台发电机模式转向了电厂集中供电的模式。它意味着计算能力也可以作为一种商品进行流通，就像煤气、水电一样，取用方便，费用低廉。最大的不同在于，它是通过互联网进行传输的。 云计算是并行计算(Parallel Computing)、分布式计算(Distributed Computing)和网格计算(Grid Computing)的发展，或者说是这些计算机科学概念的商业实现。云计算是虚拟化(Virtualization)、效用计算(Utility Computing)、IaaS(基础设施即服务)、PaaS(平台即服务)、SaaS(软件即服务)等概念混合演进并跃升的结果。 总的来说，云计算可以算作是网格计算的一个商业演化版。早在2002年，我国刘鹏就针对传统网格计算思路存在不实用问题，提出计算池的概念：“把分散在各地的高性能计算机用高速网络连接起来，用专门设计的中间件软件有机地粘合在一起，以Web界面接受各地科学工作者提出的计算请求，并将之分配到合适的结点上运行。计算池能大大提高资源的服务质量和利用率，同时避免跨结点划分应用程序所带来的低效性和复杂性，能够在目前条件下达到实用化要求。”如果将文中的“高性能计算机”换成“服务器集群”，将“科学工作者”换成“商业用户”，就与当前的云计算非常接近了。 云计算具有以下特点 (1) 超大规模。“云 云计算管理系统[5]”具有相当的规模，Google云计算已经拥有100多万台服务器， Amazon、IBM、微软、Yahoo等的“云”均拥有几十万台服务器。企业私有云一般拥有数百上千台服务器。“云”能赋予用户前所未有的计算能力。 (2) 虚拟化。云计算支持用户在任意位置、使用各种终端获取应用服务。所请求的资源来自“云”，而不是固定的有形的实体。应用在“云”中某处运行，但实际上用户无需了解、也不用担心应用运行的具体位置。只需要一台笔记本或者一个手机，就可以通过网络服务来实现我们需要的一切，甚至包括超级计算这样的任务。 (3) 高可靠性。“云”使用了数据多副本容错、计算节点同构可互换等措施来保障服务的高可靠性，使用云计算比使用本地计算机可靠。 (4) 通用性。云计算不针对特定的应用，在“云”的支撑下可以构造出千变万化的应用，同一个“云”可以同时支撑不同的应用运行。 (5) 高可扩展性。“云”的规模可以动态伸缩，满足应用和用户规模增长的需要。 (6) 按需服务。“云”是一个庞大的资源池，你按需购买；云可以象自来水，电，煤气那样计费。 (7) 极其廉价。由于“云”的特殊容错措施可以采用极其廉价的节点来构成云，“云”的自动化集中式管理使大量企业无需负担日益高昂的数据中心管理成本，“云”的通用性使资源的利用率较之传统系统大幅提升，因此用户可以充分享受“云”的低成本优势，经常只要花费几百美元、几天时间就能完成以前需要数万美元、数月时间才能完成的任务。 云计算可以彻底改变人们未来的生活，但同时也要重视环境问题，这样才能真正为人类进步做贡献,而不是简单的技术提升。 (8) 潜在的危险性：云计算服务除了提供计算服务外，还必然提供了存储服务。但是云计算服务当前垄断在私人机构（企业）手中，而他们仅仅能够提供商业信用。对于政府机构、商业机构（特别象银行这样持有敏感数据的商业机构）对于选择云计算服务应保持足够的警惕。一旦商业用户大规模使用私人机构提供的云计算服务，无论其技术优势有多强，都不可避免地让这些私人机构以“数据（信息）”的重要性挟制整个社会。对于信息社会而言，“信息”是至关重要的。另一方面，云计算中的数据对于数据所有者以外的其他用户云计算用户是保密的，但是对于提供云计算的商业机构而言确实毫无秘密可言。这就象常人不能监听别人的电话，但是在电讯公司内部，他们可以随时监听任何电话。所有这些潜在的危险，是商业机构和政府机构选择云计算服务、特别是国外机构提供的云计算服务时，不得不考虑的一个重要的前提。 云计算的几大形式 InfoWorld网站同数十家公司、分析家和IT用户讨论出了云计算的几大形式： 1.SAAS（软件即服务） 这种类型的云计算通过浏览器把程序传给成千上万的用户。在用户眼中看来，这样会省去在服务器和软件授权上的开支；从供应商角度来看，这样只需要维持一个程序就够了，这样能够减少成本。Salesforce.com是迄今为止这类服务最为出名的公司。SAAS在人力资源管理程序和ERP中比较常用。 Google Apps和Zoho Office也是类似的服务 2.实用计算（Utility Computing） 这个主意很早就有了，但是直到最近才在Amazon.com、Sun、IBM和其它提供存储服务和虚拟服务器的公司中新生。这种云计算是为IT行业创造虚拟的数据中心使得其能够把内存、I/O设备、存储和计算能力集中起来成为一个虚拟的资源池来为整个网络提供服务。 3.网络服务 同SAAS关系密切，网络服务提供者们能够提供API让开发者能够开发更多基于互联网的应用，而不是提供单机程序。 4.平台即服务 另一种SAAS，这种形式的云计算把开发环境作为一种服务来提供。你可以使用中间商的设备来开发自己的程序并通过互联网和其服务器传到用户手中。 5.MSP（管理服务提供商） 最古老的云计算运用之一。这种应用更多的是面向IT行业而不是终端用户，常用于邮件病毒扫描、程序监控等等。 6.商业服务平台 SAAS和MSP的混合应用，该类云计算为用户和提供商之间的互动提供了一个平台。比如用户个人开支管理系统，能够根据用户的设置来管理其开支并协调其订购的各种服务。 7.互联网整合 将互联网上提供类似服务的公司整合起来，以便用户能够更方便的比较和选择自己的服务供应商。 云计算的20个基本定义 Markus Klems 云计算是一个囊括了开发，负载平衡，商业模式，以及架构的时髦词，是软件业的未来模式（Software 10.0），或者简单地讲，云计算就是以 Internet 为中心的软件。 Reuven Cohen 云计算是一种基于 Web 的服务，目的是让用户只为自己需要的功能付钱，同时消除传统软件在硬件，软件，专业技能方面的投资。云计算让用户脱离技术与部署上的复杂性而获得应用。 Jeff Kaplan 云计算这个词将在未来的一到两年内将炙手可热，人们会依此实现虚拟化并重造 IT 应用，创造出基于服务的业务模式。 Douglas Gourlay 云计算指的是一个大的宏图，基本上说，就是让用户透过 Internet 访问技术服务，现在，我每次登陆 Facebook 或搜索航班，事实上都是在使用云计算。 Praising Gaw 云计算就是新的 Web2.0，一种既有技术上的市场绽放。就象以前人们在自己的网站上放一点 ajax 就宣称自己是 Web2.0 一样，云计算是一个新的流行词。 积极的一面是，Web2.0 最终抓住了主流眼球，同样，云计算概念最终也会改变人们的思想，最终爆发出各种各样的概念，托管服务，ASP，网格计算，软件作为服务，平台作为服务，任何东西作为服务。 Damon Edwards 云计算还有很多令人费解的东西，然而不必如此复杂，只有三种服务是基于“云”的，SaaS，PaaS 和云计算平台。 Brian de Haaff 从消费者的角度看，SaaS 是云计算的一种，然而行业内的人必须明白这到底是什么意思。简单说，云计算就是SaaS的升华。 Ben Kepes 云模式的初衷是让硬件层的消费象按需计算，按所需存储空间那样进行，而为了让云模式带来更多力量，我们需要在整个应用架构中，在一个虚拟的环境中实现配制，部署，服务。 Kirill Sheynkman 我曾经和客户这样比喻云计算，我们可以把云计算比作“云厨”，我是一家的厨师，负责一家人的饭食，如果我的孩子想吃意大利食物，我就或做或订意大利饭给他，这些东西可能每天都变。拿我们的 Data Center 3.0 来说，你可以决定你的应用程序是在本地运行，还是在别的其它数据中心运行，如果发现资源不够，你也可以中途改变主意。事实上，基于自动化管理，你可以实时改变。 Omar Sultan 云计算就是为一些需要动态改变的需要访问资源与服务。应用和服务请求的资源来自“云”，而不是固定的有形的实体。云就是一些可以自我维护和管理的虚拟资源。 Kevin Hartig 云是一个庞大的资源池，你按需购买；云是虚拟化的；云可以象自来水，电，煤气那样计费。 Jan Pritzker 云计算是用户友好的网格计算。 Trevor Doerksen 云计算的意思是，外包的，用多少买多少的，各取所需的，一些来自 Internet 的东西。Thorsten von Eicken要想讨论围绕着云计算这个概念的问题，我们需要在一个历史背景中进行，看看云计算的先驱者，他们所遇到的问题，会给我们一些指引，以避免同样的问题。 Paul Wallis 关于云计算的分布，我们可以借用金字塔模型。处于顶端的是那些只需要用户关心这是什么的一些应用，如 Gmail， Hotmail， Quicken Online等等。 处于中间的是一些服务，你拥有逐渐增强的灵活性与可控制性，但仍受一些限制，Google App Engine， Heroku， Mosso， Engine Yard， Joyent or force.com （SalesForce platform） 一类的应用算这一类别。处于底端的是一些诸如 Amazon EC2， GoGrid， RightScale 和 Linode 一类的架构。 Michael Sheehan Web 与博客世界繁荣让人相信，任何应用都可以走向 Web 化，事实上，有些是可以的，但大部分不可以。可靠性，可扩展性，安全，以及一大堆问题会阻止多数公司将他们的核心业务放到“云”中，如果那样，出现问题的成本将非常高。Amazon 是云计算的领先者，但即使是 Amazon 也遇到很多问题，云计算还需要不断完善，它需要走的路可能比多数人估计的都要长。 Don Dodge 现在的高速网络，高性能图形处理器，快但并不贵的服务器和存储让工程师将越来越多的计算能力集中到数据中心，10年前，研究者们创造了网格计算的概念，而云计算将更强大。 Aaron Ricadela 当我们向不懂计算机技术的人提供虚拟技术的时候，我们希望虚拟或隐藏的是其复杂性。绝大多数人希望同应用或服务，而不是软件打交道。对于云计算，我们希望软件本身被虚拟或躲藏在系统或专业人员的背后，或者说“云”的背后。技术的发展也应了这句古话，总是螺旋上升的。早期的大型机时代，大型机集中了所有计算;而到了PC时代，计算能力则分布在每一台PC上;即将进入以“云计算”为代表的互联网时代之后，计算能力又将走向集中。 分布式计算的PC时代，创造了微软;集中式计算的“云时代”，创造了谷歌。与谷歌试图将所有计算和应用搬到“云”里不同，微软提出“云-端计算”的平衡理念：“云”和终端都将承担一部分计算和应用。 微软提出“云-端计算”的基础是：虽然“云计算”时代，由摩尔定律及WINTEL架构所决定的平衡正在打破，但一个由硬件、带宽、内容构成的新平衡正在形成：终端性能、带宽的发展，永远也赶不上内容的增长速度，三者总是维持一个动态的最佳平衡。 Irving Wladawsky Berger 在我看来，云计算就是将以前那些需要大量软硬件投资以及专业技术能力的应用，以基于 Web 服务的方式提供给用户。 掌握云计算其实也是一种利用互联网上的软件和数据的能力。 “云计算”时代 云计算的演进当今社会，PC依然是我们日常工作生活中的核心工具——我们用PC处理文档、存储资料，通过电子邮件或U盘与他人分享信息。如果PC硬盘坏了，我们会因为资料丢失而束手无策。而在“云计算”时代，“云”会替我们做存储和计算的工作。“云”就是计算机群，每一群包括了几十万台、甚至上百万台计算机。“云”的好处还在于，其中的计算机可以随时更新，保证“云”长生不老。Google就有好几个这样的“云”，其他IT巨头，如微软、雅虎、亚马逊（Amazon）也有或正在建设这样的“云”。届时，我们只需要一台能上网的电脑，不需关心存储或计算发生在哪朵“云”上，但一旦有需要，我们可以在任何地点用任何设备，如电脑、手机等，快速地计算和找到这些资料。我们再也不用担心资料丢失。 在谷雪梅加入Google以后，她发现这一类概念已经得到了实践。Google的技术，可以让几十万台计算机一起发挥作用，组成强大的数据中心。Google中国前CEO李开复此前接受《财经》记者专访时说，Google真正的竞争力就在于有这些“云”，他们让Google有了无与伦比的存储和计算全球数据的能力。Google在创立之初，并没有刻意地去追求“云计算”和“晶格计算”等概念。但作为一家搜索引擎，Google在客观上需要拥有这些“云”。实际上，雅虎的搜索同样用到了“云计算”。云计算是一种新兴的共享基础架构的方法，它可以将巨大的系统池连接在一起以提供各种IT服务。很多因素推动了对这类环境的需求，其中包括连接设备、实时数据流、 SOA 的采用以及搜索、开放协作、社会网络和移动商务等这样的 Web 2.0 应用的急剧增长。另外，数字元器件性能的提升也使IT环境的规模大幅度提高，从而进一步加强了对一个由统一的云进行管理的需求。 云计算+always-On设备 被评为“25年来最具影响力的十大IT技术组合” 《纽约时报》:云计算到底指什么？ 云计算的说法正在广为流行，Gartner高级分析师Ben Pring评价道：“它正在成为一个大众化的词语。”但是，问题是似乎每个人对于云计算的理解各不相同。作为一个对互联网的比喻，“云”是很容易理解的。但是一旦同“计算”联系起来，它的意义就扩展了，而且开始变得模糊起来。有些分析师和公司把云计算仅仅定义为计算的升级版——基本上就是互联网上提供的众多虚拟服务器。另外一些人把云计算定义的更加宽泛，他们认为用户在防火墙保护之外消费的任何事物都处于“云”之中。 云计算被人们关注是在人们考虑IT业到底需要什么之后，人们需要找到一种办法能够在不增加新的投资，新的人力和新的软件的情况下增加互联网的能力和容量。而云计算正好提供了这种可能。现今云计算正处于一个起步的阶段，大大小小的公司提供着各式各样的云计算服务，从软件应用到网络存储再到邮件过滤。这些公司一部分是基础设备提供商，另一部分是像Salesforce.com之类的SAAS（软件即服务）提供商。现今主要实现的是基于互联网的个人服务，但是云计算的聚合和整合正在产生。 判断是否是云计算的十五种方法 　1）如果标称是“网格”或“OGSA（开放网格服务架构）”...那么，它不是云。 2）如果需要你向厂商提供一份几十页的需求说明书...那么，它不是云。 3）如果你不能用自己的信用卡来购买...那么，它不是云。 4）如果他们想卖给你硬件设备...那么，它不是云。 5）如果没有提供API...那么，它不是云。 6）如果需要你重新构架你的系统...那么，它不是云。 7）如果你不能在10分钟之间部署（provision）服务器...那么，它不是云。 8）如果你不能在10分钟之间撤销（deprovision）服务器...那么，它不是云。 9）如果你知道你所使用的机器的具体位置...那么，它不是云。 10）如果需要有一个咨询顾问来帮助你...那么，它不是云。 11）如果需要你事先准备好所需机器数目清单...那么，它不是云。 12）如果你知道它运行某种操作系统...那么，它不是云。 13）如果你不用把它连到你自己的机器上去...那么，它不是云。 14）如果需要你安装软件才能使用它...那么，它不是云。 15）如果你拥有所有这些硬件...那么，它不是云。 云计算主要应用 亚马逊网站（Amazon.com，下称亚马逊） 是以在线书店和电子零售业起家的，如今已在业界享有盛誉，不过它最新的业务却与云计算有关。两年多以前，亚马逊作为首批进军云计算新兴市场的厂商之一，为尝试进入该领域的企业开创了良好的开端。 亚马逊的云名为亚马逊网络服务（Amazon WebServices，下称AWS），目前主要由4块核心服务组成：简单存储服务（Simple StorageService，S3）；弹性计算云（Elastic Compute Cloud，EC2）；简单排列服务（Simple QueuingService）以及尚处于测试阶段的SimpleDB。换句话说，亚马逊现在提供的是可以通过网络访问的存储、计算机处理、信息排队和数据库管理系统接入式服务。 谷歌公司（Google，下称谷歌） 围绕因特网搜索创建了一种超动力商业模式。如今，他们又以应用托管、企业搜索以及其他更多形式向企业开放了他们的“云”。 今年4月，谷歌推出了谷歌应用软件引擎（Google AppEngine，下称GAE），这种服务让开发人员可以编译基于Python的应用程序，并可免费使用谷歌的基础设施来进行托管（最高存储空间达 500MB）。对于超过此上限的存储空间，谷歌按“每CPU内核每小时”10至12美分及1GB空间15至18美分的标准进行收费。最近，谷歌还公布了提供可由企业自定义的托管企业搜索服务计划。 Salesforce 是软件即服务厂商的先驱，它一开始提供的是可通过网络访问的销售力量自动化应用软件。在该公司的带动下，其他软件即服务厂商已如雨后春笋般蓬勃而起。Salesforce的下一目标是：平台即服务。 该公司正在建造自己的网络应用软件平台Force.com，这一平台可作为其他企业自身软件服务的基础。Force.com包括关系数据库、用户界面选项、企业逻辑以及一个名为Apex的集成开发环境。程序员可以在平台的Sandbox上对他们利用Apex开发出的应用软件进行测试，然后在Salesforce的AppExchange目录上提交完成后的代码。 微软公司 在云计算的起步阶段，微软曾经历过不少周折。经过几年的磨合调整之后，这个软件巨头的云计算战略终于走上了正轨。 根据有些厂商的预想，未来绝大部分的IT资源都将来自云计算，但微软却并不这么认为。几个月前，微软首席软件架构师（CSA）雷;奥兹（RayOzzie）曾表示，微软的宏伟计划是“提供均衡搭配的企业级软件、合作伙伴托管服务以及云服务”。简而言之，微软将其称为“软件加服务 ”（software plus services）。 微软将在今年推出的首批软件即服务产品包括Dynamics CRM Online、Exchange Online、OfficeCommunications Online以及SharePointOnline。每种产品都具有多客户共享版本，其主要服务对象是中小型企业。单客户版本的授权费用在5,000美元以上。针对普通用户，微软的在线服务还包括Windows Live、Office Live和Xbox Live等。 云计算与网格计算的区别 云计算和网格计算本没有任何关系，至于云计算和分布式计算、效用计算等等概念，读者可以以此类推。 狭义云计算是指IT基础设施的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的资源（硬件、平台、软件）。提供资源的网络被称为“云”。“云”中的资源在用户看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。这种特性经常被称为像水电一样使用IT基础设施。 广义云计算是指服务的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的服务。这种服务可以是IT和软件、互联网相关的，也可以使任意其他的服务。 云计算不是一种商业模式，不是一种付费模式，不是一种IT技术，不是一类IT产品，不是一种付费模式，不是SOA，不是虚拟化或虚拟化软件，不是简单地将购买变为租赁，不是分布式计算，不是高性能计算，不是网格计算，不是软件即服务（SaaS）。 网格计算是指分布式计算中两类比较广泛使用的子类型。一类是，在分布式的计算资源支持下作为服务被提供的在线计算或存储。另一类是，一个松散连接的计算机网络构成的一个虚拟超级计算机，可以用来执行大规模任务。该技术通常 被用来通过志愿者计算解决计算敏感型的科研、数学、学术问题，也被商业公司用来进行电子商务和网络服务所需的后 台数据处理、经济预测、地震分析等。 网格计算强调资源共享，任何人都可以做为请求者使用其它节点的资源，任何人都需要贡献一定资源给其他节点。网格计算强调将工作量转移到远程的可用计算资源上。云计算强调专有，任何人都可以获取自己的专有资源，并且这些资源是 由少数团体提供的，用户不需要贡献自己的资源。在云计算中，计算资源被转换形式去适应工作负载，它支持网格类型应用，也支持非网格环境，比如运行传 统或 Web2.0 应用的三层网络架构。网格计算侧重并行的计算集中性需求，并且难以自动扩展。云计算侧重事务性应 用，大量的单独的请求，可以实现自动或半自动的扩展。 网格的构建大多为完成某一个特定的任务需要，或者支持挑战性的应用。这也是会有生物网格、地理网格、国家教育网格等各种不同的网格项目出现的原因。而云计算一般来说都是为了通用应用而设计的。云计算一开始就支持广泛企业计算、Web应用，普适性更强。网格计算的主要思路是聚合分布的松散耦合资源。而云计算的IT资源相对集中，以Intenet的形式提供底层资源的获得和使用。 在对待异构性方面，二者理念上有所不同。网格计算用中间件屏蔽异构系统，力图使用户面向同样的环境，把困难留在中间件，让中间件完成任务。而云计算，不同的服务用不同的方法对待异构型，所有传统的方法在这里都可以应用。有的提供基础设施，类似传统的服务器，用户选择操作系统和应用环境，有的则屏蔽了操作系统、基础设施和系统软件的差异，比如Paas服务。 简言之，云计算和网格没有任何内在联系。网格计算一直在发展，只是它和云计算的出现没有任何关系。网格计算作为一种面向特殊应用的解决方案将会继续在某些领域存在，而云计算作为一场IT变革，则会深刻影响整个IT产业和人类社会","title":"云计算是什么，云计算的特点及主要形式"},{"content":"【核心提示：云计算不仅带来了IT模式的变化，也将引发IT服务的变革，企业和用户只需要关注数据是自己的，而对数据的计算存储方式、效率均采用云的服务来实现和提升，云的供应商则将核心业务重点放在IT架构的运营上，服务将成为下一代IT的核心内容。】 　　2007年以来，云计算成为IT领域最令人关注的话题之一，也是当前大型企业、互联网的IT建设正在考虑和投入的重要领域。云计算的提出，引发了新的技术变革和新的IT服务模式。但是对大多数而言人，云还是一种还不确切的定义，什么是云，为什么需要云? 　　1 为什么需要云计算? 　　企业的IT建设过程，以当前的基准来衡量，主要有三个阶段，如图1所示。 　　图1 企业IT向云计算演进路线图 　　第一个阶段：大集中过程。 　　这一过程将企业分散的数据资源、IT资源进行了物理集中，形成了规模化的数据中心基础设施。在数据集中过程中，不断实施数据和业务的整合，大多数企业的数据中心基本完成了自身的标准化，使得既有业务的扩展和新业务的部署能够规划、可控，并以企业标准进行IT业务的实施，解决了数据业务分散时期的混乱无序问题。 　　在这一阶段中，很多企业在数据集中后期也开始了容灾建设，特别是在雪灾、大地震之后，企业的容灾中心建设普遍受到重视，以金融为热点行业几乎开展了全行业的容灾建设热潮，并且金融行业的大部分容灾建设的级别都非常高，面向应用级容灾(数据零丢失为目标)。 　　总的来说，第一阶段过程解决了企业IT分散管理和容灾的问题。 　　第二个阶段：实施虚拟化的过程。 　　在数据集中与容灾实现之后，随着企业的快速发展，数据中心IT基础设施扩张很快，但是系统建设成本高、周期长，即使是标准化的业务模块建设(哪怕是系统的复制性建设)，软硬件采购成本、调试运行成本与业务实现周期并没有显著下降。标准化并没有给系统带来灵活性，集中的大规模IT基础设施出现了大量系统利用率不足的问题，不同的系统运行在独占的硬件资源中，效率低下而数据中心的能耗、空间问题逐步突显出来。因此，以降低成本、提升IT运行灵活性、提升资源利用率为目的的虚拟化开始在数据中心进行部署。 　　虚拟化屏蔽了不同物理设备的异构性，将基于标准化接口的物理资源虚拟化成逻辑上也完全标准化和一致化的逻辑计算资源(虚拟机)和逻辑存储空间。虚拟化可以将多台物理服务器整合成单台，每台服务器上运行多种应用的虚拟机，实现物理服务器资源利用率的提升，由于虚拟化环境可以实现计算与存储资源的逻辑化变更，特别是虚拟机的克隆，使得数据中心IT实施的灵活性大幅提升，业务部署周期可用数月缩小到一天以内。虚拟化后，应用以VM为单元部署运行，数据中心服务器数量可大为减少且计算能效提升，使得数据中心的能耗与空间问题得到控制。 　　总的来说，第二阶段过程提升了企业IT架构的灵活性，数据中心资源利用率有效提高，运行成本降低。 　　第三个阶段：云计算阶段。 　　对企业而言，数据中心的各种系统(包括软硬件与基础设施)是一大笔资源投入。新系统(特别是硬件)在建成后一般经历3-5年即面临逐步老化与更换，而软件技术则不断面临升级的压力。另一方面，IT的投入难以匹配业务的需求，即使虚拟化后，也难以解决不断增加的业务对资源的变化需求，在一定时期内扩展性总是有所限制。 　　于是企业IT产生新的期望蓝图：IT资源能够弹性扩展、按需服务，将服务作为IT的核心，提升业务敏捷性，进一步大幅降低成本。因此，面向服务的IT需求开始演化到云计算架构上。云计算架构可以由企业自己构建，也可采用第三方云设施，但基本趋势是企业将逐步采取租用IT资源的方式来实现业务需要，如同水力、电力资源一样，计算、存储、网络将成为企业IT运行的一种被使用的资源，无需自己建设，可按需获得。 　　从企业角度，云计算解决了IT资源的动态需求和最终成本问题，使得IT部门可以专注于服务的提供和业务运营。 　　这三个阶段中，大集中与容灾是面向数据中心物理组件和业务模块，虚拟化是面向数据中心的计算与存储资源，云计算最终面向IT服务。这样一个演进过程，表现出IT运营模式的逐步改变，而云计算则最终根本改变了传统IT的服务结构，它剥离了IT系统中与企业核心业务无关的因素(如IT基础设施)，将IT与核心业务完全融合，使企业IT服务能力与自身业务的变化相适应。 　　在技术变革不断发生的过程中，网络逐步从基本互联网功能转换到WEB服务时代(典型的WEB2.0时代)，IT也由企业网络互通性转换到提供信息架构全面支撑企业核心业务。技术驱动力也为云计算提供了实现的客观条件，如图2所示，在关键领域云计算技术已经就绪： 　　图2 云计算的技术基础 标准化：公共技术的长期发展，使得基础组件的标准化非常完善，硬件层面的互通已经没有阻碍(即使是非常封闭的大型机目前也开始支持对外直接出IP接口)，大规模运营的云计算能够极大降低单位建设成本。 　　虚拟化与自动化：虚拟化技术不断纵深发展，IT资源已经可以通过自动化的架构提供全局动态调度能力，自动化提升了IT架构的伸缩性和扩展性。 　　并行/分布式架构：大规模的计算与数据处理系统已经在分布式、并行处理的架构上得到广泛应用，计算密集、数据密集、大型数据文件系统成为云计算的实现基础，从而要求整个基础架构具有更高的弹性与扩展性。 　　带宽：大规模的数据交换需要超高带宽的支撑，网络平台在40G/100G能力下可具备更扁平化的结构，使得云计算的信息交互以最短快速路径执行。 　　因此，从传统WEB服务向云计算服务发展已经具备技术基础，而企业的IT从信息架构演进到弹性的IT服务也成为必然。 　　2 云计算的定义与基本模型 　　云计算的定义 　　目前，云计算没有统一的定义，这也与云计算本身特征很相似。维基百科对云计算的定义是：云计算是一种基于互联网的计算新方式，通过互联网上异构、自治的服务为个人和企业提供按需即取的计算。由于资源是在互联网上，而互联网通常以云状图案来表示，因此以云来类比这种计算服务，同时云也是对底层基础设施的一种抽象概念。云计算的资源是动态扩展且虚拟化的，通过互联网提供，终端用户不需要了解云中基础设施的细节，不必具有专业的云技术知识，也无需直接进行控制，只关注自身真正需要什么样的资源以及如何通过网络来获得相应的服务。 　　关于云计算的描述，在当前具有的共同特征是：云是一种服务，类似水电一样，按需使用、灵活付费，使用者只关注服务本身。H3C的云计算理念认为云计算是一种新的IT服务模式，支持大规模计算资源的虚拟化，提供按需计算、动态部署、灵活扩展能力。 　　图3给出了一个用户使用云计算的示意，用户对云资源的使用不用关注具体技术实现细节，只需关注业务的体验。比如当前被广泛使用的搜狗拼音输入法，它其实就是一种云服务：搜狗输入法能够以快速简单的方式为使用者提供需要的语境、备选的语素，使得文字的编排可以成为激发灵感的一个辅助工具;但是用户并不关注搜狗输入法在后台运行的数千台服务器提供的大型集群计算，这些工作都交给了ISP。 　　图3 云计算视图 　　云计算模型 　　对于云计算的分类，目前比较统一的方式是从以下两个维度进行划分。 　　Ÿ 按服务的层次。 　　图4 云计算的服务层次 　如图4所示，最底层是IT Foundation，严格来说这并不是云计算的一层，是构成云计算的IT基础设施的集合，具体表现为不同的软硬件厂商的产品与方案。 　　云计算服务的基础层次是IaaS(Infrastructure as a Service，基础架构即服务)。在这一层面，通过虚拟化、动态化将IT基础资源(计算、网络、存储)形成资源池。资源池即是计算能力的集合，终端用户(企业)可以通过网络获得自己所需要的计算资源，运行自己的业务系统，这种方式使用户不必自己建设这些基础设施，而只是通过对所使用资源付费即可。 　　在IaaS之上是PaaS(Platform as a Service，平台即服务)层。这一层面除了提供基础计算能力，还具备了业务的开发运行环境，对于企业或终端用户而言，这一层面的服务可以为业务创新提供快速低成本的环境。 　　最上层是SaaS(Soft as a Service，软件即服务)。SaaS可以说在云计算概念出现之前已经有了，而随着云计算技术的发展而得到了更好的支撑。SaaS的软件是拿来即用的，不需要用户安装，因为SaaS真正运行在ISP的云计算中心，SaaS的软件升级与维护也无需终端用户参与，SaaS是按需使用的软件，传统软件买了一般是无法退货的，而SaaS是灵活收费的，不使用就不付费。 　　层次化的云计算一般也称为I-P-S云计算，各层可独立提供云服务，下一层的架构也可以为上一层云计算提供支撑。仍以搜狗拼音为例，由大型服务器群、高速网络、存储系统等组成的IaaS架构为内部的业务开发部门提供基础服务，而内部业务开发系统在IaaS上构建了PaaS，并部署运行搜狗拼音应用系统，这样一个大型的系统对互联网用户而言，就是一个大规模SaaS应用。 　　Ÿ 按云的归属。 　　图5 云的归属 　　如图5所示，主要分为公有云、私有云和混合云。公有云一般属ISP构建，面向公众、企业提供公共服务，由ISP运营;私有云是指由企业自身构建的为内部提供云服务;当企业既有私有云，同时又采用公共云计算服务，这两种云之间形成一种内外数据相互流动的形态，便是混合云的模式。 　　3 云计算的基础架构要求 　　从本质上来说，云计算是一种IT模式的改变，这种变化使得IT基础架构的运营专业化程度不断集中和提高从而对基础架构层面提出更高的要求。如图6所示，云计算聚焦于高性能、虚拟化、动态性、扩展性、灵活性、高安全，简化用户的IT管理，提升IT运行效率，大幅节省成本。 　　图6 云计算对基础架构的关注点 　　云计算的基础架构主要以计算(服务器)、网络、存储构成，为满足云计算的上述要求，各基础架构层面都有自身的要求。如图7所示，对于服务器，云计算要求其支持更密集的计算能力(目前多路多核架构)，完全的虚拟化能力(CPU指令虚拟化、软件虚拟化、桥片虚拟化、IO虚拟化)，多个IO(数据访问与存储)的整合—CEE与FCOE;对于网络，面向100G的性能成为云计算的基本支撑平台，搭建更扁平化、高度可扩展的架构，满足虚拟机算环境的大规模二层无环网络、FCOE/DCE的统一交换、L2-L7的深度高速(10GE级性能)安全集成;对于存储，高速IO将面向10G/16G，高度扩展的虚拟化海量存储，面向统一交换IO整合的FCOE。 　　图7 云计算的基础架构要求 4 构建与交付云计算 　　不论使用I-P-S的哪一层云计算服务，企业都需要考虑是采用SP的计算资源还是自建云计算资源。从目前运营方式，主要可能有6种方式，如图8所示。 　　图8 云计算的服务交付方式 　　方式一，企业所有，自行运营。这是一种典型的私有云模式，企业自建自用，基础资源在企业数据中心内部，运行维护也由企业自己承担。 　　方式二，企业所有，运维外包。这也是私有云，但是企业只进行投资建设，而云计算架构的运行维护外包给服务商(也可以是SP)，基础资源依然在企业数据中心。 　　方式三，企业所有，运维外包，外部运行。由企业投资建设私有云，但是云计算架构位于服务商的数据中心内，企业通过网络访问云资源，这是一种物理形体的托管型。 　　方式四，企业租赁，外部运行，资源独占。由SP构建云计算基础资源，企业只是租用基础资源形成自身业务的虚拟云计算，但是相关物理资源完全由企业独占使用，这是一种虚拟的托管型服务(数据托管)。 　　方式五，企业租赁，外部运行，资源共享调度。由SP构建，多个企业同时租赁SP的云计算资源，资源的隔离与调度由SP管理，企业只关注自身业务，不同企业在云架构内虚拟化隔离，形成一种共享的私有云模式。 　　方式六，公共云服务。由SP为企业或个人提供面向互联网的公共服务(如邮箱、即时通信、共享容灾等)，云架构与公共网络连接，由SP保证不同企业与用户的数据安全。 　　从更长远的周期来看，云的形态会不断演化，从孤立的云逐步发展到互联的云，如图9所示。 　　图9 云的形态演变 　　在云计算建设初期，发展比较快的是公共云，第一阶段企业的数据中心依然是传统IT架构，但是面向互联网应用的公共云服务快速发展，不同的ISP会构建各自的云，这些云之间相互孤立，为互联网的不同用户需求集服务(如搜索、邮件等)，企业数据中心与公共云之间存在公网互联(企业可能会采用公共云服务); 　　第二阶段企业开始构建自己的私有云，或租赁SP提供的私有云服务，这一阶段是企业数据中心架构的变化，同时，企业为降低成本，采用公共云服务的业务会增加。 　　第三阶段，企业为进一步降低IT成本，逐步过渡到采用SP提供的虚拟私有云服务(也可能直接跨过第二阶段到第三阶段)，存在企业内部云与外部云的互通，形成混合云模式。 　　第四阶段，由于成本差异和服务差异，企业会采用不同SP提供的云计算服务，因此，形成了一种不同云之间的互联形态，即互联云。 　　5 结束语 　　云计算不仅带来了IT模式的变化，也将引发IT服务的变革，企业和用户只需要关注数据是自己的，而对数据的计算存储方式、效率均采用云的服务来实现和提升，云的供应商则将核心业务重点放在IT架构的运营上，服务将成为下一代IT的核心内容。","title":"什么是云计算？为什么需要云？"},{"content":"近几年，信息技术 (IT) 领域出现了一种新模型 — 云计算。尽管云计算只是一种交付计算资源的新方式，而不是新技术，但是它导致组织提供信息和服务的方式发生了革命。 在最初，IT 由大型机计算主导。这种配置最终让位给客户机-服务器模型。当代的 IT 不断向移动技术、普遍存在的计算和云计算发展。但是，与所有革命一样，这次革命包含原有的一些东西。 因此，要想彻底了解云计算的来龙去脉，就一定要记住云计算的许多特点实际上源于以前的系统。在许多方面，这个重大变化是在以前基础上的跃进，而不是过去的全面终结。在全新的云计算环境中，既能够通过云技术实现创新性协作，也能够发挥大型机等传统系统的功效。计算方式的这一重大变化为 IT 人员提供了无限的机会，他们可以利用这一变化发挥自己和组织的优势。 什么是云计算？ 云计算是以服务形式交付 IT 的全面解决方案。它是一种基于 Internet 的计算解决方案，它像电网传输电力那样提供共享的资源。云中的计算机一起工作，各种应用程序使用同一计算能力集合，好像它们在单一系统上运行一样。 云计算的灵活性在于能够按需分配资源。因此，不再需要给任务分配特定的硬件，这会提高现有系统资源的利用率。在云计算出现之前，网站和基于服务器的应用程序都在特定的系统上运行。有了云计算之后，资源就集合为一台虚拟的计算机。在这种融合式配置提供的环境中，独立地执行应用程序，不需要关心任何具体配置。 云为什么会掀起热潮？ 出现向云计算转移这一潮流有许多合理的重要的业务和 IT 原因。原因之一是外包的基本性质要求有更合适的解决方案。 降低成本：云计算可以降低资本费用 (CapEx) 和运营费用 (OpEx)，因为可以只在需要时购买资源，而且只按使用时间付费。 优化人力资源的使用：使用云计算可以解放宝贵的人力资源，让他们能够把精力集中在创造价值上，而不是维护硬件和软件。 健壮的可伸缩性：云计算允许快速地扩大或收缩规模，既没有时间限制，也不需要承担长期义务。 云计算的基本组成部分 云计算模型由前端和后端组成。这两个部分通过网络连接，在大多数情况下是 Internet。用户通过前端与系统交互；后端是云本身。前端由客户机计算机（或企业的计算机网络）和用来访问云的应用程序组成。后端提供实现云服务的应用程序、计算机、服务器和数据存储。 层：计算能力成为商品 云的概念基于层，每一层提供一类功能。云组件的这种分层方式让云计算的各个层成为像电力、电话服务或天然气一样的商品。云计算以低廉的价格向用户销售计算能力这种商品。云计算将会成为新型的公共事业服务。 虚拟机监视器 (virtual machine monitor, VMM) 让用户能够同时使用云设施（见 图 1）。VMM 是主机系统上的一个程序，它让一台计算机支持多个相同的执行环境。从用户的角度来看，系统是一台与其他用户隔离的自含的计算机。实际上，所有用户都由同一台计算机提供服务。虚拟机是一个由底层控制程序管理的操作系统 (OS)，这让它看起来像多个操作系统。在云计算中，VMM 允许监视用户，因此可以管理数据访问、数据存储、加密、寻址、拓扑和工作负载转移等方面。 图一   下面是云提供的层： 基础架构 层是云的基础。它由服务器、网络设备、存储磁盘等物理资产组成。IBM® Cloud 等提供基础架构即服务(Infrastructure as a Service，IaaS)。在使用 IaaS 时，用户并不实际控制底层基础架构，而是控制操作系统、存储和部署应用程序，还在有限的程度上控制网络组件的选择。 随需印刷 (Print On Demand，POD) 服务就是可以受益于 IaaS 的例子之一。POD 模型基于可定制产品的销售。POD 让个人能够在产品上进行设计并开店销售。店主可以上传他们的设计，数量不限。许多人上传了数千种设计。通过使用云存储功能，POD 可以提供无限的存储空间。 中间层是平台。它提供应用程序基础架构。平台即服务 (Platform as a Service，PaaS) 提供对操作系统和相关服务的访问。它让用户能够使用提供商支持的编程语言和工具把应用程序部署到云中。用户不必管理或控制底层基础架构，而是控制部署的应用程序并在一定程度上控制应用程序驻留环境的配置。 PaaS 的提供者包括 Amazon 的 Elastic Compute Cloud (EC2) 等。小企业软件工作室是非常适合使用 PaaS 的企业。通过使用云平台，可以创建世界级的产品，而不需要负担内部生产的开销。 最上面一层是应用程序 层，这一层是对云的最直观表示。应用程序在这里运行，根据需要提供给用户。软件既服务 (Software as a Service，SaaS) 的提供者包括 Google Pack 等。Google Pack 包含可以通过 Internet 访问的应用程序和工具，比如 Calendar、Gmail、Google Talk、Docs 等等。 图 2 给出这三层。 图二   云的构成 云的构成有三种类型：私有（内部）、公共和混合型。 公共云可供一般公众或大型行业组织使用，由销售云服务的组织拥有和供应。公共云被看作一般意义上的云；也就是说，离站的第三方提供商使用 web 应用程序通过 Internet 动态地供应资源，它们提供共享的资源并按使用量收费。 私有云位于公司防火墙之内，由组织自己管理。它们是在企业内部创建和控制的云服务。私有云具有许多与公共云相同的优点，主要差异在于您的组织负责创建和维护云。 混合型云是公共云和私有云的组合，同时使用公共和私有的服务。公共云提供商和企业本身分别承担一部分管理责任。通过使用混合型云，组织可以先判断要创建的服务的目标和需求，然后以最合适的方式获得它们。 IT 在云中的角色 考虑到管理和控制需要更加自动化，为了应对代码生产的增长，IT 人员的任务必须有所变化。IT 正在整合，对硬件和软件实现的需求更少了，但是也出现了新的任务。IT 的变化趋势是向知识工作者发展。在新的模型中，技术人员的主要责任是增强和升级一般业务过程。 开发人员 移动设备使用量的增长、社交网络的流行以及商业 IT 过程和系统在其他方面的发展将保证开发人员团队的工作更高效；但是由于云配置模型的系统化过程，企业开发人员的一些传统角色正在发生变化。 IBM 最近的一项调查 New developerWorks survey shows dominance of cloud computing and mobile application development（见 参考资料）表明，对移动技术的需求将呈指数级增长。这一趋势以及云计算在全球的快速流行势必导致了解这一领域的开发人员急速增加。为了满足不断增长的移动连接需求，需要更多了解云计算的开发人员。 云计算提供近乎无限的容量，因此不再需要考虑可伸缩性。云计算让开发人员可以访问大多数中小型企业无法负担的极大量的软件和硬件资产。这种配置提供 Internet 驱动的云计算和资产，让开发人员能够访问过去只能梦想到的巨大资源。 管理员 管理员是 IT 系统的守护者和立法者。他们的责任是控制用户对网络的访问。这意味着他们控制用户密码的创建，以及为对系统资产的一般访问等基本功能制定规则和过程。云计算的出现势必导致对这一过程的调整，因为管理员在这种环境中不再只关心内部问题，还要关心自己的企业与云计算的外部关系，以及公共云中其他承租人的活动。 由于管理和企业总体安全程序的性质，这还会改变防火墙的作用。这不会消除对保护系统的需求。云计算会带来更多责任，而不是减少。在云计算环境中，管理员不但必须在组织内部保护数据和系统，还必须监视和管理云，从而确保他们的系统和数据在所有地方的安全性。 架构师 架构师的任务是对真实 IT 环境中给定系统的功能进行有效的建模。基本责任是为代理商的云计算模型开发架构性框架。云计算的架构实际上由三个层（IaaS、PaaS 和 SaaS）的抽象组成，这种方式有助于部署云计算的企业满足自己的目标。需要开发层的功能的抽象，让决策者和基层人员能够使用这些抽象规划、执行和评估 IT 系统的过程。 在云计算时代，架构师的作用是对云的层的功能性交互进行设计和建模。架构师必须使用抽象确保 IT 发挥应有的作用，帮助实现组织的目标。 采用云还是不采用：风险评估 正在转向云计算的组织最关心的问题是安全性和私密性。提供云计算服务的公司明白这一点，他们知道如果没有可靠的安全性，他们的企业一定会垮台。因此，安全性和私密性是所有云计算提供商优先考虑的问题。 治理：如何监视行业标准？ 在私有云中，治理由云的所有者负责；在公共云中，这一责任由服务提供商和服务使用方分担。但是，由于存在跨国恐怖主义活动、拒绝服务、病毒、蠕虫等因素 — 这些问题的某些方面超出了私有云所有者或公共云服务提供商和服务使用方的控制能力 — 所以需要全球、地区性和国家级的某种更广泛的协作。当然，对于公共云，这种协作不应该妨碍或损害云的所有者或使用者的控制能力。 带宽需求 如果打算采用云框架，那么必须在您的战略中评估带宽和可能出现的带宽瓶颈。在 CIO.com 的文章 The Skinny Straw: Cloud Computing's Bottleneck and How to Address It 中，提出了以下观点： 在过去，对于实现虚拟化的组织，提高虚拟机密度的主要瓶颈是内存容量；现在，新型服务器提供的内存量大多了，内存不再是系统瓶颈了。云计算解决了机器密度问题，从而消除了这一瓶颈 — 解决机器密度问题成了云提供商的责任，云用户不需要考虑它。 对于云计算，云用户与云提供商之间的带宽是瓶颈。 那么，带宽问题当前最好的解决方案是什么？在当今的市场上，最好的方法是刀片服务器。刀片服务器是以物理空间和电力使用量最小化为目标优化过的服务器。对于云计算来说，刀片服务器的主要优点之一是提高了带宽速度。例如，IBM BladeCenter 可以快速高效地处理高性能计算工作负载。正如过去必须解决内存问题才能够有效地缓解高虚拟机密度的瓶颈，现在必须解决云计算的带宽瓶颈，所以要考察提供商的能力，判断带宽瓶颈是否是主要的性能问题。 财务影响 IT 运营成本中的相当一部分来自管理和控制方面，所以在云计算环境中其中一些任务的自动化会降低成本。自动化可以显著降低错误几率和人工重复工作的成本。 其他一些因素对财务问题有不利影响，比如维护物理设施的成本、电力使用量、冷却系统以及控制和管理。无论如何，带宽不是惟一的问题。 降低风险 考虑下面的风险： 数据处理不当的严重影响。 有争议的服务费用。 厂商的财务或法律问题。 厂商的运营出现问题或关闭。 数据恢复和机密性问题。 一般的安全问题。 外部力量发动的系统攻击。 如果使用云中的系统，在数据安全性和连接性方面会有风险，恶意活动也可能会妨碍计算过程。但是，如果进行缜密的规划、谨慎地选择服务提供商并细致地管理风险，大多数公司可以安全地使用这种技术。 结束语 在这个革命性的新时代，云计算可以向组织提供确保财务稳定和高质量服务所需的方法。当然，如果云计算要想达到最佳的安全性和一般运营标准，就必须有全球协作。云计算出现了，我们所有人都必须准备好应对这次革命。","title":"云计算基础"},{"content":"云计算的特征          1、硬件和软件都是资源，通过网络以服务的方式提供给用户          2、这些资源都可以根据需要进行动态扩展和配置          3、这些资源在物理上以分布式的方式存在，为云中的用户所共享，但最终在逻辑上以单一整体的形式呈现          4、用户按需使用云中的资源，按实际使用量付费，而不需要管理它们 云计算的分类        1、按照服务类型分类             1、基础设施云             2、平台云             3、应用云       2、按服务方式分类             1、共有云             2、私有云             3、混合云 云计算的优势           1、优化产业布局           2、推进专业分工           3、提高资源利用率           4、减少初期投资           5、降低运营成本           6、产生新创价值 云计算产生的原动力           1、芯片和硬件技术的飞速发展，使得硬件能力激增，成本大幅下降，让独立运作的公司集中客观的硬件能力实现规模效益成为可能。           2、虚拟化技术的成熟，使得这些硬件资源可以被有效低颗粒度分割和管理，以服务的形式提供硬件和软件资源成为可能。           3、面向服务的架构广泛应用，使得开放式的数据模型和通信标准越来越广泛地为人们使用，为云中资源与服务的组织方式提供了可行的方案。           4、软件即服务模式的流行，云计算以服务形式向最终用户交付应用的模式被越来越多的用户接收。           5、互联网技术的发展，让网络的带宽和可靠性都有乐质的提高，使得云计算通过互联网为用户提供服务成为可能。           6、Web2.0技术的流行和广泛的接受，改变了人们使用互联网的方式，通过创新的用户体验为云计算培育了使用群。 云架构的服务层次           1、基础设施即服务（Infrastructure as a Service IaaS）是消费​​者使用处理、储存、网路以及各种基础运算资源，部署与执行作业系统或应用程式等各种软体。客户端无须购买伺服器、软体等网路设备，即可任意部署和运行处理、存储、网络和其它基本的计算资源，不能控管或控制底层的基础设施，但是可以控制作业系统、储存装置、已部署的应用程式，有时也可以有限度地控制特定的网路元件，像是主机端防火墙。           2、平台即服务（Platform as a Service Paas）是一种云端运算服务，提供运算平台与解决方案堆栈即服务。在云端运算的典型层级中，平台即服务层介于软件即服务与基础设施即服务之间。           3、软件即服务（Software as a SaaS） 这是21世纪初期兴起的一种新的软件应用模式。它与“应用服务提供商”(英文the Application Service Provider,简称为ASP)，“按需软件”(英文on-demand software)，“托管软件”(英文hosted software)所具有相似的含义。 云架构的特性          1、大规模          2、高可用          3、可伸缩          4、高性能 云架构的准则          1、信息安全与保密          2、许可证与计费          3、集成与标准化 基础设施即服务提供的服务           1、计算资源           2、存储资源           3、网络资源","title":"云计算相关知识"},{"content":"做数据处理时深感资源不足，这是学术圈的共识，因此有人提出，实验资源（计算资源）通过网络互联实现共享。从计算的角度来讲，同当年网格计算的思路非常相似；从内容共享的角度来看，同P2P的内容分享非常相似，如迅雷等。        由此想到当年的P2P和网格为什么现在很少被提及，而云成为了主流。这里暂且不谈学术领域这个较窄的圈子，而是从更高的层面探讨下，移动互联网时代P2P和网格技术的没落，云计算模式兴起的原因。 分析：从网格计算和P2P模式的发展来看，这种资源共享的模式不适合移动互联网，个人觉得原因如下： 1、人类的本性，希望多获取，不想多付出：没有好的计费模式，以及各个机构对内容保密的担忧，以及内容提供商对产权的保护意识增强； 2、台式电脑逐渐被手机和pad取代，手机和pad闲置的是时间，但是并不闲置计算资源；       这个多说一点：大家也许每天只玩两个小时的手机或者平板，好似闲置率很高，但是，因为这些设备的电源限制，谁也不希望将空闲资源分享出去；同时，只要大家真的使用这些设备，玩游戏、上网，都是觉得计算和网络资源不足，还哪里觉得闲置呢！ 3、计算和内容被一起封装成了APP，单独的计算资源和内容很难共享； 4、P2P模式和网格模式中，计算资源的分配，算法的并行实现，资源的动态管理，都是很复杂的问题，至今没有好的解决方案。从业界的角度而言“大道至简”，哪个公司希望自己的系统如此的复杂，不知道运维费用将有多高？     而云计算的普及有其源动力： 1、后台的计算资源由云服务商提供，数据中心处于可控状态，采用简单的MapReduce计算模型，同构集群实现。维护简单，降低了开发和运维费用； 2、移动终端只需要同固定的云服务器通信。这些服务器带宽高，弹性足，用户体验好； 3、云的数据中心的计算资源，以APP的方式提供。除了单机版游戏之外，现有的流行移动互联服务，都是后台云支持的。云的计算资源也是通过这些APP分发给用户的。APP和云服务器的协同开发和优化是其最大优势。 4、云计算带来的用户流量很容易带来广告等收入，对于有核心应用的企业而言，数据中心的成本在公司开销中比重并不高。 5、用户数据在云上的积累，产生额外的价值，分析这些用户的数据，可以进行个性化服务，针对性电子商务等。可以说，云模式不只是简单的计算平台，也是智能化服务的基础，而智能化是计算发展的终极目标。","title":"移动互联网领域为什么不是P2P或者网格模式，而是云模式"},{"content":"云计算】概念是由Google提出的，这是一个美丽的网络应用模式。狭义云计算是指IT基础设施的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的资源；广义云计算是指服务的交付和使用模式，指通过网络以按需、易扩展的方式获得所需的服务。这种服务可以是IT和软件、互联网相关的，也可以是任意其他的服务，它具有超大规模、虚拟化、可靠安全等独特功效；“云计算”图书版本也很多，都从理论和实践上介绍了云计算的特性与功用。 云计算（cloud computing，分布式计算技术的一种，其最基本的概念，是透过网络将庞大的计算处理程序自动分拆成无数个较小的子程序，再交由多部服务器所组成的庞大系统经搜寻、计算分析之后将处理结果回传给用户。透过这项技术，网络服务提供者可以在数秒之内，达成处理数以千万计甚至亿计的信息，达到和“超级计算机”同样强大效能的网络服务。   最简单的云计算技术在网络服务中已经随处可见，例如搜寻引擎、网络信箱等，使用者只要输入简单指令即能得到大量信息。   未来如手机、GPS等行动装置都可以透过云计算技术，发展出更多的应用服务。   进一步的云计算不仅只做资料搜寻、分析的功能，未来如分析DNA结构、基因图谱定序、解析癌症细胞等，都可以透过这项技术轻易达成。   稍早之前的大规模分布式计算技术即为“云计算”的概念起源   云计算时代，可以抛弃U盘等移动设备，只需要进入Google Docs页面，新建文档，编辑内容，然后，直接将文档的URL分享给你的朋友或者上司，他可以直接打开浏览器访问URL。我们再也不用担心因PC硬盘的损坏而发生资料丢失事件。   1、狭义云计算     提供资源的网络被称为“云”。“云”中的资源在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。这种特性经常被称为像水电一样使用IT基础设施。   2、广义云计算     这种服务可以是IT和软件、互联网相关的，也可以是任意其他的服务。   解释：   这种资源池称为“云”。“云”是一些可以自我维护和管理的虚拟计算资源，通常为一些大型服务器集群，包括计算服务器、存储服务器、宽带资源等等。云计算将所有的计算资源集中起来，并由软件实现自动管理，无需人为参与。这使得应用提供者无需为繁琐的细节而烦恼，能够更加专注于自己的业务，有利于创新和降低成本。   有人打了个比方：这就好比是从古老的单台发电机模式转向了电厂集中供电的模式。它意味着计算能力也可以作为一种商品进行流通，就像煤气、水电一样，取用方便，费用低廉。最大的不同在于，它是通过互联网进行传输的。   云计算是并行计算(Parallel Computing)、分布式计算(Distributed Computing)和网格计算(Grid Computing)的发展，或者说是这些计算机科学概念的商业实现。云计算是虚拟化(Virtualization)、效用计算(Utility Computing)、IaaS(基础设施即服务)、PaaS(平台即服务)、SaaS(软件即服务)等概念混合演进并跃升的结果。   总的来说，云计算可以算作是网格计算的一个商业演化版。早在2002年，我国刘鹏就针对传统网格计算思路存在不实用问题，提出计算池的概念：“把分散在各地的高性能计算机用高速网络连接起来，用专门设计的中间件软件有机地粘合在一起，以Web界面接受各地科学工作者提出的计算请求，并将之分配到合适的结点上运行。计算池能大大提高资源的服务质量和利用率，同时避免跨结点划分应用程序所带来的低效性和复杂性，能够在目前条件下达到实用化要求。”如果将文中的“高性能计算机”换成“服务器集群”，将“科学工作者”换成“商业用户”，就与当前的云计算非常接近了。 13662550190","title":"一个关于计算机的传说，谁都没有听说过的计算机故事"},{"content":"浪潮之巅（On Top of Tides）   作者： 吴军           近一百多年来，总有一些公司很幸运地、有意识或者无意识地站在技术革命的浪尖之上。一旦处在了那个位置，即使不做任何事，也可以随着波浪顺顺当当地向前漂个十年甚至更长的时间。在这十几年间，它们代表着科技的浪潮，直到下一波浪潮的来临。 从一百年前算起，AT&T 公司、IBM 公司、苹果公司 (Apple)、英特尔 (Intel) 公司、微软 (Microsoft) 公司、思科公司 (Cisco) 公司、雅虎 (Yahoo) 公司和谷歌 (Google) 公司都先后被幸运地推到了浪尖。虽然，它们来自不同的领域，中间有些已经衰落或者正在衰落，但是它们都极度辉煌过。它们都曾经是全球性的帝国，统治着自己所在的产业。 这些公司里面大大小小的人在外人看来都是时代的幸运儿。因为，虽然对于一个公司来讲，赶上一次浪潮不能保证它长盛不衰；但是，对于一个人来讲，一生赶上这样一次浪潮就足够了。对于一个弄潮的年轻人来讲，最幸运的莫过于赶上一波大潮。要预测未来是很难的，但是看看过去和现在，我们也许能悟出一些道理。我愿意借谷歌黑板报的空间，将我这些年来看到的和听到的人和事拿出来与大家分享。我会谈一谈我对每次浪潮的看法，对上述每个公司的看法，以及对其中关键人物的认识。在极度商业化的今天，科技的进步和商机是分不开的。因此，我也要提到间接影响到科技浪潮的风险投资公司，诸如 KPCB 和红杉风投 (Sequoia) 以及百年来为科技捧场的投资银行，例如高盛 (Goldman Sachs) 等等。   第一章 — 帝国的余辉（AT&T) 第二章 — 蓝色巨人（IBM） 第三章 — “水果”公司的复兴 （乔布斯和苹果公司） 第四章 — 计算机工业的生态链 第五章 — 奔腾的芯（英特尔—Intel） 第六章 -- IT业的罗马帝国 （微软 - Microsoft) 第七章 --  互联网的金门大桥（思科 - Cisco） 第八章 -- 英名不朽（杨致远、费罗和雅虎公司） 第九章-- 硅谷的见证人（惠普公司） 第十章 -- 没落的贵族—摩托罗拉 第十一章 -- 硅谷的另一面 第十二章 --  短暂的春秋——与机会失之交臂的公司 第十三章 -- 幕后的英雄风险投资（Venture Capital） 第十四章 -- 信息产业的规律性 第十五章 -- 高科技公司的摇篮 — 斯坦福大学 第十六章 -- 科技公司的吹鼓手：投资银行  第十七章 -- 挑战者 -- Google 第十八章 -- 成功的转基因 --诺基亚、3m、GE公司 第十九章 -- 印钞机 - 最佳的商业模式 第二十章 -- 互联网2.0 第二十一章 -- 金融危机的冲击 第二十二章 -- 云计算 第二十三章 -- 寻找下一个 Google   后记   吴军的中文首页 吴军（Jun Wu)的英文首页 浪潮之巅读书笔记 第一章 帝国的余晖——AT&T公司 1.每一次的反垄断其实在帮助AT&T修枝剪叶，然后她发展的更好。 2.AT&T失去决策权，谁都没有是公司主人的感觉。最后被拆分了卖。 3.AT&T是非常杰出的公司。贝尔和华生发明电话，Unix和C语言从贝尔实验室诞生。 第二章 蓝色巨人 IBM公司 1.IBM成功归结于保守，毫无疑问保守让IBM失去了无数发展机会，但是也让他能专注于最重要的事，并因此立于不败之地。 2.任何经济危机都是淘汰经营不好的公司，为生存下来的公司提供更好的机会。 3.今天我们知道计算机可以单纯用于储存信息，处理文字，打印文章，但是在50年前就能看到这一点是非常了不起的。小沃森看到了这一点。 4.IBM研究水平非常高，还参与了很多标准的制定，在商业竞争中起到裁判和运动员的双重身份。 5.在公司内部，引入竞争机制，一个项目让多个组背靠背开发，为了避免互相拆台，每个人的奖金和全公司效益挂钩而不是和项目挂钩。 6.IBM鼓励员工申请专利。 阅读摘录： 为什么IBM能够持续百年呢？      成功转型        IBM Research        世界第一专利申请大户        最大开源Linux服务器生产商        保守：缺点 失去了无数发展机会， 优点 也让它能专注于最重要的事。   1. 赶上机械革命的最后一次浪潮   2. 领导电子技术革命的浪潮        重视研发投入   3. 错过全球信息化的大潮   4. 他也是做芯片的      路易斯-郭士纳 ： 将IBM从一个计算机硬件制造公司到一个以服务和软件为核心的服务性公司的转变，复兴了IBM      开源节流、卖掉一些资产、机构和制度改革      进入竞争机制   5. 保守的创新者      固守自己的核心领域80%，很谨慎地开拓新的领域20%        领先的领域：存储技术、数字通信技术、半导体芯片设计和制造技术      保守的好处是不容易轻易出错      IBM如何衡量一个研究员的工作，他告诉我有三条衡量标准：发表论文、申请专利和产品化      科研必须和产品结合   6. 内部的优胜劣汰      管理成本、市场成本、研发成本   第三章 苹果公司的复兴——乔布斯和苹果公司 1.新技术必须比老的技术有数量级的进步才能站住脚，在当时，计算机的价格降至几十分之一才会有人买得起。 2.乔布斯是非常优秀的谈判高手，把价格上最强硬的索尼放在最后，他和其它四家公司达成协议，索尼只好就范。 3.苹果的apple tv 失败了，主要是功能超前，应用环境根本不存在（现在技术还没达到）。 4.苹果的成功，是把每一款产品都做到了极致，这很大程度上市因为乔布斯达到了一个将技术和艺术结合的炉火纯青的境界。这个就是创新。 5.永远渴望、大智若愚（Stay Hungry，Stay Foolish）   第四章 计算机工业的生态链 A.摩尔定律 1.每18个月，计算机等it产品的性能会翻一番，或者相同性能的计算机等it产品价格降一半。计算速度，存储速度，网络的传播速度都包括在内。 2.为了使摩尔定律成立，IT公司必须在比较短的时间内完成下一代产品的开发。 3.由于硬件支持，以前不敢想的应用都在不断涌现。 4.公司的研发必须针对多年后的市场。 B.安迪-比尔定律 1.计算机的内存和速度越来越快，但是软件却越来越慢，越来越大。所以就是比尔拿走安迪所给的。(硬件所带来的速度被软件占用了) 2.微软vista迟迟不能面试，从intel到hp，dell等全部的销售都受很大的影响。所以微软的开发速度比预期的慢，软件的业绩不好，那么就一定不能买英特尔的股票。 3.安迪-比尔把原来属于耐用消费品的电脑、手机等商品变成了消耗性商品，刺激着整个IT发展。 C.反摩尔定律 1.一个IT今天和18个月前卖同样的产品，它的营业额会降一半，成为反摩尔定律。它逼着所有的硬件设备公司必须赶上摩尔定律规定的速度。 2.IBM所在的服务业基本不受反摩尔定律的影响。 3.每一种技术，过不了多少年，量变的潜力就会被挖掘光，这就需要有革命性的发明。在抓住质变的机遇上，小公司负担小，很有可能会后来居上。（质变的技术例如：CPU的纳米和生物技术） 4.从事IT行业，想获得高利润，要从上游入手（软件和IT服务业），下游是硬件制造。 5.作者认为10年后的网速可能是现在的一千倍。（到时候互联网会成什么样？这个地方可以好好想想）   第五章 奔腾的芯——英特尔公司 1.Intel打败摩托，首先是有微软的帮助，然后是员工工作强度大（和硅谷一样），领导者差距大（摩托是家族公司），Intel更专注。 2.Intel靠市场打赢精简指令集。首先对自己系列产品的兼容性，不拒绝新技术，有独特的眼观，还有运气好。 3.Intel公司商业模式历来是靠大投入，大批量挣钱的。 4.一家公司的市场份额超过50%后，就不用将市场份额翻番，它应该去挖掘新的成长点。 5.作者认为个人微机领域之外，另一个重要的市场游戏机市场，会发展成家庭娱乐中心。   第六章 IT领域的罗马帝国——微软公司 1.去IBM做报告，每次都要确认报告中的每一页内容都已经公开发表过。因为IBM有世界上最好的科学家和工程师，他们可能用比你还要快的将你没发表的想法实现并且发表。 2.微软利用了10年的夺得了微机操作系统的统治地位（技术落后十年）。 3.盖茨将很多工程师立即停掉手里的工作，不管哪个阶段，立即投入IE的研发。 4.微软一直抄袭出名，但不影响微软继续前行。 5.盖茨是心比天高却脚踏实地的人，绝大多数人办公司是为了将公司卖掉，很少有人想把公司办成一个百年老店。 6.盖茨做每一件事，都是针对全世界所有人的，这样才能达到聚沙成塔的效果。 7.一家公司如果核心业务不稳定，那么他的长期发展一定会有问题。 8.根据巴菲特的投资原则，想赚大钱，要往客厅娱乐这方面靠。 9.微软今后的辉煌，很有可能取决于他的在线部门和游戏部门能否在下一次技术革命的浪潮中胜出。   第七章 互联网的金门大桥——思科公司 1.思科早期成功的关键是两个创始人在最合适的时间创办了一个世界上最需要的公司。 2.一家成功的公司的早期员工是非常宝贵的财富，他们一般是一些非常爱冒险的人。他们技术和能力非常强，常常可以独当一面。并且他们对新技术非常敏感。 3.在公司很小时，抢时间比什么都重要。（网上看到的一句话：一早顶千巧） 4.如何留住早期员工，并且调动他们的积极性，成为每一个上市的科技公司的难题 5.公司大到一定程度后，每个人的贡献就不容易体现出来。一些员工虽有很好的方法，也懒得费工夫去推动它，即使推动时受到的阻力会很大。思科的做法是，如果公司里有人要创业，公司又觉得做的东西是好东西，就让他们内部创业。通过这样思科通过技术间接垄断了互联网设备的市场。 6.思科能做到让员工用自己的职务方便去发明去开办公司。 7.华为是思科的主要竞争对手。 8.skype为了保证一个电话能及时传递到对方，他会将该包复制三份通过互联网同时传递，以保证及时送达。 9.作为一名技术人员，他是否愿意为公司尽全力，很大程度上取决于它是否被重视——一方面是收入，另一方面是发言权。 10.思科在voIp技术上的优势，可能会赶上宽带通信革命的浪潮。   第八章 英明不朽——杨致远、菲洛和雅虎公司 1.雅虎制定了互联网的游戏规则——开放、免费和盈利。 2.一个产业早期的领导者选定的商业模式对这个产业的发展几乎是决定性的。 3.因为杨致远在搞雅虎的时候不是为了挣钱的，所以雅虎能够把互联网办成开放和免费的。 4.流量是互联网最重要（当然是有效流量），广告投放讲究门当户对。 5.雅虎与谷歌不合作，而是发起和谷歌毫无希望的没有必要的竞争。 6.世界上两个较弱的公司合并后，常常离第一名差距更大，因为较弱的公司通常是问题有点多，合作后毛病也和在一起。 7.德克尔大局观很差。在Google的股票上，雅虎的做法应当是持有，因为如果Google失败，雅虎在整个互联网就没有了对手，损失掉 Google的股票无非是小的局部损失，    但赢得的是整个互联网。反过来，如果Google股价倍增，说明相对来讲雅虎业绩在下降，这时再卖掉Google 的股票可以成倍地得到现金，再回来和Google竞争。   第九章 硅谷的见证人——惠普公司 1.hp在失败的时候收购同样失败的康柏公司，最后更失败。   第十章 没落的贵族——摩托罗拉公司 1.摩托罗拉不是没有看出数字手机将来必会代替模拟手机，而是不情愿看到这件事发生。摩托罗拉在尽可能的延长模拟手机的生命期。   第十一章 硅谷的另外一面 1.一个小公司要想成功，有很多因素必须同时具备：       a.创始人很重要。任何梦想家都不足以成事，因为所有的成功者都是实干家。必须有一个小而精的好团队，里面每一个人都不计较个人得失，同甘共苦，否则成则争功，          败则互相推诿。       b.技术上，必须是不容易被别人学会和模仿。       c.要有商业头脑，找到一个可盈利的商业模式。找到一个好的商业模式很难。       d.判断力和执行力，判断力和执行力很大程度来源于经验。       e.很大的程度要看外部环境.       f. 要有好运气。 2.上市后，股票能涨上去的只有2%-3%，大部分是股价平平。员工在上市后180天以后才能卖自己的股票。通过创业发大财的人终究是极少数。 3.在硅谷，每天有成百上千的公司成立，但同时有每天成百上千的公司关门。 4.硅谷的工作时间长，在谷歌是在微软工作时间的两倍，在硅谷工作的压力比其它地区大得多。硅谷的生活质量达不到美国的平均水平，但是无数的年轻人把这里当成开拓    自己事业的首选地，因为它给人机会和梦想。 5.硅谷的几十年经验证明，那些初出茅庐的能干出具体事情的年轻人，可能比一个经验丰富但眼高手低的人对公司更有用。 6.谷歌更相信自己的通过面试得到的判断，而不是简历和推荐信。 7.硅谷的高明之处是保证机会均等，硅谷是一个到处可见权威却从不相信权威的地方。 8.在风险投资家看来，一个人的能力，包括处理人际关系的软实力，是决定创业成功的关键。硅谷公司需要的是能真正做事情的人。 9.自古英雄不问出处，今天落魄的学子可能就是明天业界的领袖。 10.硅谷的硅没有了，创新的灵魂留下了，它保证了硅谷的繁荣和发展。亘古而常青的昨天永远是过去，也永远会再来。 11.硅谷公司上下虽有等级的差异，但彼此都互相尊重，有时候一个优秀的员工的收入可能比他的直接上司还要高。这样大家共事会舒服一些。   第十二章 短暂的春秋——与机会失之交臂的公司 1.在命运降临的伟大瞬间，市民的一切美德——小心、顺从、勤勉、谨慎，都无济于事，他始终只要求天才人物，并且将他造就成不朽的形象。命运鄙视的把畏首畏尾的人拒之门外。 第十三章 幕后的英雄——风险投资 1.美国在信用上对每一个人最初假定是诚实的，但有一次在诚信上犯了错误，改了也不是好人。所以投资者敢把钱投给一无所有的创业者。不仅如此，只要严格履行合同，尽量最大努力，即使失败了，投资人还会愿意给他投资，美国人不怕失败，也宽容失败者。 2.是否有数量级的提高是衡量一项新技术是否是革命性的技术的关键。 3.风投在下面3种情况下不投资：不盈利的不投，增长不稳定的不投，公司达不到一定规模的不投。甚至风投只投能在12-24个月有上市计划的公司。 4.一个好的创业题目最要紧的时具有新颖的，别人没想到的，其次，不能和主流公司的业务撞车。要有现成的市场，容易横向扩展，较长时间内会几何数增长。必须具有革命性。 5.风投通常是为创业者雪中送炭，不管创业者成功与否，他们都在促进科技进步和产业结构的更新。   第十四章 信息产业的规律性 A.诺威格定律 1.一家公司的市场占有率超过50%后，就无法再使市场占有率翻番了！必须寻找新的成长点。 B.70-20-10 2.一家公司有70%的市场占有，排名第二的公司占20%的份额，剩下的所有公司分剩下的10%。、 C.基因决定定律 3.成功的一个公司在内部已经优化的非常适合这个市场，做事方法、商业模式、市场定位、文化都已经适应了传统的市场。 4.同一个市场在不同公司眼里是完全不同的东西，例如PC电脑，微软是“让计算机普及到每一个家庭”为使命，苹果就是让PC越新、越酷、重视产品的品味。   第十五章 硅谷的摇篮——斯坦福大学 1.创业者要成为全才（Be an expert in all aspects)。 2.学校允许学生利用学校的资源创业，在那个环境里，创业失败也没什么可自卑的。 3.创业的关键之一是找到志同道合的人。 4.斯坦福大学的学生来源非常多元化。很多人到了斯坦福并不把自己限定在一个专业上。可以想象，一个计算机博士在和一个住院医生谈论浏览器时，就必须用最通俗的语言   和他交流，而不是对各种技术评头论足。同事，他可以了解到住院医生对浏览器的需求，比如使用的方便性，安全性，等等。   第十六章 科技公司的鼓吹手——投资银行 1.主要说投资银行在科技公司里的作用，又讲了高盛的影响力（我觉得书中讲的有些夸张）以及投资银行的无情。还讲了公司在上市这些地方要注意的内容。 2.百度找的高盛和苏黎世信贷，因为这两个投资银行中都是大客户，所以在初期的180天内市面上几乎没有可流通的股票。保证在180天后百度员工出售股票是获得更多的利润。   第十七章 挑战者--google 1.越晚上市，公司做的越大收益越高，因此尽可能地拖后上市时间。 2.当一家公司的股东超过500名并且资产超过一定规模后，即使它不上市也必须在第二年的100天内公布财务状况，所以facebook应该再明天4月28日左右申请上市。 3.谷歌进行三次成功的融资，共80亿美元，而且稀释了不到10%的股份。 4.google的前任CEO施密特是一个非常”爱财“的管理者，他永远将现金储备作为他关心的头等大事。 5.巴菲特的成功经验，公司内部的人要有绝对的发言权。google的的B股每股有10个投票权，后来发行的A股只有一个投票权。B股不能流通，只能换成A股出售，A股不能转变成B股。所以创始人只要有10%的股票就有绝对的话语权。 6.杨致远的卓越远见不仅表现在看清了互联网产业正确的发展方向并沿着这个方向去执行，而且从一开始就看到了整理互联网内容的重要性。 7.凡做大事的人，必须有做大事的气度和胸怀。 8.一个中国工程师知道谷歌只有四个人要加10亿，马上试了试google的搜索，发现比雅虎的好得多，于是他当机立断的加盟了google，成为了google第一个华裔员工。 9.在这个领域中，最成功的主导公司将是能帮助世界上每一个人使用计算机的公司。在互联网时代，让所有人很容易免费上网并方便的找到自己想要的东西的公司，必将成为互联网时代之王（免费和方便）。 10.和微软一样，谷歌的东西必须面向大众的，并且是便于使用的，这也就是为什么google的网站那么简洁的原因。 11.佩奇是一位极具商业眼光，并且能够透过现象看本质的奇才。google经常请一些各行各业的精英，甚至包括太极拳高手来公司作报告，不管他们做的事有google没有关系。 12.google所有的服务都遵循这个原则，只把互联网的内容送到千家万户就行，至于互联网的内容是谁的并不重要。 13.google的服务直接面对最终用户，和巴菲特不谋而合，在巴菲特看来，广大消费者才是一切商业的衣食父母。不管经济好坏，大家都要上网。所以施密特说谷歌有很强的抗经济衰退的能力。 14.google一直强调网页排名的公正性，于是在网页其他地方嵌入付费广告，这个就是google Adwords的由来。有些人使用google多年，甚至没有注意到google在搜索结果的旁边投放广告。这个adwords有十几个人在很短时间开发完成，在google早起，总相信自己一个人能当十个人使，并且屡屡证明确实如此。 15.google减少中间环节，认为中间环节除了残留利润不带来任何好处，和dell和巴菲特有相似之处。 16.google早期没有追求营业额和利润，而是想办法扩大自己的用户群，除了技术外，把网页做的特别干净，谷歌上的广告比互联网其它广告贵10倍，但广告商还是很愿意。 17.google的销售是行业里数一数二的，在前期拿下了雅虎和美国在想的搜索和广告业务，并确立了google在搜索市场的主导地位。 18.google不相信三个臭皮匠的作用，甚至谷歌宣称只需要天才。google的一道面试题，你认为如何改进google，或者你来了以后如何使我们变得更好。 19.google为了保证工程师们所写程序的质量，鼓励大家多写测试程序。 20.google在工程上，对每一个细节要求都很严格，比如一个程序多写了一个空格或者一行超过了80字，都不允许提交，而一个程序的变量名起的不好就不能通过评审。 21.在用人上，一个本科生能做的用一个硕士或者博士做，杀鸡用宰牛刀，这样打造了”瑞士制造“一样的高品质。 22.google最初在开发云计算平台的目的是为了能把大量廉价的服务器集成起来，完成超级计算机的计算和存储功能。在架构设计时就把容错性合并法处理能力考虑的非常周全。google在全球铺设光缆，使google的业务不受网速的瓶颈。google大力推进城市免费wifi业务，云计算的产业链一旦形成，对现在信息产业的影响将是颠覆性的，重大技术变革预示着产业格局的变革，google在此契机，它希望在下一次产业变革中领跑。 23.几年后整个IT行业的格局将从winTel转向以3G互联网和云计算为核心的新时代，在手机操作系统上的竞争是这个时代的焦点。 24.2005年收购andriod，07年做出第一款样机，但当时他们看到和苹果手机的差距太大，决定推到重来，否决自己多年的工作要有非常大的勇气，但这是通向成功之路。 25.google学的是当年微软的做法，横着吃整个市场，他只关心最重要的操作系统部分，而把上下游全部交出去，而且是免费的。做nexusOne 是为了了解手机设计和制造的整个流程，优化android系统和提供更好的云计算服务。 26.进攻是最好的防守，在google很小的时候，如果死守大公司的围攻，是没有出路的，所以google常常是两眼盯着前方冲，而不左顾右盼它的对手。 第十八章 成功的转基因--诺基亚、3m、GE公司 1.诺基亚从木材加工厂到手机生产厂商 2.作者认为诺基亚和微软合作没有一点希望。（看的时候感觉作者有点偏见） 3.3m公司老板鼓励员工发明创造新产品，成为公司新的核心业务。3M允许员工用15%的时间敢任何自己喜欢做的事，后来这个做法被google学去了，编程了google的20%项目。 4.3M成功的三条：1.坚持创新，2.强制淘汰一些前景不好的，3.发明的产品都是针对大众的。虽然都知道这三条，但是做到的人不多。这也显示了3M的不凡之处。 5.GE公司：通用电气这样的大公司不是一两个大发明就可以让它转型。它不但的淘汰前景不好的商业部门，不断融入新的行业。终于打造了一个全方位的航空母舰。   第十九章 印钞机 1.很多大公司的兴起，不是靠技术的革新而是靠商业模式的转变。 2.通常，好的商业模式都非常简单，即使外行也能一眼看清楚。红杉资本对于那些几分钟讲不清楚商业模式的创业者，都会婉言劝走。 3.下面是印钞机：       a.微软卖软件       b.google的广告系统。让企业自己去填写广告和匹配的关键字，然后填写愿意付的广告费即可。并且按点击次数收费。并且还会通过机器学习，不断完善自己，          让广告的点击率更高。同时要解决的问题：广告之间的排名问题，恶意点击骗钱，广告投放节奏，自动收费，自动修复。       c.电子商务       d.戴尔的虚拟工厂。将传统行业的7个环节减少到2个。戴尔接到订单，直接通知工厂生产，然后按地址发货。所以dell取得了成功。       e.腾讯的虚拟物品和服务 4.好的商业模式对于一家公司的成功是必不可少的。创业选择题目的时候，要特别注意商业模式。 5.豆瓣上的一句总结：好的商业模式就是它不需要多少人力，一旦运作起来便能自己产生利润，持续发展。 第二十章 互联网2.0 1.web2.0必备的特征。      a. 必须有平台可以接受并管理用户的内容，并且这些内容是网站的主体。      b.一个开放的平台，用户开发自己的程序。      c. 交互性。      d. 非竞争性和自足性。 2.评价一个网站，一个公司的好坏只有一个标准，是否盈利. 第二十一章 金融风暴 1.金融风暴优胜劣汰，会发现很多商机，传统的价值回归，世界格局改变，并且让一些有潜力的公司有更多的空间和时间发展，例如facebook在金融危机阶段就没有什么对手，因为对手都拿不到投资。 2.现金越多越能抗风险，还能及时收购股价低的公司。 3.六年一壤，六年一饥，今后的44年里我们的经济和社会都将获得长足的发展，在过去的40多年，人类的生活质量翻了6番（增长30倍），在近两年，智能手机已经在全球开始普及，facebook在2012年上市，随之而来的很多新兴小公司开始活跃，让我们准备，拥抱明天。 第二十二章 云计算 1.IBM对云计算的理解：卖云计算的服务器（这个云计算解决方案） 2.亚马逊对云计算的理解：通过互联网提供服务，租出计算资源即可。 3.谷歌对云计算的理解：强调对用户的服务，例如在线文档编辑。 4.云计算的本质：随时访问和处理信息，用户可以使用大量在云端的计算资源。 5.让全社会的计算资源得到最有效的利用，同时让使用计算资源的成本尽可能低。 6.目前中国的中小型互联网公司的平均运营成本比大公司（腾讯百度）多，然大公司又比google的多。很多大型公司都直接使用亚马逊提供的hosting服务。 7.GFS是google的文件系统，目标是再分布式的多台服务器上存储海量数据，所有的操作就和在一台计算机上操作一个小文件一样简单。保证文件不丢，有三个备份。 8.还有实际利用中的大量数据都结构化存储，开发了BigTable。google MapReduce 比开源的hadoop好，但是类似，hadoop因为开源所以使用的比较多。hadoop在开始设计的时候运算和存储没分清楚，因此它的扩展和资源管理的灵活性不好。 9.云计算能否得到普及要靠信息安全技术。 10.计算机要想得到充分的发展，不是单凭任何一家公司的力量就能做到，最好的发展模式就是开放。云计算的服务提供商必须遵循统一开放的标准。中国一直在致力于统一中国云计算的标准。 11.随着互联网的普及，新的产业链将形成。个人pc可能会消失，不同的上网终端会普及，各大电脑公司都在开发自己的智能手机，他将在某种程度替代原来的操作系统。目前有百万工程师在为facebook开发应用。 12.在今后两年，客户端软件的竞争将集中在浏览器上。 13.云计算是彻头彻尾的革命，一次大的发展浪潮，如果一次浪潮还没有结束，任何人为的力量都很难和科技发展的浪潮向抗衡。不过，云计算还需要完善。   第二十三章 下一个google 1.下一个谷歌，首先要是全球性的跨国公司，并在自己的领域处于主导地位。 2.如果执行力不足，他依然会昙花一现。 3.够用了这条很消极而枯燥的原则，让所有想通过做一个操作系统取代微软的努力变得无效，所以下一个微软不是出现在微软所擅长的领域。 4.下一个google不可能是搜索公司，而且不大可能是靠广告挣钱的互联网，因为这个互联网产业不够再养活一个想google这样的大公司。 5.寻找下一个这样的机会，永远是和所有现代生活相关的人追求和谈论的主题 A.可能兴起的领域： 1.新能源 2.电池的电量和充电，纳米电池是传统电池的蓄电几十倍。但这个商业化还有很长的路要走。 3.核能和太阳能。 4.生物和制药技术 5.新绿色农业 6.电子商业 7.无线业务.基于手机支付和社区（包括游戏）商业前景非常乐观。微博这种很容易输入的特性，所以微博会毫无以为成为手机上最重要的服务. 8.云计算.但成功的会是google自己，其次是控制开发平台的facebook。   结束 读后感 这本书就像小说一样，总结IT的历史，写的非常好。 书中写的很多事情都能让我想到很多，就像雅虎挑起和谷歌的竞争导致失败，而不是和谷歌合作共赢。hp在失败的时候收购同样失败的康柏公司，导致更失败。还有未来网速提高1000倍，很多启发。 书在潜移默化的让我对IT有了更深的认识，也改变了我很多想法。作者对事件的多方位分析，也增加了我看事物的一些角度。 我太不会总结，但书确实很不错。而且这书也是非常不错的谈资。   作者后记里的一段话： 对我来讲，时间才是我最大的财富，我要把它投到最有意义，最有影响的地方去。 还有经常提到的一句话：科技的发展是不均匀的，而是以浪潮的形式出现。每一个人都应该看清楚浪潮，赶上浪潮，如此，便不枉此生。   另外是和书无关的，在豆瓣里发现吴军说的几句话： 这是我在腾讯内部很多报告中讲到的问题。其实IT从业人员并不比其它行业更辛苦，如果自我成长得法的话。至少我自己，在这个行业中混了二十多年了，尚未觉得辛苦。在IT行业（和医生不同），一个一级的工程师贡献抵得上10个二级的工程师（当然收入也高很多），一个二级的工程师抵得上10个三级的，以此类推。（腾讯的工程师，恐怕只能算4，5级。）在这个行业里成功的关键在于是否能够不断成功地越级。好的训练（操作头脑、操练身体），好的习惯，好的导师和好的项目都是成功越级的关键。这个级不是公司里的职位，而是人真实的水平。如果不能成功越级，那是越干越辛苦，最终被淘汰。 ------------------------------------------------------------ 在豆瓣里的评价： 　　浪潮之巅确实值得每个it从业人员一读。 　　 　　 第一个维度是从技术角度。纵览整个it行业的发展史，从AT&T,IBM,朗讯，苹果，微软，惠普，雅虎，google，每个曾经在浪潮之巅，能够在那个时代呼风唤雨的企业，都有起家的绝活，有一个一句话能说清楚的商业模式。衰落的原因又各不相同，有的是因为管理决策层（CEO，董事会，华尔街的影响）的无能或短视造成（比如AT&T，朗讯，惠普），有的是因为太大的企业内部阻碍了创新的发展（微软），有的是注重技术但是领导人缺少商业机制，抱着金矿慢慢堕落（比如sun和雅虎）。当然也有焕发多春，成功转型的（比如IBM，苹果，GE）。 　　 从这个角度来看，google在搜索领域成为了霸主，但随着社交网络，电子商务，移动的发展，google的脚步也在变慢，虽然拥有youtube，android等绝对领先的技术，但gooel+似乎是对facebook无奈的拷贝，大公司对所有新兴的技术领域都需要跟进和投资（自己开发，或者收购），大公司这张策略大网总有力不从心的时候，就像微软无法扼杀google一样，期待下一个google的诞生。 　　 　　 第二个维度是资本维度。这部分也是之前了解最少的。最底层是一个美国良好的信用制度，不用担心创业者恶意卷钱走人，否则信用为0，在整个美国都无法生存（贷款，刷信用卡等）。在硅谷，创业不再是全靠创业者自己的家底（很多中国的创业者是要掘到自己第一桶金，冯仑的野蛮成长中介绍，中国的第一桶金，大多是黑心钱），创业住需要一份专利（美国产权保护做得很好）然后有一个产品原型，加一份商业计划署，然后有天使投资人可以对其投资，待有一定规模（用户，流量等），就可以引入风险投资，几轮风投之后，如果增长很快或者已经盈利（风投对增长的看重超过盈利），就可以引入投资银行来运作上市。创业者，风投，投资银行一起分享胜利果实。这是一个健康的游戏，而不是零和游戏。 　　 资本有好的一面，也有贪婪凶恶的一面。风投对创业结果不理想的企业，会毫不手软的卖掉，优先止损。创业者如何拿捏融资额和对企业的控制很是有学问，面对老辣的风投，必须是个谈判高手。投行对已上市的公司也影响很大，业绩符合或者超过的股价会大涨，反之则大跌，被华尔街卖空，股价一落千丈。投行还主导了上市公司的拆分和并购，从中收取手续费，拆分和并购，有时候会因为是否有利于华尔街，而不是有利于整个公司的长期业务。 　　 　　 第三个维度是制度。斯坦福为代表的大学输送人才，硅谷孵化创业企业，风投提供初期资金支持，投行为最终上市铺路。美国政府没有提供太多的政策和资金支持，但却提供的激发创新的机制。政府做得最多的是举行反垄断的听证会，裁决让那些事实垄断的公司赔偿给其他创新公司。不知道是斯坦福成就了硅谷，还是硅谷成就了斯坦福，斯坦福诞生了太多的it业界领袖，他们又很慷慨的捐赠回馈斯坦福。硅谷的企业为斯坦福提供研究经费，研究的成果又用于新技术转化为新产品。风投提供给助力创业人员（车库等）资金用于启动项目，同时早期的介入，让他们获利颇丰，虽然投得项目大部分都失败，成功的项目足以让他们有几十倍的赚头。投行有大有小，IPO估价有高有低，选择什么样的投行做IPO也是有学问的，总体来看，投行帮助it公司实现上市融资是不争的事实。 　　 　　 这是一个完善的生态系统，食物链的每个环节都有自己的G点。 　　 　　 以史为鉴，方知兴替。身处it公司的民工们，需要擦亮自己的眼睛，分析自己所处的时代，看清哪些公司已经处在浪潮之巅，哪些正要登上浪潮之巅。商业模式要有创新，难以被复制，有持续的盈利增长空间；企业领导人要有远见，魄力，上可以搞的定风投，投行，下可以搞定客户，员工。选一个正要登上浪潮之巅的企业，一起登顶。 浪潮之巅（On Top of Tides）   作者： 吴军           近一百多年来，总有一些公司很幸运地、有意识或者无意识地站在技术革命的浪尖之上。一旦处在了那个位置，即使不做任何事，也可以随着波浪顺顺当当地向前漂个十年甚至更长的时间。在这十几年间，它们代表着科技的浪潮，直到下一波浪潮的来临。 从一百年前算起，AT&T 公司、IBM 公司、苹果公司 (Apple)、英特尔 (Intel) 公司、微软 (Microsoft) 公司、思科公司 (Cisco) 公司、雅虎 (Yahoo) 公司和谷歌 (Google) 公司都先后被幸运地推到了浪尖。虽然，它们来自不同的领域，中间有些已经衰落或者正在衰落，但是它们都极度辉煌过。它们都曾经是全球性的帝国，统治着自己所在的产业。 这些公司里面大大小小的人在外人看来都是时代的幸运儿。因为，虽然对于一个公司来讲，赶上一次浪潮不能保证它长盛不衰；但是，对于一个人来讲，一生赶上这样一次浪潮就足够了。对于一个弄潮的年轻人来讲，最幸运的莫过于赶上一波大潮。要预测未来是很难的，但是看看过去和现在，我们也许能悟出一些道理。我愿意借谷歌黑板报的空间，将我这些年来看到的和听到的人和事拿出来与大家分享。我会谈一谈我对每次浪潮的看法，对上述每个公司的看法，以及对其中关键人物的认识。在极度商业化的今天，科技的进步和商机是分不开的。因此，我也要提到间接影响到科技浪潮的风险投资公司，诸如 KPCB 和红杉风投 (Sequoia) 以及百年来为科技捧场的投资银行，例如高盛 (Goldman Sachs) 等等。   第一章 — 帝国的余辉（AT&T) 第二章 — 蓝色巨人（IBM） 第三章 — “水果”公司的复兴 （乔布斯和苹果公司） 第四章 — 计算机工业的生态链 第五章 — 奔腾的芯（英特尔—Intel） 第六章 -- IT业的罗马帝国 （微软 - Microsoft) 第七章 --  互联网的金门大桥（思科 - Cisco） 第八章 -- 英名不朽（杨致远、费罗和雅虎公司） 第九章-- 硅谷的见证人（惠普公司） 第十章 -- 没落的贵族—摩托罗拉 第十一章 -- 硅谷的另一面 第十二章 --  短暂的春秋——与机会失之交臂的公司 第十三章 -- 幕后的英雄风险投资（Venture Capital） 第十四章 -- 信息产业的规律性 第十五章 -- 高科技公司的摇篮 — 斯坦福大学 第十六章 -- 科技公司的吹鼓手：投资银行  第十七章 -- 挑战者 -- Google 第十八章 -- 成功的转基因 --诺基亚、3m、GE公司 第十九章 -- 印钞机 - 最佳的商业模式 第二十章 -- 互联网2.0 第二十一章 -- 金融危机的冲击 第二十二章 -- 云计算 第二十三章 -- 寻找下一个 Google   后记   吴军的中文首页 吴军（Jun Wu)的英文首页","title":"浪潮之巅"},{"content":"2011年4月，亚马逊公司位于北弗吉尼亚州的云计算中心宕机，这导致使用亚马逊服务的回答服务Quora、新闻服务Reddit、Hootsuite和位置跟踪服务FourSquare在内的一些网站受到了影响。此次中断持续将近4天。为此亚马逊为宕机事件向用户发表了5700多字的道歉信，并且为受到影响的用户提供10天服务的点数。 　　2011年3月，谷歌邮箱爆发大规模的用户数据泄漏事件，大约有15万Gmail用户在周日早上发现自己的所有邮件和聊天记录被删除，部分用户发现自己的帐户被重置，谷歌表示受到该问题影响的用户约为用户总数的0.08%. 　　2010年9月，微软在美国西部几周时间内出现至少三次托管服务中断事件向用户致歉，此次事件让考虑使用与Office套装软件捆绑在一起的微软主要云计算产品Office 365的那些用户深感担忧。 　　2010年6月，Intuit的在线记账和开发服务经历了大崩溃，包括Intuit自身主页在内的线上产品在内近两天内都处于瘫痪状态。 　　2010年3月，使用VMware提供公共云服务的Terremark发生了七小时的宕机事件，让许多客户开始怀疑其企业级的vCloud Express服务。 　　2010年1月，6万8千名的Salesforce.com用户经历了至少1个小时的宕机。 　　2009年3月17日，微软的云计算平台Azure停止运行约22个小时。 　　云计算的昨日今朝 　　这两年炒得沸沸扬扬的云计算从本质上讲并非什么新鲜事物，早在上世纪90年代就有人提出的网格计算的思想，考虑充分利用空闲的CPU资源，搭建平行分布式计算。(只是这位“先烈”现今已被做传统中间件的公司收购了。)而在1999年，一项利用全球联网的计算机共同搜寻地外文明的科学实验计划SETI@home成功的将网格计算的思想付诸实施，通过传统的IP网络构建了一个小型的云环境。当用户参与SETI@home项目，那其计算机中的相关信息比如处理器的型号、内存的大小等会被 SETI@home 记录下来，以用来决定什么样的计算任务最适合该计算机。 　　从应用角度讲，在线邮件服务、搜索引擎、即时通讯、在线电影等广受熟知的各类在线软件即服务软件都可以看作是某种形式上的云服务。 　　因此，现今众说纷纭的云计算只是将以往非核心的、个人用户使用的各类SaaS应用架构方式，来部署核心关键的、企业级用户的各种应用，以实现集中化部署的种种好处，比如提升资源利用率，节能减排等等。 　　传统IT架构向云架构的迁移和供电系统的发展非常相像。自爱迪生发明灯泡之后，其一直坚持使用直流电输送电力(由于直流电的传输距离不能超过1公里，这样就需要许多小型的供电系统，而爱迪生的电力照明公司正是提供这类供电系统的)，这种大范围，小规模的供电系统正是设备供应商所最希望看到的;而伟大的尼古拉·特斯拉所发明的交流电则可以实现大规模集中式供电，按需付费的模式所带来的巨大变革使得那些没有经济实力建立小规模供电系统的区域也能够使用电力。 　　不过任何事物所都具备的两面性在这点上也完全适用。集中式的运算(或供电)模式较会给安全性和可用性两方面带来较严重的问题： 　　安全性方面的问题：应用公共设施意味着将一扇额外的门户开放，这可能使得原本在传统架构中很易于实现的安全策略在云环境下变得具有风险性。应用公共计算和存储资源的意味着将一部分数据信息提交到自身无法掌控的位置进行计算和存储，而你无法确保这些信息是否会在未经授权的情况下被复制盗取。 　　可用性方面的问题：原本可以自身掌控的可用性等级，包括响应时间、服务在线时间等，在云服务中可能不一定能完全保证。虽然大部分云供应商会提供华丽的服务水平承诺(SLA)，但经过了上述风险事故之后，恐怕很少会有用户对其完全采信。此外，烟囱式架构(相对于云架构而言的独立系统)可以做到完全物理级别的故障隔离，而这在云环境下是无法想象的。换句话说，你的系统可能会受到其他系统故障的连带影响。 　　公有云 　　早在2010年末，笔者即在美国着名IT技术媒体TechTarget上提出，国内公有云在3年内的主要发展对象集中在个人用户以及中小型企业的非核心应用上，诸如个人邮件，在线OA、数据归档备份等。 　　向云环境迁移需要一个漫长的过程。在这一过程中，需要企业对自身的各类系统、应用和数据进行周密地分析归类。一般来说，关键业务的核心数据仍应当保留在传统的烟囱式体系架构之中，并且配以高可用的业务连续性手段确保可以接受的RTO(回复时间目标)和RPO(回复点目标)。对于归档或合规遵从类信息，可以考虑逐步向混合云的部署方式迁移，并在接口处配以安全网关作为安全防护和信息的本地缓存，利用公有云线性扩展、按需付费的模式将原本在固定IT设备上的投资转变为可以预估的运营成本。 　　当然，安全仍是公有云在接受过程中最大的挑战，在一项针对IT专业人士进行的云计算跟踪民意调查中显示，妨碍云计算应用的技术难点在于如何确保云端数据的安全性，并降低数据传输过程中的延迟问题。即使放在公司内部的数据也面临风险，在共享存储中面临最大的风险是数据丢失/泄漏，在虚拟存储环境中面临最大的风险是存取权限、数据备份和销毁。需要从数据隔离、数据加密、第三方实名认证、灵活转移、安全清除、完整备份、时限恢复、行为审计、外围防护等方面综合考虑解决云存储安全问题。 　　目前数据安全性的问题通过存储虚拟网关实现，(亦称远程备份装置，Remote Backup Appliance)提供加密的备份服务，以及实现故障切换、动态扩容、负载均衡、自动精简配置等高级功能，此外存储虚拟网关还可以作为数据缓冲池，将生产环境中频繁使用到的数据保存在其中，减少从云端站点存取数据所造成的延迟。目前这类产品的主流厂商有CommVault、Symantec、EMC、ETIM,以及Brocade等。 　　此外，针对法规安全，目前所有的云服务供应商都没有一致的解决方案。因为在电子证据发现方面，用户和云提供商必须对对方的角色和责任有共同的认识，包括诉讼保留、发现搜索、专家证词提供方等。云服务供应商现阶段很难提供真实可靠的数据，以保证他们的信息安全系统可以响应客户的要求，比如类似元数据和日志文件的主要信息。云服务供应商保存的数据需要接受与在数据所有者处保存时同样级别的监管。提前计划好相关意料内和意料外关系终止后的合同协商事宜，并有序地恢复或处置资产的安全。       私有云 　　许多人认为私有云是解决云技术落地过程中解决安全等各类问题的有效途径。私有云和公有云类似，但是是将企业传统的IT资源集中起来统一管理和备份;私有云的核心是虚拟化技术，将所有物理机和物理存储的资源打散，从而提升整体系统的使用效率。 　　私有云从整体架构上来说和传统的IT环境并没有实质性的区别，所以从安全的角度来看，私有云同样面临着传统IT环境中面临的各类安全问题，以往的数据安全、网络安全和应用安全在私有云环境中同样存在。不过由于其资源是集中部署的，在管理和部署安全策略方面有一定的优势，比以往分散管控要容易许多。 　　但是私有云也由于其体系架构的特殊性，会造成的额外的风险。如何保护私有云中集中式数据的安全性就是一个问题。对于希望非法获取企业数据的“窃取者”,集中式的数据存放方式让其只要攻破一点就能获取到全部数据，而且集中式的数据存放使得企业系统管理员具备超常的权限，只要愿意，管理员可以很轻易地检索并获取到想要的任何数据。 　　索性的是目前已经有一些领先的国内外厂商致力于该领域的解决方案。这类产品通过加密存储(且加密算法可以替代为第三方算法)，加密传输--确保数据在存储过程中的安全性，多级授权认证--防止系统管理员可以获取全部数据，日志审计--记录所有的登陆，操作日志，对集中存放的信息数据进行全方位的加密保护。 　　此类解决方案在部署过程中还需考虑到云环境下，对整体系统性能和稳定性的要求。一般至少要能够支持Scale Out(横向扩展)的扩展模式，并且在高并发环境下表现出稳定的性能曲线。 　　较之于传统的烟囱式架构，私有云中虚拟计算资源的同样面临着更大的安全性风险。在传统IT体系架构中，一台服务器或一个集群中只会运行有限的数个系统，换句话说，即便是整台服务器或整个集群同时断电宕机，所影响的也是有限的数个应用，而企业IT系统中的其它应用仍可以正常运行。但在云环境下则完全不同，一台服务器的物理故障可能会引起其上加载的诸多应用的故障迁移，而如果相应的迁移策略出现问题，引起“脑分裂”现象，很容易大面积地影响整个云环境上的应用。 　　在云环境下，一般从以下几个角度考虑云计算环境下虚拟机的安全问题： 　　各虚拟主机的安全策略 　　在虚拟基础设施中运行虚拟安全网关 　　加强对非法及恶意的虚拟机流量监视 　　向云环境迁移需要一个漫长的过程 　　从上文中我们可以得出这样的结论，向云环境迁移需要一个漫长的过程。要对整个IT系统和业务环境进行分级，从重要性和可用性两方面依次考虑是否采用私有云、混合云或公有云。并通过部署安全策略确保主机端和数据端的安全性，这种安全性级别要求远超过以往传统的IT架构。对用户来说，抱着那种希望通过采用部署某种系统，然后在第二天看到一个全新的基于云架构的IT环境的想法无异于天方夜谭。 　　同时，无论是采用公有云、私有云或者是混合云的部署方式。如何对计算、存储和安全策略进行统一监控，并通过灵活的调度方式对各类资源进行统一管理可以大大降低向云环境迁移过程中可能存在的风险。目前部分国内外一线厂商已经开始提供这种统一化的用户界面。","title":"如何保证向云迁移过程中的数据安全"},{"content":"你可能很幸运，所居住的区域已经被3G或4G网络覆盖，你可以轻松地享受网络带来的各种便利，打开你的电脑、笔记本或是手机就能搜索到N个Wifi网络。云计算就是为此诞生的，而它对于那些没有电脑、生活即将被智能手机以及相关应用彻底改变的人们会更加有意义。 比如说，非洲。是的，非洲 — 这个据说在未来5年内将普及智能手机的地方，将是IT行业竞相角逐并获得丰厚回报的下一个市场，他们将通过手机云端应用为当地消费者和企业服务。同时，一些政府和非政府组织也将通过云服务改善当地经济和社会生活，促进教育、公共卫生以及环境等各方面的发展。 一直以来，非洲就是贫穷、疾病和绝望的代名词，要在这里普及云技术并不容易。在当地架设过数据中心的人比任何人都清楚这将会是多么崩溃的事情：从非洲连接到某个海外数据中心的成本竟然 大大低于与当地数据中心连接所花费用；在这里，人们甚至没有固定电话，也没有有线网络；电力输送也不稳定，忽然就停电几个小时，甚至几天。 然而，或许正是这些特别的挑战不断吸引着IT人士的注意。而根据世界银行给出的资料，在非洲每10亿人中只有1.4亿使用互联网，但使用手机的人数却已经超过了6亿。这对于移动应用来说无疑是 个巨大的潜在市场。 6月6日在内罗毕举行的东非外包服务峰会上，肯尼亚ICT（信息通信技术局）CEO Paul Kukubo发言时称： “世界开始关注非洲，如果你的IT产品能够解决非洲的（互联网）问题，那么这个产品也将受到全世界的青睐。” 要在非洲普及云计算所面临的问题尽管都是特例，但当地找出的解决方法却适用于全球的互联网和云端服务。 升级宽带  近几年来，非洲的宽带服务有了极大改善。2001年，非洲西部首次引入宽带，当时带宽为340bps，但安装这样一条宽带的费用却高达30万美元/月，天文数字的宽带费用让当地互联网发展相当缓慢。一直到几年后，当地许多大学的电脑都还没有联网。 2009年，通过架设海底电缆，当地网络状态有所改善。南非的区域带宽提高到了8Tb/秒，然而这也只是降低了当地与海外数据中心连接的费用，在本地联网的费用仍旧居高不下。你装或不装，宽带都在那里；价格不低，不降。只要你有钱，随时可以联网。 造成宽带费高的另一个原因是，当地最大的电信公司是国营公司，缺少强有力的竞争者。 而内罗毕的宽带状态则存在另一个问题。随着越来越多IT企业的入驻，当地宽带供应商展开了激烈的竞争。他们都架设了自己的光纤，为一些富裕地区服务。而竞争对手之间通常会将对方的光纤挖出来切断，以此打击对方业务。这种恶性竞争对整个地区的互联网发展有害无益。 电力问题 云服务提供商在非洲面临的另一大问题则是电力供应。当地人最常做的一件事情就是诅咒电网公司。 南非的一个数据中心供应商称，他们拥有几百台柴油发电机，但经常得不到电力供给；有时在没有任何通知的情况下，会断电三四天。除此之外，电容不足也影响了当地数据中心的建设。试想一下，在一个电力荒芜、电站年久失修的环境下，一个数据中心如何运行得下去呢？ 对移动云端的需求 非洲有线网络基础设施的严重缺乏正好为云服务提供了发展市场。正如前文所说，当地手机用户人数很多并且仍在增长，某些移动应用的使用率甚至已经超过了美国，比如在肯尼亚，去年的移动支付用户总数达到800万，相当于肯尼亚成年人口总数的40%。 从经济和文化两个角度来看，在非洲发展移动事业远比有线宽带有前/钱途。世界银行的一项研究表明，不需要政府补贴，非洲的手机覆盖率有望达到其总人口总数的97%。 由于电力供应不足，用可充电的移动设备访问互联网对于当地人来说更加实际。 事实上，非洲的移动用户数增长速度远超过那些电力供应正常的地区。到2015年，1.38亿非洲移动用户都将来自那些没有电力设施的地区。 一些非政府组织和发展机构也将云服务作为援助当地经济和社会发展的工具。比如，美国国务院赞助举办了一个名为Apps4Africa的应用设计挑战赛，去年胜出的应用是一个农作物供给管理系统；前年的胜出者是一个集移动社交和畜牧业信息系统为一体的应用iCow，目前已经有11000个肯尼亚农民在使用。 传统的有线网络缺乏或许阻碍了非洲社会许多方面的发展；但从长远角度来看，对于发展移动应用和云计算，非洲有着很大的优势。  充满潜力的荒原地带 非洲的未来是以移动为中心，它将是促进云计算茁壮成长的下一片沃土。目前，全球都已经向移动化迈开步伐，非洲人民更是其中的主力军。而对于云服务供应商来说，想在非洲获得成功，就必须从当地实际需求出发，提供的服务必须与用户生活相关。意思就是，饿得要命的非洲人民可没空关注在 Facebook 上有多少人粉他，一个类似 iCow 的农业服务应用才能获得他们的青睐。   Via  arstechnica （曹三藏 供雷锋网专稿，转载请注明！)","title":"非洲 云计算发展潜力巨大的IT荒原"},{"content":"据IDC预测，2015年云管理软件市场规模达25亿美元。有人把云管理市场的现状比作《愤怒的葡萄中》一书中所描述的荒凉的西部，因为他们有着相同的特点：广漠、人烟稀少、缺乏秩序。确实如此，目前，云管理市场发展的秩序十分混乱，标准缺乏，但是同时又有很多企业想要分这杯羹，这其中包括许多大型的数据中心管理工具的厂商，也不乏一些二线的专注于管理监控的小厂商……、通过对云管理工具进行梳理，列出了近20款云管理软件或工具，以供参考。 Abiquo 完全重新设计的Abiquo旨在提供下一代云计算管理，它是如今市面上最全面、最先进的解决方案。Abiquo提供了同类中领先的诸多功能，如通过易于实施和操作的平台实现虚拟机到虚拟机的转换，从而解放了贵企业的IT部门，不必操心管理成千上万个虚拟机的繁重任务，又不放弃对物理基础架构的控制权。 Bitnami BitNami云(Bitnami Cloud)基于亚马逊云，你可以访问众多类型的服务器，这些服务器可以配备自定义存储系统。可从一台基本服务器开始搞起，然后在需求变化时，向上扩展(或向下扩展)服务器类型和磁盘空间。 Cloud.com 的CloudStack 由于CloudStack作为基础架构云的基础，数据中心的操作人员就能在现有的基础架构里面快速、轻松地建立云服务，从而提供按需供应的弹性云服务。Cloud.com认为，云计算是数据中心计算领域的一大转变，也是一种全新的模式。 CrowdDirector CrowdDirector可以监控和管理关键任务服务器、服务和计算云方面的流量，以便最大限度地提高可用性、加强针对web和互联网服务的控制性。CrowdDirector让内容提供商们能够配置和管理不同的网络资源，又不必构建和支持监控及管理这些资源的工具。CrowdDirector相当于诸多功能强大的负载均衡器分布在互联网上，旨在实时提供网站运行方面的实时信息。 Novell Cloud Manager Novell Cloud Manager云管理解决方案，可以创建并安全地管理云计算环境。让客户摆脱困于专利技术堆栈之中，Novell Cloud Manager针对大多数IT环境多样性的现实而设计，用户可自由灵活地创建和管理支持各种主要系统管理程序、操作系统和硬件平台的私有云。Novell Cloud Manager使IT管理员通过一个用户定制界面，按需封装、标价和呈献IT服务。客户可利用这种云计算的灵活性并节省成本，无需顾虑公共云中故有的安全与合规风险。 Novell Cloud Manager目前支持多种系统管理程序，包括VMware vSphere, Microsoft Hyper-V和开源Xen;操作系统包括SUSEreg; Linux Enterprise Server, Microsoft Windows Server 和 Red Hat Enterprise Linux。 Deltacloud Deltacloud是由Red Hat发起的开源项目，目前已经转化为Apache孵化器项目，不再仅仅由Red Hat一家努力。Deltacloud提取了不同云环境之间的差异，并将云用户客户端应用编程接口(API)向大多数流行的云计算应用接口做了映射，这其中就包括了Amazon EC2，GoGrid，OpenNebula和Rackspace。Terremark和vCloud 的驱动程序也将于不久后推出。所以说，Deltacloud 具备管理多样化的云虚拟基础设施的能力。 Deltacloud几乎考虑到了所有公认的虚拟化环境，例如KVM，VMware ESX和Hyper-V虚拟环境，这些虚拟环境将由Deltacloud的统一管理界面所管理。Deltacloud改变了原来基于ESX的VMs要一个管理平台，基于Hyper-V的VMs又要一个管理平台的不利状况。所有的VM只需被一个管理平台所统一管理。Deltacloud使不同的虚拟机可实时地在不同虚拟环境之间转移或迁移，例如从VMware到RHEV (Red Hat企业虚拟化)，或是从VMware到Microsoft。如果企业已经使用了IBM Tivoli 或是HP的OpenView，DeltaCloud仍然可以被集成其中。 Eucalyptus Eucalyptus Community Cloud是一款封闭的云环境，你可以在其中测试驱动和相关Eucalyptus的应用。它是以IaaS(Infrastructure as a Service)的方式实现Amazon EC2规范的私有云计算平台。Eucalyptus本身符合Amazon API及其工具套件的规范，并极少出现异常。它同时还包括了管理功能，例如用户管理，存储配置，网络管理和管理与维护私有云管理配置。Eucalyptus将目标对准了使用KVM和Xen虚拟化技术的Linux系统。Ubuntu的9.04版本已经将它进行打包，打包Eucalyptus的Linux系统还有CentOS，Debian，openSUSE和 Red Hat Enterprise Linux 5.x。 KVM KVM(基于内核虚拟机)是一款专为运行于x86硬件之上的Linux而打造的管理程序。它包括了虚拟化扩展(Intel VT或是AMD-V)。使用KVM，你可以同时运行多组基于Linux或Windows镜像的虚拟机(VMs)。KVM是上游管理程序，它处于Linux内核，并将内核转为硬件管理。作为上游产品的KVM伴随着Linux的配置过程。对于内核升级，KVM更是采用了自动化方式。KVM目前已支持Red Hat Enterprise Linux,，Ubuntu和SUSE Linux Enterprise Server。 OpenNebula OpenNebula是一款为云计算而打造的开源工具箱。它允许你与Xen，KVM或VMware ESX一起建立和管理私有云，同时还提供Deltacloud适配器与Amazon EC2相配合来管理混合云。除了像Amazon一样的商业云服务提供商，在不同OpenNebula实例上运行私有云的Amazon合作伙伴也同样可以作为远程云服务供应商。 RightScale RightScale云管理环境提供了设计、部署及管理部署在多个公共云或私有云上的云资源所需的所有工具，让你可以直接访问云环境中的服务器和存储资源，好像它们在你自己的数据中心一样。 rPath rPath是一个独特的系统自动化平台，可以通过实现平台配置自动化、管理应用程序版本流程，以及提供一种方法以便交付更新版和补丁，从而加快IT服务的交付，并改进IT服务交付的质量。 Symplified 它是第一款作为一种完全托管的服务而交付的下一代身份和访问管理解决方案。Symplified既可以完全交由第三方托管，也可以通过硬件设备部署在企业内部。可以借助Symplified，运用身份和访问管理方面的专长来交付定制的身份服务。 Kaavo Kaavo的解决方案克服了这个难题：部署和管理云环境中的分布式应用程序和工作负载。Kaavo是第一家也是唯一一家提供从应用程序的角度，全面关注公共云、私有云和混合云中IT基础架构管理的解决方案的公司。 Cloudera 非常好的hadoop管理工具，通过该工具，可以对hadoop集群进行高效的管理。同时，其管理操作又是非常的简单，但是目前只提供了对集群、hdfs以及mapreduce job的管理，对于其他的一些hadoop子项目，如hive hbase等，没有提供支持。 Monitis Monitis提供针对亚马逊EC2和S3云存储的监测。 Monitis代理可以自动安装在新服务器上对其进行性能指标监测，如果发现资源状态较差它会自动发出通知。如果某服务器在亚马逊云里不见了或者被破坏，它就会通知用户。Monitis还提供云的系统监控、性能测试和配置管理。 Morph mCloud On-Demand是一款操作管理平台，可与亚马逊弹性计算云(EC2)协同运行，提供轻松部署、管理和监控企业级Rails、Java或PHP应用程序的一套综合云管理工具。mCloud On-Demand还让你能够专注于创造业务价值，而不是管理基础架构。 Scalr Scalr为你提供了正常运行时间长的容错网站：Scalr可监控你的所有服务器，查找有无崩溃现象，并更换出现故障的任何服务器。为了确保你从不丢失任何数据，Scalr可以按固定的间隔时间备份你的数据，并使用亚马逊弹性块存储(EBS)作为数据库存储系统。 Zeus Zeus以它坚如磐石的Web服务而闻名，这个产品没有什么市场份额，但是有一大堆狂热的粉丝和高端的消费人群。Apache和第二名的IIS把持着市场，更不用提还有大群的负载平衡服务器充斥市场，Zeus专注地坚守着它的应用服务器领地，和Zeus传输控制器的应用发布控制器部件一起撑起了一片自己的天空。它用传统的负载平衡工具来测试可用性，然后同步地产生或消除云中的附加实例对象，实现运行中供应。现在Zeus在Rackspace平台上支持这种服务，Amazon平台也可以，不过用的人要少一些。","title":"20款云计算软件盘点"},{"content":"当前的核心工作负载依然要跑在企业级系统平台上 出现这种现象的原因在于我们对于云计算的技术还不够成熟。我们对于客户端的数据处理和分析，算法设计不够智能，在数以万计的客户端在目前看来只是作为收集信息的端口而没有实现对数据的智能化的处理。我们现在要做的就是在加强企业端的同时，还应优化这不计其数的客户端的数据处理分析能力。一旦我们成功的做到客户端数据处理的智能化，他强大的性能绝不是几台服务器所能比的！","title":"浅见---------云计算1（海）"},{"content":"原址如下： http://news.51cto.com/art/201206/341434.htm OpenStack编年史   OpenStack成为2011年云计算领域的热门话题，2012年热度丝毫不减。这个由Rackspace和NASA在2010年末所发起的开源项目，实际上是为数据中心组装的一套私有云“操作系统”，承诺可以大幅提升数据中心的运营效率。 OpenStack是一个旨在为公共及私有云的建设与管理提供软件的开源项目。它的社区拥有超过170家企业及3000位开发者，这些机构与个人都将OpenStack作为基础设施即服务（简称IaaS）资源的通用前端。OpenStack项目的首要任务是简化云的部署过程并为其带来良好的可扩展性。OpenStack发展动量相当惊人，包括思科、Citrix、戴尔、惠普和英特尔纷纷表示支持这个项目。IBM、Red Hat和雅虎近期宣布加入OpenStack基金会，成为基金会19家成员公司中的3家。这个基金会将接管RackSpace官员对这个项目的管理。 51CTO调研中心梳理了自OpenStack创建以来的重大事件，帮助读者对OpenStack的发展做一个详细的了解。  ","title":"转 -- OpenStack编年史"},{"content":"网络迅速发展，CRM的发展也突飞猛进，再加上在SaaS过后，CRM更是进入云计算，移动应用和社交等混战状态，中小企业更是利用这一状况，对CRM与其他模式相结合，加快中小企业信息化的发展。 CRM与SaaS：软件即服务(SaaS)已经成为一种新的趋势，而其中最为成功的就是CRM，包括Saleforce.com正是在这个领域挖到第一桶金。目前，大多数厂商正往这个方向迈进，通过云提交CRM服务，不过到目前为止，一些大型传统CRM厂商迟迟没有提供SaaS的选项。显然，如果它们无法提供SaaS，那么就没有资格角逐云市场。 CRM与云：每个企业的CRM价值也可能因为部署的目的和过程不同，从而有不同的收获。这就需要企业能够有效的管理自己的CRM价值，能够建立一个适合自己企业的CRM价值管理流程，以获得更大的CRM价值。究竟CRM与云计算是谁先人是谁，是谁造就了谁，这样的讨论足可以使的我们更能够了解未来两者的应用去向。 CRM与Social ：其实社会化媒体最适合就是做关系管理的前端工具。不然活动一波一波做，内容一条一条发，做的人不知道做了有啥区别，变成一个没有积累的无底洞了。 举例来说，感觉微博营销，还是有个适度服务规模的问题。要和多数陌生人产生互动，成本与时间是巨大的。有必要透过Social CRM系统。Social CRM平台第一阶段是基于关键字帮助企业监控和采集人和话题的数据到企业数据中心，第二阶段基于关键字和相近词进行数据的分析与应用，尤其是与企业业务系统的结合，从而形成对人的线上线下数据的统一整合。 CRM与BI：未来的BI应该是为CRM服务的，提高CRM直接生产的能力，特别是客户感知能力、客户洞察能力、与实时决策能力。从这个意义上，或许架构的设计会更清楚些。 CRM与移动应用：移动CRM(客户关系管理)是一种利用现代移动终端技术、移动通讯技术、计算机技术等现代科技实现在移动中也能过完成通常要在办公室里才能过完成的客户关系管理任务。移动CRM系统具有传统CRM系统无法比拟的优越性。移动CRM 系统使业务软摆脱时间和场所局限，随时进行随地与公司业务平台沟通，有效提高管理效率，推动企业效益增长。 集成的 CRM 系统的五大优点： 1、全面了解您的客户。 2、跨越系统边界连接和简化您的业务流程。 3、充分利用与其他信息系统的平滑集成。 4、在您的网络范围之外工作 5、自定义和集成其他产品和服务。产销协调、供应链平衡经常被人挂在嘴边，在规划CRM的时候，考虑过CRM与ERP、SRM之间的关系，或许让CRM距离客户关系更进一层。 活跃在一线的业内人士称：通过近日接触的几家装备制造企业来看，均反映下半年市场下滑非常厉害，看来国家宏观趋紧、压缩银根的作用已经开始体现出来。面对经济退潮，“你的企业是忙于找内裤穿呢，还是借机锻炼体质，为下一次涨潮做准备?”实施CRM是“淡季扎马步”的重要策略之一。 于是，CRM效果营销赢得企业的青睐。先设计好如何获取新客户，如何管理‘提升和维护老客户，如何积分，如何互动，再实施CRM， 这样的CRM包含了客户管理管理、数据分析模型、多渠道活动管理平台以及会员积分管理的整合。传统的CRM软件解决不了这些效果营销型CRM解决方案： 数据集群+精准营销+CRM平台;对企业直接价值：1、快速拓展潜在客户群，2、高效转化潜客至交易客户，3、提升客户重复购买率;落地模式，云端2亿海量数据结合企业内部数据，捕捉客户行为数据，多维度切分数据群，精准互动营销，CRM平台承载转化后数据，提升重复购买率，客户生命周期整合。","title":"CRM与多种模式相结合，促进中小企业信息化"},{"content":"上个世纪80年代电子政务起步发展至今，与互联网Web1.0、Web2.0技术发展相适应，电子政务发展经历了信息发布、单向服务、双向互动、全方位网上事务处理等发展阶段，电子政务在推进政务公开、推动政府职能转变等方面发挥了重要作用。深入分析当前电子政务发展现状和形势，有利于指导和推进本部门电子政务的纵深发展。 一、世界电子政务发展总体情况和特点     1.与各国信息产业发展匹配，电子政务发展呈现明显区域差异性。各国政府积极推动电子政务发展，而各国电子政务基础设施、政策、服务等方面存在较大的差异。据联合国《金融危机时期电子政务的利用》(2010)报告显示，从电子政务发展区域布局上而言，与各区域信息产业发展水平紧密关联，排名为欧洲、美洲、大洋洲、亚洲、非洲。在电子政务准备度方面，全球183个国家中前3位为韩国、美国和加拿大，中国排名第72位。在电子化参与度方面，前3位为韩国、澳大利亚和西班牙，中国排名第32位。在全球排名前35位的国家中欧洲国家占70%，亚洲国家占20%。     2.电子政务成为助推信息产业国家战略实施的重要载体。电子政务是信息化的领域之一，为信息产业发展带来巨大市场空间。从信息产业强国（如美国、日本等）的先进经验分析，依托政府电子化应用，通过大力实施政府采购政策是拉动本国信息产业发展，激发产业创新活力、降低企业研发风险的有效路径。近年，电子政务理念从电子政府（E-Government）向互联治理（Connected Governance）转变，其核心是在传统电子政府侧重提升行政效能的基础上，更加注重利用信息技术改善政府与公民、企业及其它部门之间的关系，更加强调公民广泛参与的公共服务创新，更加注重加强社会各层面的整合。随着政府职能的逐步转变，电子政务提供公共信息服务需求的加大，将有力地带动民族信息产业的发展。     3.重视顶层设计，规划先行是电子政务发展领先国家的共识。以电子政务发展领先的美国为例，曾先后发布《电子政务战略——简化面向公民的服务》(2002)、《电子政务战略》（2003），并制订了《政府信息公开法》、《个人隐私权保护法》等，逐步健全电子政务的法制环境；欧盟制定《电子欧洲2002行动计划》、《电子欧洲2005行动计划》、《欧盟信息社会2010发展规划—i2010》等一系列电子政务中长期规划，为欧盟电子政务发展做出战略部署。此外，韩国、日本等国家在电子政务的总体规划和法律环境建设等方面着手较早，成效明显。     4.服务为中心，重视政府流程重构和应用整合。政府内部管理职能向外部服务职能转变是行政体制改革的关键，而电子政务是解决行政体制障碍的有效途径，以政府门户网站整合资源搭建一站式服务平台是电子政务发展的基本形式和必然趋势。如新加坡的电子公民网站、美国联邦政府门户网站、欧盟的“eMayor”行动计划、韩国的国家信息资源管理中心等均是以服务公民为核心，整合各类资源形成的完整开放的政府网站体系。同时，拓宽网络交流渠道成为电子政务促进民主建设的新模式，打造全能政府是电子政务发展方向。     5.信息安全是电子政务发展的关键保障。电子政务信息系统承载着事关政治、经济、国防安全和社会稳定的重要数据和信息，信息安全对保障电子政务有效运行尤为重要。当前，网络攻击、病毒泛滥、黑客入侵、网络窃密、违规操作等影响和威胁电子政务的安全隐患层出不穷，电子政务安全涉及观念、技术、管理和立法等层面。电子政务的信息安全建设需从几个角度入手：一是要确保政务信息内容的完整性、保密性、不可抵赖性；二是要确保信息网络传输的可靠性、可控性、互操作性；三是要确保信息存储的可靠性，保证物理安全和数据安全；四是要有健全的信息安全立法约束和有效的规章制度保障；五是进一步强化信息安全意识。 二、中国电子政务发展现状及趋势     1.我国电子政务发展基础和发展现状     我国电子政务建设历史可追溯到20世纪80年代中期, 至今经历了3个发展阶段，即20世纪80年代的起步阶段、90年代的重点推进阶段和2000年后的加速发展阶段。20世纪80年代以来,我国政府投入了万亿元巨资推进信息化建设，特别是“两网、一站、四库、十二金”等大型项目的建设实施取得了显著成效，在联合国开展的电子政务调查中，我国在世界范围内的排名逐年上升，电子政务发展水平呈现出较好的发展趋势。     《国家电子政务总体框架》（2006）的发布进一步推动了我国电子政务建设的整体发展进程和各部门的电子政务发展。我国主要地区电子政务建设正从覆盖政府业务阶段向与政府业务融合、全面支撑服务型政府建设阶段过渡。从基础电子政务网络而言，中央级传输骨干网开通，国家电子政务外网投入运行，促进了全国范围内横向和纵向电子政务网络的互联互通。从电子政务应用而言，中央政府门户网站和各级政府网站建立并提供对外一站式服务，进一步推进了政务公开和政府与公众的广泛互动。政务信息系统建设覆盖各领域各部门，为政务部门履行“经济调节、市场监管、社会管理、公共服务”等职能提供了重要支撑。电子政务安全体系建设方面，公安部等四部委联合出台信息系统等级保护有关技术标准和规范、国家保密局出台涉密信息系统分级保护的有关技术标准和规范，围绕信息系统建设的信息安全保障工作正在逐步健全和完善。     2.电子政务发展中的薄弱环节     我国各级领导高度重视电子政务建设，从国家层面上提出以信息化带动工业化、以工业化促进信息化的发展战略。与发达国家相比，我国电子政务发展方面还存在一些问题，离互联治理的阶段目标尚存在一定差距。     （1）电子政务区域发展不平衡问题依然突出。总体而言，电子政务建设在中央、省级等层面的发展相对迅速，而在县级以下相对薄弱，政府信息化向“最后一公里”的延伸仍需大力推进。同时，电子政务发展存在普遍的区域不平衡问题，发达省区与欠发达省区的电子政务发展水平差距较大。此外，在电子政务的规划方面，在战略层面的规划基础上需要更加注重在核心数据、重点业务层面上的规划。     （2）电子政务基础建设的投入力度还需进一步加强。欧洲国家电子政务准备度指数高的重要原因是这些国家重视在基础设施和连通性方面的投资。如瑞典的互联网普及率为74.9%，美国的互联网普及率为68.8%，中国的互联网普及率为34.3%（世界排名第87位）。韩国在电子政务调查全球排名中迅速提升也得益于其位居世界第一的80%的互联网普及率。     （3）电子政务的规范化和标准化需要进一步加强。规范化和标准化是电子政府系统实现信息共享、业务协同的基础。如英国颁布部门通用的身份确认方法、安全导则、网站设计导则等；加拿大实施“E-分组”战略并推出CLF标准。我国制定了《电子政务标准体系》（2005），并发布了《电子政务标准化指南》（2005）从工程管理、网络建设、信息共享、支撑技术和信息安全5个方面指导我国电子政务建设。此外，《中华人民共和国电子政务法（专家建议稿）》（2009）发布，表明我国电子政务标准化体系和立法体系正在逐步完善，但客观而言，我国电子政务的标准化程度仍然不够，标准指标设计上相对宽泛，尚需各部门针对电子政务实际进一步细化，从而进一步提升其操作性。此外，电子政务安全认证体系尚需逐步健全。     （4）重建设、轻维护的现象依然存在。到目前为止，早期投资建设的信息系统已进入应用维护阶段，电子政务发展正处在由建设向运维转型的时期。据统计，全国信息化建设新增项目呈逐年减少的局面，信息化资产增速逐年放缓。然而，电子政务工作依然存在“重建设、轻维护”、“重技术、轻管理”等现象,对运维工作重视程度依然不够。在电子政务成熟的国家,运维资金一般占到电子政务资金总投入的75%以上，而我国80%的资金都投入到了电子政务的建设中，比较而言对运维工作的重视和投入方面还需进一步加强。     （5）电子政务的效能评估方面还需进一步加强。如欧盟出台《2007-2010年提升电子政务效率和效能的关键行动计划》作为指导欧盟提升电子政务效率效能的里程碑式文件。我国对电子政务的效能评估、监督考核体系的建设刚刚起步，构建低成本、集约化、见实效的电子政务体系必须要有有效的评估和监督体系作为支撑。     基于此，进一步加强信息基础设施建设，进一步完善电子政务标准规范体系及安全防护体系建设，多渠道促进电子政务的均衡发展等将是今后一段时期电子政务发展的重点环节。 三、对电子政务发展的思考     电子政务在促进政府服务创新的同时，需紧密结合新技术新方法，加强电子政务自身创新。当前，下一代互联网、物联网、云计算、高端服务器和信息服务等是信息技术领域的热点和趋势，这些新的理念和技术将引导和促进电子政务的进一步发展，同时电子政务也将成为助推新技术应用和发展的重要力量。然而，电子政务发展过程中也要尽力避免对新技术的盲从，应当以科学发展的态度，确定新技术应用的着力点。     1.进一步加强政府门户网站的互动功能，使其成为转变政府职能的有力抓手。互联网已成为了解民意、倾听民声、体现民情的重要载体，网络问政是提升政府民主建设的重要渠道，也是检验政府行政能力的监督利器。政府门户网站的定位不仅包括政务宣传、信息公开，更要强化政府门户网站的在线办事和公众参与，使政府门户网站成为政府对外宣传的窗口、为民服务的窗口。同时，相关网络监管部门也要对网络文化、网络民情民意予以正确引导。    2.物联网将进一步推动电子政务应用向人性化、智能化方向发展。物联网是社会各界广泛讨论的问题，我们提出的“感知中国”、“智慧城市”的构想均为基于物联网思想驱动而勾画的建设架构。从物联网技术的基本组成来看，包括感知层（信息采集，以RFID为核心）、网络层（信息传输）、应用层（信息分析处理，提供信息服务），物联网自身的产业链很长，涉及传感、芯片、软件、终端、网络到业务应用等众多产业领域。然而目前对于物联网的讨论更多集中于感知层，对芯片等硬件层的关注度明显高于对软件应用和计算能力的关注，物联网应用集中在城市管理、公共安全、智能交通、环境监测等方面。我们认为，从这个意义上讲，物联网在面向社会公共服务和公共管理的政府部门中具有良好的应用前景，可有效提升政府工作和服务的效能。此外，近年基于RFID技术提出的面向政府应用的有源文件、资产管理等电子政务解决方案也有较为典型的应用，我们认为该方面的应用还需各部门结合工作实际进行性能价格的综合判断和科学决策。从对物联网的应用分析来看，物联网与传统传感网接近，而业界对于物联网内涵和边界的界定仍然众说纷纭，且尚未形成统一、规范的技术标准，开放、共享的电子政务物联网架构体系还未形成。     3.云计算模式在电子政务中的应用还需从需求出发、切合实际审慎对待。云计算是将大量网络连接的计算资源统一管理和调度，形成计算资源池向用户提供按需、易扩展的服务。物联网大规模应用涉及海量数据的存储、处理，必须依托云计算平台，云计算是判别物联网规模化应用的特征。理论上而言，基于虚拟化技术的云计算模式可解决电子政务中安全、性能和成本等方面的问题，美国、新加坡等均有成功的实施经验，如新加坡利用商业公共、政府私有、内部云等不同层级的计算云分别满足电子政务中不同的应用和管理需求。但是，云计算在国内尚处于准备阶段，应用仍然相对匮乏，目前建设的超算中心、云计算中心主要面向科研计算、工业计算、仿真计算等领域。电子政务中应用云计算模式需要重点从两个方面考虑。一是从电子政务自身的计算需求出发，云计算的特色是其超强的计算能力，如气象、地震、生物、工业制造、高技术仿真等涉及海量数据计算的领域能体现出其技术优势，而一般性电子政务应用采用云计算则须充分衡量成本和收益的关系问题。二是要充分考虑到云计算的风险，政府对商业外包计算服务的信任程度、电子政务应用数据的安全隐私问题等都需优先考虑，尤其云计算模式与正在实施的等级保护、分级保护等相关技术标准和要求的匹配性和兼容性还须商榷。     电子政务发展不仅要顺应技术发展进行技术创新，同时需要从政府自身的管理体制上予以创新。","title":"电子政务发展现状的调研分析(转)"},{"content":"云计算并不是精确的计算。正如‘云’这个概念，一方面你是指他离你很远不是你自身具有的，而是在通过远端庞大的数据量，以及高性能的智能分析来进行计算得出结果。另一方面（个人观点），云计算并不会得出绝对正确的答案，他只能提供最有可能的答案！在我看来，他非常适合人工智能的开发。我们要实现人工智能就要来模拟人，是机器最大程度上得接近显示中的人。那么现实中的人是怎样的呢？我们人类并不能对所有的问题都得出正确的结论，我们要通过我们大脑中所存储的大量信息进行分析判断得出我们认为的与正确结论最相近的答案。这正与云计算相吻合。所以说，云计算是人工智能实现的一个不可忽视的途径！","title":"浅见之------云计算 0 （海）"},{"content":"超越“虚拟的美丽”——云计算实践再分析 2012-05-31 16:02 | 3491次阅读 | 【已有11条评论】发表评论 来源：CSDN | 作者：李德毅 | 收藏到我的网摘 导读：随着第四届云计算大会的落幕，三天内太多精彩的创新和分享冲击着我们，CSDN将陆续对讲师的精彩分享整理加工后再提供给读者。今天带来的是中国电子学会云计算专家委员会主任委员、中国工程院院士李德毅在云计算大会上的主题演讲，CSDN整理如下： 云计算正在走向成熟，大数据正在发展 在经历了对云计算的认识以后，已经成为当前信息通信行业的主旋律。我们可以用维基百科看一看当前对三个重要技术概念的理解。一个是曾经人们跟云计算混淆不清的网格计算，一个是正在发展的大数据，我们来看一看用维基百科访问网格计算词条，云计算这个词条和大数据这个词条，看看全世界是怎么关注的。网格计算2008年4月出现的全人类关注高峰达到69573次。云计算在2011年12月达到了最高的点击率751383次。大数据在浏览次数上已经体现不出来了，因为它刚刚兴起，因此我们必须改变纵坐标的测度。大数据正在发展，在2012年3月达到58888次，这就是说全世界对这三个重要概念的关注点，也就是我们的群体行为。这个群体行为如果我们用一个著名的咨询公司Gartner在2011年的一个曲线印证的话，他把有些技术叫做成熟技术，有些技术期待着成熟技术，被认为是2—5年就可以采用的技术。而大数据正处于上升期，云计算正处于兴旺期，网格计算没有再出现。这项技术从兴起到兴旺到走向成熟，都可以用客观规律来表示，从这个观点也支撑了我的这个标题，就是从兴起到兴旺。 中国电子学会云计算专家委员会主任委员、中国工程院院士 李德毅 为什么要提到大数据呢？我们看一看世界人类对物质和能量的认识所形成的数据量的变化。在1993年的时候，大量的信息是以虚拟状态存在的，也就是说人类的信息大量还是模拟化还没有数字化。到2000年，数字化成分逐渐增加。到2007年，人类的信息量几乎90%以上都实行了数字化。在这个情况之下，出现了大数据。大数据英文Big Data，这个层面告诉我们一个认识，他讲是PB时代的数据、PB时代的科学，因此我们有必要理解大数据跟云计算的关系。我们大家都比较熟悉的是数据库或者数据仓库技术，我们曾经用了很长很长时间的数据库、数据仓库在大数据面前遇到什么挑战呢？我们可以看一看。首先，我们从数据量来看，一般来说，数据库或者数据仓库都在GB这个量级，或者到TB量级，而大数据是在TB或者PB量级，这是数据量的不同。严格的讲，这个量还不是决定问题的根本。更重要的是，当我们把所有的信息放到数据仓库的时候，数据要求是比较高的质量、比较干净的数据。而我们实际生活中遇到的数据，多数都是有噪声的浑沌的状态，放在数据库中难以成熟。 在数据库和数据仓库当中，我们的数据模型有一个很强的结构，有一个关于数据带数的支撑，而大数据常常是非结构的，大数据中人们常常关注的是视频、声音、图片数据，而不是纯数据。如果我们把数据放进数据库里面的话，我们需要一个数据池，因此我们在研究数据管理的时候，需要顶层设计。而现在我们不可能挖一个池把数据装进去，我们面临的是一个海量数据，我们面临的是要在海里捞鱼。在数据库技术中，我们面临的是一个交易的操作，如果是一个TB数据量的话，做一个交易大概要50个小时才能完成，这种技术比较重交易。而大数据时代，我们更关心的是人与数据的交互。对于数据库而言，我们经常希望得到一个千人一面的、比较理想的确定点，而对于大数据来说，我们常常需要一个不确定的点，一个满意的点，这是给传统的数据库技术提出的挑战。 在这样的情况之下，运营商们聚焦云计算，开始注重数据中心的大数据处理问题，无论是邮件服务中心、客户关系管理中心、计算能力多租赁中心、搜索服务中心、数据管理中心、流媒体服务中心、位置服务中心，都必须认真考虑在特定服务环境下的大数据处理问题。 “我们”比“我”更聪明 在云计算时代，对我们软件开发的方式也提出了新的挑战，我们曾经知道，一个大型的软件公司例如微软，在互联网尤其是社交网络的环境下，人们已经用一个社区、社团来开发。例如说Top Cooed就是这样一个社区，这个社区的骨干成员可以达到40万，即使像微软这样的公司，程序员达到万人以上已经很难以维持，一个40万人的软件开发社团告诉我们，这样的社团将是一个社区，而不是一个公司。今后的软件开发，除了公司之外，还有一个小众，但是在这个小众里面可以有几十万的开发者。Top Cooed在全世界软件开发社区里做三方面的工作。第一，把软件碎片化，进行软件的编码比赛，互评代码、系统评测，这占了Top Cooed社区三分之一的工作量。如果生活中有许多程序需要开发的话，我们可以把这个开发任务以外包的形式推到社会上，让社会上的人进行竞标提交成果，在完成兼职开发过程中，我们的软件开发者们，就拿到了相应的报酬，有很多软件开发工程师以后将不在公司工作，而是在社区兼职工作。我在浙江大学就认识这样一个学生，他做Top Cooed的软件兼职开发员，不但养活了自己，而且还养活了他的父母。这种开发社区，还为各个公司寻找人才，成为一个很重要的人才源。猎头们在这样一个社区里面，展示各个企业的状况，进行员工的招聘。所以说，云计算使得软件作为平台的开发更加的群体化、社会化，形成新的开发机构。 众包概念，在互联网上诞生以后已经渗入社会的各个方面，使得人人都可以是软件开发者、编辑者、创作者、记者。因此，云计算告诉我们一个真理，在云计算形成各式各样的社团、小众或者由小众组成的大众，他们之间的深度合作使我们得到一个真理，就是“我们”比“我”更聪明。云计算在中国，已经走过了理念清醒、操作模糊、八仙过海、云里雾里的一段路程。但是，现在已经取得了越来越多的共识，被国家列入战略性新兴产业，走上了云计算的应用之路。所以，我们第四届中国云计算大会就是以示范引领创新实践作为一个口号。 人们的共识是什么呢？信息技术和信息服务可以实现社会化、集约化和专业化，网络变得丰富、边缘变得简单，终端产品丰富多样，交互更加智能。今后，将不再需要各部门建自己专门的信息系统，让信息服务成为全社会的公共基础设施。在这一点上，已经没有什么不同的声音了。 云计算让我们新兴产业链发生了很大的变化，那种曾经以产品为中心的产业链分工转变为以服务为中心的利益攸关方的相互渗透，他们之间相互渗透、频繁交互，协商共赢，华为公开提出来“乐于被集成”，他们是符合趋势的。 云计算将曾经相隔的微电子、计算机、通信、软件、家电等产品融合为三大板块。早期的时候，这些版块相互还有距离，但是随着云计算形成的各种各样的数据中心、计算中心、服务中心，以及各种各样的异构、交叉、层叠的网络和丰富多样的设备让这些结构走到了一起。曾经计算机搞计算机产品，通信搞电话、搞交换，然后慢慢的计算机搞个人电脑、通信产业搞手机，使得笔记间的间隙越来越小，现在人们发现个性化、智能化、轻便化的端设备成为大众的技术，因此就导致了今天的三大板块，第一个版块就是端设备，涌现出非常非常多的端设备，国内的云电视就提出把操作系统、WiFi放到电视里。第二部分是网络和网络运营商，第三是数据中心、计算中心和服务中心，云计算导致了我们产业链的重新格局。就是说云计算已经成为ICT行业的主旋律，不再动摇、不再怀疑。 安全不再是云计算的拦路虎 从互联网诞生开始，安全问题就没有消除过。以前敏感的数据大量分散、重复、位于网络边缘，难以管理，造成了泄露的风险。通过服务的规模化、集约化和专业化，数据和信息高度集中存放于数据中心，改变了端设备上安全难以管控的格局。 安全本身作为一种服务，提供给所有的端设备客户，改变了人人打补丁、个个杀病毒的状况。安全的重心由端设备安全向数据中心、计算中心、服务中心的安全转移，安全的手段由封堵和隔离向身份认证和信息管理转移。 人们普遍关心的云安全问题更多的是个人隐私的安全，实际上是服务方与被服务方之间的信任与信任管理的问题。特别要指出的是，大众参与所形成的由下而上的民主力量是建立服务信誉的最基本、最重要的保证。 移动互联网云计算来的更快 移动互联网已经成为一个能够分享信息、沟通文化，乃至形成群体智能的开放的社交网络。人与人之间的关联、人心的关联、社群的力量是伟大的创造的力量，支撑这一力量的云计算可以实现分享、交互、涌现出群体智能，超出了图灵机范畴，今年是图灵先生一百周年纪念，我们在中国进行了图灵年活动，来回顾图灵的历史贡献，研究云计算的科学模型。如果说在计算机时代，图灵机给了一个形而上的理论的话，那今天他的形而上的科学模型是什么呢？如果说数据库和关系数据库给了我们一个数据池的实践的话，大数据的处理的形而上的问题是什么呢？这就是我们关心的问题。移动互联网的实时性、交互性、低成本、个性化和位置感知能力，形成了迅速增长的移动用户的服务。 汽车等移动设备装载各种各样地理信息导航系统并定期更新地理软件的时代将要成为历史，这些地理信息系统将来可以通过服务实现实时的导航。一个个曾经孤立的地理信息烟囱踏上了飞天之路，在动荡演化中聚合为跨部门、跨领域、跨系统的位置服务中心，实现了社会化、专业化和集约化的位置服务。 位置服务渴望成为移动互联网的标配，现在我们手机上一个照相机、一个GPS已经成为标配。如果用云计算的观念来看，在云中心有数据中心和各种各样的电子地图，有各种各样的电子导航服务中心，还有以位置服务为基础的衍生服务，例如旅游服务、交友服务等等。一个用户拿着手机，拿着iPad就可以进行位置的查询，或者用照相机照一下天安门、纪念碑，就可以听到对纪念碑的描述，从而形成云旅游、云导航。如果我们的汽车、飞机都联网的话，那么汽车、飞机任何时候的实时状态就可以大致的在地面上得到很好的观察和控制。 位置服务中心是人们感兴趣的一个实践应用的方向，我们觉得无论哪一个数据中心，包括位置服务中心不再拼服务器集群的规模，不是说五万台服务器的集装箱就伟大，五千台服务器就不伟大，也不是把一百万台数据地图服务器集中起来就叫做云计算。位置服务中心的架构是要提供服务的种类、规模和能力表征的。我们提出了对位置服务中心衡量指标的五个外在指标： 电力消耗及其弹性使用情况 带宽支持及其动态使用情况 位置服务覆盖的范围和粒度 服务注册的用户数量及在线微支付能力 位置衍生服务能力 我今天从家里到国家会议中心走哪条路比较好？你给我答复，我给你一毛钱，这就叫微支付。位置服务中心需要在实践上连续一年365天每天24小时要有99.99%的可靠性，城乡之间要跨接、数据常新，要保持实时更新状态，精确要多样化，要以快速的报知和错误示警功能。国内有这样的云计算服务中心吗？我国目前只能满足简单的地理要素查询，数据不健全、分享难，在云计算大潮下，这些小而散的地理信息产品，通过动荡、分化和改组将会演化成联邦式的地理信息服务中心，提供集中的面向交通、娱乐、教育、医疗等各个不同领域、不同粒度的位置服务，成为社会化、集约化和专业化的社会基础设施。我们每一个个体最基本的问题是你在哪里？你到哪里去？如果这个问题能够实现社会服务的话，将会改变整个人类的生存状态。 那是不是每个省、每个市都要建设这样的地理位置服务中心呢？我的答案是不必要的，云计算不要求各省市地区都设立地理位置服务中心，要根据地貌特征、地缘情况恰当的规划全国地理数据中心的基本布局，可以在电力相对丰富、低地价的地区建立7、8个国家地理信息数据中心，而绝对不是一省一个、一市一个。我们可以利用宽带通信网络向华东、华南传输数据，以电力网输送电力改为以电信网输送数据，用带宽换土地、换能源。 20世纪过去了，美国在回忆20世纪的时候，提出了两个人类最伟大的发明。第一个是互联网，以及互联网今天的发展。第二个是空间导航卫星。云计算正在把第一个发明和第二个发明合在一起，我国的北斗卫星导航系统已经有13颗在轨卫星，定位导航和数字服务性能不断提高，走上了突出区域、面向世界、富有特色的发展道路，呈现全面推广与产业化的趋势。 云计算催生地理信息实时性和个性化的互联网服务，成为拉动国内经济的新增长点，有望到2020年形成万亿元规模的年产值，位置服务的自主创新，将成就我们的飞天之梦。我们可以想一想，未来的汽车怎么样改变我们的生活。如果我们把智能驾驶看作是网络导航加上自主驾驶加上人工干预的话，Google自动驾驶汽车已经在马路上运行了，已经拿到了驾照，如果人工干预优先权高过自主驾驶，在正常情况下，只要有地理位置导航系统，就可以确保一个车子在特定的线上做自主驾驶。经信委组织的一个重大计划，有6个车队分别从北京跑到了天津，从长沙跑到了武汉。现在的问题是，迫切的呼唤云计算对这样的自主驾驶实行云导航，需要位置服务中心的建立。 宽带不宽 我国光纤入户难，桌面互联网平均网速是1.4mbps，远低于世界平均水平，排第90名，手机网民们把它叫“龟速”。市场被垄断，监管很无力。骨干网、接入网、网站和服务中心的布局、安全检查等因素造成了多方面的制约，从接入网到老百姓自己家里的台面，我们把它叫做“最后一公里”，还有人说接入网和骨干网之间不匹配，又是一公里，还有网站的安全检查又是一公里，因此，我们期盼着宽带中国，我们期盼着国家的20兆在城市，4兆在农村，我们期盼着WiFi放开。世界上的科学家已经创造了186Gbps的超高速网，我们的移动通信获得2011年国家发明一等奖，宽带不宽总体来看不是技术问题。 云计算代表了先进生产力的发展方向，是构建互联网的基础，具有可持续发展的能力，成为国家战略性新兴产业，这一点已经形成了共识。发改委、工信部政策发布的多个“十二五”规划都强调了云计算，明确提出了云计算创新发展工程。2011年底，政府拨款15亿元作为云计算发展基金支持互联网企业，我们认为政府和市场是云计算发展中的两只手，要相互作用，但是政府最好不要替代市场。政府的作用主要是引导，是服务，引导主要体现在导向、规划、标准、调节和激励这十个字上。服务主要体现在管理、环境、政策这六个字上。 我们觉得政府要加强云计算中的安全和信任要靠技术，但是三分技术、七分管理，更要靠监管。我们国家有一个重要的《国家科技进步法》，2007年进行了修改，其中很多政策是对先进科技的支持，现在有人说要再制定云计算的国家法律，我个人认为应该制定《国家科技进步法》的配套政策支持云计算，例如微支付、频繁支付和后支付这些财政政策以及税收政策。昨天，《云计算与智慧城市发展论坛》讨论过程当中，新加坡提出了支持企业利用带宽实行云计算、减少税收，我们可以借鉴。 强调创新实践、强调特色服务、强调本土化服务，实现自主可控。要创建好云计算的生态环境，吸引人才和资金。要规划国家基础信息资源的战略布局，防止各省各市一哄而上无特色。政府要为云计算实现的社会民生服务买单，而不是为购买云计算数据中心的设备买单。云计算的行业性示范试点固然重要，但是互联网本身是不太强调地域性的，因此，比地域性示范试点更为重要的，应该是行业示范。我建议，在五个城市试点的基础上，再部署五个行业示范试点，例如位置云、教育云、健康云、公共安全云、社保云。这五个行业反映我们民生最关心的东西，而且都可以找到牵头单位，而且都是跨行业、跨部门的，如果把这五个行业试点搞起来的话，中国的云计算在五个城市试点基础之上会互相促进，相得益彰。 建议工信部牵头解决宽带瓶颈问题，工信部要树立“先有路，后有车”，不能借口没有车不修路，不能借口其他环节导致的瓶颈。对于我们移动通信而言，我们要尽快研究不同体制下的移动通信带宽共享问题，老百姓的手机无论是G网、W网、还是C网，都要能接入。另外，宽带不宽失信，运营商要赔偿，政府要监督。试点城市应该率先实现光纤到户，普及“光猫”，建立公平竞争的市场环境。试点城市要率先实现三网融合。 建议云计算五个试点城市的宽带战略目标定为100兆，重点城域1Gbps，全城WiFi覆盖。重点地区，像天安门、国家会议中心这里面的楼群应该是1G，全部用WiFi，要让试点城市市民如同享受北京公交一样享受宽带，试点城市确保每户1TB免费存储。作为一个家庭，1TB怎么用，要给出榜样和示范，家庭是城市的细胞，是个人生存的最小空间，只有智慧家庭，才有智慧城市。（演讲人/李德毅  整理/包研）","title":"超越“虚拟的美丽”——云计算实践再分析"},{"content":"中国的云计算蓬勃发展，典范包括：基础架构的云、地区政府的云、软件应用的云、国有企业的云、个人存储云、电子商务的云、手机移动的云、家庭娱乐的云。下面一一道来： 　　基础架构之云：华为“云帆计划” 　　华为作为电信设备提供商，很容易在把云技术推送到电信企业中，华为一如既往走着设备供应商的路线，未来可能向电信和其他大型国有企业出售“云计算能力”和“云存储能力”。而这种云计算能力的提供正符合国家降低能耗、提供能源利用、发展信息技术的政策导向。 　　华为已经将云计算提升到公司战略高度，云计算投入达到6000人，占到华为研发人员的10%。华为的桌面云已经成功落地服务，节省企业40%投资，降低电力消耗71%，设备CPU利用率也从5%提升到了60%。 　　华为也成为了国内屈指可数的云计算解决方案供应商，华为依靠其庞大的基础设备供应能力与IBM合作，成功为政府和企业架设云基础架构，提供云存储服务，搭建云平台，媒体云应用等系列云服务。 　　看华为在国内扮演的角色相当于IBM在全球扮演的角色，大部分云计算服务是奔着分布式计算系统、开放存储、数据库、海量数据分析等全套云计算核心技术而去，而在搭建云平台和云应用的领域则交由其他云服务商完成。 　　而被大家津津乐道的公有云和私有云体系中，华为都有涉及，公有云体系属于电信运营商级别的服务，而私有云体系主要为企业服务，并且华为已经投入5.3亿打造企业级市场业务，展示了华为在云计算的巨大转型。 　　这里提一句：IBM第一个的云计算案例是上海电信，这好像触动了华为的神经。IBM的 Power Cloud是基础设施服务的一个资源共享的服务平台，结合Power VM虚拟化、Systems Director、VMcontrol、Cloud Starter软件实现了智能的服务交付模式，可以提供计费功能、服务质量管理、用户自服务等等。Power Cloud整合了IBM的一切资源，而且突出灵活性和可靠性，Power强大的性能可以满足大型企业的需求。 　　在最近，华为公司向巴西科技部捐赠两套云计算设备，希望服务于高等院校的远程教学和科研机构交流信息。由此看来华为也有着跻身国际云企业的野心和决心。 　　地方政府之“风云在线”和“房地产云” 　　“风云在线”是国内成立非常早的云计算企业，早在2006年和微软合作，希望通过SaaS的模式提供给中国的中小企业信息化产品。地区政府为云服务提供政策的支持，目前提供的软件应用包括微软的在线CRM、XTools的在线CRM、Seegle的视频会议系统、imobii的移动外勤系统、泛微的OA系统等，提供优质的和廉价的稳定的在线信息化产品，目前已经有超过两万的企业应用它们的云。 　　提供云的平台，让更多软件企业把应用植入，并提供包括带宽访问、软件应用、安全保障等一系列服务，看起来是一件非常有意义的事情，但是并不是所有企业都能了解到其中的好处，中小企业的管理者并没有完全意识到“云”手段可以解决很多管理问题，仍然停留在传统的软件包的方式。这让我们看到了中小企业管理意识和习惯需要引导。 　　作为中国在线软件租赁(SaaS)领域的开拓者，其公司的宗旨是：以推动中国云计算行业发展为职责，帮助区域政府及企业引入先进的信息化管理模式，全力为不同层次的客户提供低成本、高收益的信息化产品和服务。在这五年的时间里，政府的支持起着关键作用。 　　随着云计算在国内升温，不少地方政府利用“云计算”的高科技理念，地方政府的冲动尤其是投资冲动是近一段时间来最为突出的现象。与不断颁布的区域发展规划相伴的是地方投资热情的高涨，例如湖北、重庆、辽宁、吉林、太原等地公布的巨额投资规模。虽然可以认为这些巨额投资计划是希望赶在地方投融资平台关闭之前的“闯关”行为，但也可以说明目前的信贷控制未能有效地抑制固定资产投资的热情。 　　一时间，抑制地方政府的“云冲动”，成为腾讯网等媒体报道的热点，不少地方政府利用云计算契机，发展房地产，亦成为特色。 　　软件应用之XTools企业维生素 　　国内的云计算服务商较为复杂，有的做架构、有的做平台、有的做应用、还有的全都做或者做某两种，但不论做什么最后还是得让云落地，让云计算变成应用。云计算目前还是投入阶段，如何让云计算带来真正的盈利还是需要靠应用来实现。 　　企业级的云应用还在发展阶段，相比于种类繁多的个人应用，2011年成熟的供企业应用的服务没有想象中的多——云存储服务、邮件系统、视频会议、CRM、云安全系统、移动位置服务等。 　　XTools作为国内领先的云服务供应商，专注于CRM云落地，并将之成功实现。XTools在全国部署服务器，构成了云基础架构，方便用户们就近选取快速的数据读取云通道，并且也在云安全上保证了互相的容灾备份，使CRM数据更加安全。 　　XTools的云是解决企业销售管理，客户管理的问题，这些事务每天都在困扰中小企业，看来这样切入云的应用是再好不过的了，因为大家都有这种需求。他的云平台似乎比美国的Salesforce云更加实用和简单，用户无需复杂的设置就可以开始利用网上的这套系统管理其公司的业务。 　　XTools开发CRM云应用，并将之做成一个基础云平台，可以接入其他云应用，也使自身融入别的云平台，实现了“融合云”的目标。目前XTools的CRM云平台服务于50多个行业的近万企业用户，而这些企业又服务于近60万的各级消费者。 　　作为典型的云应用代表，XTools对于在云计算中所有的云服务提供商们建议了一个云服务的标准，由于云计算开放多元的特点，所以在构建云计算基准类型的时候很难有标准，但是作为提供企业级服务的云应用来说制定标准相对可行。XTools提出了移动云、易用云、点对点云以及安全云服务。 　　基于移动智能终端以及移动网络的惊人发展速度，XTools将视角转向移动云服务，即云存储、OA之后又一个企业级的云服务，并且已经在Android和iOS上成功应用，作为一个企业级的App，XTools将之视为进入移动云的钥匙。 　　笔者认为，XTools通过七年的时间，在向世人表示，其公司是一个拥有执着意志的公司，目前也积累了上万用户，他们了解，云需要通过手机移动落地，这将加强云的普及的深度和广度，也揭示了其的韧性。XTools引起了央视走近科学的关注，特别制作了一期名为“云”来了的专题报道，通过XTools提供的云服务来向大家诠释云计算到底是如何改变我们的日常生活。 　　这里需要提到美国的Salesforce，其公司已经成为世界的云典范，国内的模仿者趋之若鹜，但是一种复杂的、定制化的云好像在中国推广极具难度，比不上XTools的简单易用受欢迎。 　　国有企业之云计算 　　相比于其他的IT企业，中国移动作为全球第一大网络运营商，曾一度雄霸国内2G市场多年，近年来特别是2008年以后的云计算以及联通的3G网络给移动带来巨大压力，移动云的迅速升腾让这个国字号企业面临必须迎合潮流的环境。 　　中国移动在移动云方面做出了突出贡献，先后推出的OPhone手机平台和Mobile Market应用程序商场，可以看出中国移动是想在移动云中建立一个移动云平台，在平台上提供商用云服务，“大云”计划就是建立在此基础之上。 　　中国移动预计投入120亿元在2012年建立数据中心，吸收云计算人才，在电信运营商移动云领域展开全面战争，移动推出的Hadoop分布式文件系统(HDFS)是一种可以运行在各种通用硬件上的分布式文件系统。HDFS拥有高度的容错性，同时能满足高吞吐量的数据访问，可以在廉价的机器上运行，非常适合在大规模数据集上的云计算应用。 　　令人产生无限遐想的移动TD-LTE系统的平均下载速度达到60Mbps，这个速度是目前主流3G网络平均下载速度的20-30倍，由此一鸣惊人，被誉为是最近接4G的标准。这也是基于Hadoop版本上的突出成果。 　　基于移动云，中国移动不再做单一的网络运营商，而是希望为个人和企业提供云平台和云应用的综合企业，也希望通过云计算来提供办公自动化的解决方案。在中国智能终端覆盖过亿的用户身上，移动看到了新的市场前景，也看到了移动办公的希望。 　　电信企业一直有着资金和用户的优势，但是电信企业在中小企业信息化市场开拓仍然步履艰难，似乎电信企业推出的企业服务尤其是中小企业云解决方案没有得到广泛认可，而新的移动云似乎成为电信企业除了通讯之外获得成功的唯一出路。 　　虽然电信企业没什么好的应用卖给中小企业用户，但是移动带宽的飞速发展已经推动整个社会对移动云的巨大需求。 　　电子商务企业之“阿里云” 　　阿里软件这个名头在IT界可谓声名显赫，是中国最大电子商务网站阿里巴巴集团继成立“阿里巴巴”“淘宝”“支付宝”“雅虎”后，于2007年1月8日成立的第5家子公司，这个公司不是专精于电商，而是为企业提供online软件服务。 　　在一片参差不齐的喧嚣声中，阿里巴巴率先宣布了自己的云规划战略，阿里云来势汹汹，2011年对外宣称投资1亿来打造电子商务云平台，特别针对于中国的各类电商服务，阿里云有着Google和IBM等不具有的优势。 　　由于云计算在国外相对基础点较高，国内对云计算的认识是被浓缩过的理念，因此普及的过程似乎水到渠成，并且似乎2006到2008之间的两年的间隔没有造成国内外云计算认知的偏差，在移动云上国内外有着一致的认同。 　　阿里巴巴也是第一个推出阿里云手机作为移动云服务的企业，虽然阿里云手机存在很多争议，比如山寨之类的东西，但确实是国内第一款实现了能够直接享用100GB云空间里的所有应用，无需下载，还可以使用由阿里云提供的各种云服务，比如地图、电子邮件等。 　　与苹果的iCloud系统相对应的iOS一样，阿里云手机称这个系统是阿里OS，不过经过2011年市场的洗礼，貌似阿里云手机境况惨淡，虽然能提供货真价实的云服务，但是其定价过高以及不开放的阿里OS系统并没有为阿里巴巴冲击移动云带来很好的效果。 　　在笔者看来，阿里云手机最主要的目的是：巩固其在电子商务的地位，也需要在手机移动端培养用户使用Taobao之习惯，在这基础上发展其他应用。我们可以看到，阿里巴巴的所有扩展业务，核心都是围绕其电子商务服务的，包括alimama、支付宝等等，阿里云的建立能够为其电子商务运营打造一个更稳定、更绿色的环境，在此基础之外，提供公共云服务。但是这个云手机过于强调的阿里产品黏着度让很多用户产生抵触情绪，并且这些应用不能靠刷机来彻底删除，也造成了阿里云手机折戟的最大原因。 　　电子商务企业做云计算是否是更专业社会化分工的体现值得商榷，但那个叫做“阿里软件”的公司走过曲折之路，“阿里云”是否重蹈覆辙？ 　　个人存储云之“金山快盘” 　　简单的来说，个人云存储中心主要定位是用来存储个人文件的，我们可以明显地看到，现在用户在快盘上放的还是一些私有文件。而这些私有文件是不希望更多人看到的重要文件。 　　对于国内厂商来说，金山快盘是第一款明确提出定位于用户个人云存储中心的产品，这也符合现在每个人对自己文件的私密性要求越来越高的趋势，个人云储存宣扬的是：互联网时代的用户对自己的隐私的态度那可是“不能受一点侵犯”，哪怕你提供的是免费服务。 　　同时国外的一家厂商引发了我们的思考：作为一个云存储平台，美国的dropbox能够很方便的保证用户在多台设备终端同步数据，这个和国内主流网盘是一致的。虽然Dropbox从未明确提出自己是做个人云存储中心，但是我们仔细研究不难发现，dropbox从来不宣传它的外链功能，而是把重点放在了用户个人存储数据上。 　　美国的Evernote也获得了巨大的成功，每个人都可以存储自己的Note(笔记)在云端，在任何的终端可以进行编辑和读取。 　　但是个人云存储是一个烧钱的买卖，要想让个人掏钱，还需要一些时日，因为在中国都吃惯了互联网免费的午餐。更重要的是：国外的个人云存储领先我们很多，用户在收费与免费、民族品牌和国外品牌犹豫选择的时候，先入为主比什么都重要。 　　金山在对外宣传似乎喜欢比较Dropbox，但我个人认为，提供差异化服务将会让国有品牌在客户中口碑传播，提供增值服务，尤其是中文化的特色服务将是我们阻击国外品牌的唯一优势。 　　手机移动之云计算 　　很短的时间里，似乎很多企业都提供服务在把手机端的数据放在云端，这样你不会担心你的通讯录(联系人)丢失，你的个人信息也可以从手机端中随时查询和获取。这给所有的手机用户带来了便利。在“有道词典”中你甚至可以把“生词”同步到云端，在另外的设备中读取使用。 　　笔者认为：在未来手机移动云市场上，唯有腾讯将成为龙头老大。手机QQ、QQ通讯录、微信、QQ手机管家、QQ音乐、QQ视频、QQ地图、腾讯微薄App、腾讯视频通话App、腾讯新闻App、腾讯电影票预订App、腾讯空间App、腾讯浏览器App等等层出不穷。腾讯手机QQ是唯一一款没有靠竞价排名就稳定在各种AppStore中前十的软件，排名一般在6、7位，不论苹果或者Android系统中都是这一结果。 　　QQ到底在谋划什么？ 　　8月23日上午，2011中国互联网大会在北京召开，马化腾、李开复、丁磊、曹国伟亮相“十年领袖对话”开放式论坛，与主持人王利芬(微博)现场互动。 　　对于互联网十年，马化腾认为过去的十年是“一个变化和发展最快的十年”，“最关键的一个字，就是‘变’，而且这个变化永远是我们计划追不上的。”而丁磊认为这十年“感觉最深刻的是一切皆有可能”，李开复认为“过去十年让我们学到最多的就是在正确的时候做正确的事情”，曹国伟称做互联网“时机非常重要”。从这可以看到，马化腾更能敏锐捕捉到商机，因为他看到了这些变化，并且追上了它。 　　马化腾表示，腾讯“不会直接做手机，但是我们会提供手机上的服务，所以我们跟各个手机制造商都是一个合作关系，这个不会变。” 　　时代真的变了，互联网的龙头老大马上就“闪变”成为移动终端应用的老大。腾讯实现超车？不，是加塞，加塞更加体现腾讯通过速度优势，堵在所有竞争者前面。而新浪、网易、百度似乎都没有腾讯的速度快，现成的新浪微博市场也在一点点遭到腾讯微博的侵蚀。 　　移动云应用市场广泛，桌面有多少应用，那移动端就将有多少应用，你可以收藏你喜欢的歌曲在云端，你可以存储你的日程在云端，你可以存储你的照片在云端，手机端就是一个数据读取和采集的工具，你没有意识到吗？ 　　家庭娱乐云之“创维云电视” 　　创维云电视可以实现云空间、云服务、云浏览、云搜索等个性化应用，利用云计算技术，通过网络为用户提供诸多应用所需资源。实现三屏互动。你玩游戏，听歌、上网都能满足。未来的电视，就是家庭娱乐云的窗口，也许遥控器将成为电脑时代的三寸软盘，语音输入的日趋成熟，将替代遥控器成为数据输入唯一方式。 　　云电视的崛起应该感谢Andriod系统，这让厂商能够在此基础上开发不亚于PC上的各种应用，但云电视最可能崛起的是这个功能：视频通讯。 　　云电视作为彩电业的革命性产品，它的出现让消费者对云设备又产生了新的期望，特别是视频通讯功能这一云应用有希望将家庭、朋友重新聚合在一起。在某次调查中，从受访者“最喜欢的云电视功能和应用”、“最优先使用的云电视功能和应用”、“必备的云电视功能和应用”三个命题的调研数据显示，“利用云电视进行视频通讯”综合占比达28.9% ，视频通讯也成为了最受消费者关注和欢迎的云电视应用。 　　但是，目前的视频通讯技术还没有被电视机厂商所掌握，太多的互联网技术需要电视厂商消化和学习。笔者觉得，腾讯应该和电视机厂商联合，推出视频通讯的应用功能，“不就是QQ视频嘛!？”。 　　结束语： 　　总体而言，国内的云计算与国外云计算的差异比较明显，国外的云计算由于社会信用相对完备，推行起来顺风顺水，而在国内则比较曲折。有人说：云计算传入国内时间较晚但是起点很高，中国的云计算赶不上国外。也有人说说：云计算仅是老酒换新瓶，不是什么新鲜东西。但是不得不承认：“云计算”引发的社会变革，这种变革促使各行各业更加有效率，云计算正在改变世界。","title":"2011年中国云计算 八大典范"},{"content":"存储在计算机系统中非常重要，前面的博文中的存储主要是基于已有的数据库系统，这一篇，我们就来看看不采用数据库系统，怎么来做云存储。在云存储中，我们不考虑单台存储设备的支持，因为这已经是现成的，我们将讨论的云存储将基于已有的操作系统和文件系统，从头开始不太可能也不太现实，我们只需要关注我们现在应该关心的一些地方。云存储要达到的一个根本目标就是随需应变，对于用户来讲，其实就是要求空间是无限大的，数据是非常安全可靠的，而用起来是非常简单的。当然性能和低廉的成本也是必须考虑的。        要降低成本，购买昂贵的存储设备当然就不是首选了，现在一般的PC机价格低廉，我们完全可以利用这个优势。因此我们就可以用PC机或者廉价的存储设备做存储节点。怎么去实现呢？我们知道，单台设备的能力的提高总是有限的，因此利用很多廉价的设备组成一个大的存储系统就不失为一种好的选择。        首先，我们要保证一定的存储能力，假设单台计算机的存储空间是1T,那么我用m台计算机组成集群，存储能力就可以达到mT，因为扩展都是以节点为单位的，是通过软件来管理的，因此这种方式要扩展存储能力是非常灵活和方便的。         其次，要保证可靠性。其实保证可靠性除了提高单台计算机的存储可靠性之外，就是进行数据冗余存储，一份数据在多个地方进行备份，这种备份方式也不用非常多，对于一般应用来说3份就足够了。如果存3份，那么m台存储设备的实际存储能力就成了(m/3)T,但这个不是问题，要可靠也要付出代价的。这三份怎么放可靠性比较好呢？当然不能都放在一台机器上，应该是3份在存储位置上，物理的距离越远越好。但事情总是有利有弊，因为备份之间是要维持一致性的，相距越远，这种一致性维护成本就越大（通信和带宽）。雅虎的那种几大洲分布式数据中心方式，对于一般云存储厂商来说还是比较贵，如果是私有云，一般企业也没有这个能力做到这种。为了便于实现，其实m台存储设备可以分为3组，组之间保持一定的距离，这样既提高了存储的可靠性，还便于云存储管理软件的设计。3个组虽然不需要严格的对应，但所能提供的存储空间还是需要大致相同。        第三，为了提高数据的可靠性，我们可以采用上述的冗余存储的方式，但具体如何存储呢？我们提供给客户的存储，也是以文件的形式存在。如果采用以文件为基本单位来存储数据，冗余在3台物理的存储设备上，简单是简单，但会有一个问题，假设文件在A1,B1,C1三台机器上已经存在，现在附加数据超过了三台设备中某些台的空间，问题就来了，需要重新找能够存放这个文件的设备，在某些情况下如果非常大的话，还不一定能找到，而且也会带来存储设备的利用率也会降低。处理的办法其实也很简单，就是学习操作系统存放文件的方式，以文件块为基本单位来存放。每个文件维持一个文件块列表，只要文件块保持3份，每份都放在不同的组，至于组内是否在同一台机器，就不要求了。因为文件块得大小是可以设置的，一般都比文件小很多，所以不会带来上述空间利用率不够或者是文件太大无法找到可用的存储位置的问题。文件块得大小可以根据自己的应用确定，一般以存图片或者小视频的网站，选用2M或者4M都可以，目的就是让大多数的文件的文件块都比较少。Google的GFS采用的64M，适合于大文件处理。一般来讲，如果文件块太小，文件的文件块就多，不利于索引，但如果文件块太大，而文件访问都是基于文件块的，并非每次访问都需要全部读过来，因此就会造成读写浪费。大家注意，这些文件块在单台计算机上是以文件的形式存在的。        第四，文件的访问需要比较方便，操作要比较容易，如果文件在这种分布式存储体系中的信息需要用户自行维护，那肯定是不现实的。因此需要一台专门的服务器Master来维护文件的存放信息和控制信息（权限等）。这台服务器（可采用传统的磁盘阵列之类的手段来提高可靠性）维护用户文件到文件块映射关系。现在有两种方式来处理用户的读写，一种是用户发出读写命令（假设以文件名，文件块集合为参数），由服务器来完成实际读写，把结果反馈给用户，这种方式大家一看就知道有个非常大的局限，服务器的压力太大，因为文件的读写数据流都是比较大的。但这种方式也有好处，就是接口单一，用户透明，用户程序可以比较简单。另外一种方式就是，用户向服务器只是发送读写请求，服务器返回文件的位置信息，有用户本身直接与存储设备通信完成实际文件块得读写，这样，Master服务器的压力就小很多。这其实就是GFS所采用的方式（里面叫数据流和控制流分离）。但这种方式有个缺点，就是用户程序需要直接参与到存储服务中，易用性和透明性都比较差。当然，在GFS中这是数据存储与应用Api协调设计的理念体现。         到这里，一个云存储的底层架构就出来了：将低廉的计算机（每台kT空间）作为存储节点，存储节点n台，分为3组（每组存储能力大致相同），一台主服务器负责管理这些节点，服务器存放着用户文件的文件块映射和访问权限控制等信息，文件块在每个节点计算机里以一个文件的形式存在，每个文件块给个唯一编号，每块在每组中各存一份，如果某个节点坏了，可以从其它组复制一份到没坏的节点上存放，保证安全。这样就形成了n+1台机器所构成的存储。大家注意，这种方案中三份数据之间其实是相互备份，地位相同，这跟传统的备份不一样，传统的备份仅仅是备份，除非主本坏掉，用来恢复，一般是不会参与应用的。因此上述这种方式在性能上会好很多，特别是读方面，同一份数据有3台计算机可以提供服务。         要实现上述系统，从原理上来讲非常简单，用到的算法或者技术：B+树（文件索引），网络文件传输，RPC等，都不是很难的，这也是很多个人就可以搞成这样的系统的原因。当然，真正去做的时候，还是要点功夫的，特别是细节上的处理。         总的来讲，在云存储时代，大而全的存储解决方案已经不再是首选策略，特别是在非结构化或者简单结构化数据应用方面，有针对性的存储解决方案会越来越多。另外上述的存储架构相对比较底层，Google的BigTable,微软的Azure里的大数据表(Table)也差不多基于上述原理来进行。 PS：提高数据的可靠性，最简单饿方法就是冗余存储；上述方式的冗余存储还可以增加读性能（读吞吐量）；提高数据性能的另一种方法就是切割数据，用分布式计算来加快数据处理（这种方式不会增加可靠性），GreenPlum云数据库就是利用这种思想。我觉得大部分的应用（特别是企业应用）还是会基于数据库系统来完成，这样使用简单，延续性强，至于数据库系统本身的存储发展，是不是真正的云无关紧要，但至少会号称云。 虽然这种思想和相关的技术早已存在，云计算也更多的是一种商业应用上的概念，但无论如何，这种可以节省成本，提高资源利用的计算（或者叫应用）模式，会越来越受到欢迎。安全不是问题，信任也不是问题，利润才是首要问题。（安全和信任都是相对的）。 更多信息请查看 java进阶网 http://www.javady.com/index.php/category/thread","title":"剖析云计算技术及架构（3 云存储）"},{"content":"要实现云计算的随需应变的目标，关键在于运算能力和存储能力的适应性。我们先看看如何实现存储的随需应变，这里的随需应变的需主要是指存储空间和吞吐能力（性能），当然，安全性，可靠性，可扩展性等指标都是基本的。基于单台存储设备的能力总是有限的这种事实，下面的存储分析都是基于分布式存储，而不基于单台存储设备。因为我们是基于分布式存储来满足云存储的要求，我们不关心操作系统级的存储设备访问和管理，我们只关心基于操作系统文件系统之上的逻辑存储部分。我们先看一下要云存储要达到的几个关键目标：高安全，高可靠，高扩展，高性能（吞吐），高易用。       为了更好的分析数据存储后面所采用的技术和架构，我们从两个方面来分析一下数据存储的一些特性：        1）首先来看数据的存储形式，基本的数据存储有两种形式，一是基于文件系统，二是基于数据库系统，但这两种形式本质上都是基于文件系统，为了便于后面的说明，我们还是分开。前者就是通常的文件，而后者就是数据库；        2）其次我们分析一下数据本身的特性，可以从几个方面来看：             A）从组织形式，我们可以把数据分为结构化数据和非结构化数据；数据内部或外部的关系是否复杂;             B）从操作特性，我们可以分析数据是否修改频繁，文件操作是新增多，附加多还是修改多；             C)  数据量级别。      上述分析的这些数据特性直接影响到我们对存储模式和技术的选择，在实际架构存储模型时，我们需要综合考虑到这些特点来权衡所采用的技术或者架构策略。大而全的架构策略在云计算和海量数据处理方面将不再是首选。我们需要一种因地制宜，有针对性的架构策略来平衡各方面的需求。 我们先看看传统的存储解决方案针对这些问题是如何解决的： 1）在扩容方面：当然是增加存储设备；但单台设备扩容会受到寻址能力的限制； 2）可靠性方面：一般采用磁盘阵列，大多采用的都是同时多路写模式，由于设备大多在一个物理点，可靠性并不能完全保证，性价比方面也很一般；不是真正意义上的分布式存储； 3）在安全方面：由于一般都是针对特定用户的，具有物理边界隔离，所以安全性比较好； 4）扩展性反面：受限，比较难以扩展，特别是动态升级； 5）性能方面：一般情况下性能不是很好，特别是写，专门存储设备会好些； 6）易用性：有些方式简单，比如RAID1,有些比较复杂；但对于用户来说是透明的，也就是透明性比较好； 7）存储能力：可以扩充，但会出现要不不足，要不剩余浪费的矛盾； 8）综合效益：对单点设备要求比较高，性价比比较低，利用率也比较低。       如果我们应用系统采用的数据库系统，很显然，上面这些特性的实现依赖于数据库系统本身，一般厂商都会提供完整的解决方案，比如Oralce的RAC,微软的sql Azure等。这里我们不考虑别人成熟的方案，而是基于传统的技术来看看如何实现和保证上述云存储的目标的：      首先来看看基于传统的数据库系统（这对于大多数企业级业务系统来说是可选的方案）的情况，数据存储使用数据库，一般都是SaaS应用，这种方式下一般多采用多客户租赁模式，数据隔离分为表级共享，表结构共享和数据库共享三种方式（大家可以去搜一下，原理非常简单），在这种情况下，数据存储是可以实现随需应变的，但数据存储的可靠性和性能都依赖于数据库厂商对这些问题的解决方案（比如Oracle的RAC技术等）；而对于计算部分，可以采用集群负载均衡的方式，这种技术现在比较成熟，需要注意的是缓存方面。这种方式一般只针对用户和应用程序，对于内部的大规模数据处理是不行的，因为这种模式是部署分布，而不是计算分布。下面来看看采用这种方式的一些指标分析： 1）在扩容方面：利用数据库厂商提供的技术来解决； 2）可靠性方面：依赖于数据库厂商提供的底层技术；但架构，管理相对容易，因为使用的都是别人成熟的技术。 3）在安全方面：如果是私有云，安全问题不大，但如果是公有云，表级共享的安全相对比较差，后面两种情况要好些；需要应用程序完全自己控制数据的隔离和访问权限，系统设计和实现上比较复杂。 4）扩展性反面：应用程序动态升级比较难，如果采用分服务器逐步切换还是可以的； 5）性能方面：采用应用服务器负载均衡和数据库系统负载均衡，性能上没什么大问题； 6）易用性：比较好，只要处理好隔离和数据库连接，跟传统的开发方式区别不大； 7）存储能力：可以实现随需应变； 8）综合效益：对单点设备要求比较高，性价比比较低，利用率也比较低。 这种方式跟传统的管理系统一样存在着一个大数据量处理的问题，一般采用按年(时间)分数据库或者表来存储数据的方式来避免数据表过大而导致的性能问题，当然，在上面的模式中依然可以用这种方式来进行，只不过这个系统的复杂度会大大增加。这个问题的解决最好的方式还是选择有比较好的解决方案的数据库产品（云数据库，比如sql AZure,GreenPlum). 另外注意，上面的解决基本是基于应用（SaaS)来讲的，不涉及到IaaS,PaaS。 PS：写这两篇感觉压力比较大，可能题目开大了，所以对GFS,BigTable,Hadoop,Greenplum,Dynamo等云方案的解构，下一篇再讲。后面的文章继续讲存储，计算部分（分布式计算，操作系统虚拟等）。也欢迎大家指正探讨。 更多信息请查看 java进阶网 http://www.javady.com/index.php/category/thread","title":"剖析云计算技术及架构（2 云存储）"}]